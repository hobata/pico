commit a145abf502737c91147c7f8a76479d96798fdc57
Author: hobata <khtxw836@gmail.com>
Date:   Fri Dec 13 21:40:03 2024 +0900

    display source application

diff --git a/app_program/app_main.c b/app_program/app_main.c
index 5b03839..004b156 100644
--- a/app_program/app_main.c
+++ b/app_program/app_main.c
@@ -1,53 +1,94 @@
-/*
- *----------------------------------------------------------------------
- *    micro T-Kernel 3.0 BSP
- *
- *    Copyright (C) 2022-2023 by Ken Sakamura.
- *    This software is distributed under the T-License 2.2.
- *----------------------------------------------------------------------
- *
- *    Released by TRON Forum(http://www.tron.org) at 2023/05.
- *
- *----------------------------------------------------------------------
- */
-
-/*
- *	app_main.c
- *	Application main program for RaspberryPi Pico
- */
-
 #include <tk/tkernel.h>
+#include <tk/device.h>		// デバイスドライバ定義ファイル
 #include <tm/tmonitor.h>
 #include <bsp/libbsp.h>
 
-LOCAL void task_1(INT stacd, void *exinf);
-LOCAL ID	tskid_1;
-LOCAL T_CTSK	ctsk_1 = {
-	.itskpri	= 10,
-	.stksz		= 1024,
-	.task		= task_1,
-	.tskatr		= TA_HLNG | TA_RNG3,
-};
+#include <stdint.h>
+#include "ole.h"
+#include "./gpio/address_mapped.h"
+#include "./gpio/addressmap.h"
 
-LOCAL void task_1(INT stacd, void *exinf)
-{
-	/* P25 : On board LED*/
-	while(1) {
-		gpio_set_val(25,1);
-		tk_dly_tsk(500);
+extern const uint8_t font_prm[];
+extern const char dummy[8][11];
+extern const char *src_dump[];
 
-		gpio_set_val(25,0);
-		tk_dly_tsk(500);
+UW get_random(void)
+{
+	UW val = 0;
+	for (int i=0; i<20; i++) {
+	  val |= (*(io_rw_32 *)(ROSC_BASE | 0x1c)) & 1;
+	  val <<= 1;
 	}
+	return val;
 }
 
+/* usermain関数 */
 EXPORT INT usermain(void)
 {
-	tm_printf((UB*)"User program started\n");
+	ole_init();
+	ole_set_area(0, 127, 0, 7);
+	ole_clear(0x00);
 
-	tskid_1 = tk_cre_tsk(&ctsk_1);
-	tk_sta_tsk(tskid_1, 0);
+	int lines = 51380;
+	int cnt = 0;
+	ole_set_area(1, 126, 1, 7); //文字表示向けエリア指定
+	while(1) {
+      for (int i = 0 ; i < lines; i++) {
+    	  if (cnt == 0 ) i = (int)(get_random() % (UW)lines);
+    	  int linecnt = 0; //　characters in a line
+    	  //print byte
+    	  if ((i % 5 == 0) || (cnt ==0)) {
+    		  ole_set_area(1, 126, 0, 0); //TOP行のエリア指定
+    		  if (cnt != 0) {
+    			  tk_slp_tsk(3000);
+    		  }
+    		  char num[] = "L:00000, B:000000000";
+			  int line2 = i;
+    		  for (int j=6; j >= 2; j--) {
+    			  if (line2 == 0) break;
+    			  num[j] = '0' + (line2 % 10);
+    			  line2 /= 10;
+    		  }
+    		  int cnt2 = cnt;
+    		  for (int j=19; j >= 11; j--) {
+    			  if (cnt2 == 0) break;
+    			  num[j] = '0' + (cnt2 % 10);
+    			  cnt2 /=10;
+    		  }
+    		  ole_prt(num, sizeof(num));
+        	  ole_set_area(1, 126, 1, 7); //ソース表示のエリア指定
+    	  }
+    	  //source
+		  char *str = (char*)src_dump[i];//test
+		  char temp;
+		  int flag = 0;
+		  while(1) {//one line
+			  temp = *str;
+			  if (temp == 0x9) temp = 0x20; //TAB->SPC
+			  while(temp < 0x20 || temp > 0x7e) { //escape char or not suuported
+				  if (temp == 0x0) { // end of str
+				    flag = 1;
+				    break;
+				  }
+  			      str++; cnt++;
+			      temp = *str;
+			  }
+		  	  if (flag) break;
+		  	  ole_prt(&temp, sizeof(temp));
+		  	  linecnt++;
+		  	  tk_slp_tsk(50);
+		  	  str++; cnt++;
+		  }
+		  //表示行末から、表示枠の右端までスペースで埋める
+		  char spc[22] = "                     ";
+	  	  int spcnum = 21 - (linecnt % 21);
+	  	  if (spcnum != 21) {
+	  		  ole_prt(spc, spcnum);
+	  	  }
+	   }
+	}
 
 	tk_slp_tsk(TMO_FEVR);
-	return 0;
-}
\ No newline at end of file
+
+	return 0;				// ここは実行されない
+}
diff --git a/app_program/app_main.c_LED b/app_program/app_main.c_LED
new file mode 100644
index 0000000..8d657d3
--- /dev/null
+++ b/app_program/app_main.c_LED
@@ -0,0 +1,56 @@
+/*
+ *----------------------------------------------------------------------
+ *    micro T-Kernel 3.0 BSP
+ *
+ *    Copyright (C) 2022-2023 by Ken Sakamura.
+ *    This software is distributed under the T-License 2.2.
+ *----------------------------------------------------------------------
+ *
+ *    Released by TRON Forum(http://www.tron.org) at 2023/05.
+ *
+ *----------------------------------------------------------------------
+ */
+
+/*
+ *	app_main.c
+ *	Application main program for RaspberryPi Pico
+ */
+
+#include <tk/tkernel.h>
+#include <tm/tmonitor.h>
+#include <bsp/libbsp.h>
+
+LOCAL void task_1(INT stacd, void *exinf);
+LOCAL ID	tskid_1;
+LOCAL T_CTSK	ctsk_1 = {
+	.itskpri	= 10,
+	.stksz		= 1024,
+	.task		= task_1,
+	.tskatr		= TA_HLNG | TA_RNG3,
+};
+
+LOCAL void task_1(INT stacd, void *exinf)
+{
+	/* P25 : On board LED*/
+	while(1) {
+		gpio_set_val(25,1);
+		gpio_set_val(24,1);
+		tk_dly_tsk(5);
+
+		gpio_set_val(24,0);
+		gpio_set_val(25,0);
+		tk_dly_tsk(5);
+	}
+}
+
+EXPORT INT usermain(void)
+{
+	tm_printf((UB*)"User program started\n");
+	gpio_set_pin(24, GPIO_MODE_OUT);
+	gpio_set_pin(25, GPIO_MODE_OUT);
+	tskid_1 = tk_cre_tsk(&ctsk_1);
+	tk_sta_tsk(tskid_1, 0);
+
+	tk_slp_tsk(TMO_FEVR);
+	return 0;
+}
diff --git a/app_program/app_main.c_adc b/app_program/app_main.c_adc
new file mode 100644
index 0000000..2f69041
--- /dev/null
+++ b/app_program/app_main.c_adc
@@ -0,0 +1,53 @@
+﻿#include <tk/tkernel.h>
+#include <tm/tmonitor.h>
+
+/* A/Dコンバータ制御タスクの生成情報と関連データ */
+LOCAL void task_adc(INT stacd, void *exinf);	// 実行関数
+LOCAL ID	tskid_adc;			// ID番号
+LOCAL T_CTSK ctsk_adc = {
+	.itskpri	= 10,			// 初期優先度
+	.stksz		= 1024,			// スタックサイズ
+	.task		= task_adc,		// 実行関数のポインタ
+	.tskatr		= TA_HLNG | TA_RNG3,	// タスク属性
+};
+
+/* A/Dコンバータ制御タスクの実行関数 */
+LOCAL void task_adc(INT stacd, void *exinf)
+{
+	ID	dd_adc;
+	UW	data_adc;
+	SZ	asz_adc;
+	ER	err;
+
+	// ① デバイスのオープン
+	dd_adc = tk_opn_dev((UB*)"adca", TD_READ);
+	if(dd_adc < E_OK) {
+		tm_printf((UB*)"Open Error %d\n", dd_adc);
+		tk_ext_tsk();			// タスクの終了
+	}
+
+	while(1) {
+		// ② デバイスの読込み
+		//第二引数：GP26=AD0=0, GP27=AD1=1, GP28=AD2=2,
+		err = tk_srea_dev(dd_adc, 0, &data_adc, 1, &asz_adc);
+		if(err >= E_OK) {
+			// ③ 読み取った値をデバッグ出力
+			tm_printf((UB*)"A/D = %d\n", data_adc);
+		} else {
+			tm_printf((UB*)"READ error %d\n", err);
+		}
+		tk_dly_tsk(500);					// 0.5秒間待ち
+	}
+	tk_ext_tsk();	// ここは実行されない
+}
+
+/* usermain関数 */
+EXPORT INT usermain(void)
+{
+	tskid_adc = tk_cre_tsk(&ctsk_adc);	// タスクの生成
+	tk_sta_tsk(tskid_adc, 0);		// タスクの実行
+
+	tk_slp_tsk(TMO_FEVR);			// 起床待ち
+
+	return 0;				// ここは実行されない
+}
diff --git a/app_program/app_main.c_gpio b/app_program/app_main.c_gpio
new file mode 100644
index 0000000..a6ecbd0
--- /dev/null
+++ b/app_program/app_main.c_gpio
@@ -0,0 +1,110 @@
+/*
+ *----------------------------------------------------------------------
+ *    micro T-Kernel 3.0 BSP
+ *
+ *    Copyright (C) 2022-2023 by Ken Sakamura.
+ *    This software is distributed under the T-License 2.2.
+ *----------------------------------------------------------------------
+ *
+ *    Released by TRON Forum(http://www.tron.org) at 2023/05.
+ *
+ *----------------------------------------------------------------------
+ */
+
+/*
+ *	app_main.c
+ *	Application main program for RaspberryPi Pico
+ */
+
+#include <tk/tkernel.h>
+#include <tm/tmonitor.h>
+#include <bsp/libbsp.h>
+
+#include <sys/queue.h>
+#include <../kernel/tkernel/timer.h>
+#include "gpio/gpio_rp2040.h"
+
+/////////////////////////
+/* GPIO interrupt task */
+/////////////////////////
+
+/* ① 割込み番号と割込み優先度の定義 */
+#define	INTLV_GPIO		6		// 割込みレベル
+
+#define GP_LED			25
+#define GP_SW			22
+#define FIRST_LED		1		// LED初期値
+#define SW_CHA			100		// チャタリング待ち時間(ms)
+
+/* ② 割込みハンドラ定義情報 */
+LOCAL void inthdr_sw(UINT intno);
+LOCAL T_DINT dint_sw = {
+	.intatr		= TA_HLNG,		// 割込みハンドラ属性
+	.inthdr		= inthdr_sw,		// 割込みハンドラアドレス
+};
+
+/* LED制御タスクの生成情報と関連データ */
+LOCAL void task_led(INT stacd, void *exinf);	// 実行関数
+LOCAL ID	tskid_led;			// ID番号
+LOCAL T_CTSK ctsk_led = {
+	.itskpri	= 10,			// 初期優先度
+	.stksz		= 1024,			// スタックサイズ
+	.task		= task_led,		// 実行関数のポインタ
+	.tskatr		= TA_HLNG | TA_RNG3,	// タスク属性
+};
+
+/* ③ 割込みハンドラ */
+LOCAL void inthdr_sw(UINT intno)
+{
+	tk_wup_tsk(tskid_led);			// LED制御タスクを起床
+	gpio_acknowledge_irq(GP_SW, GPIO_EDGE_LOW);	//GPIO割り込みクリア
+	ClearInt(intno);			// 割込み発生のクリア(NVIC)
+}
+
+LOCAL B ｃｈｋTMO(SYSTIM *pre, SYSTIM *now, int ms)
+{
+	LSYSTIM p = knl_toLSYSTIM( pre );
+	LSYSTIM n = knl_toLSYSTIM( now );
+    if (n - p > ms) {
+    	return 1; //TMO
+    }
+    return 0;//TMO未満
+}
+/* ④ LED制御タスクの実行関数 */
+LOCAL UINT val = FIRST_LED;
+LOCAL SYSTIM pre = {0, 0};
+LOCAL void task_led(INT stacd, void *exinf)
+{
+	SYSTIM now;
+	while(1) {
+		tk_slp_tsk(TMO_FEVR);
+		tk_get_otm(&now);
+		if (ｃｈｋTMO(&pre, &now, SW_CHA)) {
+			val ^= 1;
+			gpio_set_val(GP_LED, val & 1);
+			pre = now;
+		}
+	}
+	tk_ext_tsk();				// ここは実行されない
+}
+
+EXPORT INT usermain(void)
+{
+	//GPIO設定
+	gpio_set_pin(GP_SW, GPIO_MODE_IN);
+	gpio_set_pin(GP_LED, GPIO_MODE_OUT);
+	gpio_set_val(GP_LED, FIRST_LED);	// LED on
+
+	/* ⑤ 割込みの設定と許可 */
+	tk_def_int( INTNO_IRQ_BANK0, &dint_sw);	// ⑤-1 割込みハンドラの定義
+	gpio_set_irq_enabled(GP_SW, GPIO_EDGE_LOW, 1);	//割り込み条件の設定
+	EnableInt( INTNO_IRQ_BANK0, INTLV_GPIO);	// ⑤-5 割込み許可 (NVIC)
+
+	tskid_led = tk_cre_tsk(&ctsk_led);	// タスクの生成
+
+	tk_sta_tsk(tskid_led, 0);		// タスクの実行
+
+	tk_slp_tsk(TMO_FEVR);			// 起床待ち
+
+	return 0;				// ここは実行されない
+}
diff --git a/app_program/app_main.c_pwm b/app_program/app_main.c_pwm
new file mode 100644
index 0000000..7c118b3
--- /dev/null
+++ b/app_program/app_main.c_pwm
@@ -0,0 +1,88 @@
+/*
+ *----------------------------------------------------------------------
+ *    micro T-Kernel 3.0 BSP
+ *
+ *    Copyright (C) 2022-2023 by Ken Sakamura.
+ *    This software is distributed under the T-License 2.2.
+ *----------------------------------------------------------------------
+ *
+ *    Released by TRON Forum(http://www.tron.org) at 2023/05.
+ *
+ *----------------------------------------------------------------------
+ */
+
+/*	PWM
+ *	app_main.c
+ *	Application main program for RaspberryPi Pico
+ */
+
+#include <tk/tkernel.h>
+#include <tm/tmonitor.h>
+#include <bsp/libbsp.h>
+
+/* GP25 : On board LED*/
+#define PIN	26
+#define PWM_INC		0x8
+
+LOCAL void task_1(INT stacd, void *exinf);
+LOCAL ID	tskid_1;
+LOCAL T_CTSK	ctsk_1 = {
+	.itskpri	= 10,
+	.stksz		= 1024,
+	.task		= task_1,
+	.tskatr		= TA_HLNG | TA_RNG3,
+};
+
+LOCAL void task_1(INT stacd, void *exinf)
+{
+	ER err;
+	UW level = 0;
+	W inc_dec = PWM_INC;
+	while(1) {
+		tm_printf((UB*)"Level = %x\n", level);
+		err = pwm_set_cc(PIN, level * level);
+		if (err != E_OK) {
+			tm_printf((UB*)"pwn_set_cc returned err:%d\n", err);
+		}
+		if (inc_dec == PWM_INC && level == 0x100 - inc_dec) {
+			inc_dec = -1*PWM_INC;
+		} else if (inc_dec == -1*PWM_INC && level == 0) {
+			inc_dec = PWM_INC;
+		}
+		level = (level + inc_dec) % 256;
+		tk_dly_tsk(4);
+		//tk_slp_tsk(TMO_FEVR);
+	}
+}
+
+EXPORT INT usermain(void)
+{
+	tm_printf((UB*)"User program started\n");
+    ER err = pwm_set_pin(PIN);
+	if (err != E_OK) {
+		tm_printf((UB*)"pwm_set_pin returned err:%d\n", err);
+	}
+	err = pwm_init(PIN);
+	if (err != E_OK) {
+		tm_printf((UB*)"pwn_init_csr returned err:%d\n", err);
+	}
+	err = pwm_set_enabled(PIN, TRUE);
+	if (err != E_OK) {
+		tm_printf((UB*)"pwn_set_enabled returned err:%d\n", err);
+	}
+#if 0
+	err = pwm_set_div(PIN, 0x4);
+	if (err != E_OK) {
+		tm_printf((UB*)"pwm_set_div returned err:%d\n", err);
+	}
+#endif
+	err = pwm_set_wrap(PIN, 0xf0f0);
+	if (err != E_OK) {
+		tm_printf((UB*)"pwm_set_wrap returned err:%d\n", err);
+	}
+
+	tskid_1 = tk_cre_tsk(&ctsk_1);
+	tk_sta_tsk(tskid_1, 0);
+	tk_slp_tsk(TMO_FEVR);
+	return 0;
+}
diff --git a/app_program/app_main.c_pwm2 b/app_program/app_main.c_pwm2
new file mode 100644
index 0000000..107e87d
--- /dev/null
+++ b/app_program/app_main.c_pwm2
@@ -0,0 +1,111 @@
+/*
+ *----------------------------------------------------------------------
+ *    micro T-Kernel 3.0 BSP
+ *
+ *    Copyright (C) 2022-2023 by Ken Sakamura.
+ *    This software is distributed under the T-License 2.2.
+ *----------------------------------------------------------------------
+ *
+ *    Released by TRON Forum(http://www.tron.org) at 2023/05.
+ *
+ *----------------------------------------------------------------------
+ */
+
+/*
+ *	app_main.c
+ *	Application main program for RaspberryPi Pico
+ */
+
+#include <tk/tkernel.h>
+#include <tm/tmonitor.h>
+#include <bsp/libbsp.h>
+
+#include <sys/queue.h>
+#include <../kernel/tkernel/timer.h>
+#include "gpio/gpio_rp2040.h"
+
+/////////////////////////
+/* GPIO interrupt task */
+/////////////////////////
+
+/* ① 割込み番号と割込み優先度の定義 */
+#define	INTLV_GPIO		6		// 割込みレベル
+
+#define GP_LED			25
+#define GP_SW			22
+#define FIRST_LED		1		// LED初期値
+#define SW_CHA			20		// チャタリング待ち時間(ms)
+
+/* ② 割込みハンドラ定義情報 */
+LOCAL void inthdr_sw(UINT intno);
+LOCAL T_DINT dint_sw = {
+	.intatr		= TA_HLNG,		// 割込みハンドラ属性
+	.inthdr		= inthdr_sw,		// 割込みハンドラアドレス
+};
+
+/* LED制御タスクの生成情報と関連データ */
+LOCAL void task_led(INT stacd, void *exinf);	// 実行関数
+LOCAL ID	tskid_led;			// ID番号
+LOCAL T_CTSK ctsk_led = {
+	.itskpri	= 10,			// 初期優先度
+	.stksz		= 1024,			// スタックサイズ
+	.task		= task_led,		// 実行関数のポインタ
+	.tskatr		= TA_HLNG | TA_RNG3,	// タスク属性
+};
+
+/* ③ 割込みハンドラ */
+LOCAL void inthdr_sw(UINT intno)
+{
+	tk_wup_tsk(tskid_led);			// LED制御タスクを起床
+	gpio_set_irq_enabled(22, GPIO_EDGE_LOW, 0);	//割り込み条件のクリア
+	ClearInt(intno);			// 割込み発生のクリア(NVIC)
+	gpio_set_irq_enabled(22, GPIO_EDGE_LOW, 1);	//割り込み条件の設定
+}
+
+LOCAL B ｃｈｋTMO(SYSTIM *pre, SYSTIM *now, int ms)
+{
+	LSYSTIM p = knl_toLSYSTIM( pre );
+	LSYSTIM n = knl_toLSYSTIM( now );
+    if (n - p > ms) {
+    	return 1; //TMO
+    }
+    return 0;//TMO未満
+}
+/* ④ LED制御タスクの実行関数 */
+LOCAL UINT val = FIRST_LED;
+LOCAL SYSTIM pre = {0, 0};
+LOCAL void task_led(INT stacd, void *exinf)
+{
+	SYSTIM now;
+	while(1) {
+		tk_slp_tsk(TMO_FEVR);
+		tk_get_otm(&now);
+		if (ｃｈｋTMO(&pre, &now, SW_CHA)) {
+			val ^= 1;
+			gpio_set_val(GP_LED, val & 1);
+			pre = now;
+		}
+	}
+	tk_ext_tsk();				// ここは実行されない
+}
+
+EXPORT INT usermain(void)
+{
+	//GPIO設定
+	gpio_set_pin(GP_SW, GPIO_MODE_IN);
+	gpio_set_pin(GP_LED, GPIO_MODE_OUT);
+	gpio_set_val(GP_LED, FIRST_LED);	// LED on
+
+	/* ⑤ 割込みの設定と許可 */
+	tk_def_int( INTNO_IRQ_BANK0, &dint_sw);	// ⑤-1 割込みハンドラの定義
+	gpio_set_irq_enabled(GP_SW, GPIO_EDGE_LOW, 1);	//割り込み条件の設定
+	EnableInt( INTNO_IRQ_BANK0, INTLV_GPIO);	// ⑤-5 割込み許可 (NVIC)
+
+	tskid_led = tk_cre_tsk(&ctsk_led);	// タスクの生成
+
+	tk_sta_tsk(tskid_led, 0);		// タスクの実行
+
+	tk_slp_tsk(TMO_FEVR);			// 起床待ち
+
+	return 0;				// ここは実行されない
+}
diff --git a/app_program/app_main.c_ser b/app_program/app_main.c_ser
new file mode 100644
index 0000000..dc516fe
--- /dev/null
+++ b/app_program/app_main.c_ser
@@ -0,0 +1,51 @@
+#include <tk/tkernel.h>
+#include <tm/tmonitor.h>
+
+/* 通信制御タスクの生成情報と関連データ */
+LOCAL void task_com(INT stacd, void *exinf);	// 実行関数
+LOCAL ID	tskid_com;			// ID番号
+LOCAL T_CTSK ctsk_com = {
+	.itskpri	= 10,			// 初期優先度
+	.stksz		= 1024,			// スタックサイズ
+	.task		= task_com,		// 実行関数のポインタ
+	.tskatr		= TA_HLNG | TA_RNG3,	// タスク属性
+};
+
+/* 通信制御タスクの実行関数 */
+LOCAL void task_com(INT stacd, void *exinf)
+{
+	ID	dd_com;
+	UB	data_com;
+	SZ	asz_com;
+	ER	err;
+
+	// ① デバイスのオープン
+	dd_com = tk_opn_dev((UB*)"sera", TD_UPDATE);
+	if(dd_com < E_OK) {
+		tm_printf((UB*)"Open Error %d\n", dd_com);
+		tk_ext_tsk();			// タスクの終了
+	}
+
+	while(1) {
+		// ② デバイスの読込み
+		err = tk_srea_dev(dd_com, 0, &data_com, 1, &asz_com);
+		if(err >= E_OK) {
+			// ③ デバイスの書込み
+			err = tk_swri_dev(dd_com, 0, &data_com, 1, &asz_com);
+		} else {
+			tm_printf((UB*)"READ error %d\n", err);
+		}
+	}
+	tk_ext_tsk();	// ここは実行されない
+}
+
+/* usermain関数 */
+EXPORT INT usermain(void)
+{
+	tskid_com = tk_cre_tsk(&ctsk_com);	// タスクの生成
+	tk_sta_tsk(tskid_com, 0);		// タスクの実行
+
+	tk_slp_tsk(TMO_FEVR);			// 起床待ち
+
+	return 0;				// ここは実行されない
+}
diff --git a/app_program/app_main2.c_ssd1306 b/app_program/app_main2.c_ssd1306
new file mode 100644
index 0000000..57aea77
--- /dev/null
+++ b/app_program/app_main2.c_ssd1306
@@ -0,0 +1,133 @@
+#include <tk/tkernel.h>
+#include <tk/device.h>		// デバイスドライバ定義ファイル
+#include <tm/tmonitor.h>
+#include <bsp/libbsp.h>
+
+#include <stdint.h>
+#include "ssd1306_ini.h"
+#include "font.h"
+
+#define S_ADR	0x3c	// ① I/OデバイスのI2Cアドレス定義
+#define CNTLB 0x80 // continuous bit
+#define D_DATA   0x40  // DATA bit
+void *memset(void *s, int c, size_t n);
+
+static ID	dd_i2c;
+static ER	err;
+static SZ	asz;
+
+void i2c_init(void)
+{
+	//HW　I2C0 GP8, GP9 kernel/sysdepend/pico_rp2040/hw_setting.h を参照
+	dd_i2c = tk_opn_dev((UB*)"iica", TD_UPDATE);		// デバイスのオープン
+	tk_slp_tsk(1); // これが無い場合：「開発環境からは正常起動するが、USB接続のみ時はI2CでSlaveからNACKが帰る」。
+
+	UB	height=64, width = 128;
+	//初期化 data sheet Figure 2 : Software Initialization Flow Chart
+	//https://analogicintelligence.blogspot.com/2019/03/mycropythonoled.html
+	//https://analogicintelligence.blogspot.com/2019/04/mycropythonoled.html
+	UB	snd_data[] = { // 初期化送信データ
+	        SET_DISP, // set  display off
+	        // timing and driving scheme
+	        SET_DISP_CLK_DIV,
+	        0x80, // reset
+	        SET_MUX_RATIO,
+	        height - 1, // COM0 to 63
+	        SET_DISP_OFFSET,
+	        0x00, //mapping of the display start line to one of COM0~COM63
+	        // resolution and layout
+	        SET_DISP_START_LINE, //start line is COM0
+	        // charge pump
+	        SET_CHARGE_PUMP, // 0x14で有効(必須)
+	        0 ? 0x10:0x14,					//external vcc
+	        SET_SEG_REMAP | 0x1,        // column addr 127 mapped to SEG0
+			SET_COM_OUT_DIR | 0x8,			// remapped mode. Scan from	COM[N-1] to COM0
+	        SET_COM_PIN_CFG,
+	        width>2*height?0x02:0x12,
+	        // display
+	        SET_CONTRAST,
+	        0x7f,
+			SET_PRECHARGE,
+	        0 ? 0x22:0xF1,					//external vcc
+	        SET_VCOM_DESEL,
+	        0x40,                           //0x30 or 0x40?
+			SET_ENTIRE_ON,                  // output follows RAM contents
+	        SET_NORM_INV,                   // set normal display not inverted
+			SET_DISP | 0x01, // display on
+	        // address setting
+			SET_MEM_ADDR,
+	        0x00,  // horizontal
+	};
+	UB w_data[sizeof(snd_data)*2];
+    int cnt = 0;
+	for (int i=0; i < sizeof(snd_data); i++){
+    	w_data[cnt++] = CNTLB;
+    	w_data[cnt++] = snd_data[i];
+    }
+	err = tk_swri_dev(dd_i2c, S_ADR, w_data, sizeof(w_data), &asz);
+}
+
+void clear(UB ptn)
+{
+	//画面 data
+	UB d_data[64+1];//display data　フルサイズ：128*8まで繰り返し
+    memset(d_data, ptn, sizeof(d_data));
+    d_data[0] = D_DATA;
+    for (int i=0; i<16; i++) {
+    	err = tk_swri_dev(dd_i2c, S_ADR, d_data, sizeof(d_data), &asz);
+    }
+}
+void area(UB x1, UB x2, UB y1, UB y2)
+{
+    //area setting
+    UB area[] = {
+    	    SET_COL_ADDR,
+			x1,
+			x2,
+    	    SET_PAGE_ADDR,
+			y1,
+			y2
+    };
+	UB w_data2[sizeof(area)*2];
+    int cnt = 0;
+	for (int i=0; i < sizeof(area); i++){
+    	w_data2[cnt++] = CNTLB;
+    	w_data2[cnt++] = area[i];
+    }
+	err = tk_swri_dev(dd_i2c, S_ADR, w_data2, sizeof(w_data2), &asz);
+}
+void ole_prt(char* c, UB len)
+{
+	UB d_data[96+1]; // less than 100(DEVCNF_I2C_MAX_SDATSZ)
+    for (int k=0; k < len /16 +1; k++) {
+       memset(d_data, 0x00, sizeof(d_data));
+       int cnt = 0;
+       d_data[cnt++] = 0x40;
+    	for (int i=0; i < 16; i++){
+    		if (k*16+i > len-1) break;
+    		int col = c[i+k*16] - font_prm[3];
+    		if (col < 0) col = 0;
+    		for (int j=0; j<5; j++){
+    			d_data[cnt++] = font_8x5[col*5+j];
+    		}
+    		d_data[cnt++] = 0x0; //6列目 文字の間
+    	}
+    	err = tk_swri_dev(dd_i2c, S_ADR, d_data, sizeof(d_data), &asz);
+    }
+}
+/* usermain関数 */
+EXPORT INT usermain(void)
+{
+	i2c_init();
+	clear(0x0);
+	area(1, 126, 1, 6); // 128 % 6 = 2 両側１ドットずつをエリア外とする。
+	static char c[95]; // font_prm[4]-font_prm[3]+1
+	for (int i=0; i < sizeof(c); i++ ) {
+		c[i] = i + font_prm[3];
+	}
+	ole_prt(c, sizeof(c));
+
+	tk_slp_tsk(TMO_FEVR);
+
+	return 0;				// ここは実行されない
+}
diff --git a/app_program/chr.c b/app_program/chr.c
new file mode 100644
index 0000000..5883cfe
--- /dev/null
+++ b/app_program/chr.c
@@ -0,0 +1,18 @@
+/*
+ * chr.h
+ *
+ *  Created on: 2024/12/07
+ *      Author: user
+ */
+
+const char dummy[8][11] = {
+		' ',' ','O',' ',' ',' ',' ',' ','O',' ',' ',
+		' ',' ',' ','O',' ',' ',' ','O',' ',' ',' ',
+		' ',' ','O','O','O','O','O','O','O',' ',' ',
+		' ','O','O',' ','O','O','O',' ','O','O',' ',
+		'O','O','O','O','O','O','O','O','O','O','O',
+		'O',' ','O','O','O','O','O','O','O',' ','O',
+		'O',' ','O',' ',' ',' ',' ',' ','O',' ','O',
+		' ',' ',' ','O','O',' ','O','O',' ',' ',' ',
+};
+
diff --git a/app_program/dump.c b/app_program/dump.c
new file mode 100644
index 0000000..a1a580b
--- /dev/null
+++ b/app_program/dump.c
@@ -0,0 +1,54128 @@
+#include <tk/tkernel.h>
+#include <tk/device.h>		// デバイスドライバ定義ファイル
+#include <bsp/libbsp.h>
+
+const char *src_dump[] ={ "#include <tk/tkernel.h>",
+"#include <tk/device.h>		// デバイスドライバ定義ファイル",
+"#include <tm/tmonitor.h>",
+"#include <bsp/libbsp.h>",
+"",
+"#include <stdint.h>",
+"#include \"ole.h\"",
+"",
+"extern const uint8_t font_prm[];",
+"extern const char dummy[8][11];",
+"extern const char *dump;",
+"",
+"/* usermain関数 */",
+"EXPORT INT usermain(void)",
+"{",
+"	ole_init();",
+"	ole_clear(0xff);",
+"	ole_set_area(1, 126, 0, 7); //文字表示向けエリア指定",
+"#if 1",
+"	char *str;",
+"	int lines = sizeof(dump)/sizeof(char*);",
+"	while(1) {",
+"      for (int i=0; i < lines; i++) {",
+"		  str = dummy[i];",
+"		  char temp = *(str);",
+"		  int cnt = 0;",
+"		  while(1) {//one line",
+"			  int flag = 0;",
+"			  while(1) {",
+"				  //del control code",
+"				  while(temp < 0x20 || temp > 0x7e) {",
+"					  if (temp== 0x0) {",
+"						  flag = 1;",
+"						  break;",
+"					  }",
+"					  cnt++;",
+"					  temp =*(str+cnt);",
+"				  }",
+"				  if (flag == 1) break;",
+"				  ole_prt(&temp, sizeof(temp));",
+"				  tk_slp_tsk(1);",
+"			  }",
+"		  }",
+"      }",
+"	}",
+"#endif",
+"",
+"	tk_slp_tsk(TMO_FEVR);",
+"",
+"	return 0;				// ここは実行されない",
+"}",
+"/*",
+" * chr.h",
+" *",
+" *  Created on: 2024/12/07",
+" *      Author: user",
+" */",
+"",
+"const char dummy[8][11] = {",
+"		' ',' ','O',' ',' ',' ',' ',' ','O',' ',' ',",
+"		' ',' ',' ','O',' ',' ',' ','O',' ',' ',' ',",
+"		' ',' ','O','O','O','O','O','O','O',' ',' ',",
+"		' ','O','O',' ','O','O','O',' ','O','O',' ',",
+"		'O','O','O','O','O','O','O','O','O','O','O',",
+"		'O',' ','O','O','O','O','O','O','O',' ','O',",
+"		'O',' ','O',' ',' ',' ',' ',' ','O',' ','O',",
+"		' ',' ',' ','O','O',' ','O','O',' ',' ',' ',",
+"};",
+"",
+"#ifndef _inc_font",
+"#define _inc_font",
+"",
+"/*",
+" * Format",
+" * <height>, <width>, <additional spacing per char>, ",
+" * <first ascii char>, <last ascii char>,",
+" * <data>",
+" */",
+"const uint8_t font_prm[] = {",
+"		8, 5, 1, 32, 126",
+"};",
+"const uint8_t font_8x5[] =",
+"{",
+"			0x00, 0x00, 0x00, 0x00, 0x00,",
+"			0x00, 0x00, 0x5F, 0x00, 0x00,",
+"			0x00, 0x07, 0x00, 0x07, 0x00,",
+"			0x14, 0x7F, 0x14, 0x7F, 0x14,",
+"			0x24, 0x2A, 0x7F, 0x2A, 0x12,",
+"			0x23, 0x13, 0x08, 0x64, 0x62,",
+"			0x36, 0x49, 0x56, 0x20, 0x50,",
+"			0x00, 0x08, 0x07, 0x03, 0x00,",
+"			0x00, 0x1C, 0x22, 0x41, 0x00,",
+"			0x00, 0x41, 0x22, 0x1C, 0x00,",
+"			0x2A, 0x1C, 0x7F, 0x1C, 0x2A,",
+"			0x08, 0x08, 0x3E, 0x08, 0x08,",
+"			0x00, 0x80, 0x70, 0x30, 0x00,",
+"			0x08, 0x08, 0x08, 0x08, 0x08,",
+"			0x00, 0x00, 0x60, 0x60, 0x00,",
+"			0x20, 0x10, 0x08, 0x04, 0x02,",
+"			0x3E, 0x51, 0x49, 0x45, 0x3E,",
+"			0x00, 0x42, 0x7F, 0x40, 0x00,",
+"			0x72, 0x49, 0x49, 0x49, 0x46,",
+"			0x21, 0x41, 0x49, 0x4D, 0x33,",
+"			0x18, 0x14, 0x12, 0x7F, 0x10,",
+"			0x27, 0x45, 0x45, 0x45, 0x39,",
+"			0x3C, 0x4A, 0x49, 0x49, 0x31,",
+"			0x41, 0x21, 0x11, 0x09, 0x07,",
+"			0x36, 0x49, 0x49, 0x49, 0x36,",
+"			0x46, 0x49, 0x49, 0x29, 0x1E,",
+"			0x00, 0x00, 0x14, 0x00, 0x00,",
+"			0x00, 0x40, 0x34, 0x00, 0x00,",
+"			0x00, 0x08, 0x14, 0x22, 0x41,",
+"			0x14, 0x14, 0x14, 0x14, 0x14,",
+"			0x00, 0x41, 0x22, 0x14, 0x08,",
+"			0x02, 0x01, 0x59, 0x09, 0x06,",
+"			0x3E, 0x41, 0x5D, 0x59, 0x4E,",
+"			0x7C, 0x12, 0x11, 0x12, 0x7C,",
+"			0x7F, 0x49, 0x49, 0x49, 0x36,",
+"			0x3E, 0x41, 0x41, 0x41, 0x22,",
+"			0x7F, 0x41, 0x41, 0x41, 0x3E,",
+"			0x7F, 0x49, 0x49, 0x49, 0x41,",
+"			0x7F, 0x09, 0x09, 0x09, 0x01,",
+"			0x3E, 0x41, 0x41, 0x51, 0x73,",
+"			0x7F, 0x08, 0x08, 0x08, 0x7F,",
+"			0x00, 0x41, 0x7F, 0x41, 0x00,",
+"			0x20, 0x40, 0x41, 0x3F, 0x01,",
+"			0x7F, 0x08, 0x14, 0x22, 0x41,",
+"			0x7F, 0x40, 0x40, 0x40, 0x40,",
+"			0x7F, 0x02, 0x1C, 0x02, 0x7F,",
+"			0x7F, 0x04, 0x08, 0x10, 0x7F,",
+"			0x3E, 0x41, 0x41, 0x41, 0x3E,",
+"			0x7F, 0x09, 0x09, 0x09, 0x06,",
+"			0x3E, 0x41, 0x51, 0x21, 0x5E,",
+"			0x7F, 0x09, 0x19, 0x29, 0x46,",
+"			0x26, 0x49, 0x49, 0x49, 0x32,",
+"			0x03, 0x01, 0x7F, 0x01, 0x03,",
+"			0x3F, 0x40, 0x40, 0x40, 0x3F,",
+"			0x1F, 0x20, 0x40, 0x20, 0x1F,",
+"			0x3F, 0x40, 0x38, 0x40, 0x3F,",
+"			0x63, 0x14, 0x08, 0x14, 0x63,",
+"			0x03, 0x04, 0x78, 0x04, 0x03,",
+"			0x61, 0x59, 0x49, 0x4D, 0x43,",
+"			0x00, 0x7F, 0x41, 0x41, 0x41,",
+"			0x02, 0x04, 0x08, 0x10, 0x20,",
+"			0x00, 0x41, 0x41, 0x41, 0x7F,",
+"			0x04, 0x02, 0x01, 0x02, 0x04,",
+"			0x40, 0x40, 0x40, 0x40, 0x40,",
+"			0x00, 0x03, 0x07, 0x08, 0x00,",
+"			0x20, 0x54, 0x54, 0x78, 0x40,",
+"			0x7F, 0x28, 0x44, 0x44, 0x38,",
+"			0x38, 0x44, 0x44, 0x44, 0x28,",
+"			0x38, 0x44, 0x44, 0x28, 0x7F,",
+"			0x38, 0x54, 0x54, 0x54, 0x18,",
+"			0x00, 0x08, 0x7E, 0x09, 0x02,",
+"			0x18, 0xA4, 0xA4, 0x9C, 0x78,",
+"			0x7F, 0x08, 0x04, 0x04, 0x78,",
+"			0x00, 0x44, 0x7D, 0x40, 0x00,",
+"			0x20, 0x40, 0x40, 0x3D, 0x00,",
+"			0x7F, 0x10, 0x28, 0x44, 0x00,",
+"			0x00, 0x41, 0x7F, 0x40, 0x00,",
+"			0x7C, 0x04, 0x78, 0x04, 0x78,",
+"			0x7C, 0x08, 0x04, 0x04, 0x78,",
+"			0x38, 0x44, 0x44, 0x44, 0x38,",
+"			0xFC, 0x18, 0x24, 0x24, 0x18,",
+"			0x18, 0x24, 0x24, 0x18, 0xFC,",
+"			0x7C, 0x08, 0x04, 0x04, 0x08,",
+"			0x48, 0x54, 0x54, 0x54, 0x24,",
+"			0x04, 0x04, 0x3F, 0x44, 0x24,",
+"			0x3C, 0x40, 0x40, 0x20, 0x7C,",
+"			0x1C, 0x20, 0x40, 0x20, 0x1C,",
+"			0x3C, 0x40, 0x30, 0x40, 0x3C,",
+"			0x44, 0x28, 0x10, 0x28, 0x44,",
+"			0x4C, 0x90, 0x90, 0x90, 0x7C,",
+"			0x44, 0x64, 0x54, 0x4C, 0x44,",
+"			0x00, 0x08, 0x36, 0x41, 0x00,",
+"			0x00, 0x00, 0x77, 0x00, 0x00,",
+"			0x00, 0x41, 0x36, 0x08, 0x00,",
+"			0x02, 0x01, 0x02, 0x04, 0x02,",
+"};",
+"",
+"#endif",
+"// THIS HEADER FILE IS AUTOMATICALLY GENERATED -- DO NOT EDIT",
+"",
+"/**",
+" * Copyright (c) 2024 Raspberry Pi Ltd.",
+" *",
+" * SPDX-License-Identifier: BSD-3-Clause",
+" */",
+"#ifndef _ADDRESSMAP_H",
+"#define _ADDRESSMAP_H",
+"",
+"/**",
+" * \\file rp2040/addressmap.h",
+" */",
+"",
+"#include \"platform_defs.h\"",
+"",
+"// Register address offsets for atomic RMW aliases",
+"#define REG_ALIAS_RW_BITS  (_u(0x0) << _u(12))",
+"#define REG_ALIAS_XOR_BITS (_u(0x1) << _u(12))",
+"#define REG_ALIAS_SET_BITS (_u(0x2) << _u(12))",
+"#define REG_ALIAS_CLR_BITS (_u(0x3) << _u(12))",
+"",
+"#define ROM_BASE _u(0x00000000)",
+"#define XIP_BASE _u(0x10000000)",
+"#define XIP_MAIN_BASE _u(0x10000000)",
+"#define XIP_NOALLOC_BASE _u(0x11000000)",
+"#define XIP_NOCACHE_BASE _u(0x12000000)",
+"#define XIP_NOCACHE_NOALLOC_BASE _u(0x13000000)",
+"#define XIP_CTRL_BASE _u(0x14000000)",
+"#define XIP_SRAM_BASE _u(0x15000000)",
+"#define XIP_SRAM_END _u(0x15004000)",
+"#define XIP_SSI_BASE _u(0x18000000)",
+"#define SRAM_BASE _u(0x20000000)",
+"#define SRAM_STRIPED_BASE _u(0x20000000)",
+"#define SRAM_STRIPED_END _u(0x20040000)",
+"#define SRAM4_BASE _u(0x20040000)",
+"#define SRAM5_BASE _u(0x20041000)",
+"#define SRAM_END _u(0x20042000)",
+"#define SRAM0_BASE _u(0x21000000)",
+"#define SRAM1_BASE _u(0x21010000)",
+"#define SRAM2_BASE _u(0x21020000)",
+"#define SRAM3_BASE _u(0x21030000)",
+"#define SYSINFO_BASE _u(0x40000000)",
+"#define SYSCFG_BASE _u(0x40004000)",
+"//#define CLOCKS_BASE _u(0x40008000)",
+"//#define RESETS_BASE _u(0x4000c000)",
+"#define PSM_BASE _u(0x40010000)",
+"//#define IO_BANK0_BASE _u(0x40014000)",
+"//#define IO_QSPI_BASE _u(0x40018000)",
+"//#define PADS_BANK0_BASE _u(0x4001c000)",
+"#define PADS_QSPI_BASE _u(0x40020000)",
+"//#define XOSC_BASE _u(0x40024000)",
+"//#define PLL_SYS_BASE _u(0x40028000)",
+"//#define PLL_USB_BASE _u(0x4002c000)",
+"#define BUSCTRL_BASE _u(0x40030000)",
+"#define UART0_BASE _u(0x40034000)",
+"#define UART1_BASE _u(0x40038000)",
+"#define SPI0_BASE _u(0x4003c000)",
+"#define SPI1_BASE _u(0x40040000)",
+"#define I2C0_BASE _u(0x40044000)",
+"#define I2C1_BASE _u(0x40048000)",
+"#define ADC_BASE _u(0x4004c000)",
+"//#define PWM_BASE _u(0x40050000)",
+"//#define TIMER_BASE _u(0x40054000)",
+"#define WATCHDOG_BASE _u(0x40058000)",
+"#define RTC_BASE _u(0x4005c000)",
+"#define ROSC_BASE _u(0x40060000)",
+"#define VREG_AND_CHIP_RESET_BASE _u(0x40064000)",
+"#define TBMAN_BASE _u(0x4006c000)",
+"#define DMA_BASE _u(0x50000000)",
+"#define USBCTRL_DPRAM_BASE _u(0x50100000)",
+"#define USBCTRL_BASE _u(0x50100000)",
+"#define USBCTRL_REGS_BASE _u(0x50110000)",
+"#define PIO0_BASE _u(0x50200000)",
+"#define PIO1_BASE _u(0x50300000)",
+"#define XIP_AUX_BASE _u(0x50400000)",
+"//#define SIO_BASE _u(0xd0000000)",
+"#define PPB_BASE _u(0xe0000000)",
+"",
+"#endif // _ADDRESSMAP_H",
+"",
+"/*",
+" * Copyright (c) 2020 Raspberry Pi (Trading) Ltd.",
+" *",
+" * SPDX-License-Identifier: BSD-3-Clause",
+" */",
+"",
+"#ifndef _HARDWARE_ADDRESS_MAPPED_H",
+"#define _HARDWARE_ADDRESS_MAPPED_H",
+"",
+"#include \"tk/typedef.h\"",
+"",
+"#include \"addressmap.h\"",
+"",
+"/** \\file address_mapped.h",
+" *  \\defgroup hardware_base hardware_base",
+" *",
+" *  \\brief Low-level types and (atomic) accessors for memory-mapped hardware registers",
+" *",
+" *  `hardware_base` defines the low level types and access functions for memory mapped hardware registers. It is included",
+" *  by default by all other hardware libraries.",
+" *",
+" *  The following register access typedefs codify the access type (read/write) and the bus size (8/16/32) of the hardware register.",
+" *  The register type names are formed by concatenating one from each of the 3 parts A, B, C",
+"",
+" *   A    | B | C | Meaning",
+" *  ------|---|---|--------",
+" *  io_   |   |   | A Memory mapped IO register",
+" *  &nbsp;|ro_|   | read-only access",
+" *  &nbsp;|rw_|   | read-write access",
+" *  &nbsp;|wo_|   | write-only access (can't actually be enforced via C API)",
+" *  &nbsp;|   |  8| 8-bit wide access",
+" *  &nbsp;|   | 16| 16-bit wide access",
+" *  &nbsp;|   | 32| 32-bit wide access",
+" *",
+" *  When dealing with these types, you will always use a pointer, i.e. `io_rw_32 *some_reg` is a pointer to a read/write",
+" *  32 bit register that you can write with `*some_reg = value`, or read with `value = *some_reg`.",
+" *",
+" *  RP-series hardware is also aliased to provide atomic setting, clear or flipping of a subset of the bits within",
+" *  a hardware register so that concurrent access by two cores is always consistent with one atomic operation",
+" *  being performed first, followed by the second.",
+" *",
+" *  See hw_set_bits(), hw_clear_bits() and hw_xor_bits() provide for atomic access via a pointer to a 32 bit register",
+" *",
+" *  Additionally given a pointer to a structure representing a piece of hardware (e.g. `dma_hw_t *dma_hw` for the DMA controller), you can",
+" *  get an alias to the entire structure such that writing any member (register) within the structure is equivalent",
+" *  to an atomic operation via hw_set_alias(), hw_clear_alias() or hw_xor_alias()...",
+" *",
+" *  For example `hw_set_alias(dma_hw)->inte1 = 0x80;` will set bit 7 of the INTE1 register of the DMA controller,",
+" *  leaving the other bits unchanged.",
+" */",
+"",
+"#ifdef __cplusplus",
+"extern \"C\" {",
+"#endif",
+"",
+"#define check_hw_layout(type, member, offset) static_assert(offsetof(type, member) == (offset), \"hw offset mismatch\")",
+"#define check_hw_size(type, size) static_assert(sizeof(type) == (size), \"hw size mismatch\")",
+"",
+"// PICO_CONFIG: PARAM_ASSERTIONS_ENABLED_ADDRESS_ALIAS, Enable/disable assertions in memory address aliasing macros, type=bool, default=0, group=hardware_base",
+"#ifndef PARAM_ASSERTIONS_ENABLED_ADDRESS_ALIAS",
+"#define PARAM_ASSERTIONS_ENABLED_ADDRESS_ALIAS 0",
+"#endif",
+"",
+"typedef _UD io_rw_64;",
+"typedef const _UD io_ro_64;",
+"typedef _UD io_wo_64;",
+"typedef _UW io_rw_32;",
+"typedef const _UW io_ro_32;",
+"typedef _UW io_wo_32;",
+"typedef _UH io_rw_16U;",
+"typedef const _UH io_ro_16;",
+"typedef _UH io_wo_16;",
+"typedef _UB io_rw_8;",
+"typedef const _UB io_ro_8;",
+"typedef _UB io_wo_8;",
+"",
+"typedef _UB *const ioptr;",
+"typedef ioptr const const_ioptr;",
+"",
+"// A non-functional (empty) helper macro to help IDEs follow links from the autogenerated",
+"// hardware struct headers in hardware/structs/xxx.h to the raw register definitions",
+"// in hardware/regs/xxx.h. A preprocessor define such as TIMER_TIMEHW_OFFSET (a timer register offset)",
+"// is not generally clickable (in an IDE) if placed in a C comment, so _REG_(TIMER_TIMEHW_OFFSET) is",
+"// included outside of a comment instead",
+"#define _REG_(x)",
+"",
+"// Helper method used by hw_alias macros to optionally check input validity",
+"#define hw_alias_check_addr(addr) ((UW*)(addr))",
+"",
+"// can't use the following impl as it breaks existing static declarations using hw_alias, so would be a backwards incompatibility",
+"//static __force_inline uint32_t hw_alias_check_addr(volatile void *addr) {",
+"//    uint32_t rc = (uintptr_t)addr;",
+"//    invalid_params_if(ADDRESS_ALIAS, rc < 0x40000000); // catch likely non HW pointer types",
+"//    return rc;",
+"//}",
+"#if 0",
+"#if PICO_RP2040",
+"// Helper method used by xip_alias macros to optionally check input validity",
+"__force_inline static uint32_t xip_alias_check_addr(const void *addr) {",
+"    uint32_t rc = (uintptr_t)addr;",
+"    valid_params_if(ADDRESS_ALIAS, rc >= XIP_MAIN_BASE && rc < XIP_NOALLOC_BASE);",
+"    return rc;",
+"}",
+"#else",
+"//static __force_inline uint32_t xip_alias_check_addr(const void *addr) {",
+"//    uint32_t rc = (uintptr_t)addr;",
+"//    valid_params_if(ADDRESS_ALIAS, rc >= XIP_BASE && rc < XIP_END);",
+"//    return rc;",
+"//}",
+"#endif",
+"#endif",
+"// Untyped conversion alias pointer generation macros",
+"//#define hw_set_alias_untyped(addr) ((void *)(REG_ALIAS_SET_BITS + hw_alias_check_addr(addr)))",
+"//#define hw_clear_alias_untyped(addr) ((void *)(REG_ALIAS_CLR_BITS + hw_alias_check_addr(addr)))",
+"//#define hw_xor_alias_untyped(addr) ((void *)(REG_ALIAS_XOR_BITS + hw_alias_check_addr(addr)))",
+"",
+"#if PICO_RP2040",
+"#define xip_noalloc_alias_untyped(addr) ((void *)(XIP_NOALLOC_BASE | xip_alias_check_addr(addr)))",
+"#define xip_nocache_alias_untyped(addr) ((void *)(XIP_NOCACHE_BASE | xip_alias_check_addr(addr)))",
+"#define xip_nocache_noalloc_alias_untyped(addr) ((void *)(XIP_NOCACHE_NOALLOC_BASE | xip_alias_check_addr(addr)))",
+"#endif",
+"",
+"// Typed conversion alias pointer generation macros",
+"#define hw_set_alias(p) ((typeof(p))hw_set_alias_untyped(p))",
+"#define hw_clear_alias(p) ((typeof(p))hw_clear_alias_untyped(p))",
+"#define hw_xor_alias(p) ((typeof(p))hw_xor_alias_untyped(p))",
+"#define xip_noalloc_alias(p) ((typeof(p))xip_noalloc_alias_untyped(p))",
+"#define xip_nocache_alias(p) ((typeof(p))xip_nocache_alias_untyped(p))",
+"#define xip_nocache_noalloc_alias(p) ((typeof(p))xip_nocache_noalloc_alias_untyped(p))",
+"",
+"/*! \\brief Atomically set the specified bits to 1 in a HW register",
+" *  \\ingroup hardware_base",
+" *",
+" * \\param addr Address of writable register",
+" * \\param mask Bit-mask specifying bits to set",
+" */",
+"#if 0",
+"__force_inline static void hw_set_bits(io_rw_32 *addr, UW mask) {",
+"    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;",
+"}",
+"",
+"/*! \\brief Atomically clear the specified bits to 0 in a HW register",
+" *  \\ingroup hardware_base",
+" *",
+" * \\param addr Address of writable register",
+" * \\param mask Bit-mask specifying bits to clear",
+" */",
+"__force_inline static void hw_clear_bits(io_rw_32 *addr, UW mask) {",
+"    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;",
+"}",
+"#endif",
+"#if 0",
+"/*! \\brief Atomically flip the specified bits in a HW register",
+" *  \\ingroup hardware_base",
+" *",
+" * \\param addr Address of writable register",
+" * \\param mask Bit-mask specifying bits to invert",
+" */",
+"__force_inline static void hw_xor_bits(io_rw_32 *addr, uint32_t mask) {",
+"    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;",
+"}",
+"",
+"/*! \\brief Set new values for a sub-set of the bits in a HW register",
+" *  \\ingroup hardware_base",
+" *",
+" * Sets destination bits to values specified in \\p values, if and only if corresponding bit in \\p write_mask is set",
+" *",
+" * Note: this method allows safe concurrent modification of *different* bits of",
+" * a register, but multiple concurrent access to the same bits is still unsafe.",
+" *",
+" * \\param addr Address of writable register",
+" * \\param values Bits values",
+" * \\param write_mask Mask of bits to change",
+" */",
+"__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {",
+"    hw_xor_bits(addr, (*addr ^ values) & write_mask);",
+"}",
+"",
+"#if !PICO_RP2040",
+"// include this here to avoid the check in every other hardware/structs header that needs it",
+"#include \"hardware/structs/accessctrl.h\"",
+"#endif",
+"",
+"#endif",
+"",
+"#ifdef __cplusplus",
+"}",
+"#endif",
+"",
+"#endif",
+"/*",
+" * gpio_rp2040.c",
+" *",
+" *  Created on: 2024/10/14",
+" *      Author: user",
+" */",
+"",
+"#include <tk/syslib.h>",
+"",
+"#include \"io_bank0.h\"",
+"",
+"static UW get_core_num(void)",
+"{",
+"	return *(io_rw_32 *)CPUID;",
+"}",
+"",
+"static B check_gpio_param(UH gpio) {",
+"    if (gpio >= NUM_BANK0_GPIOS) return 1;",
+"    return 0;",
+"}",
+"",
+"void gpio_acknowledge_irq(UH gpio, UW events) {",
+"    if (check_gpio_param(gpio)) return; // invalid param",
+"    io_bank0_hw->intr[gpio / 8] = events << (4 * (gpio % 8));",
+"}",
+"",
+"static void _gpio_set_irq_enabled(UH gpio, UW events, UB enabled, io_bank0_irq_ctrl_hw_t *irq_ctrl_base) {",
+"	// Clear stale events which might cause immediate spurious handler entry",
+"    gpio_acknowledge_irq(gpio, events);",
+"    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];",
+"    events <<= 4 * (gpio % 8);",
+"",
+"    if (enabled)",
+"        //hw_set_bits(en_reg, events);",
+"    	set_w((_UW)en_reg, events);",
+"    else",
+"        //hw_clear_bits(en_reg, events);",
+"    	clr_w((_UW)en_reg, events);",
+"}",
+"",
+"void gpio_set_irq_enabled(UH gpio, UW events, UB enabled) {",
+"    // either this call disables the interrupt",
+"    // or callback should already be set (raw or using gpio_set_irq_callback)",
+"    // this protects against enabling the interrupt without callback set",
+"#if 0",
+"	assert(!enabled",
+"                || (raw_irq_mask[get_core_num()] & (1u<<gpio))",
+"                || callbacks[get_core_num()]);",
+"#endif",
+"    // Separate mask/force/status per-core, so check which core called, and",
+"    // set the relevant IRQ controls.",
+"    io_bank0_irq_ctrl_hw_t *irq_ctrl_base = get_core_num() ?",
+"                                      &io_bank0_hw->proc1_irq_ctrl : &io_bank0_hw->proc0_irq_ctrl;",
+"    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);",
+"}",
+"/*",
+" * gpio_rp2040.h",
+" *",
+" *  Created on: 2024/10/13",
+" *      Author: user",
+" */",
+"",
+"#ifndef DEVICE_GPIO_SYSDEPEND_RP2040_GPIO_SYSDEP_H_",
+"#define DEVICE_GPIO_SYSDEPEND_RP2040_GPIO_SYSDEP_H_",
+"",
+"/*",
+" * GPIO interrupt number",
+" */",
+"",
+"#define	INTNO_IRQ_BANK0	13",
+"",
+"#define GPIO_EDGE_HIGH	8",
+"#define GPIO_EDGE_LOW	4",
+"#define GPIO_LEVEL_HIGH	2",
+"#define GPIO_LEVEL_LOW	1",
+"",
+"void gpio_set_irq_enabled(UH gpio, UW events, UB enabled);",
+"",
+"#endif /* DEVICE_GPIO_SYSDEPEND_RP2040_GPIO_SYSDEP_H_ */",
+"// THIS HEADER FILE IS AUTOMATICALLY GENERATED -- DO NOT EDIT",
+"",
+"/**",
+" * Copyright (c) 2024 Raspberry Pi Ltd.",
+" *",
+" * SPDX-License-Identifier: BSD-3-Clause",
+" */",
+"#ifndef _HARDWARE_STRUCTS_IO_BANK0_H",
+"#define _HARDWARE_STRUCTS_IO_BANK0_H",
+"",
+"/**",
+" * \\file rp2040/io_bank0.h",
+" */",
+"",
+"#include \"address_mapped.h\"",
+"#include \"io_bank0_reg.h\"",
+"",
+"// Reference to datasheet: https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf#tab-registerlist_io_bank0",
+"//",
+"// The _REG_ macro is intended to help make the register navigable in your IDE (for example, using the \"Go to Definition\" feature)",
+"// _REG_(x) will link to the corresponding register in hardware/regs/io_bank0.h.",
+"//",
+"// Bit-field descriptions are of the form:",
+"// BITMASK [BITRANGE] FIELDNAME (RESETVALUE) DESCRIPTION",
+"",
+"/**",
+" * \\brief GPIO pin function selectors on RP2040 (used as typedef \\ref gpio_function_t) ",
+" * \\ingroup hardware_gpio",
+" */",
+"typedef enum gpio_function_rp2040 {",
+"    GPIO_FUNC_XIP = 0, ///< Select XIP as GPIO pin function",
+"    GPIO_FUNC_SPI = 1, ///< Select SPI as GPIO pin function",
+"    GPIO_FUNC_UART = 2, ///< Select UART as GPIO pin function",
+"    GPIO_FUNC_I2C = 3, ///< Select I2C as GPIO pin function",
+"    GPIO_FUNC_PWM = 4, ///< Select PWM as GPIO pin function",
+"    GPIO_FUNC_SIO = 5, ///< Select SIO as GPIO pin function",
+"    GPIO_FUNC_PIO0 = 6, ///< Select PIO0 as GPIO pin function",
+"    GPIO_FUNC_PIO1 = 7, ///< Select PIO1 as GPIO pin function",
+"    GPIO_FUNC_GPCK = 8, ///< Select GPCK as GPIO pin function",
+"    GPIO_FUNC_USB = 9, ///< Select USB as GPIO pin function",
+"    GPIO_FUNC_NULL = 0x1f, ///< Select NULL as GPIO pin function",
+"} gpio_function_t;",
+"",
+"typedef struct {",
+"    _REG_(IO_BANK0_GPIO0_STATUS_OFFSET) // IO_BANK0_GPIO0_STATUS",
+"    // GPIO status",
+"    // 0x04000000 [26]    IRQTOPROC    (0) interrupt to processors, after override is applied",
+"    // 0x01000000 [24]    IRQFROMPAD   (0) interrupt from pad before override is applied",
+"    // 0x00080000 [19]    INTOPERI     (0) input signal to peripheral, after override is applied",
+"    // 0x00020000 [17]    INFROMPAD    (0) input signal from pad, before override is applied",
+"    // 0x00002000 [13]    OETOPAD      (0) output enable to pad after register override is applied",
+"    // 0x00001000 [12]    OEFROMPERI   (0) output enable from selected peripheral, before register...",
+"    // 0x00000200 [9]     OUTTOPAD     (0) output signal to pad after register override is applied",
+"    // 0x00000100 [8]     OUTFROMPERI  (0) output signal from selected peripheral, before register...",
+"    io_ro_32 status;",
+" ",
+"    _REG_(IO_BANK0_GPIO0_CTRL_OFFSET) // IO_BANK0_GPIO0_CTRL",
+"    // GPIO control including function select and overrides",
+"    // 0x30000000 [29:28] IRQOVER      (0x0) ",
+"    // 0x00030000 [17:16] INOVER       (0x0) ",
+"    // 0x00003000 [13:12] OEOVER       (0x0) ",
+"    // 0x00000300 [9:8]   OUTOVER      (0x0) ",
+"    // 0x0000001f [4:0]   FUNCSEL      (0x1f) 0-31 -> selects pin function according to the gpio table +",
+"    io_rw_32 ctrl;",
+"} io_bank0_status_ctrl_hw_t;",
+"",
+"typedef struct {",
+"    // (Description copied from array index 0 register IO_BANK0_PROC0_INTE0 applies similarly to other array indexes)",
+"    _REG_(IO_BANK0_PROC0_INTE0_OFFSET) // IO_BANK0_PROC0_INTE0",
+"    // Interrupt Enable for proc0",
+"    // 0x80000000 [31]    GPIO7_EDGE_HIGH (0) ",
+"    // 0x40000000 [30]    GPIO7_EDGE_LOW (0) ",
+"    // 0x20000000 [29]    GPIO7_LEVEL_HIGH (0) ",
+"    // 0x10000000 [28]    GPIO7_LEVEL_LOW (0) ",
+"    // 0x08000000 [27]    GPIO6_EDGE_HIGH (0) ",
+"    // 0x04000000 [26]    GPIO6_EDGE_LOW (0) ",
+"    // 0x02000000 [25]    GPIO6_LEVEL_HIGH (0) ",
+"    // 0x01000000 [24]    GPIO6_LEVEL_LOW (0) ",
+"    // 0x00800000 [23]    GPIO5_EDGE_HIGH (0) ",
+"    // 0x00400000 [22]    GPIO5_EDGE_LOW (0) ",
+"    // 0x00200000 [21]    GPIO5_LEVEL_HIGH (0) ",
+"    // 0x00100000 [20]    GPIO5_LEVEL_LOW (0) ",
+"    // 0x00080000 [19]    GPIO4_EDGE_HIGH (0) ",
+"    // 0x00040000 [18]    GPIO4_EDGE_LOW (0) ",
+"    // 0x00020000 [17]    GPIO4_LEVEL_HIGH (0) ",
+"    // 0x00010000 [16]    GPIO4_LEVEL_LOW (0) ",
+"    // 0x00008000 [15]    GPIO3_EDGE_HIGH (0) ",
+"    // 0x00004000 [14]    GPIO3_EDGE_LOW (0) ",
+"    // 0x00002000 [13]    GPIO3_LEVEL_HIGH (0) ",
+"    // 0x00001000 [12]    GPIO3_LEVEL_LOW (0) ",
+"    // 0x00000800 [11]    GPIO2_EDGE_HIGH (0) ",
+"    // 0x00000400 [10]    GPIO2_EDGE_LOW (0) ",
+"    // 0x00000200 [9]     GPIO2_LEVEL_HIGH (0) ",
+"    // 0x00000100 [8]     GPIO2_LEVEL_LOW (0) ",
+"    // 0x00000080 [7]     GPIO1_EDGE_HIGH (0) ",
+"    // 0x00000040 [6]     GPIO1_EDGE_LOW (0) ",
+"    // 0x00000020 [5]     GPIO1_LEVEL_HIGH (0) ",
+"    // 0x00000010 [4]     GPIO1_LEVEL_LOW (0) ",
+"    // 0x00000008 [3]     GPIO0_EDGE_HIGH (0) ",
+"    // 0x00000004 [2]     GPIO0_EDGE_LOW (0) ",
+"    // 0x00000002 [1]     GPIO0_LEVEL_HIGH (0) ",
+"    // 0x00000001 [0]     GPIO0_LEVEL_LOW (0) ",
+"    io_rw_32 inte[4];",
+" ",
+"    // (Description copied from array index 0 register IO_BANK0_PROC0_INTF0 applies similarly to other array indexes)",
+"    _REG_(IO_BANK0_PROC0_INTF0_OFFSET) // IO_BANK0_PROC0_INTF0",
+"    // Interrupt Force for proc0",
+"    // 0x80000000 [31]    GPIO7_EDGE_HIGH (0) ",
+"    // 0x40000000 [30]    GPIO7_EDGE_LOW (0) ",
+"    // 0x20000000 [29]    GPIO7_LEVEL_HIGH (0) ",
+"    // 0x10000000 [28]    GPIO7_LEVEL_LOW (0) ",
+"    // 0x08000000 [27]    GPIO6_EDGE_HIGH (0) ",
+"    // 0x04000000 [26]    GPIO6_EDGE_LOW (0) ",
+"    // 0x02000000 [25]    GPIO6_LEVEL_HIGH (0) ",
+"    // 0x01000000 [24]    GPIO6_LEVEL_LOW (0) ",
+"    // 0x00800000 [23]    GPIO5_EDGE_HIGH (0) ",
+"    // 0x00400000 [22]    GPIO5_EDGE_LOW (0) ",
+"    // 0x00200000 [21]    GPIO5_LEVEL_HIGH (0) ",
+"    // 0x00100000 [20]    GPIO5_LEVEL_LOW (0) ",
+"    // 0x00080000 [19]    GPIO4_EDGE_HIGH (0) ",
+"    // 0x00040000 [18]    GPIO4_EDGE_LOW (0) ",
+"    // 0x00020000 [17]    GPIO4_LEVEL_HIGH (0) ",
+"    // 0x00010000 [16]    GPIO4_LEVEL_LOW (0) ",
+"    // 0x00008000 [15]    GPIO3_EDGE_HIGH (0) ",
+"    // 0x00004000 [14]    GPIO3_EDGE_LOW (0) ",
+"    // 0x00002000 [13]    GPIO3_LEVEL_HIGH (0) ",
+"    // 0x00001000 [12]    GPIO3_LEVEL_LOW (0) ",
+"    // 0x00000800 [11]    GPIO2_EDGE_HIGH (0) ",
+"    // 0x00000400 [10]    GPIO2_EDGE_LOW (0) ",
+"    // 0x00000200 [9]     GPIO2_LEVEL_HIGH (0) ",
+"    // 0x00000100 [8]     GPIO2_LEVEL_LOW (0) ",
+"    // 0x00000080 [7]     GPIO1_EDGE_HIGH (0) ",
+"    // 0x00000040 [6]     GPIO1_EDGE_LOW (0) ",
+"    // 0x00000020 [5]     GPIO1_LEVEL_HIGH (0) ",
+"    // 0x00000010 [4]     GPIO1_LEVEL_LOW (0) ",
+"    // 0x00000008 [3]     GPIO0_EDGE_HIGH (0) ",
+"    // 0x00000004 [2]     GPIO0_EDGE_LOW (0) ",
+"    // 0x00000002 [1]     GPIO0_LEVEL_HIGH (0) ",
+"    // 0x00000001 [0]     GPIO0_LEVEL_LOW (0) ",
+"    io_rw_32 intf[4];",
+" ",
+"    // (Description copied from array index 0 register IO_BANK0_PROC0_INTS0 applies similarly to other array indexes)",
+"    _REG_(IO_BANK0_PROC0_INTS0_OFFSET) // IO_BANK0_PROC0_INTS0",
+"    // Interrupt status after masking & forcing for proc0",
+"    // 0x80000000 [31]    GPIO7_EDGE_HIGH (0) ",
+"    // 0x40000000 [30]    GPIO7_EDGE_LOW (0) ",
+"    // 0x20000000 [29]    GPIO7_LEVEL_HIGH (0) ",
+"    // 0x10000000 [28]    GPIO7_LEVEL_LOW (0) ",
+"    // 0x08000000 [27]    GPIO6_EDGE_HIGH (0) ",
+"    // 0x04000000 [26]    GPIO6_EDGE_LOW (0) ",
+"    // 0x02000000 [25]    GPIO6_LEVEL_HIGH (0) ",
+"    // 0x01000000 [24]    GPIO6_LEVEL_LOW (0) ",
+"    // 0x00800000 [23]    GPIO5_EDGE_HIGH (0) ",
+"    // 0x00400000 [22]    GPIO5_EDGE_LOW (0) ",
+"    // 0x00200000 [21]    GPIO5_LEVEL_HIGH (0) ",
+"    // 0x00100000 [20]    GPIO5_LEVEL_LOW (0) ",
+"    // 0x00080000 [19]    GPIO4_EDGE_HIGH (0) ",
+"    // 0x00040000 [18]    GPIO4_EDGE_LOW (0) ",
+"    // 0x00020000 [17]    GPIO4_LEVEL_HIGH (0) ",
+"    // 0x00010000 [16]    GPIO4_LEVEL_LOW (0) ",
+"    // 0x00008000 [15]    GPIO3_EDGE_HIGH (0) ",
+"    // 0x00004000 [14]    GPIO3_EDGE_LOW (0) ",
+"    // 0x00002000 [13]    GPIO3_LEVEL_HIGH (0) ",
+"    // 0x00001000 [12]    GPIO3_LEVEL_LOW (0) ",
+"    // 0x00000800 [11]    GPIO2_EDGE_HIGH (0) ",
+"    // 0x00000400 [10]    GPIO2_EDGE_LOW (0) ",
+"    // 0x00000200 [9]     GPIO2_LEVEL_HIGH (0) ",
+"    // 0x00000100 [8]     GPIO2_LEVEL_LOW (0) ",
+"    // 0x00000080 [7]     GPIO1_EDGE_HIGH (0) ",
+"    // 0x00000040 [6]     GPIO1_EDGE_LOW (0) ",
+"    // 0x00000020 [5]     GPIO1_LEVEL_HIGH (0) ",
+"    // 0x00000010 [4]     GPIO1_LEVEL_LOW (0) ",
+"    // 0x00000008 [3]     GPIO0_EDGE_HIGH (0) ",
+"    // 0x00000004 [2]     GPIO0_EDGE_LOW (0) ",
+"    // 0x00000002 [1]     GPIO0_LEVEL_HIGH (0) ",
+"    // 0x00000001 [0]     GPIO0_LEVEL_LOW (0) ",
+"    io_ro_32 ints[4];",
+"} io_bank0_irq_ctrl_hw_t;",
+"",
+"/// \\tag::io_bank0_hw[]",
+"typedef struct {",
+"    io_bank0_status_ctrl_hw_t io[30];",
+" ",
+"    // (Description copied from array index 0 register IO_BANK0_INTR0 applies similarly to other array indexes)",
+"    _REG_(IO_BANK0_INTR0_OFFSET) // IO_BANK0_INTR0",
+"    // Raw Interrupts",
+"    // 0x80000000 [31]    GPIO7_EDGE_HIGH (0) ",
+"    // 0x40000000 [30]    GPIO7_EDGE_LOW (0) ",
+"    // 0x20000000 [29]    GPIO7_LEVEL_HIGH (0) ",
+"    // 0x10000000 [28]    GPIO7_LEVEL_LOW (0) ",
+"    // 0x08000000 [27]    GPIO6_EDGE_HIGH (0) ",
+"    // 0x04000000 [26]    GPIO6_EDGE_LOW (0) ",
+"    // 0x02000000 [25]    GPIO6_LEVEL_HIGH (0) ",
+"    // 0x01000000 [24]    GPIO6_LEVEL_LOW (0) ",
+"    // 0x00800000 [23]    GPIO5_EDGE_HIGH (0) ",
+"    // 0x00400000 [22]    GPIO5_EDGE_LOW (0) ",
+"    // 0x00200000 [21]    GPIO5_LEVEL_HIGH (0) ",
+"    // 0x00100000 [20]    GPIO5_LEVEL_LOW (0) ",
+"    // 0x00080000 [19]    GPIO4_EDGE_HIGH (0) ",
+"    // 0x00040000 [18]    GPIO4_EDGE_LOW (0) ",
+"    // 0x00020000 [17]    GPIO4_LEVEL_HIGH (0) ",
+"    // 0x00010000 [16]    GPIO4_LEVEL_LOW (0) ",
+"    // 0x00008000 [15]    GPIO3_EDGE_HIGH (0) ",
+"    // 0x00004000 [14]    GPIO3_EDGE_LOW (0) ",
+"    // 0x00002000 [13]    GPIO3_LEVEL_HIGH (0) ",
+"    // 0x00001000 [12]    GPIO3_LEVEL_LOW (0) ",
+"    // 0x00000800 [11]    GPIO2_EDGE_HIGH (0) ",
+"    // 0x00000400 [10]    GPIO2_EDGE_LOW (0) ",
+"    // 0x00000200 [9]     GPIO2_LEVEL_HIGH (0) ",
+"    // 0x00000100 [8]     GPIO2_LEVEL_LOW (0) ",
+"    // 0x00000080 [7]     GPIO1_EDGE_HIGH (0) ",
+"    // 0x00000040 [6]     GPIO1_EDGE_LOW (0) ",
+"    // 0x00000020 [5]     GPIO1_LEVEL_HIGH (0) ",
+"    // 0x00000010 [4]     GPIO1_LEVEL_LOW (0) ",
+"    // 0x00000008 [3]     GPIO0_EDGE_HIGH (0) ",
+"    // 0x00000004 [2]     GPIO0_EDGE_LOW (0) ",
+"    // 0x00000002 [1]     GPIO0_LEVEL_HIGH (0) ",
+"    // 0x00000001 [0]     GPIO0_LEVEL_LOW (0) ",
+"    io_rw_32 intr[4];",
+" ",
+"    union {",
+"        struct {",
+"            io_bank0_irq_ctrl_hw_t proc0_irq_ctrl;",
+"            io_bank0_irq_ctrl_hw_t proc1_irq_ctrl;",
+"            io_bank0_irq_ctrl_hw_t dormant_wake_irq_ctrl;",
+"        };",
+"        io_bank0_irq_ctrl_hw_t irq_ctrl[3];",
+"    };",
+"} io_bank0_hw_t;",
+"/// \\end::io_bank0_hw[]",
+"",
+"#define io_bank0_hw ((io_bank0_hw_t *)IO_BANK0_BASE)",
+"//static_assert(sizeof (io_bank0_hw_t) == 0x0190, \"\");",
+"",
+"#endif // _HARDWARE_STRUCTS_IO_BANK0_H",
+"",
+"// THIS HEADER FILE IS AUTOMATICALLY GENERATED -- DO NOT EDIT",
+"",
+"/**",
+" * Copyright (c) 2024 Raspberry Pi Ltd.",
+" *",
+" * SPDX-License-Identifier: BSD-3-Clause",
+" */",
+"// =============================================================================",
+"// Register block : IO_BANK0",
+"// Version        : 1",
+"// Bus type       : apb",
+"// =============================================================================",
+"#ifndef _HARDWARE_REGS_IO_BANK0_H",
+"#define _HARDWARE_REGS_IO_BANK0_H",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO0_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO0_STATUS_OFFSET _u(0x00000000)",
+"#define IO_BANK0_GPIO0_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO0_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO0_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO0_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO0_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO0_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO0_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO0_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO0_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO0_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO0_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO0_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO0_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO0_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO0_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO0_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO0_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO0_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO0_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO0_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO0_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO0_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO0_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO0_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO0_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO0_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO0_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO0_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO0_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO0_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO0_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO0_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO0_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO0_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO0_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO0_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO0_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO0_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO0_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO0_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO0_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO0_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO0_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO0_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO0_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO0_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO0_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO0_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO0_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO0_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO0_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO0_CTRL_OFFSET _u(0x00000004)",
+"#define IO_BANK0_GPIO0_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO0_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO0_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO0_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO0_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO0_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO0_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO0_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO0_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO0_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO0_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO0_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO0_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO0_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO0_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO0_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO0_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO0_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO0_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO0_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO0_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO0_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO0_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO0_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO0_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO0_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO0_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO0_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO0_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO0_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO0_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO0_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO0_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO0_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO0_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO0_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO0_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO0_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO0_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO0_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO0_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO0_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO0_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x00 -> jtag_tck",
+"//               0x01 -> spi0_rx",
+"//               0x02 -> uart0_tx",
+"//               0x03 -> i2c0_sda",
+"//               0x04 -> pwm_a_0",
+"//               0x05 -> sio_0",
+"//               0x06 -> pio0_0",
+"//               0x07 -> pio1_0",
+"//               0x09 -> usb_muxing_overcurr_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO0_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO0_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO0_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_JTAG_TCK _u(0x00)",
+"#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_SPI0_RX _u(0x01)",
+"#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_UART0_TX _u(0x02)",
+"#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_I2C0_SDA _u(0x03)",
+"#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_PWM_A_0 _u(0x04)",
+"#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_SIO_0 _u(0x05)",
+"#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_PIO0_0 _u(0x06)",
+"#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_PIO1_0 _u(0x07)",
+"#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO1_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO1_STATUS_OFFSET _u(0x00000008)",
+"#define IO_BANK0_GPIO1_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO1_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO1_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO1_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO1_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO1_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO1_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO1_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO1_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO1_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO1_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO1_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO1_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO1_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO1_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO1_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO1_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO1_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO1_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO1_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO1_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO1_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO1_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO1_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO1_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO1_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO1_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO1_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO1_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO1_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO1_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO1_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO1_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO1_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO1_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO1_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO1_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO1_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO1_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO1_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO1_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO1_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO1_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO1_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO1_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO1_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO1_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO1_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO1_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO1_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO1_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO1_CTRL_OFFSET _u(0x0000000c)",
+"#define IO_BANK0_GPIO1_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO1_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO1_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO1_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO1_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO1_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO1_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO1_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO1_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO1_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO1_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO1_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO1_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO1_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO1_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO1_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO1_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO1_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO1_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO1_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO1_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO1_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO1_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO1_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO1_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO1_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO1_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO1_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO1_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO1_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO1_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO1_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO1_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO1_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO1_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO1_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO1_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO1_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO1_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO1_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO1_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO1_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO1_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x00 -> jtag_tms",
+"//               0x01 -> spi0_ss_n",
+"//               0x02 -> uart0_rx",
+"//               0x03 -> i2c0_scl",
+"//               0x04 -> pwm_b_0",
+"//               0x05 -> sio_1",
+"//               0x06 -> pio0_1",
+"//               0x07 -> pio1_1",
+"//               0x09 -> usb_muxing_vbus_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO1_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO1_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO1_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO1_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO1_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_JTAG_TMS _u(0x00)",
+"#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_SPI0_SS_N _u(0x01)",
+"#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_UART0_RX _u(0x02)",
+"#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_I2C0_SCL _u(0x03)",
+"#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_PWM_B_0 _u(0x04)",
+"#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_SIO_1 _u(0x05)",
+"#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_PIO0_1 _u(0x06)",
+"#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_PIO1_1 _u(0x07)",
+"#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO2_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO2_STATUS_OFFSET _u(0x00000010)",
+"#define IO_BANK0_GPIO2_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO2_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO2_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO2_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO2_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO2_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO2_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO2_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO2_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO2_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO2_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO2_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO2_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO2_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO2_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO2_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO2_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO2_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO2_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO2_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO2_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO2_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO2_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO2_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO2_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO2_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO2_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO2_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO2_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO2_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO2_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO2_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO2_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO2_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO2_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO2_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO2_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO2_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO2_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO2_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO2_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO2_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO2_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO2_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO2_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO2_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO2_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO2_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO2_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO2_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO2_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO2_CTRL_OFFSET _u(0x00000014)",
+"#define IO_BANK0_GPIO2_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO2_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO2_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO2_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO2_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO2_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO2_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO2_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO2_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO2_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO2_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO2_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO2_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO2_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO2_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO2_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO2_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO2_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO2_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO2_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO2_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO2_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO2_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO2_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO2_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO2_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO2_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO2_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO2_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO2_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO2_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO2_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO2_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO2_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO2_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO2_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO2_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO2_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO2_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO2_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO2_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO2_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO2_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x00 -> jtag_tdi",
+"//               0x01 -> spi0_sclk",
+"//               0x02 -> uart0_cts",
+"//               0x03 -> i2c1_sda",
+"//               0x04 -> pwm_a_1",
+"//               0x05 -> sio_2",
+"//               0x06 -> pio0_2",
+"//               0x07 -> pio1_2",
+"//               0x09 -> usb_muxing_vbus_en",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO2_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO2_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO2_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO2_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO2_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_JTAG_TDI _u(0x00)",
+"#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_SPI0_SCLK _u(0x01)",
+"#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_UART0_CTS _u(0x02)",
+"#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_I2C1_SDA _u(0x03)",
+"#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_PWM_A_1 _u(0x04)",
+"#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_SIO_2 _u(0x05)",
+"#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_PIO0_2 _u(0x06)",
+"#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_PIO1_2 _u(0x07)",
+"#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)",
+"#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO3_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO3_STATUS_OFFSET _u(0x00000018)",
+"#define IO_BANK0_GPIO3_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO3_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO3_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO3_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO3_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO3_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO3_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO3_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO3_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO3_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO3_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO3_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO3_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO3_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO3_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO3_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO3_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO3_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO3_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO3_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO3_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO3_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO3_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO3_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO3_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO3_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO3_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO3_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO3_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO3_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO3_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO3_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO3_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO3_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO3_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO3_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO3_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO3_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO3_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO3_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO3_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO3_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO3_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO3_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO3_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO3_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO3_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO3_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO3_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO3_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO3_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO3_CTRL_OFFSET _u(0x0000001c)",
+"#define IO_BANK0_GPIO3_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO3_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO3_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO3_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO3_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO3_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO3_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO3_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO3_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO3_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO3_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO3_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO3_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO3_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO3_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO3_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO3_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO3_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO3_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO3_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO3_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO3_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO3_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO3_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO3_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO3_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO3_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO3_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO3_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO3_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO3_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO3_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO3_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO3_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO3_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO3_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO3_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO3_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO3_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO3_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO3_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO3_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO3_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x00 -> jtag_tdo",
+"//               0x01 -> spi0_tx",
+"//               0x02 -> uart0_rts",
+"//               0x03 -> i2c1_scl",
+"//               0x04 -> pwm_b_1",
+"//               0x05 -> sio_3",
+"//               0x06 -> pio0_3",
+"//               0x07 -> pio1_3",
+"//               0x09 -> usb_muxing_overcurr_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO3_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO3_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO3_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO3_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO3_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_JTAG_TDO _u(0x00)",
+"#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_SPI0_TX _u(0x01)",
+"#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_UART0_RTS _u(0x02)",
+"#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_I2C1_SCL _u(0x03)",
+"#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_PWM_B_1 _u(0x04)",
+"#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_SIO_3 _u(0x05)",
+"#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_PIO0_3 _u(0x06)",
+"#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_PIO1_3 _u(0x07)",
+"#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO4_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO4_STATUS_OFFSET _u(0x00000020)",
+"#define IO_BANK0_GPIO4_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO4_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO4_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO4_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO4_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO4_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO4_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO4_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO4_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO4_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO4_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO4_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO4_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO4_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO4_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO4_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO4_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO4_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO4_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO4_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO4_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO4_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO4_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO4_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO4_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO4_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO4_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO4_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO4_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO4_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO4_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO4_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO4_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO4_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO4_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO4_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO4_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO4_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO4_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO4_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO4_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO4_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO4_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO4_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO4_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO4_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO4_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO4_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO4_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO4_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO4_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO4_CTRL_OFFSET _u(0x00000024)",
+"#define IO_BANK0_GPIO4_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO4_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO4_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO4_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO4_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO4_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO4_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO4_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO4_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO4_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO4_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO4_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO4_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO4_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO4_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO4_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO4_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO4_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO4_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO4_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO4_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO4_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO4_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO4_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO4_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO4_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO4_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO4_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO4_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO4_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO4_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO4_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO4_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO4_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO4_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO4_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO4_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO4_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO4_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO4_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO4_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO4_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO4_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi0_rx",
+"//               0x02 -> uart1_tx",
+"//               0x03 -> i2c0_sda",
+"//               0x04 -> pwm_a_2",
+"//               0x05 -> sio_4",
+"//               0x06 -> pio0_4",
+"//               0x07 -> pio1_4",
+"//               0x09 -> usb_muxing_vbus_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO4_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO4_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO4_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO4_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO4_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_SPI0_RX _u(0x01)",
+"#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_UART1_TX _u(0x02)",
+"#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_I2C0_SDA _u(0x03)",
+"#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_PWM_A_2 _u(0x04)",
+"#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_SIO_4 _u(0x05)",
+"#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_PIO0_4 _u(0x06)",
+"#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_PIO1_4 _u(0x07)",
+"#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO5_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO5_STATUS_OFFSET _u(0x00000028)",
+"#define IO_BANK0_GPIO5_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO5_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO5_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO5_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO5_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO5_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO5_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO5_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO5_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO5_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO5_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO5_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO5_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO5_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO5_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO5_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO5_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO5_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO5_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO5_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO5_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO5_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO5_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO5_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO5_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO5_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO5_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO5_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO5_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO5_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO5_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO5_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO5_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO5_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO5_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO5_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO5_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO5_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO5_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO5_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO5_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO5_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO5_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO5_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO5_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO5_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO5_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO5_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO5_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO5_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO5_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO5_CTRL_OFFSET _u(0x0000002c)",
+"#define IO_BANK0_GPIO5_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO5_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO5_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO5_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO5_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO5_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO5_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO5_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO5_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO5_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO5_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO5_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO5_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO5_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO5_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO5_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO5_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO5_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO5_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO5_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO5_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO5_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO5_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO5_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO5_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO5_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO5_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO5_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO5_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO5_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO5_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO5_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO5_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO5_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO5_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO5_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO5_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO5_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO5_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO5_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO5_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO5_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO5_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi0_ss_n",
+"//               0x02 -> uart1_rx",
+"//               0x03 -> i2c0_scl",
+"//               0x04 -> pwm_b_2",
+"//               0x05 -> sio_5",
+"//               0x06 -> pio0_5",
+"//               0x07 -> pio1_5",
+"//               0x09 -> usb_muxing_vbus_en",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO5_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO5_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO5_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO5_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO5_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_SPI0_SS_N _u(0x01)",
+"#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_UART1_RX _u(0x02)",
+"#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_I2C0_SCL _u(0x03)",
+"#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_PWM_B_2 _u(0x04)",
+"#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_SIO_5 _u(0x05)",
+"#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_PIO0_5 _u(0x06)",
+"#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_PIO1_5 _u(0x07)",
+"#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)",
+"#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO6_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO6_STATUS_OFFSET _u(0x00000030)",
+"#define IO_BANK0_GPIO6_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO6_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO6_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO6_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO6_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO6_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO6_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO6_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO6_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO6_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO6_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO6_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO6_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO6_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO6_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO6_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO6_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO6_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO6_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO6_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO6_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO6_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO6_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO6_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO6_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO6_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO6_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO6_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO6_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO6_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO6_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO6_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO6_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO6_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO6_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO6_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO6_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO6_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO6_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO6_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO6_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO6_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO6_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO6_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO6_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO6_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO6_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO6_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO6_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO6_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO6_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO6_CTRL_OFFSET _u(0x00000034)",
+"#define IO_BANK0_GPIO6_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO6_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO6_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO6_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO6_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO6_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO6_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO6_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO6_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO6_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO6_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO6_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO6_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO6_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO6_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO6_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO6_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO6_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO6_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO6_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO6_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO6_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO6_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO6_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO6_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO6_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO6_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO6_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO6_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO6_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO6_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO6_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO6_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO6_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO6_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO6_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO6_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO6_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO6_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO6_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO6_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO6_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO6_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi0_sclk",
+"//               0x02 -> uart1_cts",
+"//               0x03 -> i2c1_sda",
+"//               0x04 -> pwm_a_3",
+"//               0x05 -> sio_6",
+"//               0x06 -> pio0_6",
+"//               0x07 -> pio1_6",
+"//               0x08 -> usb_muxing_extphy_softcon",
+"//               0x09 -> usb_muxing_overcurr_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO6_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO6_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO6_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO6_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO6_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_SPI0_SCLK _u(0x01)",
+"#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_UART1_CTS _u(0x02)",
+"#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_I2C1_SDA _u(0x03)",
+"#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_PWM_A_3 _u(0x04)",
+"#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_SIO_6 _u(0x05)",
+"#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_PIO0_6 _u(0x06)",
+"#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_PIO1_6 _u(0x07)",
+"#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_SOFTCON _u(0x08)",
+"#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO7_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO7_STATUS_OFFSET _u(0x00000038)",
+"#define IO_BANK0_GPIO7_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO7_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO7_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO7_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO7_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO7_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO7_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO7_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO7_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO7_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO7_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO7_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO7_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO7_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO7_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO7_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO7_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO7_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO7_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO7_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO7_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO7_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO7_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO7_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO7_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO7_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO7_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO7_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO7_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO7_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO7_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO7_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO7_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO7_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO7_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO7_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO7_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO7_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO7_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO7_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO7_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO7_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO7_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO7_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO7_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO7_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO7_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO7_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO7_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO7_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO7_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO7_CTRL_OFFSET _u(0x0000003c)",
+"#define IO_BANK0_GPIO7_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO7_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO7_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO7_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO7_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO7_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO7_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO7_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO7_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO7_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO7_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO7_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO7_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO7_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO7_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO7_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO7_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO7_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO7_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO7_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO7_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO7_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO7_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO7_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO7_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO7_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO7_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO7_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO7_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO7_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO7_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO7_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO7_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO7_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO7_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO7_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO7_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO7_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO7_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO7_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO7_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO7_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO7_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi0_tx",
+"//               0x02 -> uart1_rts",
+"//               0x03 -> i2c1_scl",
+"//               0x04 -> pwm_b_3",
+"//               0x05 -> sio_7",
+"//               0x06 -> pio0_7",
+"//               0x07 -> pio1_7",
+"//               0x08 -> usb_muxing_extphy_oe_n",
+"//               0x09 -> usb_muxing_vbus_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO7_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO7_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO7_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO7_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO7_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_SPI0_TX _u(0x01)",
+"#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_UART1_RTS _u(0x02)",
+"#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_I2C1_SCL _u(0x03)",
+"#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_PWM_B_3 _u(0x04)",
+"#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_SIO_7 _u(0x05)",
+"#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_PIO0_7 _u(0x06)",
+"#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_PIO1_7 _u(0x07)",
+"#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_OE_N _u(0x08)",
+"#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO8_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO8_STATUS_OFFSET _u(0x00000040)",
+"#define IO_BANK0_GPIO8_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO8_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO8_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO8_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO8_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO8_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO8_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO8_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO8_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO8_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO8_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO8_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO8_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO8_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO8_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO8_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO8_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO8_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO8_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO8_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO8_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO8_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO8_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO8_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO8_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO8_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO8_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO8_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO8_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO8_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO8_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO8_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO8_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO8_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO8_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO8_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO8_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO8_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO8_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO8_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO8_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO8_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO8_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO8_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO8_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO8_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO8_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO8_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO8_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO8_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO8_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO8_CTRL_OFFSET _u(0x00000044)",
+"#define IO_BANK0_GPIO8_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO8_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO8_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO8_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO8_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO8_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO8_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO8_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO8_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO8_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO8_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO8_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO8_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO8_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO8_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO8_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO8_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO8_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO8_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO8_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO8_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO8_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO8_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO8_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO8_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO8_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO8_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO8_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO8_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO8_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO8_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO8_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO8_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO8_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO8_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO8_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO8_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO8_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO8_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO8_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO8_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO8_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO8_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi1_rx",
+"//               0x02 -> uart1_tx",
+"//               0x03 -> i2c0_sda",
+"//               0x04 -> pwm_a_4",
+"//               0x05 -> sio_8",
+"//               0x06 -> pio0_8",
+"//               0x07 -> pio1_8",
+"//               0x08 -> usb_muxing_extphy_rcv",
+"//               0x09 -> usb_muxing_vbus_en",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO8_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO8_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO8_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO8_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO8_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_SPI1_RX _u(0x01)",
+"#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_UART1_TX _u(0x02)",
+"#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_I2C0_SDA _u(0x03)",
+"#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_PWM_A_4 _u(0x04)",
+"#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_SIO_8 _u(0x05)",
+"#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_PIO0_8 _u(0x06)",
+"#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_PIO1_8 _u(0x07)",
+"#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_RCV _u(0x08)",
+"#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)",
+"#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO9_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO9_STATUS_OFFSET _u(0x00000048)",
+"#define IO_BANK0_GPIO9_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO9_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO9_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO9_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO9_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO9_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO9_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO9_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO9_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO9_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO9_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO9_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO9_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO9_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO9_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO9_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO9_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO9_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO9_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO9_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO9_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO9_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO9_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO9_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO9_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO9_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO9_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO9_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO9_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO9_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO9_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO9_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO9_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO9_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO9_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO9_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO9_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO9_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO9_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO9_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO9_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO9_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO9_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO9_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO9_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO9_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO9_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO9_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO9_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO9_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO9_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO9_CTRL_OFFSET _u(0x0000004c)",
+"#define IO_BANK0_GPIO9_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO9_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO9_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO9_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO9_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO9_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO9_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO9_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO9_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO9_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO9_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO9_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO9_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO9_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO9_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO9_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO9_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO9_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO9_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO9_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO9_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO9_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO9_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO9_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO9_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO9_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO9_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO9_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO9_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO9_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO9_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO9_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO9_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO9_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO9_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO9_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO9_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO9_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO9_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO9_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO9_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO9_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO9_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi1_ss_n",
+"//               0x02 -> uart1_rx",
+"//               0x03 -> i2c0_scl",
+"//               0x04 -> pwm_b_4",
+"//               0x05 -> sio_9",
+"//               0x06 -> pio0_9",
+"//               0x07 -> pio1_9",
+"//               0x08 -> usb_muxing_extphy_vp",
+"//               0x09 -> usb_muxing_overcurr_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO9_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO9_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO9_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO9_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO9_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_SPI1_SS_N _u(0x01)",
+"#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_UART1_RX _u(0x02)",
+"#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_I2C0_SCL _u(0x03)",
+"#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_PWM_B_4 _u(0x04)",
+"#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_SIO_9 _u(0x05)",
+"#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_PIO0_9 _u(0x06)",
+"#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_PIO1_9 _u(0x07)",
+"#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_VP _u(0x08)",
+"#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO10_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO10_STATUS_OFFSET _u(0x00000050)",
+"#define IO_BANK0_GPIO10_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO10_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO10_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO10_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO10_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO10_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO10_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO10_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO10_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO10_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO10_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO10_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO10_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO10_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO10_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO10_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO10_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO10_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO10_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO10_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO10_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO10_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO10_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO10_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO10_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO10_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO10_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO10_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO10_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO10_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO10_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO10_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO10_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO10_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO10_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO10_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO10_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO10_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO10_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO10_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO10_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO10_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO10_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO10_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO10_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO10_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO10_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO10_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO10_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO10_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO10_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO10_CTRL_OFFSET _u(0x00000054)",
+"#define IO_BANK0_GPIO10_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO10_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO10_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO10_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO10_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO10_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO10_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO10_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO10_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO10_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO10_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO10_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO10_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO10_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO10_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO10_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO10_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO10_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO10_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO10_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO10_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO10_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO10_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO10_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO10_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO10_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO10_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO10_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO10_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO10_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO10_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO10_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO10_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO10_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO10_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO10_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO10_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO10_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO10_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO10_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO10_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO10_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO10_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi1_sclk",
+"//               0x02 -> uart1_cts",
+"//               0x03 -> i2c1_sda",
+"//               0x04 -> pwm_a_5",
+"//               0x05 -> sio_10",
+"//               0x06 -> pio0_10",
+"//               0x07 -> pio1_10",
+"//               0x08 -> usb_muxing_extphy_vm",
+"//               0x09 -> usb_muxing_vbus_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO10_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO10_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO10_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO10_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO10_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_SPI1_SCLK _u(0x01)",
+"#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_UART1_CTS _u(0x02)",
+"#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_I2C1_SDA _u(0x03)",
+"#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_PWM_A_5 _u(0x04)",
+"#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_SIO_10 _u(0x05)",
+"#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_PIO0_10 _u(0x06)",
+"#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_PIO1_10 _u(0x07)",
+"#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_VM _u(0x08)",
+"#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO11_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO11_STATUS_OFFSET _u(0x00000058)",
+"#define IO_BANK0_GPIO11_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO11_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO11_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO11_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO11_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO11_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO11_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO11_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO11_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO11_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO11_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO11_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO11_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO11_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO11_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO11_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO11_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO11_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO11_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO11_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO11_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO11_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO11_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO11_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO11_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO11_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO11_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO11_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO11_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO11_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO11_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO11_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO11_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO11_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO11_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO11_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO11_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO11_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO11_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO11_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO11_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO11_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO11_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO11_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO11_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO11_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO11_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO11_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO11_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO11_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO11_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO11_CTRL_OFFSET _u(0x0000005c)",
+"#define IO_BANK0_GPIO11_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO11_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO11_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO11_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO11_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO11_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO11_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO11_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO11_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO11_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO11_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO11_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO11_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO11_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO11_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO11_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO11_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO11_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO11_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO11_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO11_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO11_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO11_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO11_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO11_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO11_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO11_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO11_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO11_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO11_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO11_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO11_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO11_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO11_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO11_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO11_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO11_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO11_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO11_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO11_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO11_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO11_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO11_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi1_tx",
+"//               0x02 -> uart1_rts",
+"//               0x03 -> i2c1_scl",
+"//               0x04 -> pwm_b_5",
+"//               0x05 -> sio_11",
+"//               0x06 -> pio0_11",
+"//               0x07 -> pio1_11",
+"//               0x08 -> usb_muxing_extphy_suspnd",
+"//               0x09 -> usb_muxing_vbus_en",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO11_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO11_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO11_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO11_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO11_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_SPI1_TX _u(0x01)",
+"#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_UART1_RTS _u(0x02)",
+"#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_I2C1_SCL _u(0x03)",
+"#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_PWM_B_5 _u(0x04)",
+"#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_SIO_11 _u(0x05)",
+"#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_PIO0_11 _u(0x06)",
+"#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_PIO1_11 _u(0x07)",
+"#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_SUSPND _u(0x08)",
+"#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)",
+"#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO12_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO12_STATUS_OFFSET _u(0x00000060)",
+"#define IO_BANK0_GPIO12_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO12_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO12_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO12_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO12_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO12_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO12_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO12_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO12_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO12_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO12_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO12_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO12_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO12_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO12_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO12_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO12_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO12_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO12_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO12_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO12_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO12_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO12_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO12_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO12_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO12_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO12_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO12_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO12_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO12_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO12_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO12_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO12_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO12_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO12_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO12_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO12_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO12_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO12_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO12_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO12_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO12_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO12_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO12_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO12_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO12_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO12_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO12_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO12_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO12_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO12_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO12_CTRL_OFFSET _u(0x00000064)",
+"#define IO_BANK0_GPIO12_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO12_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO12_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO12_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO12_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO12_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO12_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO12_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO12_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO12_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO12_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO12_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO12_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO12_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO12_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO12_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO12_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO12_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO12_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO12_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO12_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO12_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO12_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO12_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO12_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO12_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO12_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO12_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO12_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO12_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO12_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO12_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO12_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO12_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO12_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO12_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO12_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO12_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO12_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO12_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO12_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO12_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO12_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi1_rx",
+"//               0x02 -> uart0_tx",
+"//               0x03 -> i2c0_sda",
+"//               0x04 -> pwm_a_6",
+"//               0x05 -> sio_12",
+"//               0x06 -> pio0_12",
+"//               0x07 -> pio1_12",
+"//               0x08 -> usb_muxing_extphy_speed",
+"//               0x09 -> usb_muxing_overcurr_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO12_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO12_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO12_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO12_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO12_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_SPI1_RX _u(0x01)",
+"#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_UART0_TX _u(0x02)",
+"#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_I2C0_SDA _u(0x03)",
+"#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_PWM_A_6 _u(0x04)",
+"#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_SIO_12 _u(0x05)",
+"#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_PIO0_12 _u(0x06)",
+"#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_PIO1_12 _u(0x07)",
+"#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_SPEED _u(0x08)",
+"#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO13_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO13_STATUS_OFFSET _u(0x00000068)",
+"#define IO_BANK0_GPIO13_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO13_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO13_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO13_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO13_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO13_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO13_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO13_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO13_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO13_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO13_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO13_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO13_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO13_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO13_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO13_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO13_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO13_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO13_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO13_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO13_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO13_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO13_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO13_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO13_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO13_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO13_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO13_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO13_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO13_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO13_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO13_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO13_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO13_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO13_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO13_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO13_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO13_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO13_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO13_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO13_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO13_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO13_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO13_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO13_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO13_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO13_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO13_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO13_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO13_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO13_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO13_CTRL_OFFSET _u(0x0000006c)",
+"#define IO_BANK0_GPIO13_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO13_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO13_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO13_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO13_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO13_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO13_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO13_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO13_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO13_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO13_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO13_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO13_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO13_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO13_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO13_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO13_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO13_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO13_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO13_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO13_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO13_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO13_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO13_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO13_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO13_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO13_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO13_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO13_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO13_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO13_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO13_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO13_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO13_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO13_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO13_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO13_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO13_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO13_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO13_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO13_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO13_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO13_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi1_ss_n",
+"//               0x02 -> uart0_rx",
+"//               0x03 -> i2c0_scl",
+"//               0x04 -> pwm_b_6",
+"//               0x05 -> sio_13",
+"//               0x06 -> pio0_13",
+"//               0x07 -> pio1_13",
+"//               0x08 -> usb_muxing_extphy_vpo",
+"//               0x09 -> usb_muxing_vbus_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO13_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO13_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO13_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO13_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO13_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_SPI1_SS_N _u(0x01)",
+"#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_UART0_RX _u(0x02)",
+"#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_I2C0_SCL _u(0x03)",
+"#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_PWM_B_6 _u(0x04)",
+"#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_SIO_13 _u(0x05)",
+"#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_PIO0_13 _u(0x06)",
+"#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_PIO1_13 _u(0x07)",
+"#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_VPO _u(0x08)",
+"#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO14_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO14_STATUS_OFFSET _u(0x00000070)",
+"#define IO_BANK0_GPIO14_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO14_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO14_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO14_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO14_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO14_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO14_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO14_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO14_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO14_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO14_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO14_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO14_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO14_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO14_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO14_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO14_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO14_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO14_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO14_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO14_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO14_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO14_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO14_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO14_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO14_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO14_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO14_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO14_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO14_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO14_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO14_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO14_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO14_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO14_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO14_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO14_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO14_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO14_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO14_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO14_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO14_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO14_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO14_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO14_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO14_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO14_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO14_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO14_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO14_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO14_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO14_CTRL_OFFSET _u(0x00000074)",
+"#define IO_BANK0_GPIO14_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO14_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO14_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO14_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO14_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO14_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO14_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO14_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO14_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO14_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO14_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO14_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO14_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO14_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO14_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO14_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO14_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO14_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO14_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO14_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO14_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO14_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO14_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO14_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO14_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO14_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO14_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO14_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO14_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO14_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO14_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO14_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO14_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO14_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO14_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO14_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO14_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO14_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO14_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO14_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO14_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO14_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO14_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi1_sclk",
+"//               0x02 -> uart0_cts",
+"//               0x03 -> i2c1_sda",
+"//               0x04 -> pwm_a_7",
+"//               0x05 -> sio_14",
+"//               0x06 -> pio0_14",
+"//               0x07 -> pio1_14",
+"//               0x08 -> usb_muxing_extphy_vmo",
+"//               0x09 -> usb_muxing_vbus_en",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO14_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO14_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO14_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO14_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO14_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_SPI1_SCLK _u(0x01)",
+"#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_UART0_CTS _u(0x02)",
+"#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_I2C1_SDA _u(0x03)",
+"#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_PWM_A_7 _u(0x04)",
+"#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_SIO_14 _u(0x05)",
+"#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_PIO0_14 _u(0x06)",
+"#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_PIO1_14 _u(0x07)",
+"#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_VMO _u(0x08)",
+"#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)",
+"#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO15_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO15_STATUS_OFFSET _u(0x00000078)",
+"#define IO_BANK0_GPIO15_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO15_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO15_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO15_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO15_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO15_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO15_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO15_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO15_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO15_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO15_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO15_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO15_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO15_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO15_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO15_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO15_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO15_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO15_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO15_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO15_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO15_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO15_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO15_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO15_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO15_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO15_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO15_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO15_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO15_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO15_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO15_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO15_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO15_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO15_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO15_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO15_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO15_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO15_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO15_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO15_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO15_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO15_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO15_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO15_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO15_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO15_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO15_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO15_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO15_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO15_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO15_CTRL_OFFSET _u(0x0000007c)",
+"#define IO_BANK0_GPIO15_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO15_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO15_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO15_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO15_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO15_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO15_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO15_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO15_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO15_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO15_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO15_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO15_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO15_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO15_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO15_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO15_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO15_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO15_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO15_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO15_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO15_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO15_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO15_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO15_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO15_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO15_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO15_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO15_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO15_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO15_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO15_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO15_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO15_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO15_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO15_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO15_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO15_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO15_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO15_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO15_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO15_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO15_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi1_tx",
+"//               0x02 -> uart0_rts",
+"//               0x03 -> i2c1_scl",
+"//               0x04 -> pwm_b_7",
+"//               0x05 -> sio_15",
+"//               0x06 -> pio0_15",
+"//               0x07 -> pio1_15",
+"//               0x08 -> usb_muxing_digital_dp",
+"//               0x09 -> usb_muxing_overcurr_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO15_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO15_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO15_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO15_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO15_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_SPI1_TX _u(0x01)",
+"#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_UART0_RTS _u(0x02)",
+"#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_I2C1_SCL _u(0x03)",
+"#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_PWM_B_7 _u(0x04)",
+"#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_SIO_15 _u(0x05)",
+"#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_PIO0_15 _u(0x06)",
+"#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_PIO1_15 _u(0x07)",
+"#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_USB_MUXING_DIGITAL_DP _u(0x08)",
+"#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO16_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO16_STATUS_OFFSET _u(0x00000080)",
+"#define IO_BANK0_GPIO16_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO16_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO16_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO16_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO16_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO16_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO16_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO16_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO16_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO16_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO16_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO16_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO16_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO16_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO16_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO16_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO16_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO16_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO16_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO16_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO16_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO16_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO16_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO16_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO16_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO16_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO16_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO16_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO16_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO16_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO16_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO16_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO16_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO16_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO16_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO16_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO16_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO16_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO16_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO16_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO16_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO16_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO16_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO16_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO16_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO16_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO16_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO16_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO16_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO16_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO16_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO16_CTRL_OFFSET _u(0x00000084)",
+"#define IO_BANK0_GPIO16_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO16_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO16_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO16_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO16_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO16_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO16_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO16_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO16_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO16_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO16_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO16_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO16_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO16_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO16_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO16_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO16_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO16_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO16_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO16_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO16_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO16_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO16_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO16_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO16_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO16_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO16_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO16_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO16_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO16_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO16_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO16_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO16_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO16_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO16_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO16_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO16_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO16_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO16_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO16_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO16_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO16_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO16_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi0_rx",
+"//               0x02 -> uart0_tx",
+"//               0x03 -> i2c0_sda",
+"//               0x04 -> pwm_a_0",
+"//               0x05 -> sio_16",
+"//               0x06 -> pio0_16",
+"//               0x07 -> pio1_16",
+"//               0x08 -> usb_muxing_digital_dm",
+"//               0x09 -> usb_muxing_vbus_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO16_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO16_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO16_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO16_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO16_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_SPI0_RX _u(0x01)",
+"#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_UART0_TX _u(0x02)",
+"#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_I2C0_SDA _u(0x03)",
+"#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_PWM_A_0 _u(0x04)",
+"#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_SIO_16 _u(0x05)",
+"#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_PIO0_16 _u(0x06)",
+"#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_PIO1_16 _u(0x07)",
+"#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_USB_MUXING_DIGITAL_DM _u(0x08)",
+"#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO17_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO17_STATUS_OFFSET _u(0x00000088)",
+"#define IO_BANK0_GPIO17_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO17_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO17_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO17_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO17_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO17_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO17_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO17_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO17_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO17_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO17_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO17_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO17_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO17_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO17_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO17_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO17_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO17_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO17_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO17_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO17_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO17_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO17_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO17_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO17_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO17_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO17_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO17_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO17_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO17_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO17_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO17_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO17_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO17_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO17_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO17_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO17_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO17_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO17_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO17_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO17_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO17_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO17_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO17_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO17_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO17_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO17_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO17_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO17_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO17_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO17_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO17_CTRL_OFFSET _u(0x0000008c)",
+"#define IO_BANK0_GPIO17_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO17_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO17_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO17_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO17_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO17_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO17_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO17_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO17_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO17_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO17_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO17_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO17_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO17_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO17_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO17_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO17_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO17_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO17_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO17_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO17_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO17_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO17_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO17_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO17_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO17_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO17_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO17_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO17_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO17_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO17_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO17_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO17_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO17_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO17_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO17_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO17_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO17_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO17_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO17_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO17_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO17_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO17_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi0_ss_n",
+"//               0x02 -> uart0_rx",
+"//               0x03 -> i2c0_scl",
+"//               0x04 -> pwm_b_0",
+"//               0x05 -> sio_17",
+"//               0x06 -> pio0_17",
+"//               0x07 -> pio1_17",
+"//               0x09 -> usb_muxing_vbus_en",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO17_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO17_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO17_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO17_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO17_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_SPI0_SS_N _u(0x01)",
+"#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_UART0_RX _u(0x02)",
+"#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_I2C0_SCL _u(0x03)",
+"#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_PWM_B_0 _u(0x04)",
+"#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_SIO_17 _u(0x05)",
+"#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_PIO0_17 _u(0x06)",
+"#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_PIO1_17 _u(0x07)",
+"#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)",
+"#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO18_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO18_STATUS_OFFSET _u(0x00000090)",
+"#define IO_BANK0_GPIO18_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO18_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO18_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO18_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO18_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO18_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO18_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO18_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO18_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO18_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO18_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO18_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO18_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO18_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO18_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO18_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO18_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO18_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO18_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO18_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO18_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO18_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO18_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO18_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO18_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO18_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO18_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO18_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO18_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO18_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO18_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO18_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO18_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO18_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO18_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO18_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO18_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO18_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO18_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO18_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO18_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO18_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO18_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO18_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO18_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO18_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO18_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO18_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO18_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO18_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO18_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO18_CTRL_OFFSET _u(0x00000094)",
+"#define IO_BANK0_GPIO18_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO18_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO18_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO18_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO18_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO18_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO18_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO18_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO18_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO18_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO18_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO18_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO18_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO18_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO18_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO18_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO18_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO18_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO18_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO18_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO18_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO18_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO18_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO18_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO18_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO18_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO18_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO18_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO18_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO18_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO18_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO18_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO18_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO18_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO18_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO18_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO18_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO18_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO18_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO18_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO18_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO18_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO18_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi0_sclk",
+"//               0x02 -> uart0_cts",
+"//               0x03 -> i2c1_sda",
+"//               0x04 -> pwm_a_1",
+"//               0x05 -> sio_18",
+"//               0x06 -> pio0_18",
+"//               0x07 -> pio1_18",
+"//               0x09 -> usb_muxing_overcurr_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO18_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO18_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO18_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO18_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO18_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_SPI0_SCLK _u(0x01)",
+"#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_UART0_CTS _u(0x02)",
+"#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_I2C1_SDA _u(0x03)",
+"#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_PWM_A_1 _u(0x04)",
+"#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_SIO_18 _u(0x05)",
+"#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_PIO0_18 _u(0x06)",
+"#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_PIO1_18 _u(0x07)",
+"#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO19_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO19_STATUS_OFFSET _u(0x00000098)",
+"#define IO_BANK0_GPIO19_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO19_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO19_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO19_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO19_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO19_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO19_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO19_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO19_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO19_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO19_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO19_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO19_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO19_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO19_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO19_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO19_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO19_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO19_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO19_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO19_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO19_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO19_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO19_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO19_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO19_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO19_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO19_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO19_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO19_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO19_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO19_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO19_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO19_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO19_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO19_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO19_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO19_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO19_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO19_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO19_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO19_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO19_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO19_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO19_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO19_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO19_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO19_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO19_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO19_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO19_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO19_CTRL_OFFSET _u(0x0000009c)",
+"#define IO_BANK0_GPIO19_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO19_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO19_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO19_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO19_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO19_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO19_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO19_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO19_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO19_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO19_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO19_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO19_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO19_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO19_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO19_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO19_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO19_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO19_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO19_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO19_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO19_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO19_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO19_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO19_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO19_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO19_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO19_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO19_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO19_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO19_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO19_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO19_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO19_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO19_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO19_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO19_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO19_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO19_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO19_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO19_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO19_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO19_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi0_tx",
+"//               0x02 -> uart0_rts",
+"//               0x03 -> i2c1_scl",
+"//               0x04 -> pwm_b_1",
+"//               0x05 -> sio_19",
+"//               0x06 -> pio0_19",
+"//               0x07 -> pio1_19",
+"//               0x09 -> usb_muxing_vbus_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO19_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO19_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO19_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO19_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO19_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_SPI0_TX _u(0x01)",
+"#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_UART0_RTS _u(0x02)",
+"#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_I2C1_SCL _u(0x03)",
+"#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_PWM_B_1 _u(0x04)",
+"#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_SIO_19 _u(0x05)",
+"#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_PIO0_19 _u(0x06)",
+"#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_PIO1_19 _u(0x07)",
+"#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO20_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO20_STATUS_OFFSET _u(0x000000a0)",
+"#define IO_BANK0_GPIO20_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO20_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO20_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO20_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO20_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO20_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO20_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO20_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO20_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO20_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO20_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO20_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO20_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO20_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO20_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO20_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO20_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO20_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO20_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO20_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO20_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO20_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO20_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO20_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO20_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO20_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO20_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO20_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO20_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO20_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO20_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO20_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO20_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO20_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO20_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO20_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO20_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO20_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO20_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO20_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO20_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO20_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO20_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO20_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO20_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO20_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO20_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO20_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO20_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO20_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO20_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO20_CTRL_OFFSET _u(0x000000a4)",
+"#define IO_BANK0_GPIO20_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO20_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO20_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO20_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO20_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO20_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO20_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO20_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO20_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO20_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO20_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO20_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO20_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO20_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO20_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO20_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO20_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO20_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO20_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO20_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO20_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO20_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO20_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO20_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO20_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO20_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO20_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO20_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO20_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO20_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO20_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO20_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO20_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO20_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO20_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO20_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO20_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO20_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO20_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO20_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO20_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO20_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO20_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi0_rx",
+"//               0x02 -> uart1_tx",
+"//               0x03 -> i2c0_sda",
+"//               0x04 -> pwm_a_2",
+"//               0x05 -> sio_20",
+"//               0x06 -> pio0_20",
+"//               0x07 -> pio1_20",
+"//               0x08 -> clocks_gpin_0",
+"//               0x09 -> usb_muxing_vbus_en",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO20_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO20_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO20_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO20_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO20_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_SPI0_RX _u(0x01)",
+"#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_UART1_TX _u(0x02)",
+"#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_I2C0_SDA _u(0x03)",
+"#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_PWM_A_2 _u(0x04)",
+"#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_SIO_20 _u(0x05)",
+"#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_PIO0_20 _u(0x06)",
+"#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_PIO1_20 _u(0x07)",
+"#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_CLOCKS_GPIN_0 _u(0x08)",
+"#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)",
+"#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO21_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO21_STATUS_OFFSET _u(0x000000a8)",
+"#define IO_BANK0_GPIO21_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO21_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO21_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO21_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO21_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO21_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO21_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO21_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO21_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO21_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO21_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO21_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO21_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO21_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO21_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO21_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO21_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO21_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO21_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO21_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO21_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO21_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO21_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO21_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO21_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO21_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO21_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO21_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO21_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO21_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO21_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO21_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO21_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO21_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO21_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO21_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO21_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO21_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO21_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO21_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO21_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO21_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO21_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO21_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO21_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO21_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO21_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO21_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO21_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO21_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO21_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO21_CTRL_OFFSET _u(0x000000ac)",
+"#define IO_BANK0_GPIO21_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO21_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO21_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO21_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO21_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO21_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO21_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO21_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO21_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO21_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO21_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO21_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO21_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO21_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO21_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO21_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO21_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO21_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO21_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO21_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO21_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO21_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO21_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO21_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO21_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO21_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO21_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO21_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO21_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO21_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO21_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO21_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO21_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO21_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO21_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO21_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO21_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO21_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO21_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO21_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO21_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO21_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO21_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi0_ss_n",
+"//               0x02 -> uart1_rx",
+"//               0x03 -> i2c0_scl",
+"//               0x04 -> pwm_b_2",
+"//               0x05 -> sio_21",
+"//               0x06 -> pio0_21",
+"//               0x07 -> pio1_21",
+"//               0x08 -> clocks_gpout_0",
+"//               0x09 -> usb_muxing_overcurr_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO21_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO21_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO21_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO21_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO21_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_SPI0_SS_N _u(0x01)",
+"#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_UART1_RX _u(0x02)",
+"#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_I2C0_SCL _u(0x03)",
+"#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_PWM_B_2 _u(0x04)",
+"#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_SIO_21 _u(0x05)",
+"#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_PIO0_21 _u(0x06)",
+"#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_PIO1_21 _u(0x07)",
+"#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_0 _u(0x08)",
+"#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO22_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO22_STATUS_OFFSET _u(0x000000b0)",
+"#define IO_BANK0_GPIO22_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO22_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO22_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO22_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO22_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO22_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO22_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO22_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO22_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO22_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO22_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO22_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO22_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO22_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO22_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO22_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO22_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO22_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO22_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO22_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO22_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO22_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO22_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO22_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO22_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO22_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO22_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO22_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO22_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO22_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO22_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO22_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO22_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO22_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO22_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO22_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO22_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO22_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO22_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO22_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO22_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO22_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO22_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO22_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO22_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO22_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO22_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO22_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO22_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO22_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO22_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO22_CTRL_OFFSET _u(0x000000b4)",
+"#define IO_BANK0_GPIO22_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO22_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO22_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO22_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO22_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO22_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO22_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO22_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO22_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO22_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO22_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO22_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO22_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO22_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO22_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO22_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO22_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO22_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO22_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO22_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO22_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO22_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO22_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO22_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO22_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO22_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO22_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO22_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO22_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO22_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO22_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO22_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO22_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO22_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO22_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO22_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO22_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO22_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO22_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO22_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO22_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO22_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO22_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi0_sclk",
+"//               0x02 -> uart1_cts",
+"//               0x03 -> i2c1_sda",
+"//               0x04 -> pwm_a_3",
+"//               0x05 -> sio_22",
+"//               0x06 -> pio0_22",
+"//               0x07 -> pio1_22",
+"//               0x08 -> clocks_gpin_1",
+"//               0x09 -> usb_muxing_vbus_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO22_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO22_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO22_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO22_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO22_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_SPI0_SCLK _u(0x01)",
+"#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_UART1_CTS _u(0x02)",
+"#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_I2C1_SDA _u(0x03)",
+"#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_PWM_A_3 _u(0x04)",
+"#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_SIO_22 _u(0x05)",
+"#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_PIO0_22 _u(0x06)",
+"#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_PIO1_22 _u(0x07)",
+"#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_CLOCKS_GPIN_1 _u(0x08)",
+"#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO23_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO23_STATUS_OFFSET _u(0x000000b8)",
+"#define IO_BANK0_GPIO23_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO23_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO23_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO23_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO23_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO23_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO23_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO23_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO23_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO23_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO23_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO23_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO23_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO23_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO23_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO23_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO23_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO23_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO23_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO23_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO23_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO23_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO23_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO23_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO23_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO23_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO23_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO23_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO23_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO23_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO23_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO23_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO23_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO23_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO23_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO23_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO23_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO23_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO23_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO23_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO23_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO23_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO23_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO23_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO23_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO23_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO23_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO23_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO23_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO23_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO23_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO23_CTRL_OFFSET _u(0x000000bc)",
+"#define IO_BANK0_GPIO23_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO23_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO23_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO23_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO23_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO23_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO23_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO23_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO23_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO23_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO23_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO23_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO23_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO23_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO23_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO23_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO23_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO23_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO23_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO23_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO23_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO23_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO23_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO23_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO23_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO23_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO23_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO23_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO23_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO23_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO23_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO23_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO23_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO23_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO23_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO23_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO23_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO23_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO23_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO23_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO23_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO23_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO23_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi0_tx",
+"//               0x02 -> uart1_rts",
+"//               0x03 -> i2c1_scl",
+"//               0x04 -> pwm_b_3",
+"//               0x05 -> sio_23",
+"//               0x06 -> pio0_23",
+"//               0x07 -> pio1_23",
+"//               0x08 -> clocks_gpout_1",
+"//               0x09 -> usb_muxing_vbus_en",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO23_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO23_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO23_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO23_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO23_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_SPI0_TX _u(0x01)",
+"#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_UART1_RTS _u(0x02)",
+"#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_I2C1_SCL _u(0x03)",
+"#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_PWM_B_3 _u(0x04)",
+"#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_SIO_23 _u(0x05)",
+"#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_PIO0_23 _u(0x06)",
+"#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_PIO1_23 _u(0x07)",
+"#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_1 _u(0x08)",
+"#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)",
+"#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO24_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO24_STATUS_OFFSET _u(0x000000c0)",
+"#define IO_BANK0_GPIO24_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO24_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO24_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO24_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO24_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO24_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO24_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO24_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO24_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO24_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO24_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO24_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO24_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO24_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO24_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO24_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO24_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO24_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO24_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO24_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO24_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO24_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO24_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO24_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO24_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO24_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO24_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO24_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO24_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO24_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO24_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO24_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO24_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO24_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO24_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO24_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO24_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO24_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO24_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO24_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO24_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO24_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO24_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO24_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO24_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO24_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO24_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO24_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO24_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO24_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO24_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO24_CTRL_OFFSET _u(0x000000c4)",
+"#define IO_BANK0_GPIO24_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO24_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO24_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO24_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO24_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO24_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO24_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO24_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO24_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO24_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO24_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO24_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO24_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO24_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO24_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO24_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO24_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO24_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO24_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO24_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO24_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO24_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO24_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO24_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO24_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO24_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO24_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO24_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO24_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO24_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO24_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO24_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO24_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO24_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO24_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO24_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO24_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO24_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO24_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO24_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO24_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO24_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO24_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi1_rx",
+"//               0x02 -> uart1_tx",
+"//               0x03 -> i2c0_sda",
+"//               0x04 -> pwm_a_4",
+"//               0x05 -> sio_24",
+"//               0x06 -> pio0_24",
+"//               0x07 -> pio1_24",
+"//               0x08 -> clocks_gpout_2",
+"//               0x09 -> usb_muxing_overcurr_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO24_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO24_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO24_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO24_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO24_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_SPI1_RX _u(0x01)",
+"#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_UART1_TX _u(0x02)",
+"#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_I2C0_SDA _u(0x03)",
+"#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_PWM_A_4 _u(0x04)",
+"#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_SIO_24 _u(0x05)",
+"#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_PIO0_24 _u(0x06)",
+"#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_PIO1_24 _u(0x07)",
+"#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_2 _u(0x08)",
+"#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO25_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO25_STATUS_OFFSET _u(0x000000c8)",
+"#define IO_BANK0_GPIO25_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO25_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO25_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO25_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO25_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO25_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO25_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO25_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO25_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO25_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO25_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO25_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO25_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO25_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO25_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO25_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO25_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO25_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO25_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO25_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO25_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO25_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO25_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO25_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO25_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO25_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO25_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO25_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO25_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO25_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO25_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO25_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO25_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO25_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO25_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO25_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO25_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO25_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO25_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO25_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO25_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO25_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO25_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO25_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO25_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO25_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO25_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO25_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO25_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO25_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO25_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO25_CTRL_OFFSET _u(0x000000cc)",
+"#define IO_BANK0_GPIO25_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO25_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO25_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO25_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO25_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO25_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO25_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO25_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO25_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO25_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO25_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO25_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO25_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO25_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO25_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO25_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO25_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO25_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO25_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO25_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO25_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO25_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO25_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO25_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO25_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO25_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO25_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO25_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO25_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO25_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO25_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO25_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO25_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO25_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO25_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO25_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO25_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO25_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO25_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO25_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO25_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO25_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO25_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi1_ss_n",
+"//               0x02 -> uart1_rx",
+"//               0x03 -> i2c0_scl",
+"//               0x04 -> pwm_b_4",
+"//               0x05 -> sio_25",
+"//               0x06 -> pio0_25",
+"//               0x07 -> pio1_25",
+"//               0x08 -> clocks_gpout_3",
+"//               0x09 -> usb_muxing_vbus_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO25_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO25_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO25_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO25_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO25_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_SPI1_SS_N _u(0x01)",
+"#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_UART1_RX _u(0x02)",
+"#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_I2C0_SCL _u(0x03)",
+"#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_PWM_B_4 _u(0x04)",
+"#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_SIO_25 _u(0x05)",
+"#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_PIO0_25 _u(0x06)",
+"#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_PIO1_25 _u(0x07)",
+"#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_3 _u(0x08)",
+"#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO26_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO26_STATUS_OFFSET _u(0x000000d0)",
+"#define IO_BANK0_GPIO26_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO26_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO26_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO26_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO26_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO26_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO26_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO26_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO26_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO26_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO26_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO26_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO26_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO26_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO26_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO26_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO26_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO26_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO26_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO26_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO26_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO26_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO26_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO26_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO26_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO26_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO26_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO26_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO26_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO26_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO26_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO26_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO26_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO26_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO26_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO26_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO26_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO26_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO26_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO26_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO26_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO26_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO26_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO26_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO26_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO26_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO26_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO26_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO26_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO26_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO26_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO26_CTRL_OFFSET _u(0x000000d4)",
+"#define IO_BANK0_GPIO26_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO26_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO26_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO26_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO26_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO26_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO26_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO26_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO26_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO26_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO26_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO26_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO26_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO26_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO26_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO26_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO26_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO26_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO26_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO26_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO26_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO26_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO26_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO26_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO26_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO26_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO26_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO26_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO26_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO26_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO26_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO26_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO26_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO26_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO26_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO26_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO26_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO26_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO26_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO26_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO26_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO26_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO26_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi1_sclk",
+"//               0x02 -> uart1_cts",
+"//               0x03 -> i2c1_sda",
+"//               0x04 -> pwm_a_5",
+"//               0x05 -> sio_26",
+"//               0x06 -> pio0_26",
+"//               0x07 -> pio1_26",
+"//               0x09 -> usb_muxing_vbus_en",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO26_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO26_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO26_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO26_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO26_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_SPI1_SCLK _u(0x01)",
+"#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_UART1_CTS _u(0x02)",
+"#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_I2C1_SDA _u(0x03)",
+"#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_PWM_A_5 _u(0x04)",
+"#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_SIO_26 _u(0x05)",
+"#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_PIO0_26 _u(0x06)",
+"#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_PIO1_26 _u(0x07)",
+"#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)",
+"#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO27_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO27_STATUS_OFFSET _u(0x000000d8)",
+"#define IO_BANK0_GPIO27_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO27_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO27_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO27_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO27_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO27_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO27_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO27_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO27_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO27_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO27_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO27_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO27_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO27_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO27_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO27_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO27_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO27_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO27_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO27_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO27_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO27_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO27_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO27_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO27_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO27_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO27_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO27_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO27_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO27_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO27_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO27_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO27_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO27_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO27_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO27_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO27_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO27_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO27_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO27_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO27_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO27_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO27_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO27_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO27_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO27_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO27_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO27_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO27_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO27_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO27_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO27_CTRL_OFFSET _u(0x000000dc)",
+"#define IO_BANK0_GPIO27_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO27_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO27_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO27_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO27_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO27_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO27_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO27_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO27_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO27_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO27_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO27_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO27_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO27_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO27_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO27_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO27_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO27_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO27_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO27_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO27_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO27_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO27_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO27_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO27_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO27_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO27_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO27_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO27_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO27_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO27_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO27_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO27_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO27_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO27_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO27_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO27_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO27_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO27_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO27_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO27_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO27_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO27_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi1_tx",
+"//               0x02 -> uart1_rts",
+"//               0x03 -> i2c1_scl",
+"//               0x04 -> pwm_b_5",
+"//               0x05 -> sio_27",
+"//               0x06 -> pio0_27",
+"//               0x07 -> pio1_27",
+"//               0x09 -> usb_muxing_overcurr_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO27_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO27_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO27_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO27_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO27_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_SPI1_TX _u(0x01)",
+"#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_UART1_RTS _u(0x02)",
+"#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_I2C1_SCL _u(0x03)",
+"#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_PWM_B_5 _u(0x04)",
+"#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_SIO_27 _u(0x05)",
+"#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_PIO0_27 _u(0x06)",
+"#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_PIO1_27 _u(0x07)",
+"#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO28_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO28_STATUS_OFFSET _u(0x000000e0)",
+"#define IO_BANK0_GPIO28_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO28_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO28_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO28_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO28_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO28_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO28_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO28_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO28_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO28_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO28_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO28_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO28_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO28_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO28_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO28_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO28_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO28_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO28_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO28_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO28_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO28_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO28_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO28_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO28_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO28_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO28_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO28_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO28_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO28_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO28_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO28_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO28_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO28_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO28_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO28_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO28_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO28_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO28_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO28_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO28_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO28_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO28_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO28_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO28_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO28_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO28_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO28_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO28_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO28_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO28_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO28_CTRL_OFFSET _u(0x000000e4)",
+"#define IO_BANK0_GPIO28_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO28_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO28_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO28_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO28_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO28_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO28_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO28_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO28_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO28_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO28_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO28_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO28_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO28_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO28_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO28_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO28_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO28_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO28_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO28_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO28_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO28_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO28_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO28_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO28_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO28_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO28_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO28_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO28_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO28_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO28_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO28_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO28_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO28_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO28_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO28_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO28_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO28_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO28_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO28_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO28_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO28_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO28_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi1_rx",
+"//               0x02 -> uart0_tx",
+"//               0x03 -> i2c0_sda",
+"//               0x04 -> pwm_a_6",
+"//               0x05 -> sio_28",
+"//               0x06 -> pio0_28",
+"//               0x07 -> pio1_28",
+"//               0x09 -> usb_muxing_vbus_detect",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO28_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO28_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO28_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO28_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO28_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_SPI1_RX _u(0x01)",
+"#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_UART0_TX _u(0x02)",
+"#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_I2C0_SDA _u(0x03)",
+"#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_PWM_A_6 _u(0x04)",
+"#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_SIO_28 _u(0x05)",
+"#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_PIO0_28 _u(0x06)",
+"#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_PIO1_28 _u(0x07)",
+"#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)",
+"#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO29_STATUS",
+"// Description : GPIO status",
+"#define IO_BANK0_GPIO29_STATUS_OFFSET _u(0x000000e8)",
+"#define IO_BANK0_GPIO29_STATUS_BITS   _u(0x050a3300)",
+"#define IO_BANK0_GPIO29_STATUS_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO29_STATUS_IRQTOPROC",
+"// Description : interrupt to processors, after override is applied",
+"#define IO_BANK0_GPIO29_STATUS_IRQTOPROC_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO29_STATUS_IRQTOPROC_BITS   _u(0x04000000)",
+"#define IO_BANK0_GPIO29_STATUS_IRQTOPROC_MSB    _u(26)",
+"#define IO_BANK0_GPIO29_STATUS_IRQTOPROC_LSB    _u(26)",
+"#define IO_BANK0_GPIO29_STATUS_IRQTOPROC_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO29_STATUS_IRQFROMPAD",
+"// Description : interrupt from pad before override is applied",
+"#define IO_BANK0_GPIO29_STATUS_IRQFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO29_STATUS_IRQFROMPAD_BITS   _u(0x01000000)",
+"#define IO_BANK0_GPIO29_STATUS_IRQFROMPAD_MSB    _u(24)",
+"#define IO_BANK0_GPIO29_STATUS_IRQFROMPAD_LSB    _u(24)",
+"#define IO_BANK0_GPIO29_STATUS_IRQFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO29_STATUS_INTOPERI",
+"// Description : input signal to peripheral, after override is applied",
+"#define IO_BANK0_GPIO29_STATUS_INTOPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO29_STATUS_INTOPERI_BITS   _u(0x00080000)",
+"#define IO_BANK0_GPIO29_STATUS_INTOPERI_MSB    _u(19)",
+"#define IO_BANK0_GPIO29_STATUS_INTOPERI_LSB    _u(19)",
+"#define IO_BANK0_GPIO29_STATUS_INTOPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO29_STATUS_INFROMPAD",
+"// Description : input signal from pad, before override is applied",
+"#define IO_BANK0_GPIO29_STATUS_INFROMPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO29_STATUS_INFROMPAD_BITS   _u(0x00020000)",
+"#define IO_BANK0_GPIO29_STATUS_INFROMPAD_MSB    _u(17)",
+"#define IO_BANK0_GPIO29_STATUS_INFROMPAD_LSB    _u(17)",
+"#define IO_BANK0_GPIO29_STATUS_INFROMPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO29_STATUS_OETOPAD",
+"// Description : output enable to pad after register override is applied",
+"#define IO_BANK0_GPIO29_STATUS_OETOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO29_STATUS_OETOPAD_BITS   _u(0x00002000)",
+"#define IO_BANK0_GPIO29_STATUS_OETOPAD_MSB    _u(13)",
+"#define IO_BANK0_GPIO29_STATUS_OETOPAD_LSB    _u(13)",
+"#define IO_BANK0_GPIO29_STATUS_OETOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO29_STATUS_OEFROMPERI",
+"// Description : output enable from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO29_STATUS_OEFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO29_STATUS_OEFROMPERI_BITS   _u(0x00001000)",
+"#define IO_BANK0_GPIO29_STATUS_OEFROMPERI_MSB    _u(12)",
+"#define IO_BANK0_GPIO29_STATUS_OEFROMPERI_LSB    _u(12)",
+"#define IO_BANK0_GPIO29_STATUS_OEFROMPERI_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO29_STATUS_OUTTOPAD",
+"// Description : output signal to pad after register override is applied",
+"#define IO_BANK0_GPIO29_STATUS_OUTTOPAD_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO29_STATUS_OUTTOPAD_BITS   _u(0x00000200)",
+"#define IO_BANK0_GPIO29_STATUS_OUTTOPAD_MSB    _u(9)",
+"#define IO_BANK0_GPIO29_STATUS_OUTTOPAD_LSB    _u(9)",
+"#define IO_BANK0_GPIO29_STATUS_OUTTOPAD_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO29_STATUS_OUTFROMPERI",
+"// Description : output signal from selected peripheral, before register",
+"//               override is applied",
+"#define IO_BANK0_GPIO29_STATUS_OUTFROMPERI_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO29_STATUS_OUTFROMPERI_BITS   _u(0x00000100)",
+"#define IO_BANK0_GPIO29_STATUS_OUTFROMPERI_MSB    _u(8)",
+"#define IO_BANK0_GPIO29_STATUS_OUTFROMPERI_LSB    _u(8)",
+"#define IO_BANK0_GPIO29_STATUS_OUTFROMPERI_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_GPIO29_CTRL",
+"// Description : GPIO control including function select and overrides.",
+"#define IO_BANK0_GPIO29_CTRL_OFFSET _u(0x000000ec)",
+"#define IO_BANK0_GPIO29_CTRL_BITS   _u(0x3003331f)",
+"#define IO_BANK0_GPIO29_CTRL_RESET  _u(0x0000001f)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO29_CTRL_IRQOVER",
+"//               0x0 -> don't invert the interrupt",
+"//               0x1 -> invert the interrupt",
+"//               0x2 -> drive interrupt low",
+"//               0x3 -> drive interrupt high",
+"#define IO_BANK0_GPIO29_CTRL_IRQOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO29_CTRL_IRQOVER_BITS   _u(0x30000000)",
+"#define IO_BANK0_GPIO29_CTRL_IRQOVER_MSB    _u(29)",
+"#define IO_BANK0_GPIO29_CTRL_IRQOVER_LSB    _u(28)",
+"#define IO_BANK0_GPIO29_CTRL_IRQOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO29_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO29_CTRL_IRQOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO29_CTRL_IRQOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO29_CTRL_IRQOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO29_CTRL_INOVER",
+"//               0x0 -> don't invert the peri input",
+"//               0x1 -> invert the peri input",
+"//               0x2 -> drive peri input low",
+"//               0x3 -> drive peri input high",
+"#define IO_BANK0_GPIO29_CTRL_INOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO29_CTRL_INOVER_BITS   _u(0x00030000)",
+"#define IO_BANK0_GPIO29_CTRL_INOVER_MSB    _u(17)",
+"#define IO_BANK0_GPIO29_CTRL_INOVER_LSB    _u(16)",
+"#define IO_BANK0_GPIO29_CTRL_INOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO29_CTRL_INOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO29_CTRL_INOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO29_CTRL_INOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO29_CTRL_INOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO29_CTRL_OEOVER",
+"//               0x0 -> drive output enable from peripheral signal selected by funcsel",
+"//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> disable output",
+"//               0x3 -> enable output",
+"#define IO_BANK0_GPIO29_CTRL_OEOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO29_CTRL_OEOVER_BITS   _u(0x00003000)",
+"#define IO_BANK0_GPIO29_CTRL_OEOVER_MSB    _u(13)",
+"#define IO_BANK0_GPIO29_CTRL_OEOVER_LSB    _u(12)",
+"#define IO_BANK0_GPIO29_CTRL_OEOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO29_CTRL_OEOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO29_CTRL_OEOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO29_CTRL_OEOVER_VALUE_DISABLE _u(0x2)",
+"#define IO_BANK0_GPIO29_CTRL_OEOVER_VALUE_ENABLE _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO29_CTRL_OUTOVER",
+"//               0x0 -> drive output from peripheral signal selected by funcsel",
+"//               0x1 -> drive output from inverse of peripheral signal selected by funcsel",
+"//               0x2 -> drive output low",
+"//               0x3 -> drive output high",
+"#define IO_BANK0_GPIO29_CTRL_OUTOVER_RESET  _u(0x0)",
+"#define IO_BANK0_GPIO29_CTRL_OUTOVER_BITS   _u(0x00000300)",
+"#define IO_BANK0_GPIO29_CTRL_OUTOVER_MSB    _u(9)",
+"#define IO_BANK0_GPIO29_CTRL_OUTOVER_LSB    _u(8)",
+"#define IO_BANK0_GPIO29_CTRL_OUTOVER_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO29_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)",
+"#define IO_BANK0_GPIO29_CTRL_OUTOVER_VALUE_INVERT _u(0x1)",
+"#define IO_BANK0_GPIO29_CTRL_OUTOVER_VALUE_LOW _u(0x2)",
+"#define IO_BANK0_GPIO29_CTRL_OUTOVER_VALUE_HIGH _u(0x3)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_GPIO29_CTRL_FUNCSEL",
+"// Description : 0-31 -> selects pin function according to the gpio table",
+"//               31 == NULL",
+"//               0x01 -> spi1_ss_n",
+"//               0x02 -> uart0_rx",
+"//               0x03 -> i2c0_scl",
+"//               0x04 -> pwm_b_6",
+"//               0x05 -> sio_29",
+"//               0x06 -> pio0_29",
+"//               0x07 -> pio1_29",
+"//               0x09 -> usb_muxing_vbus_en",
+"//               0x1f -> null",
+"#define IO_BANK0_GPIO29_CTRL_FUNCSEL_RESET  _u(0x1f)",
+"#define IO_BANK0_GPIO29_CTRL_FUNCSEL_BITS   _u(0x0000001f)",
+"#define IO_BANK0_GPIO29_CTRL_FUNCSEL_MSB    _u(4)",
+"#define IO_BANK0_GPIO29_CTRL_FUNCSEL_LSB    _u(0)",
+"#define IO_BANK0_GPIO29_CTRL_FUNCSEL_ACCESS \"RW\"",
+"#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_SPI1_SS_N _u(0x01)",
+"#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_UART0_RX _u(0x02)",
+"#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_I2C0_SCL _u(0x03)",
+"#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_PWM_B_6 _u(0x04)",
+"#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_SIO_29 _u(0x05)",
+"#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_PIO0_29 _u(0x06)",
+"#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_PIO1_29 _u(0x07)",
+"#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)",
+"#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)",
+"// =============================================================================",
+"// Register    : IO_BANK0_INTR0",
+"// Description : Raw Interrupts",
+"#define IO_BANK0_INTR0_OFFSET _u(0x000000f0)",
+"#define IO_BANK0_INTR0_BITS   _u(0xffffffff)",
+"#define IO_BANK0_INTR0_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO7_EDGE_HIGH",
+"#define IO_BANK0_INTR0_GPIO7_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_INTR0_GPIO7_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_INTR0_GPIO7_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_INTR0_GPIO7_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO7_EDGE_LOW",
+"#define IO_BANK0_INTR0_GPIO7_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_INTR0_GPIO7_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_INTR0_GPIO7_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_INTR0_GPIO7_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO7_LEVEL_HIGH",
+"#define IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO7_LEVEL_LOW",
+"#define IO_BANK0_INTR0_GPIO7_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_INTR0_GPIO7_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_INTR0_GPIO7_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_INTR0_GPIO7_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO6_EDGE_HIGH",
+"#define IO_BANK0_INTR0_GPIO6_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_INTR0_GPIO6_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_INTR0_GPIO6_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_INTR0_GPIO6_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO6_EDGE_LOW",
+"#define IO_BANK0_INTR0_GPIO6_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_INTR0_GPIO6_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_INTR0_GPIO6_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_INTR0_GPIO6_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO6_LEVEL_HIGH",
+"#define IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO6_LEVEL_LOW",
+"#define IO_BANK0_INTR0_GPIO6_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_INTR0_GPIO6_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_INTR0_GPIO6_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_INTR0_GPIO6_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO5_EDGE_HIGH",
+"#define IO_BANK0_INTR0_GPIO5_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_INTR0_GPIO5_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_INTR0_GPIO5_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_INTR0_GPIO5_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO5_EDGE_LOW",
+"#define IO_BANK0_INTR0_GPIO5_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_INTR0_GPIO5_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_INTR0_GPIO5_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_INTR0_GPIO5_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO5_LEVEL_HIGH",
+"#define IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO5_LEVEL_LOW",
+"#define IO_BANK0_INTR0_GPIO5_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_INTR0_GPIO5_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_INTR0_GPIO5_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_INTR0_GPIO5_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO4_EDGE_HIGH",
+"#define IO_BANK0_INTR0_GPIO4_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_INTR0_GPIO4_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_INTR0_GPIO4_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_INTR0_GPIO4_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO4_EDGE_LOW",
+"#define IO_BANK0_INTR0_GPIO4_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_INTR0_GPIO4_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_INTR0_GPIO4_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_INTR0_GPIO4_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO4_LEVEL_HIGH",
+"#define IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO4_LEVEL_LOW",
+"#define IO_BANK0_INTR0_GPIO4_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_INTR0_GPIO4_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_INTR0_GPIO4_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_INTR0_GPIO4_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO3_EDGE_HIGH",
+"#define IO_BANK0_INTR0_GPIO3_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_INTR0_GPIO3_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_INTR0_GPIO3_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_INTR0_GPIO3_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO3_EDGE_LOW",
+"#define IO_BANK0_INTR0_GPIO3_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_INTR0_GPIO3_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_INTR0_GPIO3_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_INTR0_GPIO3_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO3_LEVEL_HIGH",
+"#define IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO3_LEVEL_LOW",
+"#define IO_BANK0_INTR0_GPIO3_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_INTR0_GPIO3_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_INTR0_GPIO3_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_INTR0_GPIO3_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO2_EDGE_HIGH",
+"#define IO_BANK0_INTR0_GPIO2_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_INTR0_GPIO2_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_INTR0_GPIO2_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_INTR0_GPIO2_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO2_EDGE_LOW",
+"#define IO_BANK0_INTR0_GPIO2_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_INTR0_GPIO2_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_INTR0_GPIO2_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_INTR0_GPIO2_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO2_LEVEL_HIGH",
+"#define IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO2_LEVEL_LOW",
+"#define IO_BANK0_INTR0_GPIO2_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_INTR0_GPIO2_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_INTR0_GPIO2_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_INTR0_GPIO2_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO1_EDGE_HIGH",
+"#define IO_BANK0_INTR0_GPIO1_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_INTR0_GPIO1_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_INTR0_GPIO1_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_INTR0_GPIO1_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO1_EDGE_LOW",
+"#define IO_BANK0_INTR0_GPIO1_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_INTR0_GPIO1_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_INTR0_GPIO1_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_INTR0_GPIO1_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO1_LEVEL_HIGH",
+"#define IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO1_LEVEL_LOW",
+"#define IO_BANK0_INTR0_GPIO1_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_INTR0_GPIO1_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_INTR0_GPIO1_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_INTR0_GPIO1_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO0_EDGE_HIGH",
+"#define IO_BANK0_INTR0_GPIO0_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_INTR0_GPIO0_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_INTR0_GPIO0_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_INTR0_GPIO0_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO0_EDGE_LOW",
+"#define IO_BANK0_INTR0_GPIO0_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_INTR0_GPIO0_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_INTR0_GPIO0_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_INTR0_GPIO0_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO0_LEVEL_HIGH",
+"#define IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR0_GPIO0_LEVEL_LOW",
+"#define IO_BANK0_INTR0_GPIO0_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_INTR0_GPIO0_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_INTR0_GPIO0_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_INTR0_GPIO0_LEVEL_LOW_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_INTR1",
+"// Description : Raw Interrupts",
+"#define IO_BANK0_INTR1_OFFSET _u(0x000000f4)",
+"#define IO_BANK0_INTR1_BITS   _u(0xffffffff)",
+"#define IO_BANK0_INTR1_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO15_EDGE_HIGH",
+"#define IO_BANK0_INTR1_GPIO15_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_INTR1_GPIO15_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_INTR1_GPIO15_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_INTR1_GPIO15_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO15_EDGE_LOW",
+"#define IO_BANK0_INTR1_GPIO15_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_INTR1_GPIO15_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_INTR1_GPIO15_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_INTR1_GPIO15_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO15_LEVEL_HIGH",
+"#define IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO15_LEVEL_LOW",
+"#define IO_BANK0_INTR1_GPIO15_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_INTR1_GPIO15_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_INTR1_GPIO15_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_INTR1_GPIO15_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO14_EDGE_HIGH",
+"#define IO_BANK0_INTR1_GPIO14_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_INTR1_GPIO14_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_INTR1_GPIO14_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_INTR1_GPIO14_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO14_EDGE_LOW",
+"#define IO_BANK0_INTR1_GPIO14_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_INTR1_GPIO14_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_INTR1_GPIO14_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_INTR1_GPIO14_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO14_LEVEL_HIGH",
+"#define IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO14_LEVEL_LOW",
+"#define IO_BANK0_INTR1_GPIO14_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_INTR1_GPIO14_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_INTR1_GPIO14_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_INTR1_GPIO14_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO13_EDGE_HIGH",
+"#define IO_BANK0_INTR1_GPIO13_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_INTR1_GPIO13_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_INTR1_GPIO13_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_INTR1_GPIO13_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO13_EDGE_LOW",
+"#define IO_BANK0_INTR1_GPIO13_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_INTR1_GPIO13_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_INTR1_GPIO13_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_INTR1_GPIO13_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO13_LEVEL_HIGH",
+"#define IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO13_LEVEL_LOW",
+"#define IO_BANK0_INTR1_GPIO13_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_INTR1_GPIO13_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_INTR1_GPIO13_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_INTR1_GPIO13_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO12_EDGE_HIGH",
+"#define IO_BANK0_INTR1_GPIO12_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_INTR1_GPIO12_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_INTR1_GPIO12_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_INTR1_GPIO12_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO12_EDGE_LOW",
+"#define IO_BANK0_INTR1_GPIO12_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_INTR1_GPIO12_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_INTR1_GPIO12_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_INTR1_GPIO12_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO12_LEVEL_HIGH",
+"#define IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO12_LEVEL_LOW",
+"#define IO_BANK0_INTR1_GPIO12_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_INTR1_GPIO12_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_INTR1_GPIO12_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_INTR1_GPIO12_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO11_EDGE_HIGH",
+"#define IO_BANK0_INTR1_GPIO11_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_INTR1_GPIO11_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_INTR1_GPIO11_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_INTR1_GPIO11_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO11_EDGE_LOW",
+"#define IO_BANK0_INTR1_GPIO11_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_INTR1_GPIO11_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_INTR1_GPIO11_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_INTR1_GPIO11_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO11_LEVEL_HIGH",
+"#define IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO11_LEVEL_LOW",
+"#define IO_BANK0_INTR1_GPIO11_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_INTR1_GPIO11_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_INTR1_GPIO11_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_INTR1_GPIO11_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO10_EDGE_HIGH",
+"#define IO_BANK0_INTR1_GPIO10_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_INTR1_GPIO10_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_INTR1_GPIO10_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_INTR1_GPIO10_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO10_EDGE_LOW",
+"#define IO_BANK0_INTR1_GPIO10_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_INTR1_GPIO10_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_INTR1_GPIO10_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_INTR1_GPIO10_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO10_LEVEL_HIGH",
+"#define IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO10_LEVEL_LOW",
+"#define IO_BANK0_INTR1_GPIO10_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_INTR1_GPIO10_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_INTR1_GPIO10_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_INTR1_GPIO10_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO9_EDGE_HIGH",
+"#define IO_BANK0_INTR1_GPIO9_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_INTR1_GPIO9_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_INTR1_GPIO9_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_INTR1_GPIO9_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO9_EDGE_LOW",
+"#define IO_BANK0_INTR1_GPIO9_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_INTR1_GPIO9_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_INTR1_GPIO9_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_INTR1_GPIO9_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO9_LEVEL_HIGH",
+"#define IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO9_LEVEL_LOW",
+"#define IO_BANK0_INTR1_GPIO9_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_INTR1_GPIO9_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_INTR1_GPIO9_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_INTR1_GPIO9_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO8_EDGE_HIGH",
+"#define IO_BANK0_INTR1_GPIO8_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_INTR1_GPIO8_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_INTR1_GPIO8_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_INTR1_GPIO8_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO8_EDGE_LOW",
+"#define IO_BANK0_INTR1_GPIO8_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_INTR1_GPIO8_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_INTR1_GPIO8_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_INTR1_GPIO8_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO8_LEVEL_HIGH",
+"#define IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR1_GPIO8_LEVEL_LOW",
+"#define IO_BANK0_INTR1_GPIO8_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_INTR1_GPIO8_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_INTR1_GPIO8_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_INTR1_GPIO8_LEVEL_LOW_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_INTR2",
+"// Description : Raw Interrupts",
+"#define IO_BANK0_INTR2_OFFSET _u(0x000000f8)",
+"#define IO_BANK0_INTR2_BITS   _u(0xffffffff)",
+"#define IO_BANK0_INTR2_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO23_EDGE_HIGH",
+"#define IO_BANK0_INTR2_GPIO23_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_INTR2_GPIO23_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_INTR2_GPIO23_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_INTR2_GPIO23_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO23_EDGE_LOW",
+"#define IO_BANK0_INTR2_GPIO23_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_INTR2_GPIO23_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_INTR2_GPIO23_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_INTR2_GPIO23_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO23_LEVEL_HIGH",
+"#define IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO23_LEVEL_LOW",
+"#define IO_BANK0_INTR2_GPIO23_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_INTR2_GPIO23_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_INTR2_GPIO23_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_INTR2_GPIO23_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO22_EDGE_HIGH",
+"#define IO_BANK0_INTR2_GPIO22_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_INTR2_GPIO22_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_INTR2_GPIO22_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_INTR2_GPIO22_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO22_EDGE_LOW",
+"#define IO_BANK0_INTR2_GPIO22_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_INTR2_GPIO22_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_INTR2_GPIO22_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_INTR2_GPIO22_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO22_LEVEL_HIGH",
+"#define IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO22_LEVEL_LOW",
+"#define IO_BANK0_INTR2_GPIO22_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_INTR2_GPIO22_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_INTR2_GPIO22_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_INTR2_GPIO22_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO21_EDGE_HIGH",
+"#define IO_BANK0_INTR2_GPIO21_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_INTR2_GPIO21_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_INTR2_GPIO21_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_INTR2_GPIO21_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO21_EDGE_LOW",
+"#define IO_BANK0_INTR2_GPIO21_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_INTR2_GPIO21_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_INTR2_GPIO21_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_INTR2_GPIO21_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO21_LEVEL_HIGH",
+"#define IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO21_LEVEL_LOW",
+"#define IO_BANK0_INTR2_GPIO21_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_INTR2_GPIO21_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_INTR2_GPIO21_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_INTR2_GPIO21_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO20_EDGE_HIGH",
+"#define IO_BANK0_INTR2_GPIO20_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_INTR2_GPIO20_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_INTR2_GPIO20_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_INTR2_GPIO20_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO20_EDGE_LOW",
+"#define IO_BANK0_INTR2_GPIO20_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_INTR2_GPIO20_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_INTR2_GPIO20_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_INTR2_GPIO20_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO20_LEVEL_HIGH",
+"#define IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO20_LEVEL_LOW",
+"#define IO_BANK0_INTR2_GPIO20_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_INTR2_GPIO20_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_INTR2_GPIO20_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_INTR2_GPIO20_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO19_EDGE_HIGH",
+"#define IO_BANK0_INTR2_GPIO19_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_INTR2_GPIO19_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_INTR2_GPIO19_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_INTR2_GPIO19_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO19_EDGE_LOW",
+"#define IO_BANK0_INTR2_GPIO19_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_INTR2_GPIO19_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_INTR2_GPIO19_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_INTR2_GPIO19_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO19_LEVEL_HIGH",
+"#define IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO19_LEVEL_LOW",
+"#define IO_BANK0_INTR2_GPIO19_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_INTR2_GPIO19_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_INTR2_GPIO19_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_INTR2_GPIO19_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO18_EDGE_HIGH",
+"#define IO_BANK0_INTR2_GPIO18_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_INTR2_GPIO18_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_INTR2_GPIO18_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_INTR2_GPIO18_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO18_EDGE_LOW",
+"#define IO_BANK0_INTR2_GPIO18_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_INTR2_GPIO18_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_INTR2_GPIO18_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_INTR2_GPIO18_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO18_LEVEL_HIGH",
+"#define IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO18_LEVEL_LOW",
+"#define IO_BANK0_INTR2_GPIO18_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_INTR2_GPIO18_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_INTR2_GPIO18_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_INTR2_GPIO18_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO17_EDGE_HIGH",
+"#define IO_BANK0_INTR2_GPIO17_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_INTR2_GPIO17_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_INTR2_GPIO17_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_INTR2_GPIO17_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO17_EDGE_LOW",
+"#define IO_BANK0_INTR2_GPIO17_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_INTR2_GPIO17_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_INTR2_GPIO17_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_INTR2_GPIO17_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO17_LEVEL_HIGH",
+"#define IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO17_LEVEL_LOW",
+"#define IO_BANK0_INTR2_GPIO17_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_INTR2_GPIO17_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_INTR2_GPIO17_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_INTR2_GPIO17_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO16_EDGE_HIGH",
+"#define IO_BANK0_INTR2_GPIO16_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_INTR2_GPIO16_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_INTR2_GPIO16_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_INTR2_GPIO16_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO16_EDGE_LOW",
+"#define IO_BANK0_INTR2_GPIO16_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_INTR2_GPIO16_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_INTR2_GPIO16_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_INTR2_GPIO16_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO16_LEVEL_HIGH",
+"#define IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR2_GPIO16_LEVEL_LOW",
+"#define IO_BANK0_INTR2_GPIO16_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_INTR2_GPIO16_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_INTR2_GPIO16_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_INTR2_GPIO16_LEVEL_LOW_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_INTR3",
+"// Description : Raw Interrupts",
+"#define IO_BANK0_INTR3_OFFSET _u(0x000000fc)",
+"#define IO_BANK0_INTR3_BITS   _u(0x00ffffff)",
+"#define IO_BANK0_INTR3_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO29_EDGE_HIGH",
+"#define IO_BANK0_INTR3_GPIO29_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_INTR3_GPIO29_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_INTR3_GPIO29_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_INTR3_GPIO29_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO29_EDGE_LOW",
+"#define IO_BANK0_INTR3_GPIO29_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_INTR3_GPIO29_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_INTR3_GPIO29_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_INTR3_GPIO29_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO29_LEVEL_HIGH",
+"#define IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO29_LEVEL_LOW",
+"#define IO_BANK0_INTR3_GPIO29_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_INTR3_GPIO29_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_INTR3_GPIO29_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_INTR3_GPIO29_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO28_EDGE_HIGH",
+"#define IO_BANK0_INTR3_GPIO28_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_INTR3_GPIO28_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_INTR3_GPIO28_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_INTR3_GPIO28_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO28_EDGE_LOW",
+"#define IO_BANK0_INTR3_GPIO28_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_INTR3_GPIO28_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_INTR3_GPIO28_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_INTR3_GPIO28_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO28_LEVEL_HIGH",
+"#define IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO28_LEVEL_LOW",
+"#define IO_BANK0_INTR3_GPIO28_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_INTR3_GPIO28_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_INTR3_GPIO28_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_INTR3_GPIO28_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO27_EDGE_HIGH",
+"#define IO_BANK0_INTR3_GPIO27_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_INTR3_GPIO27_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_INTR3_GPIO27_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_INTR3_GPIO27_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO27_EDGE_LOW",
+"#define IO_BANK0_INTR3_GPIO27_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_INTR3_GPIO27_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_INTR3_GPIO27_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_INTR3_GPIO27_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO27_LEVEL_HIGH",
+"#define IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO27_LEVEL_LOW",
+"#define IO_BANK0_INTR3_GPIO27_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_INTR3_GPIO27_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_INTR3_GPIO27_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_INTR3_GPIO27_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO26_EDGE_HIGH",
+"#define IO_BANK0_INTR3_GPIO26_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_INTR3_GPIO26_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_INTR3_GPIO26_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_INTR3_GPIO26_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO26_EDGE_LOW",
+"#define IO_BANK0_INTR3_GPIO26_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_INTR3_GPIO26_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_INTR3_GPIO26_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_INTR3_GPIO26_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO26_LEVEL_HIGH",
+"#define IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO26_LEVEL_LOW",
+"#define IO_BANK0_INTR3_GPIO26_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_INTR3_GPIO26_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_INTR3_GPIO26_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_INTR3_GPIO26_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO25_EDGE_HIGH",
+"#define IO_BANK0_INTR3_GPIO25_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_INTR3_GPIO25_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_INTR3_GPIO25_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_INTR3_GPIO25_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO25_EDGE_LOW",
+"#define IO_BANK0_INTR3_GPIO25_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_INTR3_GPIO25_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_INTR3_GPIO25_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_INTR3_GPIO25_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO25_LEVEL_HIGH",
+"#define IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO25_LEVEL_LOW",
+"#define IO_BANK0_INTR3_GPIO25_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_INTR3_GPIO25_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_INTR3_GPIO25_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_INTR3_GPIO25_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO24_EDGE_HIGH",
+"#define IO_BANK0_INTR3_GPIO24_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_INTR3_GPIO24_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_INTR3_GPIO24_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_INTR3_GPIO24_EDGE_HIGH_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO24_EDGE_LOW",
+"#define IO_BANK0_INTR3_GPIO24_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_INTR3_GPIO24_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_INTR3_GPIO24_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_INTR3_GPIO24_EDGE_LOW_ACCESS \"WC\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO24_LEVEL_HIGH",
+"#define IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_INTR3_GPIO24_LEVEL_LOW",
+"#define IO_BANK0_INTR3_GPIO24_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_INTR3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_INTR3_GPIO24_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_INTR3_GPIO24_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_INTR3_GPIO24_LEVEL_LOW_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC0_INTE0",
+"// Description : Interrupt Enable for proc0",
+"#define IO_BANK0_PROC0_INTE0_OFFSET _u(0x00000100)",
+"#define IO_BANK0_PROC0_INTE0_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC0_INTE0_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC0_INTE1",
+"// Description : Interrupt Enable for proc0",
+"#define IO_BANK0_PROC0_INTE1_OFFSET _u(0x00000104)",
+"#define IO_BANK0_PROC0_INTE1_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC0_INTE1_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC0_INTE2",
+"// Description : Interrupt Enable for proc0",
+"#define IO_BANK0_PROC0_INTE2_OFFSET _u(0x00000108)",
+"#define IO_BANK0_PROC0_INTE2_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC0_INTE2_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC0_INTE3",
+"// Description : Interrupt Enable for proc0",
+"#define IO_BANK0_PROC0_INTE3_OFFSET _u(0x0000010c)",
+"#define IO_BANK0_PROC0_INTE3_BITS   _u(0x00ffffff)",
+"#define IO_BANK0_PROC0_INTE3_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC0_INTF0",
+"// Description : Interrupt Force for proc0",
+"#define IO_BANK0_PROC0_INTF0_OFFSET _u(0x00000110)",
+"#define IO_BANK0_PROC0_INTF0_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC0_INTF0_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC0_INTF1",
+"// Description : Interrupt Force for proc0",
+"#define IO_BANK0_PROC0_INTF1_OFFSET _u(0x00000114)",
+"#define IO_BANK0_PROC0_INTF1_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC0_INTF1_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC0_INTF2",
+"// Description : Interrupt Force for proc0",
+"#define IO_BANK0_PROC0_INTF2_OFFSET _u(0x00000118)",
+"#define IO_BANK0_PROC0_INTF2_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC0_INTF2_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC0_INTF3",
+"// Description : Interrupt Force for proc0",
+"#define IO_BANK0_PROC0_INTF3_OFFSET _u(0x0000011c)",
+"#define IO_BANK0_PROC0_INTF3_BITS   _u(0x00ffffff)",
+"#define IO_BANK0_PROC0_INTF3_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC0_INTS0",
+"// Description : Interrupt status after masking & forcing for proc0",
+"#define IO_BANK0_PROC0_INTS0_OFFSET _u(0x00000120)",
+"#define IO_BANK0_PROC0_INTS0_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC0_INTS0_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC0_INTS1",
+"// Description : Interrupt status after masking & forcing for proc0",
+"#define IO_BANK0_PROC0_INTS1_OFFSET _u(0x00000124)",
+"#define IO_BANK0_PROC0_INTS1_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC0_INTS1_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC0_INTS2",
+"// Description : Interrupt status after masking & forcing for proc0",
+"#define IO_BANK0_PROC0_INTS2_OFFSET _u(0x00000128)",
+"#define IO_BANK0_PROC0_INTS2_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC0_INTS2_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC0_INTS3",
+"// Description : Interrupt status after masking & forcing for proc0",
+"#define IO_BANK0_PROC0_INTS3_OFFSET _u(0x0000012c)",
+"#define IO_BANK0_PROC0_INTS3_BITS   _u(0x00ffffff)",
+"#define IO_BANK0_PROC0_INTS3_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC1_INTE0",
+"// Description : Interrupt Enable for proc1",
+"#define IO_BANK0_PROC1_INTE0_OFFSET _u(0x00000130)",
+"#define IO_BANK0_PROC1_INTE0_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC1_INTE0_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC1_INTE1",
+"// Description : Interrupt Enable for proc1",
+"#define IO_BANK0_PROC1_INTE1_OFFSET _u(0x00000134)",
+"#define IO_BANK0_PROC1_INTE1_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC1_INTE1_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC1_INTE2",
+"// Description : Interrupt Enable for proc1",
+"#define IO_BANK0_PROC1_INTE2_OFFSET _u(0x00000138)",
+"#define IO_BANK0_PROC1_INTE2_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC1_INTE2_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC1_INTE3",
+"// Description : Interrupt Enable for proc1",
+"#define IO_BANK0_PROC1_INTE3_OFFSET _u(0x0000013c)",
+"#define IO_BANK0_PROC1_INTE3_BITS   _u(0x00ffffff)",
+"#define IO_BANK0_PROC1_INTE3_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC1_INTF0",
+"// Description : Interrupt Force for proc1",
+"#define IO_BANK0_PROC1_INTF0_OFFSET _u(0x00000140)",
+"#define IO_BANK0_PROC1_INTF0_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC1_INTF0_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC1_INTF1",
+"// Description : Interrupt Force for proc1",
+"#define IO_BANK0_PROC1_INTF1_OFFSET _u(0x00000144)",
+"#define IO_BANK0_PROC1_INTF1_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC1_INTF1_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC1_INTF2",
+"// Description : Interrupt Force for proc1",
+"#define IO_BANK0_PROC1_INTF2_OFFSET _u(0x00000148)",
+"#define IO_BANK0_PROC1_INTF2_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC1_INTF2_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC1_INTF3",
+"// Description : Interrupt Force for proc1",
+"#define IO_BANK0_PROC1_INTF3_OFFSET _u(0x0000014c)",
+"#define IO_BANK0_PROC1_INTF3_BITS   _u(0x00ffffff)",
+"#define IO_BANK0_PROC1_INTF3_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC1_INTS0",
+"// Description : Interrupt status after masking & forcing for proc1",
+"#define IO_BANK0_PROC1_INTS0_OFFSET _u(0x00000150)",
+"#define IO_BANK0_PROC1_INTS0_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC1_INTS0_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC1_INTS1",
+"// Description : Interrupt status after masking & forcing for proc1",
+"#define IO_BANK0_PROC1_INTS1_OFFSET _u(0x00000154)",
+"#define IO_BANK0_PROC1_INTS1_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC1_INTS1_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC1_INTS2",
+"// Description : Interrupt status after masking & forcing for proc1",
+"#define IO_BANK0_PROC1_INTS2_OFFSET _u(0x00000158)",
+"#define IO_BANK0_PROC1_INTS2_BITS   _u(0xffffffff)",
+"#define IO_BANK0_PROC1_INTS2_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_PROC1_INTS3",
+"// Description : Interrupt status after masking & forcing for proc1",
+"#define IO_BANK0_PROC1_INTS3_OFFSET _u(0x0000015c)",
+"#define IO_BANK0_PROC1_INTS3_BITS   _u(0x00ffffff)",
+"#define IO_BANK0_PROC1_INTS3_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_DORMANT_WAKE_INTE0",
+"// Description : Interrupt Enable for dormant_wake",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_OFFSET _u(0x00000160)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_BITS   _u(0xffffffff)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_DORMANT_WAKE_INTE1",
+"// Description : Interrupt Enable for dormant_wake",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_OFFSET _u(0x00000164)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_BITS   _u(0xffffffff)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_DORMANT_WAKE_INTE2",
+"// Description : Interrupt Enable for dormant_wake",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_OFFSET _u(0x00000168)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_BITS   _u(0xffffffff)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_DORMANT_WAKE_INTE3",
+"// Description : Interrupt Enable for dormant_wake",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_OFFSET _u(0x0000016c)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_BITS   _u(0x00ffffff)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_DORMANT_WAKE_INTF0",
+"// Description : Interrupt Force for dormant_wake",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_OFFSET _u(0x00000170)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_BITS   _u(0xffffffff)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_DORMANT_WAKE_INTF1",
+"// Description : Interrupt Force for dormant_wake",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_OFFSET _u(0x00000174)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_BITS   _u(0xffffffff)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_DORMANT_WAKE_INTF2",
+"// Description : Interrupt Force for dormant_wake",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_OFFSET _u(0x00000178)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_BITS   _u(0xffffffff)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_DORMANT_WAKE_INTF3",
+"// Description : Interrupt Force for dormant_wake",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_OFFSET _u(0x0000017c)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_BITS   _u(0x00ffffff)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_ACCESS \"RW\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_ACCESS \"RW\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_DORMANT_WAKE_INTS0",
+"// Description : Interrupt status after masking & forcing for dormant_wake",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_OFFSET _u(0x00000180)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_BITS   _u(0xffffffff)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_DORMANT_WAKE_INTS1",
+"// Description : Interrupt status after masking & forcing for dormant_wake",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_OFFSET _u(0x00000184)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_BITS   _u(0xffffffff)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_DORMANT_WAKE_INTS2",
+"// Description : Interrupt status after masking & forcing for dormant_wake",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_OFFSET _u(0x00000188)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_BITS   _u(0xffffffff)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_MSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_LSB    _u(31)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_MSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_LSB    _u(30)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_MSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_LSB    _u(29)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_MSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_LSB    _u(28)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_MSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_LSB    _u(27)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_MSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_LSB    _u(26)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_MSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_LSB    _u(25)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_MSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_LSB    _u(24)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_ACCESS \"RO\"",
+"// =============================================================================",
+"// Register    : IO_BANK0_DORMANT_WAKE_INTS3",
+"// Description : Interrupt status after masking & forcing for dormant_wake",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_OFFSET _u(0x0000018c)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_BITS   _u(0x00ffffff)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_RESET  _u(0x00000000)",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_MSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_LSB    _u(23)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_MSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_LSB    _u(22)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_MSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_LSB    _u(21)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_MSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_LSB    _u(20)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_MSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_LSB    _u(19)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_MSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_LSB    _u(18)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_MSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_LSB    _u(17)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_MSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_LSB    _u(16)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_MSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_LSB    _u(15)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_MSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_LSB    _u(14)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_MSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_LSB    _u(13)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_MSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_LSB    _u(12)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_MSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_LSB    _u(11)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_MSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_LSB    _u(10)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_MSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_LSB    _u(9)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_MSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_LSB    _u(8)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_MSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_LSB    _u(7)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_MSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_LSB    _u(6)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_MSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_LSB    _u(5)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_MSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_LSB    _u(4)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_MSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_LSB    _u(3)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_MSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_LSB    _u(2)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_MSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_LSB    _u(1)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_ACCESS \"RO\"",
+"// -----------------------------------------------------------------------------",
+"// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_RESET  _u(0x0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_MSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_LSB    _u(0)",
+"#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_ACCESS \"RO\"",
+"// =============================================================================",
+"#endif // _HARDWARE_REGS_IO_BANK0_H",
+"",
+"/*",
+" * Copyright (c) 2024 Raspberry Pi Ltd.",
+" *",
+" * SPDX-License-Identifier: BSD-3-Clause",
+" */",
+"",
+"#ifndef _HARDWARE_PLATFORM_DEFS_H",
+"#define _HARDWARE_PLATFORM_DEFS_H",
+"",
+"// This header is included from C and assembler - intended mostly for #defines; guard other stuff with #ifdef __ASSEMBLER__",
+"",
+"#ifndef _u",
+"#ifdef __ASSEMBLER__",
+"#define _u(x) x",
+"#else",
+"#define _u(x) x ## u",
+"#endif",
+"#endif",
+"",
+"#define NUM_CORES _u(2)",
+"#define NUM_DMA_CHANNELS _u(12)",
+"#define NUM_DMA_TIMERS _u(4)",
+"#define NUM_DMA_IRQS _u(2)",
+"#define NUM_IRQS _u(32)",
+"#define NUM_USER_IRQS _u(6)",
+"#define NUM_PIOS _u(2)",
+"#define NUM_PIO_STATE_MACHINES _u(4)",
+"#define NUM_PIO_IRQS _u(2)",
+"#define NUM_PWM_SLICES _u(8)",
+"#define NUM_PWM_IRQS _u(1)",
+"#define NUM_SPIN_LOCKS _u(32)",
+"#define NUM_UARTS _u(2)",
+"#define NUM_I2CS _u(2)",
+"#define NUM_SPIS _u(2)",
+"#define NUM_GENERIC_TIMERS _u(1)",
+"#define NUM_ALARMS _u(4)",
+"#define ADC_BASE_PIN _u(26)",
+"#define NUM_ADC_CHANNELS _u(5)",
+"#define NUM_RESETS _u(24)",
+"#define NUM_BANK0_GPIOS _u(30)",
+"#define NUM_QSPI_GPIOS _u(6)",
+"",
+"#define PIO_INSTRUCTION_COUNT _u(32)",
+"",
+"#define USBCTRL_DPRAM_SIZE _u(4096)",
+"",
+"#define HAS_SIO_DIVIDER 1",
+"#define HAS_RP2040_RTC  1",
+"// PICO_CONFIG: XOSC_HZ, Crystal oscillator frequency in Hz, type=int, default=12000000, advanced=true, group=hardware_base",
+"// NOTE:  The system and USB clocks are generated from the frequency using two PLLs.",
+"// If you override this define, or SYS_CLK_HZ/USB_CLK_HZ below, you will *also* need to add your own adjusted PLL set-up defines to",
+"// override the defaults which live in src/rp2_common/hardware_clocks/include/hardware/clocks.h",
+"// Please see the comments there about calculating the new PLL setting values.",
+"#ifndef XOSC_HZ",
+"#ifdef XOSC_KHZ",
+"#define XOSC_HZ ((XOSC_KHZ) * _u(1000))",
+"#elif defined(XOSC_MHZ)",
+"#define XOSC_HZ ((XOSC_MHZ) * _u(1000000))",
+"#else",
+"#define XOSC_HZ _u(12000000)",
+"#endif",
+"#endif",
+"",
+"// PICO_CONFIG: SYS_CLK_HZ, System operating frequency in Hz, type=int, default=125000000, advanced=true, group=hardware_base",
+"#ifndef SYS_CLK_HZ",
+"#ifdef SYS_CLK_KHZ",
+"#define SYS_CLK_HZ ((SYS_CLK_KHZ) * _u(1000))",
+"#elif defined(SYS_CLK_MHZ)",
+"#define SYS_CLK_HZ ((SYS_CLK_MHZ) * _u(1000000))",
+"#else",
+"#define SYS_CLK_HZ _u(125000000)",
+"#endif",
+"#endif",
+"",
+"// PICO_CONFIG: USB_CLK_HZ, USB clock frequency. Must be 48MHz for the USB interface to operate correctly, type=int, default=48000000, advanced=true, group=hardware_base",
+"#ifndef USB_CLK_HZ",
+"#ifdef USB_CLK_KHZ",
+"#define USB_CLK_HZ ((USB_CLK_KHZ) * _u(1000))",
+"#elif defined(USB_CLK_MHZ)",
+"#define USB_CLK_HZ ((USB_CLK_MHZ) * _u(1000000))",
+"#else",
+"#define USB_CLK_HZ _u(48000000)",
+"#endif",
+"#endif",
+"",
+"// For backwards compatibility define XOSC_KHZ if the frequency is indeed an integer number of Khz.",
+"#if defined(XOSC_HZ) && !defined(XOSC_KHZ) && (XOSC_HZ % 1000 == 0)",
+"#define XOSC_KHZ (XOSC_HZ / 1000)",
+"#endif",
+"",
+"// For backwards compatibility define XOSC_MHZ if the frequency is indeed an integer number of Mhz.",
+"#if defined(XOSC_KHZ) && !defined(XOSC_MHZ) && (XOSC_KHZ % 1000 == 0)",
+"#define XOSC_MHZ (XOSC_KHZ / 1000)",
+"#endif",
+"",
+"// For backwards compatibility define SYS_CLK_KHZ if the frequency is indeed an integer number of Khz.",
+"#if defined(SYS_CLK_HZ) && !defined(SYS_CLK_KHZ) && (SYS_CLK_HZ % 1000 == 0)",
+"#define SYS_CLK_KHZ (SYS_CLK_HZ / 1000)",
+"#endif",
+"",
+"// For backwards compatibility define SYS_CLK_MHZ if the frequency is indeed an integer number of Mhz.",
+"#if defined(SYS_CLK_KHZ) && !defined(SYS_CLK_MHZ) && (SYS_CLK_KHZ % 1000 == 0)",
+"#define SYS_CLK_MHZ (SYS_CLK_KHZ / 1000)",
+"#endif",
+"",
+"// For backwards compatibility define USB_CLK_KHZ if the frequency is indeed an integer number of Khz.",
+"#if defined(USB_CLK_HZ) && !defined(USB_CLK_KHZ) && (USB_CLK_HZ % 1000 == 0)",
+"#define USB_CLK_KHZ (USB_CLK_HZ / 1000)",
+"#endif",
+"",
+"// For backwards compatibility define USB_CLK_MHZ if the frequency is indeed an integer number of Mhz.",
+"#if defined(USB_CLK_KHZ) && !defined(USB_CLK_MHZ) && (USB_CLK_KHZ % 1000 == 0)",
+"#define USB_CLK_MHZ (USB_CLK_KHZ / 1000)",
+"#endif",
+"",
+"#define FIRST_USER_IRQ (NUM_IRQS - NUM_USER_IRQS)",
+"#define VTABLE_FIRST_IRQ 16",
+"",
+"#endif",
+"/*",
+" * graph.c",
+" *",
+" *  Created on: 2024/12/07",
+" *      Author: user",
+" */",
+"#include <tk/tkernel.h>",
+"",
+"BOOL g_area[128][64];",
+"",
+"#define rep(i, n) for (int i=0; i < (n); i++)",
+"//void *memset(void *s, int c, size_t n);",
+"",
+"void graph_init(void)",
+"{",
+"	memset(g_area, FALSE, sizeof(g_area));",
+"}",
+"",
+"void graph_set(int x, int y, int xsize, int ysize, char* ptr)",
+"{",
+"	for (int i=x; i < x + xsize; i++) {",
+"		for (int j=y; j < y + ysize; j++) {",
+"			g_area[i][j] = ptr[i + j * xsize] == 'O' ? TRUE:FALSE;",
+"		}",
+"	}",
+"}",
+"UB* graph_get(void)",
+"{",
+"	static UB b[128][8];",
+"    rep(i, 128) {",
+"        rep(j, 8) {",
+"        	b[i][j] = 0;",
+"        	rep(k, 8) {",
+"        		b[i][j] |= g_area[i][j*8+k] ? (1<<k):0;",
+"        	}",
+"",
+"        }",
+"    }",
+"	return b;",
+"}",
+"/*",
+" * graph.h",
+" *",
+" *  Created on: 2024/12/07",
+" *      Author: user",
+" */",
+"",
+"#ifndef APP_PROGRAM_GRAPH_H_",
+"#define APP_PROGRAM_GRAPH_H_",
+"",
+"",
+"",
+"#endif /* APP_PROGRAM_GRAPH_H_ */",
+"/*",
+" * ole.c",
+" *",
+" *  Created on: 2024/12/07",
+" *      Author: user",
+" */",
+"#include <tk/tkernel.h>",
+"#include <tk/device.h>		// デバイスドライバ定義ファイル",
+"#include <bsp/libbsp.h>",
+"#include <stdint.h>",
+"#include \"ole.h\"",
+"#include \"font.h\"",
+"",
+"#define S_ADR	0x3c	// ① I/OデバイスのI2Cアドレス定義",
+"#define CNTLB 0x80 // continuous bit",
+"#define D_DATA   0x40  // DATA bit",
+"void *memset(void *s, int c, size_t n);",
+"",
+"static ID	dd_i2c;",
+"static ER	err;",
+"static SZ	asz;",
+"",
+"ER ole_snd_cmd(UB* snd_data, UB len)",
+"{",
+"	UB w_data[100];",
+"    int cnt = 0;",
+"	for (int i=0; i < len; i++){",
+"    	w_data[cnt++] = CNTLB;",
+"    	w_data[cnt++] = snd_data[i];",
+"    }",
+"	return tk_swri_dev(dd_i2c, S_ADR, w_data, cnt, &asz);",
+"}",
+"void ole_init(void)",
+"{",
+"	//HW　I2C0 GP8, GP9 kernel/sysdepend/pico_rp2040/hw_setting.h を参照",
+"	dd_i2c = tk_opn_dev((UB*)\"iica\", TD_UPDATE);		// デバイスのオープン",
+"	tk_slp_tsk(1); // これが無い場合：「開発環境からは正常起動するが、USB接続のみ時はI2CでSlaveからNACKが帰る」。",
+"",
+"	UB	height=64, width = 128;",
+"	//初期化 data sheet Figure 2 : Software Initialization Flow Chart",
+"	//https://analogicintelligence.blogspot.com/2019/03/mycropythonoled.html",
+"	//https://analogicintelligence.blogspot.com/2019/04/mycropythonoled.html",
+"	UB	snd_data[] = { // 初期化送信データ",
+"	        SET_DISP, // set  display off",
+"	        // timing and driving scheme",
+"	        SET_DISP_CLK_DIV,",
+"	        0x80, // reset",
+"	        SET_MUX_RATIO,",
+"	        height - 1, // COM0 to 63",
+"	        SET_DISP_OFFSET,",
+"	        0x00, //mapping of the display start line to one of COM0~COM63",
+"	        // resolution and layout",
+"	        SET_DISP_START_LINE, //start line is COM0",
+"	        // charge pump",
+"	        SET_CHARGE_PUMP, // 0x14で有効(必須)",
+"	        0 ? 0x10:0x14,					//external vcc",
+"	        SET_SEG_REMAP | 0x1,        // column addr 127 mapped to SEG0",
+"			SET_COM_OUT_DIR | 0x8,			// remapped mode. Scan from	COM[N-1] to COM0",
+"	        SET_COM_PIN_CFG,",
+"	        width>2*height?0x02:0x12,",
+"	        // display",
+"	        SET_CONTRAST,",
+"	        0x7f,",
+"			SET_PRECHARGE,",
+"	        0 ? 0x22:0xF1,					//external vcc",
+"	        SET_VCOM_DESEL,",
+"	        0x40,                           //0x30 or 0x40?",
+"			SET_ENTIRE_ON,                  // output follows RAM contents",
+"	        SET_NORM_INV,                   // set normal display not inverted",
+"			SET_DISP | 0x01, // display on",
+"	        // address setting",
+"			SET_MEM_ADDR,",
+"	        0x00,  // horizontal",
+"	};",
+"	ole_snd_cmd(snd_data, sizeof(snd_data));",
+"}",
+"ER ole_scroll_vh_r(BOOL right, UB spage, UB epage, UB step, UB offset)",
+"{",
+"	UB cmd[] ={",
+"			0x2e, //deactivate scrolling",
+"			right ? 0x29:0x2a,",
+"			0x0, //dummy",
+"			spage,",
+"			step,",
+"			epage,",
+"			offset,",
+"			0x2f // activate scrolling",
+"	};",
+"	return ole_snd_cmd(cmd, sizeof(cmd));",
+"}",
+"ER ole_scroll_h_r(BOOL right, UB spage, UB epage, UB step)",
+"{",
+"	UB cmd[] ={",
+"			0x2e, //deactivate scrolling",
+"			right ? 0x26:0x27,",
+"			0x0, //dummy",
+"			spage,",
+"			step,",
+"			epage,",
+"			0x00,",
+"			0xff,",
+"			0x2f // activate scrolling",
+"	};",
+"	return ole_snd_cmd(cmd, sizeof(cmd));",
+"}",
+"void ole_clear(UB ptn)",
+"{",
+"	tk_slp_tsk(1); // ゴミが入る場合があるので待ちを入れる。",
+"	//画面 data",
+"	UB d_data[64+1];//display data　フルサイズ：128*8まで繰り返し",
+"    memset(d_data, ptn, sizeof(d_data));",
+"    d_data[0] = D_DATA;",
+"    for (int i=0; i<16; i++) {",
+"    	err = tk_swri_dev(dd_i2c, S_ADR, d_data, sizeof(d_data), &asz);",
+"    }",
+"}",
+"void ole_clear_size(UB ptn, UW len)",
+"{",
+"	tk_slp_tsk(1); // ゴミが入る場合があるので待ちを入れる。",
+"	//画面 data",
+"	UB d_data[64+1];//display data　フルサイズ：128*8まで繰り返し",
+"    memset(d_data, ptn, sizeof(d_data));",
+"    d_data[0] = D_DATA;",
+"    UW remain = 128*16 - len;",
+"    while(remain > 0) {",
+"    	int snd_len = (remain >= 64) ? 64: remain % 64;",
+"    	err = tk_swri_dev(dd_i2c, S_ADR, d_data, snd_len + 1, &asz);",
+"    	remain -= snd_len;",
+"    }",
+"}",
+"void ole_set_area(UB x1, UB x2, UB y1, UB y2)",
+"{",
+"    //area setting",
+"    UB area[] = {",
+"    	    SET_COL_ADDR,",
+"			x1,",
+"			x2,",
+"    	    SET_PAGE_ADDR,",
+"			y1,",
+"			y2",
+"    };",
+"	ole_snd_cmd(area, sizeof(area));",
+"}",
+"void ole_prt(char* c, UB len)",
+"{",
+"	static UB d_data[96+1]; // less than 100(DEVCNF_I2C_MAX_SDATSZ)",
+"    for (int k=0; k < len /16 +1; k++) {",
+"       memset(d_data, 0x00, sizeof(d_data));",
+"       int cnt = 0;",
+"       d_data[cnt++] = 0x40;",
+"    	for (int i=0; i < 16; i++){",
+"    		if (k*16+i > len - 1) break;",
+"    		int col = c[i+k*16] - font_prm[3];",
+"    		if (col < 0) col = 0;",
+"    		for (int j=0; j<5; j++){",
+"    			d_data[cnt++] = font_8x5[col*5+j];",
+"    		}",
+"    		d_data[cnt++] = 0x0; //6列目 文字の間",
+"    	}",
+"    	err = tk_swri_dev(dd_i2c, S_ADR, d_data, cnt, &asz);",
+"    }",
+"}",
+"/*",
+" * ole.h",
+" *",
+" *  Created on: 2024/12/07",
+" *      Author: user",
+" */",
+"#include \"ssd1306_ini.h\"",
+"",
+"#ifndef APP_PROGRAM_OLE_H_",
+"#define APP_PROGRAM_OLE_H_",
+"",
+"ER ole_snd_cmd(UB* snd_data, UB len);",
+"void ole_init(void);",
+"ER ole_scroll_vh_r(BOOL right, UB spage, UB epage, UB step, UB offset);",
+"ER ole_scroll_h_r(BOOL right, UB spage, UB epage, UB step);",
+"void ole_clear(UB ptn);",
+"void ole_clear_size(UB ptn, UW len);",
+"void ole_set_area(UB x1, UB x2, UB y1, UB y2);",
+"void ole_prt(char* c, UB len);",
+"",
+"#endif /* APP_PROGRAM_OLE_H_ */",
+"// https://raw.githubusercontent.com/daschr/pico-ssd1306/refs/heads/main/ssd1306.h",
+"/*",
+"MIT License",
+"",
+"Copyright (c) 2021 David Schramm",
+"",
+"Permission is hereby granted, free of charge, to any person obtaining a copy",
+"of this software and associated documentation files (the \"Software\"), to deal",
+"in the Software without restriction, including without limitation the rights",
+"to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
+"copies of the Software, and to permit persons to whom the Software is",
+"furnished to do so, subject to the following conditions:",
+"",
+"The above copyright notice and this permission notice shall be included in all",
+"copies or substantial portions of the Software.",
+"",
+"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
+"IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
+"FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
+"AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
+"LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
+"OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
+"SOFTWARE.",
+"*/",
+"",
+"/**",
+"* @file ssd1306.h",
+"*",
+"* simple driver for ssd1306 displays",
+"*/",
+"",
+"#ifndef _inc_ssd1306",
+"#define _inc_ssd1306",
+"//#include <pico/stdlib.h>",
+"//#include <hardware/i2c.h>",
+"",
+"/**",
+"*	@brief defines commands used in ssd1306",
+"*/",
+"typedef enum {",
+"    SET_CONTRAST = 0x81,",
+"    SET_ENTIRE_ON = 0xA4,",
+"    SET_NORM_INV = 0xA6,",
+"    SET_DISP = 0xAE,",
+"    SET_MEM_ADDR = 0x20,",
+"    SET_COL_ADDR = 0x21,",
+"    SET_PAGE_ADDR = 0x22,",
+"    SET_DISP_START_LINE = 0x40,",
+"    SET_SEG_REMAP = 0xA0,",
+"    SET_MUX_RATIO = 0xA8,",
+"    SET_COM_OUT_DIR = 0xC0,",
+"    SET_DISP_OFFSET = 0xD3,",
+"    SET_COM_PIN_CFG = 0xDA,",
+"    SET_DISP_CLK_DIV = 0xD5,",
+"    SET_PRECHARGE = 0xD9,",
+"    SET_VCOM_DESEL = 0xDB,",
+"    SET_CHARGE_PUMP = 0x8D",
+"} ssd1306_command_t;",
+"",
+"#endif",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2020-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	config_device.h",
+" *	Device configuration definition",
+" */",
+"",
+"#ifndef	__DEV_CONFIG_H__",
+"#define	__DEV_CONFIG_H__",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/* Device usage settings",
+" *	1: Use   0: Do not use",
+" */",
+"",
+"#define DEVCNF_USE_SER		1		// Serial communication device ",
+"#define DEVCNF_USE_ADC		1		// A/D conversion device",
+"#define DEVCNF_USE_IIC		1		// I2C communication device",
+"#define DEVCNF_USE_GPIO		1		// PIO communication device",
+"",
+"#endif	/* __DEV_CONFIG_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	config_func.h",
+" *	User Configuration Definition for function",
+" */",
+"",
+"#ifndef _CONFIG_FUNC_H_",
+"#define _CONFIG_FUNC_H_",
+"",
+"#define USE_SEMAPHORE		(1)",
+"#define	USE_MUTEX		(1)",
+"#define	USE_EVENTFLAG		(1)",
+"#define	USE_MAILBOX		(1)",
+"#define	USE_MESSAGEBUFFER	(1)",
+"#define USE_RENDEZVOUS		(1)",
+"#define USE_MEMORYPOOL		(1)",
+"#define	USE_FIX_MEMORYPOOL	(1)",
+"#define	USE_TIMEMANAGEMENT	(1)",
+"#define	USE_CYCLICHANDLER	(1)",
+"#define USE_ALARMHANDLER	(1)",
+"#define USE_DEVICE		(1)",
+"#define USE_FAST_LOCK		(1)",
+"#define USE_MULTI_LOCK		(1)",
+"",
+"/* Task management */",
+"#define USE_FUNC_TK_DEL_TSK",
+"#define USE_FUNC_TK_EXT_TSK",
+"#define USE_FUNC_TK_EXD_TSK",
+"#define USE_FUNC_TK_TER_TSK",
+"#define USE_FUNC_TK_CHG_PRI",
+"#define USE_FUNC_TK_REL_WAI",
+"#define USE_FUNC_TK_GET_REG",
+"#define USE_FUNC_TK_SET_REG",
+"#define USE_FUNC_TK_GET_CPR",
+"#define USE_FUNC_TK_SET_CPR",
+"#define USE_FUNC_TK_REF_TSK",
+"#define USE_FUNC_TK_SUS_TSK",
+"#define USE_FUNC_TK_RSM_TSK",
+"#define USE_FUNC_TK_FRSM_TSK",
+"#define USE_FUNC_TK_SLP_TSK",
+"#define USE_FUNC_TK_WUP_TSK",
+"#define USE_FUNC_TK_CAN_WUP",
+"#define USE_FUNC_TK_DLY_TSK",
+"#define USE_FUNC_TD_LST_TSK",
+"#define USE_FUNC_TD_REF_TSK",
+"#define USE_FUNC_TD_INF_TSK",
+"#define USE_FUNC_TD_GET_REG",
+"#define USE_FUNC_TD_SET_REG",
+"",
+"/* Semaphore management API */",
+"#define USE_FUNC_TK_DEL_SEM",
+"#define USE_FUNC_TK_REF_SEM",
+"#define USE_FUNC_TD_LST_SEM",
+"#define USE_FUNC_TD_REF_SEM",
+"#define USE_FUNC_TD_SEM_QUE",
+"",
+"/* Mutex management API */",
+"#define USE_FUNC_TK_DEL_MTX",
+"#define USE_FUNC_TK_REF_MTX",
+"#define USE_FUNC_TD_LST_MTX",
+"#define USE_FUNC_TD_REF_MTX",
+"#define USE_FUNC_TD_MTX_QUE",
+"",
+"/* Event flag management API */",
+"#define USE_FUNC_TK_DEL_FLG",
+"#define USE_FUNC_TK_REF_FLG",
+"#define USE_FUNC_TD_LST_FLG",
+"#define USE_FUNC_TD_REF_FLG",
+"#define USE_FUNC_TD_FLG_QUE",
+"",
+"/* Mailbox management API */",
+"#define USE_FUNC_TK_DEL_MBX",
+"#define USE_FUNC_TK_REF_MBX",
+"#define USE_FUNC_TD_LST_MBX",
+"#define USE_FUNC_TD_REF_MBX",
+"#define USE_FUNC_TD_MBX_QUE",
+"",
+"/* Messagebuffer management API */",
+"#define USE_FUNC_TK_DEL_MBF",
+"#define USE_FUNC_TK_REF_MBF",
+"#define USE_FUNC_TD_LST_MBF",
+"#define USE_FUNC_TD_REF_MBF",
+"#define USE_FUNC_TD_SMBF_QUE",
+"#define USE_FUNC_TD_RMBF_QUE",
+"",
+"/* Rendezvous management API (Legacy API) */",
+"#define USE_FUNC_TK_DEL_POR",
+"#define USE_FUNC_TK_FWD_POR",
+"#define USE_FUNC_TK_REF_POR",
+"#define USE_FUNC_TD_LST_POR",
+"#define USE_FUNC_TD_REF_POR",
+"#define USE_FUNC_TD_CAL_QUE",
+"#define USE_FUNC_TD_ACP_QUE",
+"",
+"/* Memory pool management API */",
+"#define USE_FUNC_TK_DEL_MPL",
+"#define USE_FUNC_TK_REF_MPL",
+"#define USE_FUNC_TD_LST_MPL",
+"#define USE_FUNC_TD_REF_MPL",
+"#define USE_FUNC_TD_MPL_QUE",
+"",
+"/* Fix-Memory Pool management API */",
+"#define USE_FUNC_TK_DEL_MPF",
+"#define USE_FUNC_TK_REF_MPF",
+"#define USE_FUNC_TD_LST_MPF",
+"#define USE_FUNC_TD_REF_MPF",
+"#define USE_FUNC_TD_MPF_QUE",
+"",
+"/* Time management API */",
+"#define USE_FUNC_TK_SET_UTC",
+"#define USE_FUNC_TK_GET_UTC",
+"#define USE_FUNC_TK_SET_TIM",
+"#define USE_FUNC_TK_GET_TIM",
+"#define USE_FUNC_TK_GET_OTM",
+"#define USE_FUNC_TD_GET_TIM",
+"#define USE_FUNC_TD_GET_OTM",
+"",
+"/* Cyclic handler management API */",
+"#define USE_FUNC_TK_DEL_CYC",
+"#define USE_FUNC_TK_STA_CYC",
+"#define USE_FUNC_TK_STP_CYC",
+"#define USE_FUNC_TK_REF_CYC",
+"#define USE_FUNC_TD_LST_CYC",
+"#define USE_FUNC_TD_REF_CYC",
+"",
+"/* Alarm handler management API */",
+"#define USE_FUNC_TK_DEL_ALM",
+"#define USE_FUNC_TK_STP_ALM",
+"#define USE_FUNC_TK_REF_ALM",
+"#define USE_FUNC_TD_LST_ALM",
+"#define USE_FUNC_TD_REF_ALM",
+"",
+"/* System status management API */",
+"#define USE_FUNC_TK_ROT_RDQ",
+"#define USE_FUNC_TK_GET_TID",
+"#define USE_FUNC_TK_DIS_DSP",
+"#define USE_FUNC_TK_ENA_DSP",
+"#define USE_FUNC_TK_REF_SYS",
+"#define USE_FUNC_TK_REF_VER",
+"#define USE_FUNC_TD_REF_SYS",
+"#define USE_FUNC_TD_RDY_QUE",
+"",
+"#endif /* _CONFIG_FUNC_H_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2006-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/05.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	config.h",
+" *	User Configuration Definition",
+" */",
+"",
+"#ifndef __TK_CONFIG__",
+"#define __TK_CONFIG__",
+"",
+"/*---------------------------------------------------------------------- */",
+"/*  Target Name",
+"	Define the system target name. Alternatively, define the target name ",
+"	in the development environment.",
+" */",
+"//#define _IOTE_M367_",
+"//#define _IOTE_RX231_",
+"//#define _IOTE_STM32L4_",
+"//#define _IOTE_RZA2M_",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* SYSCONF : micro T-Kernel system configuration",
+" */",
+"",
+"#define	CNF_SYSTEMAREA_TOP	0	/* 0: Use system default address */",
+"#define CNF_SYSTEMAREA_END	0	/* 0: Use system default address */",
+"",
+"#define	CNF_MAX_TSKPRI		32	/* Task Max priority */",
+"",
+"#define CNF_TIMER_PERIOD	10	/* System timer period */",
+"",
+"/* Maximum number of kernel objects */",
+"#define CNF_MAX_TSKID		32	/* Task */",
+"#define CNF_MAX_SEMID		16	/* Semaphore */",
+"#define CNF_MAX_FLGID		16	/* Event flag */",
+"#define CNF_MAX_MBXID		4	/* Mailbox*/",
+"#define CNF_MAX_MTXID		4	/* Mutex */",
+"#define CNF_MAX_MBFID		4	/* Message buffer */",
+"#define CNF_MAX_MPLID		4	/* Memory pool */",
+"#define CNF_MAX_MPFID		4	/* Fixed size memory pool */",
+"#define CNF_MAX_CYCID		4	/* Cyclic handler */",
+"#define CNF_MAX_ALMID		4	/* Alarm handler */",
+"",
+"/* Device configuration */",
+"#define CNF_MAX_REGDEV		(8)	/* Max registered device */",
+"#define CNF_MAX_OPNDEV		(16)	/* Max open device */",
+"#define CNF_MAX_REQDEV		(16)	/* Max request device */",
+"#define CNF_DEVT_MBFSZ0		(-1)	/* message buffer size for event notification */",
+"#define CNF_DEVT_MBFSZ1		(-1)	/* message max size for event notification */",
+"",
+"/* Version Number */",
+"#define CNF_VER_MAKER		0",
+"#define CNF_VER_PRID		0",
+"#define CNF_VER_PRVER		3",
+"#define CNF_VER_PRNO1		0",
+"#define CNF_VER_PRNO2		0",
+"#define CNF_VER_PRNO3		0",
+"#define CNF_VER_PRNO4		0",
+"",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* Backwards compatible api support ",
+" *      micro T-Kernel2.0 API support (Rendezvous)",
+" */",
+"#define USE_LEGACY_API		(0)	/* 1: Valid  0: Invalid */",
+"#define CNF_MAX_PORID		(0)	/* Maximum number of Rendezvous */",
+"",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* Stack size definition",
+" */",
+"#define CNF_EXC_STACK_SIZE	(2048)	/* Exception stack size */",
+"#define	CNF_TMP_STACK_SIZE	(256)	/* Temporary stack size */",
+"",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* System function selection",
+" *  1: Use function.  0: No use function.",
+" */",
+"#define USE_NOINIT		(0)	/* Use zero-clear bss section */",
+"#define USE_IMALLOC		(1)	/* Use dynamic memory allocation */",
+"#define USE_SHUTDOWN		(1)	/* Use System shutdown */",
+"#define USE_STATIC_IVT		(0)	/* Use static interrupt vector table */",
+"",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* Check API parameter",
+" *   1: Check parameter  0: Do not check parameter",
+" */",
+"#define CHK_NOSPT		(1)	/* Check unsupported function (E_NOSPT) */",
+"#define CHK_RSATR		(1)	/* Check reservation attribute error (E_RSATR) */",
+"#define CHK_PAR			(1)	/* Check parameter (E_PAR) */",
+"#define CHK_ID			(1)	/* Check object ID range (E_ID) */",
+"#define CHK_OACV		(1)	/* Check Object Access Violation (E_OACV) */",
+"#define CHK_CTX			(1)	/* Check whether task-independent part is running (E_CTX) */",
+"#define CHK_CTX1		(1)	/* Check dispatch disable part */",
+"#define CHK_CTX2		(1)	/* Check task independent part */",
+"#define CHK_SELF		(1)	/* Check if its own task is specified (E_OBJ) */",
+"",
+"#define	CHK_TKERNEL_CONST	(1)	/* Check const-type parameter */",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* User initialization program (UserInit)",
+" *",
+" */",
+"#define	USE_USERINIT		(0)	/*  1: Use UserInit  0: Do not use UserInit */",
+"#define RI_USERINIT		(0)	/* UserInit start address */",
+"",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* Debugger support function",
+" *   1: Valid  0: Invalid",
+" */",
+"#define USE_DBGSPT		(0)	/* Use mT-Kernel/DS */",
+"#define USE_OBJECT_NAME		(0)	/* Use DS object name */",
+"",
+"#define OBJECT_NAME_LENGTH	(8)	/* DS Object name length */",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* Use T-Monitor Compatible API Library  & Message to terminal.",
+" *  1: Valid  0: Invalid",
+" */",
+"#define	USE_TMONITOR		(1)	/* T-Monitor API */",
+"#define USE_SYSTEM_MESSAGE	(1)	/* System Message */",
+"#define USE_EXCEPTION_DBG_MSG	(1)	/* Excepttion debug message */",
+"#define USE_TASK_DBG_MSG	(0)	/* Tsak debug message */",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* Use Co-Processor.",
+" *  1: Valid  0: Invalid",
+" */",
+"#define	USE_FPU			(0)	/* Use FPU */",
+"#define	USE_DSP			(0)	/* Use DSP */",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* Use Physical timer.",
+" *  1: Valid  0: Invalid",
+" */",
+"#define USE_PTMR		(0)	/* Use Physical timer */",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* Use Sample device driver.",
+" *  1: Valid  0: Invalid",
+" */",
+"#define USE_SDEV_DRV		(1)	/* Use Sample device driver */",
+"",
+"/*---------------------------------------------------------------------- */",
+"/*",
+" *	Use function Definition",
+" */",
+"#include \"config_func.h\"",
+"",
+"#endif /* __TK_CONFIG__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.04",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/05/17.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	config_tm.h",
+" *	T-Monitor Configuration Definition",
+" */",
+"",
+"#ifndef __TM_CONFIG_H__",
+"#define __TM_CONFIG_H__",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* Select a communication port",
+" *      Select the communication port used by T-Monitor.",
+" *         1: Valid  0: Invalid  (Only one of them is valid)",
+" */",
+"#define	TM_COM_SERIAL_DEV	(1)	/* Use serial communication device */",
+"#define	TM_COM_NO_DEV		(0)	/* Do not use communication port */",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* tm_printf() call setting",
+" *         1: Valid  0: Invalid",
+" */",
+"#define	USE_TM_PRINTF		(1)	/* Use tm_printf() & tm_sprintf() calls */",
+"#define	TM_OUTBUF_SZ		(0)	/* Output Buffer size in stack */",
+"",
+"#endif /* __TM_CONFIG_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"#include <sys/machine.h>",
+"#include <tk/tkernel.h>",
+"#include <tstdlib.h>",
+"",
+"#include \"adc.h\"",
+"#include \"../include/dev_def.h\"",
+"#if DEV_ADC_ENABLE",
+"/*",
+" *	adc.c",
+" *	A/D converter device driver ",
+"*/",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Device driver Control block",
+" */",
+"#if TK_SUPPORT_MEMLIB",
+"",
+"LOCAL T_ADC_DCB	*dev_adc_cb[DEV_ADC_UNITNM];",
+"#define		get_dcb_ptr(unit)	(dev_adc_cb[unit])",
+"#define		get_dcb_mem(unit,a)	(dev_adc_cb[unit]->a)",
+"",
+"#else",
+"",
+"LOCAL T_ADC_DCB	dev_adc_cb[DEV_ADC_UNITNM];",
+"#define		get_dcb_ptr(unit)	(&dev_adc_cb[unit])",
+"#define		get_dcb_mem(unit,a)	(dev_adc_cb[unit].a)",
+"",
+"#endif	/* TK_SUPPORT_MEMLIB */",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Attribute data control",
+" */",
+"LOCAL ER read_atr(T_ADC_DCB *p_dcb, T_DEVREQ *req)",
+"{",
+"	ER	err	= E_OK;",
+"",
+"	switch(req->start) {",
+"	case TDN_EVENT:			/* MBF ID for event notification */",
+"		if(req->size >= sizeof(ID)) {",
+"			*(ID*)req->buf = p_dcb->evtmbfid;",
+"		} else if(req->size != 0) {",
+"			err = E_PAR;",
+"			break;",
+"		}",
+"		req->asize = sizeof(ID);",
+"		break;",
+"	default:",
+"		err = E_PAR;",
+"		break;",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"LOCAL ER write_atr(T_ADC_DCB *p_dcb, T_DEVREQ *req)",
+"",
+"{",
+"	ER	err	= E_OK;",
+"",
+"	switch(req->start) {",
+"	case TDN_EVENT:			/* MBF ID for event notification */",
+"		if(req->size >= sizeof(ID)) {",
+"			p_dcb->evtmbfid = *(ID*)req->buf;",
+"		} else if(req->size != 0) {",
+"			err = E_PAR;",
+"			break;",
+"		}",
+"		req->asize = sizeof(ID);",
+"		break;",
+"	default:",
+"		err = E_PAR;",
+"		break;",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Device-specific data control",
+" */",
+"LOCAL ER read_data(T_ADC_DCB *p_dcb, T_DEVREQ *req)",
+"{",
+"	W	rtn;",
+"	ER	err = E_OK;",
+"",
+"	if(req->size) {",
+"		rtn = dev_adc_llctl( p_dcb->unit, LLD_ADC_READ, req->start, req->size, req->buf);",
+"		if(rtn > 0) {",
+"			req->asize = rtn;",
+"			if(req->size != rtn) err = E_IO;",
+"		} else {",
+"			err = (ER)rtn;",
+"		}",
+"	} else {",
+"		req->asize = dev_adc_llctl( p_dcb->unit, LLD_ADC_RSIZE, req->start, 0, 0);",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * mSDI I/F function",
+" */",
+"/*----------------------------------------------------------------------",
+" * Open device",
+" */",
+"ER dev_adc_openfn( ID devid, UINT omode, T_MSDI *msdi)",
+"{",
+"	T_ADC_DCB	*p_dcb;",
+"	ER		err;",
+"",
+"	p_dcb = (T_ADC_DCB*)(msdi->dmsdi.exinf);",
+"",
+"	/* Device Open operation */",
+"	p_dcb->omode = omode;",
+"	err = (ER)dev_adc_llctl( p_dcb->unit, LLD_ADC_OPEN, 0, 0, 0);",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Close Device",
+" */",
+"ER dev_adc_closefn( ID devid, UINT option, T_MSDI *msdi)",
+"{",
+"	T_ADC_DCB	*p_dcb;",
+"	ER		err;",
+"",
+"	p_dcb = (T_ADC_DCB*)(msdi->dmsdi.exinf);",
+"",
+"	/* Device Close operation */",
+"	err =(ER)dev_adc_llctl( p_dcb->unit, LLD_ADC_CLOSE, 0, 0, 0);",
+"	",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Read Device",
+" */",
+"ER dev_adc_readfn( T_DEVREQ *req, T_MSDI *p_msdi)",
+"{",
+"	T_ADC_DCB	*p_dcb;",
+"	ER		err;",
+"",
+"	p_dcb = (T_ADC_DCB*)(p_msdi->dmsdi.exinf);",
+"",
+"	if(req->start >= 0) {	// Device specific data",
+"		if( p_dcb->omode & TD_READ ) {",
+"			err = read_data( p_dcb, req);",
+"		} else {",
+"			err = E_OACV;",
+"		}",
+"	} else {		// Device attribute data",
+"		err = read_atr( p_dcb, req);",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Write Device",
+" */",
+"ER dev_adc_writefn( T_DEVREQ *req, T_MSDI *p_msdi)",
+"{",
+"	T_ADC_DCB	*p_dcb;",
+"	ER		err;",
+"",
+"	p_dcb = (T_ADC_DCB*)(p_msdi->dmsdi.exinf);",
+"",
+"	if(req->start >= 0) {	// Device specific data",
+"		err = E_PAR;",
+"	} else {		// Device attribute data",
+"		err = write_atr( p_dcb, req);",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Event Device",
+" */",
+"ER dev_adc_eventfn( INT evttyp, void *evtinf, T_MSDI *msdi)",
+"{",
+"	return E_NOSPT;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device driver initialization and registration",
+" */",
+"EXPORT ER dev_init_adc( UW unit )",
+"{",
+"	T_ADC_DCB	*p_dcb;",
+"	T_IDEV		idev;",
+"	T_MSDI		*p_msdi;",
+"	T_DMSDI		dmsdi;",
+"	ER		err;",
+"	INT		i;",
+"",
+"	if( unit >= DEV_ADC_UNITNM) return E_PAR;",
+"",
+"#if TK_SUPPORT_MEMLIB",
+"	p_dcb = (T_ADC_DCB*)Kmalloc(sizeof(T_ADC_DCB));",
+"	if( p_dcb == NULL) return E_NOMEM;",
+"	dev_adc_cb[unit]	= p_dcb;",
+"#else",
+"	p_dcb = &dev_adc_cb[unit];",
+"#endif	/* TK_SUPPORT_MEMLIB */",
+"",
+"	/* Device registration information */",
+"	dmsdi.exinf	= p_dcb;",
+"	dmsdi.drvatr	= 0;			/* Driver attributes */",
+"	dmsdi.devatr	= TDK_UNDEF;		/* Device attributes */",
+"	dmsdi.nsub	= 0;			/* Number of subunits */",
+"	dmsdi.blksz	= 1;			/* Unique data block size (-1 = unknown) */",
+"	dmsdi.openfn	= dev_adc_openfn;",
+"	dmsdi.closefn	= dev_adc_closefn;",
+"	dmsdi.readfn	= dev_adc_readfn;",
+"	dmsdi.writefn	= dev_adc_writefn;",
+"	dmsdi.eventfn	= dev_adc_eventfn;",
+"	",
+"	knl_strcpy( (char*)dmsdi.devnm, DEVCNF_ADC_DEVNAME);",
+"	i = knl_strlen(DEVCNF_ADC_DEVNAME);",
+"	dmsdi.devnm[i] = (UB)('a' + unit);",
+"	dmsdi.devnm[i+1] = 0;",
+"",
+"	err = msdi_def_dev( &dmsdi, &idev, &p_msdi);",
+"	if(err != E_OK) goto err_2;",
+"",
+"	p_dcb->unit	= unit;",
+"	p_dcb->evtmbfid = idev.evtmbfid;",
+"",
+"	/* Low-level device initialization */",
+"	err = (ER)dev_adc_llinit( get_dcb_ptr(unit));",
+"	if(err != E_OK) goto err_1;",
+"",
+"	return E_OK;",
+"",
+"err_1:",
+"	msdi_del_dev(p_msdi);",
+"err_2:",
+"	Kfree(p_dcb);",
+"	return err;",
+"}",
+"",
+"#endif	/* DEV_ADC_ENABLE */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	adc_cnf.h ",
+" *	A/D converter device driver configuration file",
+" */",
+"#ifndef	__DEV_ADC_CNF_H__",
+"#define	__DEV_ADC_CNF_H__",
+"",
+"#define	DEVCNF_ADC_DEVNAME	\"adc\"		/* Device name (\"adc\") */",
+"",
+"",
+"/*---------------------------------------------------------------------*/",
+"/* Hardware dependent definition",
+" */",
+"#define DEVDEF_ADC_CNF_PATH_(a)	#a",
+"#define DEVDEF_ADC_CNF_PATH(a)	DEVDEF_ADC_CNF_PATH_(a)",
+"#define DEVDEF_ADC_CNF_SYSDEP()	DEVDEF_ADC_CNF_PATH(sysdepend/TARGET_CPU_DIR/adc_cnf_sysdep.h)",
+"#include DEVDEF_ADC_CNF_SYSDEP()",
+"",
+"#endif		/* __DEV_ADC_CNF_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	adc.h",
+" *	A/D converter device driver ",
+" *	Driver local definition",
+"*/",
+"",
+"#ifndef	__DEV_ADC_H__",
+"#define	__DEV_ADC_H__",
+"",
+"#include \"../common/drvif/msdrvif.h\"",
+"#include \"../include/dev_adc.h\"",
+"#include \"adc_cnf.h\"",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Hardware dependent definition",
+" */",
+"#define DEVDEF_ADC_PATH_(a)	#a",
+"#define DEVDEF_ADC_PATH(a)	DEVDEF_ADC_PATH_(a)",
+"#define DEVDEF_ADC_SYSDEP()	DEVDEF_ADC_PATH(sysdepend/TARGET_CPU_DIR/adc_sysdep.h)",
+"#include DEVDEF_ADC_SYSDEP()",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Device driver Control block",
+" */",
+"typedef struct {",
+"	UW	unit;		/* Unit No. */",
+"	UINT	omode;		/* Open mode */",
+"",
+"	/* Attribute data */",
+"	ID	evtmbfid;	/* MBF ID for event notification */",
+"} T_ADC_DCB;",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Device driver low-level interface",
+" */",
+"",
+"/* The following functions are defined in the system-dependent part. */",
+"IMPORT W dev_adc_llctl( UW, INT, UW, UW, UW*);	/* Low-Level device control */",
+"IMPORT ER dev_adc_llinit( T_ADC_DCB*);		/* Low-level device initialization */",
+"",
+"/* Low-level device control command */",
+"typedef enum {",
+"	LLD_ADC_OPEN,",
+"	LLD_ADC_CLOSE,",
+"	LLD_ADC_READ,",
+"	LLD_ADC_RSIZE,",
+"} T_LLD_ADC_CMD;",
+"",
+"#endif		/* __DEV_ADC_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2022-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/05.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	adc_cnf_sysdep.h ",
+" *	A/D converter device driver configuration file",
+" *		for RP2040",
+" */",
+"#ifndef	__DEV_ADC_CNF_RP2040_H__",
+"#define	__DEV_ADC_CNF_RP2040_H__",
+"",
+"/* ",
+" * Release A/DC reset",
+" *	Enable when not performed in the OS initialization process.",
+" */",
+"#define	DEVCONF_ADC_REL_RESET	FALSE",
+"",
+"/*",
+" * Device control data",
+" */",
+"#define	ADC_DIV_INI		0	// Clock divider",
+"",
+"/* ",
+" * Initialize analog input pins",
+" *	Enable when not performed in the OS initialization process.",
+" */",
+"#define	DEVCONF_ADC_PIN_INIT_0	FALSE",
+"#define	DEVCONF_ADC_PIN_INIT_1	FALSE",
+"#define	DEVCONF_ADC_PIN_INIT_2	FALSE",
+"#define	DEVCONF_ADC_PIN_INIT_3	FALSE",
+"",
+"/* Interrupt t priority */",
+"#define	DEVCNF_ADC_INTPRI	2",
+"",
+"/* A/D conversion timeout time */",
+"#define	DEVCNF_ADC_TMOSCAN	1000",
+"",
+"#endif		/* __DEV_ADC_CNF_RP2040_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RP2040",
+"",
+"#include <tk/tkernel.h>",
+"#include <tm/tmonitor.h>",
+"",
+"#include \"../../adc.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_ADC_ENABLE",
+"/*",
+" *	dev_adc_rp2040.c",
+" *	A/D converter device driver",
+" *	System dependent processing for RP2040",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"LOCAL struct {",
+"	ID	wait_tskid;",
+"	UW	*buf;",
+"	SZ	asz;",
+"} ll_devcb;",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"void adc_inthdr( UINT intno)",
+"{",
+"	*ll_devcb.buf = in_w(ADC_FIFO) & 0x0FFF;",
+"	tk_wup_tsk(ll_devcb.wait_tskid);",
+"",
+"	ClearInt(intno);",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * A/D convert",
+" */",
+"LOCAL UW adc_convert( INT ch, INT size, UW *buf )",
+"{",
+"	ER	err;",
+"",
+"	if(ch<0 || ch>(ADC_CH_NUM-1)) return E_PAR;",
+"	if(size != 1) return E_PAR;",
+"",
+"	while((in_w(ADC_CS)&ADC_CS_READY)==0);",
+"",
+"	ll_devcb.wait_tskid = tk_get_tid();",
+"	ll_devcb.buf = buf;",
+"",
+"	out_w(ADC_INTE,1);					// Interrupt Enable",
+"	out_w(ADC_CS, ch<<ADC_CS_AINSEL_POS|ADC_CS_EN);",
+"	set_w(ADC_CS, ADC_CS_STRAT_ONCE);",
+"",
+"	err = tk_slp_tsk(DEVCNF_ADC_TMOSCAN);",
+"",
+"	return err;",
+"}",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * A/DC open",
+" */",
+"LOCAL ER adc_open(void)",
+"{",
+"	ER	err = E_OK;",
+"",
+"	out_w(ADC_DIV, ADC_DIV_INI);				// Clock divider",
+"",
+"	out_w(ADC_FCS, 1<<ADC_FCS_THRESH_POS | ADC_FCS_EN);	// Set FIFO",
+"	EnableInt(INTNO_ADC, DEVCNF_ADC_INTPRI);",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * A/DC close",
+" */",
+"LOCAL void adc_close(void)",
+"{",
+"	DisableInt(INTNO_ADC);",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT W dev_adc_llctl( UW unit, INT cmd, UW p1, UW p2, UW *pp)",
+"{",
+"	W	rtn	= (W)E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_ADC_OPEN:	/* Open　A/DC */",
+"		rtn = (W)adc_open();",
+"		break;",
+"",
+"	case LLD_ADC_CLOSE:	/* Close　A/DC */",
+"		adc_close();",
+"		break;",
+"	",
+"	case LLD_ADC_READ:	/* Read A/DC data */",
+"		rtn = adc_convert( p1, p2, pp);",
+"		break;",
+"	",
+"	case LLD_ADC_RSIZE:	/* Get read data size */",
+"		rtn = 1;",
+"		break;",
+"	}",
+"	",
+"	return rtn;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_adc_llinit( T_ADC_DCB *p_dcb)",
+"{",
+"	const T_DINT	dint = {",
+"		.intatr	= TA_HLNG,",
+"		.inthdr	= adc_inthdr",
+"	};",
+"",
+"	ER	err;",
+"",
+"/* Release A/DC reset */",
+"#if DEVCONF_ADC_REL_RESET",
+"	clr_w(RESETS_RESET, RESETS_RESET_ADC);	// Release reset",
+"#endif",
+"",
+"/* Initialize analog input pins */",
+"#if DEVCONF_ADC_PIN_INIT_0",
+"	out_w(GPIO_CTRL(26),GPIO_CTRL_FUNCSEL_NULL);",
+"	clr_w(GPIO(26), GPIO_IE|GPIO_PUE|GPIO_PDE);",
+"#endif",
+"",
+"#if DEVCONF_ADC_PIN_INIT_1",
+"	out_w(GPIO_CTRL(27),GPIO_CTRL_FUNCSEL_NULL);",
+"	clr_w(GPIO(27), GPIO_IE|GPIO_PUE|GPIO_PDE);",
+"#endif",
+"",
+"#if DEVCONF_ADC_PIN_INIT_2",
+"	out_w(GPIO_CTRL(28),GPIO_CTRL_FUNCSEL_NULL);",
+"	clr_w(GPIO(28), GPIO_IE|GPIO_PUE|GPIO_PDE);",
+"#endif",
+"",
+"#if DEVCONF_ADC_PIN_INIT_3",
+"	out_w(GPIO_CTRL(29),GPIO_CTRL_FUNCSEL_NULL);",
+"	clr_w(GPIO(29), GPIO_IE|GPIO_PUE|GPIO_PDE);",
+"#endif",
+"",
+"	/* Enable A/DC */",
+"	set_w(ADC_CS, ADC_CS_EN);",
+"	while(!(in_w(ADC_CS)&ADC_CS_READY));",
+"",
+"	err = tk_def_int( INTNO_ADC, &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_ADC_ENABLE */",
+"#endif		/* CPU_RP2040 */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	adc_sysdep.h",
+" *	A/D converter device driver",
+" *	System-dependent definition for RP2040",
+" */",
+"",
+"#ifndef	__DEV_ADC_RP2040_H__",
+"#define	__DEV_ADC_RP2040_H__",
+"",
+"#define	DEV_ADC_UNITNM	(1)	/* Number of devive units */",
+"",
+"/* NUmber of A/DC chanels */",
+"#define	ADC_CH_NUM	(5)",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * A/DC registers",
+" */",
+"",
+"#define ADC_BASE		(0x4004C000)",
+"",
+"#define	ADC_CS			(ADC_BASE+0x00)		// ADC Control and Status",
+"#define	ADC_RESULT		(ADC_BASE+0x04)		// Result of most recent ADC conversion",
+"#define	ADC_FCS			(ADC_BASE+0x08)		// FIFO control and status",
+"#define	ADC_FIFO		(ADC_BASE+0x0C)		// Conversion result FIFO",
+"#define	ADC_DIV			(ADC_BASE+0x10)		// Clock divider",
+"#define	ADC_INTR		(ADC_BASE+0x14)		// Raw Interrupts",
+"#define	ADC_INTE		(ADC_BASE+0x18)		// Interrupt Enable",
+"#define	ADC_INTF		(ADC_BASE+0x1C)		// Interrupt Force",
+"#define	ADC_INTS		(ADC_BASE+0x20)		// Interrupt status after masking & forcing",
+"",
+"#define	ADC_CS_EN		(1<<0)			// Power on ADC and enable its clock.",
+"#define	ADC_CS_TS_EN		(1<<1)			// Power on temperature sensor.",
+"#define	ADC_CS_STRAT_ONCE	(1<<2)			// Start a single conversion.",
+"#define	ADC_CS_START_MANY	(1<<3)			// Continuously perform conversions.",
+"#define	ADC_CS_READY		(1<<8)			// ADC is ready to start a new conversion.",
+"#define	ADC_CS_ERR		(1<<9)			// The most recent ADC conversion encountered an error.",
+"#define	ADC_CS_ERR_STICKY	(1<<10)			// Some past ADC conversion encountered an error.",
+"#define	ADC_CS_AINSEL		(0x00007000)		// Select analog mux input. Updated automatically in roundrobin mode.",
+"#define	ADC_CS_AINSEL_POS	12",
+"#define	ADC_CS_RROBIN		(0x001F0000)		// Round-robin sampling.",
+"",
+"#define ADC_FCS_THRESH		(0x0F000000)",
+"#define ADC_FCS_THRESH_POS	24",
+"#define ADC_FCS_LEVEL		(0x000F0000)",
+"#define ADC_FCS_EN		1",
+"/*",
+" * A/D converter interrupt number",
+"*/",
+"#define	INTNO_ADC		22",
+"",
+"#endif		/* __DEV_ADC_RP2040_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	adc_cnf_sysdep.h ",
+" *	A/D converter device driver configuration file",
+" *		for RX231",
+" */",
+"#ifndef	__DEV_ADC_CNF_RX231_H__",
+"#define	__DEV_ADC_CNF_RX231_H__",
+"",
+"/* Device initialization */",
+"#define DEVCONF_ADC_INIT_MSTP	FALSE		// Initialize module stop",
+"",
+"/* Device control data */",
+"/* Initial sampling rate (ADSSTR) */",
+"#define	DEVCNF_ADSSTR0_INI	6",
+"#define	DEVCNF_ADSSTR1_INI	6",
+"#define	DEVCNF_ADSSTR2_INI	6",
+"#define	DEVCNF_ADSSTR3_INI	6",
+"#define	DEVCNF_ADSSTR4_INI	6",
+"#define	DEVCNF_ADSSTR5_INI	6",
+"#define	DEVCNF_ADSSTR6_INI	6",
+"#define	DEVCNF_ADSSTR7_INI	6",
+"#define	DEVCNF_ADSSTRL_INI	6",
+"",
+"#define	DEVCNF_ADC_INTPRI	5	// Interrupt priority",
+"#define	DEVCNF_ADC_TMOSCAN	1000	// A/D conversion timeout time",
+"",
+"#endif		/* __DEV_ADC_CNF_RX231_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/08.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RX231",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../adc.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_ADC_ENABLE",
+"/*",
+" *	dev_adc_rx231.c",
+" *	A/D converter device driver",
+" *	System dependent processing for RX231",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"LOCAL struct {",
+"	ID	wait_tskid;",
+"} ll_devcb;",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"void adc_inthdr( UINT intno)",
+"{",
+"	ClearInt(intno);",
+"	if(intno != INTNO_S10ADI0) return;",
+"",
+"	if(ll_devcb.wait_tskid) {",
+"		tk_wup_tsk(ll_devcb.wait_tskid);",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * A/D convert",
+" */",
+"LOCAL UW adc_convert( INT start, INT size, UW *buf )",
+"{",
+"	INT	ch, end;",
+"	ER	err;",
+"",
+"	ll_devcb.wait_tskid = tk_get_tid();",
+"	tk_can_wup(TSK_SELF);",
+"",
+"	if((start > 7 && start <16) || start > 31) return E_PAR;",
+"	if( start >= 16) start -= 8;",
+"	end = start + size -1;",
+"	if( end > 31) return (UW)E_PAR;",
+"",
+"	/* Set target channel */",
+"	for(ch = start; ch <= end; ch++) {",
+"		if(ch <= 7) {",
+"			*(UH*)(ADANSA0) |= (1<<ch);",
+"		} else {",
+"			*(UH*)(ADANSA1) |= (1<<(ch-8));",
+"		}",
+"	}",
+"",
+"	out_h(ADCSR, ADCSR_ADST | ADCSR_ADIE);	// Start Covert",
+"",
+"	err = tk_slp_tsk(DEVCNF_ADC_TMOSCAN);",
+"	if(err != E_OK) return (UW)err;",
+"",
+"	for(ch = start; ch <= end; ch++) {	/* Read data */",
+"		if(ch <= 7) {",
+"			*buf++ = (UW)in_h(ADDR(ch));",
+"		} else {",
+"			*buf++ = (UW)in_h(ADDR(ch+8));",
+"		}",
+"	}",
+"	return (UW)size;",
+"}",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT W dev_adc_llctl( UW unit, INT cmd, UW p1, UW p2, UW *pp)",
+"{",
+"	UW	rtn = (UW)E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_ADC_OPEN:	/* Open　A/DC */",
+"		out_h(ADANSA0,0);",
+"		out_h(ADANSA1,0);",
+"		EnableInt(INTNO_S10ADI0, DEVCNF_ADC_INTPRI);",
+"		break;",
+"",
+"	case LLD_ADC_CLOSE:	/* Close　A/DC */",
+"		DisableInt(INTNO_S10ADI0);",
+"		break;",
+"	",
+"	case LLD_ADC_READ:	/* Read A/DC data */",
+"		rtn = adc_convert(p1, p2, pp);",
+"		break;",
+"	",
+"	case LLD_ADC_RSIZE:	/* Get read data size */",
+"		if((p1 > 7 && p1 <16) || p1 > 31) return (UW)E_PAR;",
+"		rtn = ADC_CH_NUM - (p1<=7?p1:p1-8);",
+"		if(rtn < 0 ) rtn = 0;",
+"		break;",
+"",
+"	}",
+"	",
+"	return rtn;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_adc_llinit( T_ADC_DCB *p_dcb)",
+"{",
+"	const T_DINT	dint = {",
+"		.intatr	= TA_HLNG,",
+"		.inthdr	= adc_inthdr,",
+"	};",
+"	ER	err;",
+"",
+"#if DEVCONF_ADC_INIT_MSTP		// Initialize module stop",
+"	UINT	sts;",
+"",
+"	if(in_w(MSTPCRA) & (1<<17)) {",
+"		DI(sts);",
+"		out_h(SYSTEM_PRCR, 0xA502);	/* Disable Register Protect */",
+"		*(UW*)(MSTPCRA) &= ~(1<<17);	/* Release module stop */",
+"		out_h(SYSTEM_PRCR, 0xA500);	/* Enable Register protect */",
+"		EI(sts);",
+"	}",
+"#endif	/* DEVCONF_ADC_INIT_MSTP */",
+"",
+"	/* ADC device initialize */",
+"	out_h(ADCER, ADCER_INI);",
+"",
+"	out_h(ADSSTR(0), DEVCNF_ADSSTR0_INI);	// Set sampling rate",
+"	out_h(ADSSTR(1), DEVCNF_ADSSTR1_INI);",
+"	out_h(ADSSTR(2), DEVCNF_ADSSTR2_INI);",
+"	out_h(ADSSTR(3), DEVCNF_ADSSTR3_INI);",
+"	out_h(ADSSTR(4), DEVCNF_ADSSTR4_INI);",
+"	out_h(ADSSTR(5), DEVCNF_ADSSTR5_INI);",
+"	out_h(ADSSTR(6), DEVCNF_ADSSTR6_INI);",
+"	out_h(ADSSTR(7), DEVCNF_ADSSTR7_INI);",
+"	out_h(ADSSTRL, DEVCNF_ADSSTRL_INI);",
+"",
+"	/* Interrupt handler definition */",
+"	err = tk_def_int(INTNO_S10ADI0, &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_ADC_ENABLE */",
+"#endif		/* CPU_RX231 */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	dev_adc_sydep.h",
+" *	A/D converter device driver",
+" *	System-dependent definition for RX231",
+" */",
+"",
+"#ifndef	__DEV_ADC_RX231_H__",
+"#define	__DEV_ADC_RX231_H__",
+"",
+"#define	DEV_ADC_UNITNM	(1)	/* Number of devive units */",
+"#define	DEV_ADC_UNIT0	(0)",
+"",
+"#define ADC_CH_NUM	(24)		/* Number of A/DC chanels */",
+"",
+"/*",
+" * ADC registers",
+" */",
+"#define	ADCSR		(0x00089000)		/* A/D control reg. */",
+"#define	ADCSR_ADST	(1<<15)",
+"#define	ADCSR_ADIE	(1<<12)",
+"",
+"#define	ADCER		(0x0008900E)		/* A/D Control extension reg. */",
+"#define	ADCER_INI	(1<<5)			/* register initial value */",
+"",
+"",
+"#define	ADANSA0		(0x00089004)		/* A/D chanel select reg. A0*/",
+"#define	ADANSA1		(0x00089006)		/* A/D chanel select reg. A1*/",
+"#define	ADANSB0		(0x00089014)		/* A/D chanel select reg. B0*/",
+"#define	ADANSB1		(0x00089016)		/* A/D chanel select reg. B1*/",
+"",
+"#define	ADDR(c)		(0x00089020 + 2*c)	/* A/D Data reg. */",
+"",
+"/* A/D Sampling state reg. */",
+"#define	ADSSTRL		(0x000890DD)",
+"#define	ADSSTRT		(0x000890DE)",
+"#define	ADSSTRO		(0x000890DF)",
+"#define	ADSSTR(c)	(0x000890E0 + c)",
+"",
+"",
+"/*",
+" * A/D converter interrupt number",
+"*/",
+"#define	INTNO_S10ADI0	102",
+"",
+"",
+"#endif		/* __DEV_ADC_RX231_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	adc_cnf_sysdep.h ",
+" *	A/D converter device driver configuration file",
+" *		for RX65N",
+" */",
+"#ifndef	__DEV_ADC_CNF_RX65N_H__",
+"#define	__DEV_ADC_CNF_RX65N_H__",
+"",
+"/* Device initialization */",
+"#define DEVCONF_ADC_INIT_MSTP	FALSE		// Initialize module stop",
+"#define	DEVCONF_ADC_SET_PERI	TRUE		// Set Software Configurable Interrupt",
+"",
+"/* Device control data */",
+"/* Initial sampling rate (ADSSTR) */",
+"#define	DEVCNF_ADC0_ADSSTR0_INI		11",
+"#define	DEVCNF_ADC0_ADSSTR1_INI		11",
+"#define	DEVCNF_ADC0_ADSSTR2_INI		11",
+"#define	DEVCNF_ADC0_ADSSTR3_INI		11",
+"#define	DEVCNF_ADC0_ADSSTR4_INI		11",
+"#define	DEVCNF_ADC0_ADSSTR5_INI		11",
+"#define	DEVCNF_ADC0_ADSSTR6_INI		11",
+"#define	DEVCNF_ADC0_ADSSTR7_INI		11",
+"",
+"#define	DEVCNF_ADC1_ADSSTR0_INI		11",
+"#define	DEVCNF_ADC1_ADSSTR1_INI		11",
+"#define	DEVCNF_ADC1_ADSSTR2_INI		11",
+"#define	DEVCNF_ADC1_ADSSTR3_INI		11",
+"#define	DEVCNF_ADC1_ADSSTR4_INI		11",
+"#define	DEVCNF_ADC1_ADSSTR5_INI		11",
+"#define	DEVCNF_ADC1_ADSSTR6_INI		11",
+"#define	DEVCNF_ADC1_ADSSTR7_INI		11",
+"#define	DEVCNF_ADC1_ADSSTR8_INI		11",
+"#define	DEVCNF_ADC1_ADSSTR9_INI		11",
+"#define	DEVCNF_ADC1_ADSSTR10_INI	11",
+"#define	DEVCNF_ADC1_ADSSTR11_INI	11",
+"#define	DEVCNF_ADC1_ADSSTR12_INI	11",
+"#define	DEVCNF_ADC1_ADSSTR13_INI	11",
+"#define	DEVCNF_ADC1_ADSSTR14_INI	11",
+"#define	DEVCNF_ADC1_ADSSTR15_INI	11",
+"",
+"#define	DEVCNF_ADC1_ADSSTRL_INI		11",
+"#define	DEVCNF_ADC1_ADSSTRT_INI		11",
+"#define	DEVCNF_ADC1_ADSSTRO_INI		11",
+"",
+"/*",
+" * A/D converter interrupt number",
+" *	Can be set between INTB128 and INTB207",
+"*/",
+"#define	INTNO_S12ADI0		130",
+"#define	INTNO_S12ADI1		131",
+"",
+"#define	DEVCNF_ADC0_INTPRI	5	// Interrupt priority",
+"#define	DEVCNF_ADC1_INTPRI	5	// Interrupt priority",
+"",
+"#define	DEVCNF_ADC_TMOSCAN	1000	// A/D conversion timeout time",
+"",
+"#endif		/* __DEV_ADC_CNF_RX65N_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RX65N",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../adc.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_ADC_ENABLE",
+"/*",
+" *	dev_adc_rx65n.c",
+" *	A/D converter device driver",
+" *	System dependent processing for RX65N",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+"*/",
+"const LOCAL UW ba[DEV_ADC_UNITNM] = { ADC0_BASE, ADC1_BASE };",
+"",
+"#define	ADC_ADCSR(x)	(ba[x] + ADCx_ADCSR)		// A/DC control reg",
+"#define	ADC_ADANSA0(x)	(ba[x] + ADCx_ADANSA0)		// A/DC chanel select reg. A0",
+"#define	ADC_ADANSA1(x)	(ba[x] + ADCx_ADANSA1)		// A/DC chanel select reg. A1",
+"#define	ADC_ADCER(x)	(ba[x] + ADCx_ADCER)		// A/DC Control extension reg",
+"#define	ADC_ADANSB0(x)	(ba[x] + ADCx_ADANSB0)		// A/DC chanel select reg. B0",
+"#define	ADC_ADANSB1(x)	(ba[x] + ADCx_ADANSB1)		// A/DC chanel select reg. B1",
+"",
+"#define	ADC_ADDR(x,c)	(ba[x] + ADCx_ADDR(c))		//A/DC Data reg",
+"#define	ADC_ADSSTR(x,c)	(ba[x] + ADCx_ADSSTR(c))	//A/DC Sampling state reg",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"LOCAL struct {",
+"	ID	wait_tskid;",
+"	UINT	intno;",
+"} ll_devcb[DEV_ADC_UNITNM];",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"void adc_inthdr( UINT intno)",
+"{",
+"	UW	unit;",
+"",
+"	ClearInt(intno);",
+"	if(intno == INTNO_S12ADI0) unit = 0;",
+"	else if(intno == INTNO_S12ADI1) unit = 1;",
+"	else return ;",
+"",
+"	if(ll_devcb[unit].wait_tskid) {",
+"		tk_wup_tsk(ll_devcb[unit].wait_tskid);",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * A/D convert",
+" */",
+"LOCAL UW adc_convert( UW unit, INT start, INT size, UW *buf )",
+"{",
+"	INT	ch, end;",
+"	ER	err;",
+"",
+"	ll_devcb[unit].wait_tskid = tk_get_tid();",
+"	tk_can_wup(TSK_SELF);",
+"",
+"	if(unit == 0) {		// S12AD",
+"		if(start >= ADC_CH_NUM0) return (UW)E_PAR;",
+"		end = start + size -1;",
+"		if(end >= ADC_CH_NUM0) return (UW)E_PAR;",
+"",
+"		for(ch = start; ch <= end; ch++) {",
+"			*(UH*)(ADC_ADANSA0(0)) |= (1<<ch);",
+"		}",
+"	} else {		// S12AD1",
+"		if(start >= ADC_CH_NUM1) return (UW)E_PAR;",
+"		end = start + size -1;",
+"		if(end >= ADC_CH_NUM1) return (UW)E_PAR;",
+"",
+"		for(ch = start; ch <= end; ch++) {",
+"			if(ch <= 7) {",
+"				*(UH*)(ADC_ADANSA0(1)) |= (1<<ch);",
+"			} else {",
+"				*(UH*)(ADC_ADANSA1(1)) |= (1<<(ch-8));",
+"			}",
+"		}",
+"	}",
+"",
+"	out_h(ADC_ADCSR(unit), ADCSR_ADST | ADCSR_ADIE);	// Start Covert",
+"",
+"	err = tk_slp_tsk(DEVCNF_ADC_TMOSCAN);",
+"	if(err != E_OK) return (UW)err;",
+"",
+"	for(ch = start; ch <= end; ch++) {	/* Read data */",
+"		*buf++ = (UW)in_h(ADC_ADDR(unit, ch));",
+"	}",
+"	return (UW)size;",
+"}",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT W dev_adc_llctl( UW unit, INT cmd, UW p1, UW p2, UW *pp)",
+"{",
+"	UW	rtn = (UW)E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_ADC_OPEN:	/* Open A/DC */",
+"		out_h(ADC_ADANSA0(unit), 0);",
+"		if(unit == 1) {",
+"			out_h(ADC_ADANSA1(unit), 0);",
+"		}",
+"		EnableInt(ll_devcb[unit].intno, unit?DEVCNF_ADC1_INTPRI:DEVCNF_ADC0_INTPRI);",
+"		break;",
+"",
+"	case LLD_ADC_CLOSE:	/* Close　A/DC */",
+"		DisableInt(ll_devcb[unit].intno);",
+"		break;",
+"	",
+"	case LLD_ADC_READ:	/* Read A/DC data */",
+"		rtn = adc_convert(unit, p1, p2, pp);",
+"		break;",
+"	",
+"	case LLD_ADC_RSIZE:	/* Get read data size */",
+"		if((p1 > 7 && p1 <16) || p1 > 31) return (UW)E_PAR;",
+"		rtn = (unit?ADC_CH_NUM1:ADC_CH_NUM0) - (p1<=7?p1:p1-8);",
+"		if(rtn < 0 ) rtn = 0;",
+"		break;",
+"",
+"	}",
+"	",
+"	return rtn;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_adc_llinit( T_ADC_DCB *p_dcb)",
+"{",
+"	const T_DINT	dint = {",
+"		.intatr	= TA_HLNG,",
+"		.inthdr	= adc_inthdr,",
+"	};",
+"	UW	unit;",
+"	UINT	intno;",
+"	ER	err;",
+"",
+"	unit = p_dcb->unit;",
+"",
+"#if DEVCONF_ADC_INIT_MSTP		// Initialize module stop",
+"	UINT	sts;",
+"	UW	mstpa;",
+"",
+"	mstpa = (1<<19) | (1<<((unit)?16:17));",
+"	DI(sts);",
+"	out_h(SYSTEM_PRCR, 0xA502);	/* Disable Register Protect */",
+"	*(UW*)(MSTPCRA) &= ~mstpa;	/* Release module stop */",
+"	out_h(SYSTEM_PRCR, 0xA500);	/* Enable Register protect */",
+"	EI(sts);",
+"#endif	/* DEVCONF_ADC_INIT_MSTP */",
+"",
+"	/* ADC device initialize */",
+"	out_h(ADC_ADCER(unit), ADCER_INI);",
+"",
+"",
+"	/* Set sampling rate */",
+"	if(unit == 0) {",
+"		out_h(ADC_ADSSTR(0,0), DEVCNF_ADC0_ADSSTR0_INI);",
+"		out_h(ADC_ADSSTR(0,1), DEVCNF_ADC0_ADSSTR1_INI);",
+"		out_h(ADC_ADSSTR(0,2), DEVCNF_ADC0_ADSSTR2_INI);",
+"		out_h(ADC_ADSSTR(0,3), DEVCNF_ADC0_ADSSTR3_INI);",
+"		out_h(ADC_ADSSTR(0,4), DEVCNF_ADC0_ADSSTR4_INI);",
+"		out_h(ADC_ADSSTR(0,5), DEVCNF_ADC0_ADSSTR5_INI);",
+"		out_h(ADC_ADSSTR(0,6), DEVCNF_ADC0_ADSSTR6_INI);",
+"		out_h(ADC_ADSSTR(0,7), DEVCNF_ADC0_ADSSTR7_INI);",
+"	} else {",
+"		out_h(ADC_ADSSTR(1,0), DEVCNF_ADC1_ADSSTR0_INI);",
+"		out_h(ADC_ADSSTR(1,1), DEVCNF_ADC1_ADSSTR1_INI);",
+"		out_h(ADC_ADSSTR(1,2), DEVCNF_ADC1_ADSSTR2_INI);",
+"		out_h(ADC_ADSSTR(1,3), DEVCNF_ADC1_ADSSTR3_INI);",
+"		out_h(ADC_ADSSTR(1,4), DEVCNF_ADC1_ADSSTR4_INI);",
+"		out_h(ADC_ADSSTR(1,5), DEVCNF_ADC1_ADSSTR5_INI);",
+"		out_h(ADC_ADSSTR(1,6), DEVCNF_ADC1_ADSSTR6_INI);",
+"		out_h(ADC_ADSSTR(1,7), DEVCNF_ADC1_ADSSTR7_INI);",
+"		out_h(ADC_ADSSTR(1,8), DEVCNF_ADC1_ADSSTR0_INI);",
+"		out_h(ADC_ADSSTR(1,9), DEVCNF_ADC1_ADSSTR1_INI);",
+"		out_h(ADC_ADSSTR(1,10), DEVCNF_ADC1_ADSSTR2_INI);",
+"		out_h(ADC_ADSSTR(1,11), DEVCNF_ADC1_ADSSTR3_INI);",
+"		out_h(ADC_ADSSTR(1,12), DEVCNF_ADC1_ADSSTR4_INI);",
+"		out_h(ADC_ADSSTR(1,13), DEVCNF_ADC1_ADSSTR5_INI);",
+"		out_h(ADC_ADSSTR(1,14), DEVCNF_ADC1_ADSSTR6_INI);",
+"		out_h(ADC_ADSSTR(1,15), DEVCNF_ADC1_ADSSTR7_INI);",
+"		out_h(ADC_ADSSTRL, DEVCNF_ADC1_ADSSTRL_INI);",
+"		out_h(ADC_ADSSTRT, DEVCNF_ADC1_ADSSTRT_INI);",
+"		out_h(ADC_ADSSTRO, DEVCNF_ADC1_ADSSTRO_INI);",
+"	}",
+"",
+"	intno = unit?INTNO_S12ADI1:INTNO_S12ADI0;",
+"	ll_devcb[unit].intno = intno;",
+"",
+"#if DEVCONF_ADC_SET_PERI	// Set Software Configurable Interrupt",
+"	err = SetPERI(intno, unit?INTFN_S12ADI1:INTFN_S12ADI0);",
+"	if(err < E_OK) return E_SYS;",
+"#endif /* DEVCONF_ADC_SET_PERI */",
+"",
+"",
+"	/* Interrupt handler definition */",
+"	err = tk_def_int(intno, &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_ADC_ENABLE */",
+"#endif		/* CPU_RX65N */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	dev_adc_sydep.h",
+" *	A/D converter device driver",
+" *	System-dependent definition for RX65N",
+" */",
+"",
+"#ifndef	__DEV_ADC_RX65N_H__",
+"#define	__DEV_ADC_RX65N_H__",
+"",
+"#define	DEV_ADC_UNITNM	(2)	/* Number of devive units */",
+"#define	DEV_ADC_UNIT0	(0)",
+"#define	DEV_ADC_UNIT1	(1)",
+"",
+"#define ADC_CH_NUM0	(8)		/* Number of A/DC chanels */",
+"#define ADC_CH_NUM1	(21)",
+"",
+"/*",
+" * ADC registers",
+" */",
+"",
+"/* Base address */",
+"#define ADC0_BASE	(0x00089000UL)",
+"#define ADC1_BASE	(0x00089100UL)",
+"",
+"/* Register offset */",
+"#define	ADCx_ADCSR	(0x00)		/* A/DC control reg. */",
+"#define	ADCSR_ADST	(1<<15)",
+"#define	ADCSR_ADIE	(1<<12)",
+"",
+"#define	ADCx_ADANSA0	(0x04)		/* A/DC chanel select reg. A0*/",
+"#define	ADCx_ADANSA1	(0x06)		/* A/DC chanel select reg. A1*/",
+"#define	ADCx_ADCER	(0x0E)		/* A/DC Control extension reg. */",
+"#define	ADCx_ADANSB0	(0x14)		/* A/DC chanel select reg. B0*/",
+"#define	ADCx_ADANSB1	(0x16)		/* A/DC chanel select reg. B1*/",
+"",
+"#define	ADCx_ADDR(c)	(0x20+(2*c))	/* A/DC Data reg. */",
+"",
+"#define	ADCER_INI	(1<<5)		/* register initial value */",
+"",
+"#define	ADCx_ADSSTR(c)	(0xE0+c)	/* A/D Sampling state reg. */",
+"#define	ADC_ADSSTRL	(0x000891DDUL)",
+"#define	ADC_ADSSTRT	(0x000891DEUL)",
+"#define	ADC_ADSSTRO	(0x000891DFUL)",
+"",
+"/*",
+" * A/D converter interrupt factor number",
+"*/",
+"#define	INTFN_S12ADI0	64",
+"#define	INTFN_S12GBADI0	65",
+"#define	INTFN_S12GCADI0	66",
+"",
+"#define	INTFN_S12ADI1	68",
+"#define	INTFN_S12GBADI1	69",
+"#define	INTFN_S12GCADI1	70",
+"",
+"#endif		/* __DEV_ADC_RX65N_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	adc_cnf_sysdep.h ",
+" *	A/D converter device driver configuration file",
+" *		for RZ/A2M",
+" */",
+"#ifndef	__DEV_ADC_CNF_RZA2M_H__",
+"#define	__DEV_ADC_CNF_RZA2M_H__",
+"",
+"/* Device initialization */",
+"#define DEVCONF_ADC_INIT_MSTP	FALSE		// Initialize module stop",
+"",
+"/* Device control data */",
+"/* Initial sampling rate (ADSSTR) */",
+"#define	DEVCNF_ADSSTR0_INI	11",
+"#define	DEVCNF_ADSSTR1_INI	11",
+"#define	DEVCNF_ADSSTR2_INI	11",
+"#define	DEVCNF_ADSSTR3_INI	11",
+"#define	DEVCNF_ADSSTR4_INI	11",
+"#define	DEVCNF_ADSSTR5_INI	11",
+"#define	DEVCNF_ADSSTR6_INI	11",
+"#define	DEVCNF_ADSSTR7_INI	11",
+"",
+"#define	DEVCNF_ADC_INTPRI	5	// Interrupt priority",
+"#define	DEVCNF_ADC_TMOSCAN	1000	// A/D conversion timeout time",
+"",
+"#endif		/* __DEV_ADC_CNF_RZA2M_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RZA2M",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../adc.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_ADC_ENABLE",
+"",
+"/*",
+" *	dev_adc_rza2m.c",
+" *	A/D converter device driver",
+" *	System dependent processing for RZ/A2M",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"LOCAL struct {",
+"	ID	wait_tskid;",
+"} ll_devcb;",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"void adc_inthdr( UINT intno)",
+"{",
+"	ClearInt(intno);",
+"	tk_wup_tsk(ll_devcb.wait_tskid);",
+"	EndOfInt(intno);",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * A/D convert",
+" */",
+"LOCAL UW adc_convert( INT start, INT size, UW *buf )",
+"{",
+"	UH	chset = 0;",
+"	INT	end, ch;",
+"	ER	err;",
+"",
+"	ll_devcb.wait_tskid = tk_get_tid();",
+"	tk_can_wup(TSK_SELF);",
+"",
+"	if(start >= ADC_CH_NUM) return E_PAR;",
+"	end = start + size -1;",
+"	if( end >= ADC_CH_NUM) return E_PAR;",
+"",
+"	/* Set target channel */",
+"	for(INT ch = start; ch <= end; ch++) {",
+"		chset |= (1<<ch);",
+"	}",
+"	out_h(ADANSA0, chset);",
+"",
+"	out_h(ADCSR, ADCSR_ADST | ADCSR_ADIE);		// Start Covert",
+"",
+"	err = tk_slp_tsk(DEVCNF_ADC_TMOSCAN);",
+"	if(err != E_OK) return (UW)err;",
+"",
+"	for(ch = start; ch <= end; ch++) {	/* Read data */",
+"		*buf++ = (UW)in_h(ADDR(ch));",
+"	}",
+"	return (UW)size;",
+"}",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT W dev_adc_llctl( UW unit, INT cmd, UW p1, UW p2, UW *pp)",
+"{",
+"	UW	rtn = (UW)E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_ADC_OPEN:	/* Open　A/DC */",
+"		EnableInt(INTNO_S12ADI0, DEVCNF_ADC_INTPRI);",
+"		break;",
+"",
+"	case LLD_ADC_CLOSE:	/* Close　A/DC */",
+"		DisableInt(INTNO_S12ADI0);",
+"		break;",
+"	",
+"	case LLD_ADC_READ:	/* Read A/DC data */",
+"		rtn = adc_convert(p1, p2, pp);",
+"		break;",
+"	",
+"	case LLD_ADC_RSIZE:	/* Get read data size */",
+"		if(p1  >= ADC_CH_NUM) return (UW)E_PAR;",
+"		rtn = ADC_CH_NUM - p1;",
+"		break;",
+"",
+"	}",
+"	",
+"	return rtn;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_adc_llinit( T_ADC_DCB *p_dcb)",
+"{",
+"	const T_DINT	dint = {",
+"		.intatr	= TA_HLNG,",
+"		.inthdr	= adc_inthdr,",
+"	};",
+"	ER	err;",
+"",
+"#if DEVCONF_ADC_INIT_MSTP		// Initialize module stop",
+"	_UB	dmy;",
+"",
+"	out_b(CPG_STBCR5, in_b(CPG_STBCR5) & ~(1<<7));",
+"	dmy = in_b(CPG_STBCR5);	// dummy read",
+"	",
+"#endif	/* DEVCONF_ADC_INIT_MSTP */",
+"",
+"	/* ADC device initialize */",
+"	out_h(ADCSR, 0);		// ADC stop, Single scan mode",
+"",
+"	// Set sampling rate",
+"	out_b(ADSSTR(0), DEVCNF_ADSSTR0_INI);",
+"	out_b(ADSSTR(1), DEVCNF_ADSSTR1_INI);",
+"	out_b(ADSSTR(2), DEVCNF_ADSSTR2_INI);",
+"	out_b(ADSSTR(3), DEVCNF_ADSSTR3_INI);",
+"	out_b(ADSSTR(4), DEVCNF_ADSSTR4_INI);",
+"	out_b(ADSSTR(5), DEVCNF_ADSSTR5_INI);",
+"	out_b(ADSSTR(6), DEVCNF_ADSSTR6_INI);",
+"	out_b(ADSSTR(7), DEVCNF_ADSSTR7_INI);",
+"",
+"	/* Interrupt handler definition */",
+"	err = tk_def_int(INTNO_S12ADI0, &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_ADC_ENABLE */",
+"#endif		/* CPU_RZA2M */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	dev_adc_sysdep.h",
+" *	A/D converter device driver",
+" *	System-dependent definition for RZ/A2M",
+" */",
+"",
+"#ifndef	__DEV_ADC_RZA2M_H__",
+"#define	__DEV_ADC_RZA2M_H__",
+"",
+"#define	DEV_ADC_UNITNM	(1)		/* Number of devive units */",
+"#define	DEV_ADC_UNIT0	(0)",
+"",
+"#define ADC_CH_NUM	(8)		/* Number of A/DC chanels */",
+"",
+"/*",
+" * ADC registers",
+" */",
+"#define	ADCSR		(0xE8005800)	// A/D control register",
+"#define	ADCSR_ADIE	(1<<12)		// Scan end interrupt enabled bit",
+"#define	ADCSR_ADST	(1<<15)		// A/DC start bit",
+"#define	ADCSR_INI	(0)		// ADCSR init value (ADC stop, Single scan mode)",
+"",
+"#define	ADANSA0		(0xE8005804)",
+"#define	ADADS0		(0xE8005808)",
+"#define	ADADC		(0xE800580C)",
+"#define	ADCER		(0xE800580E)",
+"#define	ADSTRGR		(0xE8005810)",
+"#define	ADANSB0		(0xE8005814)",
+"#define	ADDBLDR		(0xE8005818)",
+"#define	ADRD		(0xE800581E)",
+"",
+"/* A/D dara register ch.0-7 */",
+"#define	ADDR(c)		(0xE8005820 + (c<<1))",
+"",
+"#define	ADDISCR		(0xE800587A)",
+"",
+"#define	ADGSPCR		(0xE8005880)",
+"#define	ADDBLDRA	(0xE8005884)",
+"#define	ADDBLDRB	(0xE8005886)",
+"#define	ADWINMON	(0xE800588C)",
+"",
+"#define	ADCMPCR		(0xE8005890)",
+"#define	ADCMPANSR0	(0xE8005894)",
+"#define	ADCMPLR0	(0xE8005898)",
+"#define	ADCMPDR0	(0xE800589C)",
+"#define	ADCMPDR1	(0xE800589E)",
+"",
+"#define	ADCMPSR0	(0xE80058A0)",
+"#define	ADCMPBNSR	(0xE80058A6)",
+"#define	ADCWINLLB	(0xE80058A8)",
+"#define	ADCWINLUB	(0xE80058AA)",
+"#define	ADCMPBSR	(0xE80058AC)",
+"",
+"#define	ADANSC0		(0xE80058D4)",
+"#define	ADGCTRGR	(0xE80058D9)",
+"",
+"/* A/D Sampling state register ch.0-7 */",
+"#define	ADSSTR(c)	(0xE80058E0 + c)",
+"",
+"/*",
+" * A/D converter interrupt number",
+"*/",
+"#define	INTNO_S12ADI0		247",
+"#define	INTNO_S12GBADI0		248",
+"#define	INTNO_S12GCADI0		249",
+"#define	INTNO_S12ADCMPAI0	250",
+"#define	INTNO_S12ADCMPBI0	251",
+"",
+"#endif		/* __DEV_ADC_RZA2M_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	adc_cnf_sysdep.h ",
+" *	A/D converter device driver configuration file",
+" *		for STM32H7",
+" */",
+"#ifndef	__DEV_ADC_CNF_STM32H7_H__",
+"#define	__DEV_ADC_CNF_STM32H7_H__",
+"",
+"/* Device initialization */",
+"#define DEVCNF_ADC_INIT_MCLK	TRUE	// Initialize module clock",
+"#define	DEVCNF_ADCSEL		0	// ADC clock source   0:PLL2P  1:PLL3R  2: PER_CK",
+"",
+"",
+"/* ADC peripherals clock configuration */",
+"//#define ADC_PLL2_DIVM2		0	// RCC_PLLCKSELR_DIVM2",
+"",
+"//#define ADC_PLL2DIVR_INIT	((1<<24)|(1<<16)|(1<<9)|(23))",
+"				// PLL2 N = 24	",
+"				// PLL2 P = 2	",
+"				// PLL2 Q= 2	",
+"				// PLL2 R = 2	",
+"",
+"//#define ADC_PLL2_RGE		3	// 8 ~ 16 MHz",
+"//#define ADC_PLL2_VCOSEL		0	// Wide VCO range",
+"//#define ADC_PLL2_FRACN		0",
+"",
+"#define	ADC_PCLK	96000000UL	// 96MHz",
+"#if (ADC_PCLK/2) <= 6250000UL",
+"	#define ADC_CR_BOOST_VAL	0",
+"#elif (ADC_PCLK/2) <= 12500000UL",
+"	#define ADC_CR_BOOST_VAL	1",
+"#elif (ADC_PCLK/2) <= 25000000UL",
+"	#define ADC_CR_BOOST_VAL	2",
+"#else /* > 25000000UL */",
+"	#define ADC_CR_BOOST_VAL	3",
+"#endif",
+"",
+"/* Device control data */",
+"/* Common */",
+"#define	DEVCNF_ADC12_CKMODE	1	// CKMODE = 1",
+"#define	DEVCNF_ADC12_PRESC	0	// div 1",
+"#define	DEVCNF_ADC3_CKMODE	1	// CKMODE = 1",
+"#define	DEVCNF_ADC3_PRESC	0	// div 1",
+"",
+"/* ADC configuration */",
+"#define DEVCNF_ADC1_CFGR	0x80000000",
+"#define DEVCNF_ADC2_CFGR	0x80000000",
+"#define DEVCNF_ADC3_CFGR	0x80000000",
+"	// CONT   = 0	Single conversion mode",
+"	// OVRMOD = 0	Overrun Mode 0",
+"	// RES    = 0	Data resolution 16bit",
+"	// DISCEN = 0	Discontinuous mode for regular channels disabled",
+"	// EXTEN  = 0	Hardware trigger detection disabled",
+"	// AUTDLY = 0	Auto-delayed conversion mode off",
+"	// DMNGT  = 0	Regular conversion data stored in DR only",
+"	// AUTDLY = 0	Auto-delayed conversion mode off",
+"	// DMNGT  = 0	Regular conversion data stored in DR only",
+"",
+"#define	DEVCNF_ADC1_CFGR2	0x00000000",
+"#define	DEVCNF_ADC2_CFGR2	0x00000000",
+"#define	DEVCNF_ADC3_CFGR2	0x00000000",
+"	// ROVSE = 0	Regular Oversampling disabled",
+"	// LSHIFT = 0	No left shift",
+"",
+"/* ADC1 */",
+"#define	DEVCNF_ADC1_SMPR1	0x00000000	// Sampling time (ADC_SMPR1 initial value)",
+"#define	DEVCNF_ADC1_SMPR2	0x00000000	// Sampling time (ADC_SMPR2 initial value)",
+"",
+"/* ADC2 */",
+"#define	DEVCNF_ADC2_SMPR1	0x00000000	// Sampling time (ADC_SMPR1 initial value)",
+"#define	DEVCNF_ADC2_SMPR2	0x00000000	// Sampling time (ADC_SMPR2 initial value)",
+"",
+"/* ADC3 */",
+"#define	DEVCNF_ADC3_SMPR1	0x00000000	// Sampling time (ADC_SMPR1 initial value)",
+"#define	DEVCNF_ADC3_SMPR2	0x00000000	// Sampling time (ADC_SMPR2 initial value)",
+"",
+"/* Interrupt t priority */",
+"#define	DEVCNF_ADC1_2_INTPRI	5",
+"#define	DEVCNF_ADC3_INTPRI	5",
+"",
+"",
+"/* A/D conversion timeout time */",
+"#define	DEVCNF_ADC_TMOSCAN	1000",
+"",
+"#endif		/* __DEV_ADC_CNF_STM32H7_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_STM32H7",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../adc.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_ADC_ENABLE",
+"/*",
+" *	dev_adc_stm32h7.c",
+" *	A/D converter device driver",
+" *	System dependent processing for STM32H7",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+"*/",
+"const LOCAL UW ba[DEV_ADC_UNITNM] = { ADC1_BASE, ADC2_BASE, ADC3_BASE };",
+"const LOCAL UW cba[DEV_ADC_UNITNM] = { ADC12_CBASE, ADC12_CBASE, ADC3_CBASE };",
+"",
+"#define	ADC_ISR(x)	(ba[x] + ADCx_ISR)	// Interrupt & status register",
+"#define	ADC_IER(x)	(ba[x] + ADCx_IER)	// Interrupt enable register",
+"#define	ADC_CR(x)	(ba[x] + ADCx_CR)	// Control register",
+"#define	ADC_CFGR(x)	(ba[x] + ADCx_CFGR)	// configuration register",
+"#define	ADC_CFGR2(x)	(ba[x] + ADCx_CFGR2)	// configuration register 2",
+"#define	ADC_SMPR1(x)	(ba[x] + ADCx_SMPR1)	// Sampling time register 1",
+"#define	ADC_SMPR2(x)	(ba[x] + ADCx_SMPR2)	// Sampling time register 2",
+"#define	ADC_PCSEL(x)	(ba[x] + ADCx_PCSEL)	// Channel preselection register",
+"#define	ADC_SQR1(x)	(ba[x] + ADCx_SQR1)	// Regular sequence register",
+"#define	ADC_DR(x)	(ba[x] + ADCx_DR)	// Regular data register",
+"",
+"#define	ADC_CSR(x)	(cba[x] + ADCx_CSR)	// Common status register",
+"#define	ADC_CCR(x)	(cba[x] + ADCx_CCR)	// Common control register",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"LOCAL struct {",
+"	ID	wait_tskid;",
+"	UW	cfgr, cfgr2;",
+"	UW	smpr1, smpr2;",
+"	UW	*buf;",
+"} ll_devcb[DEV_ADC_UNITNM] = {",
+"	{0, DEVCNF_ADC1_CFGR, DEVCNF_ADC1_CFGR2, DEVCNF_ADC1_SMPR1, DEVCNF_ADC1_SMPR2, 0},",
+"	{0, DEVCNF_ADC2_CFGR, DEVCNF_ADC2_CFGR2, DEVCNF_ADC2_SMPR1, DEVCNF_ADC2_SMPR2, 0},",
+"	{0, DEVCNF_ADC3_CFGR, DEVCNF_ADC3_CFGR2, DEVCNF_ADC3_SMPR1, DEVCNF_ADC3_SMPR2, 0}",
+"};",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"void adc_inthdr( UINT intno)",
+"{",
+"	UW	isr;",
+"	UW	unit;",
+"",
+"	if(intno == INTNO_INTADC3) {",
+"		unit = DEV_ADC_3;",
+"	} else if( in_w(ADC_ISR(DEV_ADC_1))) {",
+"		unit = DEV_ADC_1;",
+"	} else if( in_w(ADC_ISR(DEV_ADC_2))) {",
+"		unit = DEV_ADC_2;",
+"	} else {",
+"		ClearInt(intno);",
+"		return;",
+"	}",
+"",
+"	isr = in_w(ADC_ISR(unit));",
+"	if(isr & (ADC_ISR_ADRDY | ADC_ISR_EOS)) {",
+"		if(ll_devcb[unit].wait_tskid) {",
+"			tk_wup_tsk(ll_devcb[unit].wait_tskid);",
+"		}",
+"	}",
+"	if(isr & ADC_ISR_EOC) {",
+"		*(ll_devcb[unit].buf++) = in_w(ADC_DR(unit));",
+"		isr &= ~ADC_ISR_EOC;",
+"	}",
+"",
+"	out_w(ADC_ISR(unit), isr);	// Clear all interrupt flag.",
+"	ClearInt(intno);",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * A/D convert",
+" */",
+"LOCAL UW adc_convert( UINT unit, INT ch, INT size, UW *buf )",
+"{",
+"	_UW	*sqr;",
+"	UINT	sqsz, sqch, sqpos;",
+"	UW	pcsel;",
+"	ER	err;",
+"",
+"	if((ch >= ADC_CH_NUM) || (size > ADC_MAX_SQ) || ((ch+size) > ADC_CH_NUM)) return (UW)E_PAR;",
+"",
+"	out_w(ADC_SQR1(unit), size-1);		// Set channel sequence length.",
+"	",
+"	/* Set channel sequence */",
+"	sqr = (UW*)ADC_SQR1(unit);",
+"	sqsz = size; sqch = ch; sqpos = 6; pcsel = 0;",
+"	while(sqsz--) {",
+"		pcsel |= 1<<sqch;",
+"		*sqr |= (sqch++)<<sqpos;",
+"		if((sqpos += 6) >= 32) {",
+"			sqpos = 0;",
+"			*(++sqr) = 0; ",
+"		}",
+"	}",
+"	if(unit != DEV_ADC_3) {",
+"		out_w(ADC_PCSEL(unit), pcsel);		// Set channel preselection",
+"	}",
+"",
+"	ll_devcb[unit].wait_tskid = tk_get_tid();",
+"	ll_devcb[unit].buf = buf;",
+"",
+"	tk_can_wup(TSK_SELF);",
+"	out_w(ADC_CR(unit), ADC_CR_ADSTART | ADC_CR_ADVREGEN);	// Start Covert",
+"	err = tk_slp_tsk(DEVCNF_ADC_TMOSCAN);",
+"	ll_devcb[unit].wait_tskid = 0;",
+"",
+"	return (err < E_OK)? err:size;",
+"}",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * A/DC open",
+" */",
+"LOCAL ER adc_open(UW unit)",
+"{",
+"	ER	err = E_OK;",
+"",
+"	/* Set sampling time */",
+"	out_w(ADC_SMPR1(unit), ll_devcb[unit].smpr1);",
+"	out_w(ADC_SMPR2(unit), ll_devcb[unit].smpr2);",
+"",
+"	/* Initialize interrupt */",
+"	out_w(ADC_ISR(unit), 0x000007FF);			// Clear all interrupt flag.",
+"	out_w(ADC_IER(unit), ADC_IER_ADRDYIE | ADC_IER_EOCIE);	// Set Interrupt mask.",
+"",
+"	if(unit != DEV_ADC_3) {		// ADC1 or ADC2",
+"		EnableInt(INTNO_INTADC1_2, DEVCNF_ADC1_2_INTPRI);",
+"	} else {			// ADC3",
+"		EnableInt(INTNO_INTADC3, DEVCNF_ADC3_INTPRI);",
+"	}",
+"",
+"	/* Enable ADC */",
+"	ll_devcb[unit].wait_tskid = tk_get_tid();",
+"	out_w(ADC_CR(unit), ADC_CR_ADEN | ADC_CR_ADVREGEN);	// Set ADEN",
+"",
+"	err = tk_slp_tsk(DEVCNF_ADC_TMOSCAN);",
+"	if(err < E_OK) err = E_TMOUT;",
+"	ll_devcb[unit].wait_tskid = 0;",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * A/DC close",
+" */",
+"LOCAL void adc_close(UW unit)",
+"{",
+"	DisableInt((unit != DEV_ADC_3 )? INTNO_INTADC1_2: INTNO_INTADC3);",
+"",
+"	/* Disable ADC */",
+"	out_w(ADC_CR(unit), ADC_CR_ADDIS);		// Set ADDIS",
+"	while(in_w(ADC_ISR(unit)) & ADC_ISR_ADRDY);	// Wait until ADEN is clear",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT W dev_adc_llctl( UW unit, INT cmd, UW p1, UW p2, UW *pp)",
+"{",
+"	W	rtn	= (W)E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_ADC_OPEN:	/* Open　A/DC */",
+"		rtn = (W)adc_open(unit);",
+"		break;",
+"",
+"	case LLD_ADC_CLOSE:	/* Close　A/DC */",
+"		adc_close(unit);",
+"		break;",
+"	",
+"	case LLD_ADC_READ:	/* Read A/DC data */",
+"		rtn = adc_convert(unit, p1, p2, pp);",
+"		break;",
+"	",
+"	case LLD_ADC_RSIZE:	/* Get read data size */",
+"		rtn = ADC_CH_NUM - p1;",
+"		if(rtn < 0 ) rtn = 0;",
+"		break;",
+"	}",
+"	",
+"	return rtn;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_adc_llinit( T_ADC_DCB *p_dcb)",
+"{",
+"	static BOOL init_12	= FALSE;",
+"",
+"	const T_DINT	dint = {",
+"		.intatr	= TA_HLNG,",
+"		.inthdr	= adc_inthdr",
+"	};",
+"	UW	unit;",
+"	ER	err;",
+"",
+"	unit = p_dcb->unit;",
+"",
+"#if DEVCNF_ADC_INIT_MCLK",
+"	/* Select clock source */",
+"	out_w(RCC_D3CCIPR, (in_w(RCC_D3CCIPR) & ~RCC_D3CCIPR_ADCSEL) | (DEVCNF_ADCSEL));",
+"",
+"	/* Enable module clock */",
+"	if(unit < DEV_ADC_3) {		// ADC1_2",
+"		*(_UW*)RCC_AHB1ENR |= RCC_AHB1ENR_ADC12EN;",
+"	} else  {			// ADC3",
+"		*(_UW*)RCC_AHB4ENR |= RCC_AHB4ENR_ADC3EN;",
+"	}",
+"",
+"#endif",
+"",
+"	/* ADC Power-On */",
+"	out_w(ADC_CR(unit), 0);				// DEEPPWD = 0 ",
+"	out_w(ADC_CR(unit), ADC_CR_ADVREGEN);		// ADVREGEN = 1",
+"",
+"	_UW	wait_cnt = (TMCLK_KHz / 200UL) + 1UL;",
+"	while(wait_cnt-- != 0);",
+"",
+"	/* Common ADC settings */",
+"	if(unit < DEV_ADC_3) {		// ADC1 or ADC2",
+"		if(!init_12) {",
+"			out_w(ADC_CCR(unit), ",
+"				((DEVCNF_ADC12_CKMODE & 0x03)<< 16)	// ADC clock mode",
+"				|((DEVCNF_ADC12_PRESC & 0x0F)<< 18)	// ADC prescaler",
+"			);",
+"		}",
+"	} else {			// ADC3",
+"		out_w(ADC_CCR(unit), ",
+"			((DEVCNF_ADC3_CKMODE & 0x03)<< 16)	// ADC clock mode",
+"			|((DEVCNF_ADC3_PRESC & 0x0F)<< 18)	// ADC prescaler",
+"		);",
+"	}",
+"",
+"	/* ADC configuration */",
+"	out_w(ADC_CFGR(unit), ll_devcb[unit].cfgr);",
+"	out_w(ADC_CFGR2(unit), ll_devcb[unit].cfgr2);",
+"",
+"	/* Configure boost mode */",
+"	out_w(ADC_CR(unit), (in_w(ADC_CR(unit))&ADC_CR_BOOST) | (ADC_CR_BOOST_VAL<<8));",
+"",
+"	/* Interrupt handler definition */",
+"	err = tk_def_int((unit != DEV_ADC_3 )? INTNO_INTADC1_2: INTNO_INTADC3, &dint);",
+"",
+"	init_12 = TRUE;",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_ADC_ENABLE */",
+"#endif		/* CPU_STM32H7 */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dev_adc_sysdep.h",
+" *	A/D converter device driver",
+" *	System-dependent definition for STM32H7",
+" */",
+"",
+"#ifndef	__DEV_ADC_STM32H7_H__",
+"#define	__DEV_ADC_STM32H7_H__",
+"",
+"#define	DEV_ADC_UNITNM	(3)	/* Number of devive units */",
+"#define	DEV_ADC_1	(0)	/* ADC1 */",
+"#define	DEV_ADC_2	(1)	/* ADC2 */",
+"#define	DEV_ADC_3	(2)	/* ADC3 */",
+"",
+"/* NUmber of A/DC chanels */",
+"#define	ADC_CH_NUM	(20)",
+"#define	ADC_MAX_SQ	(16)",
+"",
+"/*",
+" * A/DC Clock source",
+" */",
+"#define	RCC_CCIPR_ADCSEL	0x30000000	// ADC Clock source",
+"",
+"/*----------------------------------------------------------------------",
+" * A/DC registers",
+" */",
+"",
+"/* Base address */",
+"#define ADC1_BASE	(0x40022000UL)	// Master ADC",
+"#define ADC2_BASE	(0x40022100UL)	// Slave ADC",
+"#define	ADC12_CBASE	(0x40022300UL)	// Common register",
+"",
+"#define	ADC3_BASE	(0x58026000UL)",
+"#define	ADC3_CBASE	(0x58026300UL)	// Common register",
+"",
+"/* Register offset */",
+"#define	ADCx_ISR	(0x00)		// Interrupt & status register",
+"#define	ADCx_IER	(0x04)		// Interrupt enable register",
+"#define	ADCx_CR		(0x08)		// Control register",
+"#define	ADCx_CFGR	(0x0C)		// Configuration register",
+"#define	ADCx_CFGR2	(0x10)		// Configuration register 2",
+"#define	ADCx_SMPR1	(0x14)		// Sampling time register 1",
+"#define	ADCx_SMPR2	(0x18)		// Sampling time register 2",
+"#define	ADCx_PCSEL	(0x1C)		// Channel preselection register",
+"",
+"#define	ADCx_LTR1	(0x20)",
+"#define	ADCx_HTR1	(0x24)",
+"",
+"#define	ADC3_TR1	(ADC3_BASE+0x20)",
+"#define	ADC3_TR2	(ADC3_BASE+0x24)",
+"#define	ADC3_TR3	(ADC3_BASE+0x28)",
+"",
+"#define	ADCx_SQR1	(0x30)		// Regular sequence register 1",
+"#define	ADCx_SQR2	(0x34)		// Regular sequence register 2",
+"#define	ADCx_SQR3	(0x38)		// Regular sequence register 3",
+"#define	ADCx_SQR4	(0x3C)		// Regular sequence register 4",
+"#define	ADCx_DR		(0x40)		// Regular data register",
+"#define	ADCx_JSQR	(0x4C)",
+"#define	ADCx_OFR1	(0x60)",
+"#define	ADCx_OFR2	(0x64)",
+"#define	ADCx_OFR3	(0x68)",
+"#define	ADCx_OFR4	(0x6C)",
+"#define	ADCx_JDR1	(0x80)",
+"#define	ADCx_JDR2	(0x84)",
+"#define	ADCx_JDR3	(0x88)",
+"#define	ADCx_JDR4	(0x8C)",
+"#define	ADCx_AWD2CR	(0xA0)",
+"#define	ADCx_AWD3CR	(0xA4)",
+"#define	ADCx_LTR2	(0xB0)",
+"#define	ADCx_HTR2	(0xB4)",
+"#define	ADCx_LTR3	(0xB8)",
+"#define	ADCx_HTR3	(0xBC)",
+"",
+"#define	ADC3_DIFSEL	(ADC3_BASE+0xB0)",
+"#define	ADC3_CALFACT	(ADC3_BASE+0xB4)",
+"",
+"#define	ADCx_DIFSEL	(0xC0)",
+"#define	ADCx_CALFACT	(0xC4)",
+"#define	ADCx_CALFACT2	(0xC8)",
+"",
+"#define	ADC_ISR_ADRDY	(1<<0)		// ADC ready",
+"#define	ADC_ISR_EOC	(1<<2)		// End of conversion",
+"#define	ADC_ISR_EOS	(1<<3)		// End of regular sequence",
+"",
+"#define	ADC_IER_ADRDYIE	(1<<0)		// ADC ready interrupt enable",
+"#define	ADC_IER_EOCIE	(1<<2)		// End of conversion interrupt enable",
+"#define	ADC_IER_OVRIE	(1<<4)		// Overrun interrupt enable",
+"",
+"#define	ADC_CR_ADEN	(1<<0)		// ADC enable",
+"#define	ADC_CR_ADDIS	(1<<1)		// ADC disable",
+"#define	ADC_CR_ADSTART	(1<<2)		// ADC regular convert start",
+"#define	ADC_CR_ADSTP	(1<<4)		// ADC regular convert stop",
+"#define	ADC_CR_JADSTP	(1<<5)		// ADC injected convert stop",
+"#define	ADC_CR_BOOST	(3<<8)		// ADC boost mode control",
+"#define	ADC_CR_ADVREGEN	(1<<28)		// ADC voltage regulator enabled",
+"#define	ADC_CR_DEEPPWD	(1<<29)		// ADC deep powerdown enable",
+"#define	ADC_CR_ADCAL	(1<<31)		// ADC calibration",
+"",
+"/* A/DC common register */",
+"#define	ADCx_CSR	(0x00)		// Common status register",
+"#define	ADCx_CCR	(0x08)		// Common control register",
+"#define	ADCx_CDR	(0x0C)		// Common regular register",
+"#define	ADCx_CDR2	(0x10)		// Common regular register 2",
+"",
+"/*",
+" * A/D converter interrupt number",
+"*/",
+"#define	INTNO_INTADC1_2		18",
+"#define	INTNO_INTADC3		127",
+"",
+"#endif		/* __DEV_ADC_STM32H7_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	adc_cnf_sysdep.h ",
+" *	A/D converter device driver configuration file",
+" *		for STM32L4",
+" */",
+"#ifndef	__DEV_ADC_CNF_STM32L4_H__",
+"#define	__DEV_ADC_CNF_STM32L4_H__",
+"",
+"/* Device clock initialization */",
+"#define DEVCONF_ADC_INIT_MCLK	TRUE	// Initialize module clock",
+"#define	DEVCNF_ADCSEL		1	// ADC clock source   1:PLLADC1CLK  2:PLLADC2CLK  3:SYSCLK",
+"",
+"/* Device control data */",
+"/* Common */",
+"#define	DEVCNF_ADC_CKMODE	0	// ADC clock mode  0:Asynchronous clock mode",
+"#define	DEVCNF_ADC_PRESC	10	// ADC prescaler  0 ~ 11",
+"",
+"/* ADC1 */",
+"#define	DEVCONF_ADC1_SMPR1	0x00000000	// Sampling time (ADC_SMPR1 initial value)",
+"#define	DEVCONF_ADC1_SMPR2	0x00000000	// Sampling time (ADC_SMPR2 initial value)",
+"",
+"/* ADC2 */",
+"#define	DEVCONF_ADC2_SMPR1	0x00000000	// Sampling time (ADC_SMPR1 initial value)",
+"#define	DEVCONF_ADC2_SMPR2	0x00000000	// Sampling time (ADC_SMPR2 initial value)",
+"",
+"/* ADC3 */",
+"#define	DEVCONF_ADC3_SMPR1	0x00000000	// Sampling time (ADC_SMPR1 initial value)",
+"#define	DEVCONF_ADC3_SMPR2	0x00000000	// Sampling time (ADC_SMPR2 initial value)",
+"",
+"/* Interrupt t priority */",
+"#define	DEVCNF_ADC12_INTPRI	5",
+"#define	DEVCNF_ADC3_INTPRI	5",
+"",
+"/* A/D conversion timeout time */",
+"#define	DEVCNF_ADC_TMOSCAN	1000",
+"",
+"#endif		/* __DEV_ADC_CNF_STM32L4_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_STM32L4",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../adc.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_ADC_ENABLE",
+"/*",
+" *	dev_adc_stm32l4.c",
+" *	A/D converter device driver",
+" *	System dependent processing for STM32L4",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+"*/",
+"const LOCAL UW ba[DEV_ADC_UNITNM] = { ADC1_BASE, ADC2_BASE, ADC3_BASE };",
+"",
+"#define	ADC_ISR(x)	(ba[x] + ADCx_ISR)	// Interrupt & status register",
+"#define	ADC_IER(x)	(ba[x] + ADCx_IER)	// Interrupt enable register",
+"#define	ADC_CR(x)	(ba[x] + ADCx_CR)	// Control register",
+"#define	ADC_SMPR1(x)	(ba[x] + ADCx_SMPR1)	// Sampling time register 1",
+"#define	ADC_SMPR2(x)	(ba[x] + ADCx_SMPR2)	// Sampling time register 2",
+"#define	ADC_SQR1(x)	(ba[x] + ADCx_SQR1)	// Regular sequence register",
+"#define	ADC_DR(x)	(ba[x] + ADCx_DR)	// Regular data register",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"LOCAL struct {",
+"	ID	wait_tskid;",
+"	UW	smpr1, smpr2;",
+"	UW	*buf;",
+"	SZ	asz;",
+"} ll_devcb[DEV_ADC_UNITNM] = {",
+"",
+"	{0, DEVCONF_ADC1_SMPR1, DEVCONF_ADC1_SMPR2, NULL, 0},",
+"	{0, DEVCONF_ADC2_SMPR1, DEVCONF_ADC2_SMPR2, NULL, 0},",
+"	{0, DEVCONF_ADC3_SMPR1, DEVCONF_ADC3_SMPR2, NULL, 0}	",
+"};",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"void adc_inthdr( UINT intno)",
+"{",
+"	UW	isr;",
+"	UW	unit;",
+"",
+"	if(intno == INTNO_INTADC3) {",
+"		unit = DEV_ADC_3;",
+"	} else if( in_w(ADC_ISR(DEV_ADC_1))) {",
+"		unit = DEV_ADC_1;",
+"	} else if( in_w(ADC_ISR(DEV_ADC_2))) {",
+"		unit = DEV_ADC_2;",
+"	} else {",
+"		ClearInt(intno);",
+"		return;",
+"	}",
+"",
+"	isr = in_w(ADC_ISR(unit));",
+"	if(isr & (ADC_ISR_ADRDY | ADC_ISR_EOS)) {",
+"		if(ll_devcb[unit].wait_tskid) {",
+"			tk_wup_tsk(ll_devcb[unit].wait_tskid);",
+"		}",
+"	}",
+"	if(isr & ADC_ISR_EOC) {",
+"		*(ll_devcb[unit].buf++) = in_w(ADC_DR(unit));",
+"		ll_devcb[unit].asz++;",
+"	}",
+"",
+"	out_w(ADC_ISR(unit), isr);	// Clear interrupt flag.",
+"	ClearInt(intno);",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * A/D convert",
+" */",
+"LOCAL UW adc_convert( UINT unit, INT ch, INT size, UW *buf )",
+"{",
+"	_UW	*sqr;",
+"	UINT	sqch, sqpos;",
+"	ER	err;",
+"",
+"	if((ch >= ADC_CH_NUM) || (size > ADC_MAX_SQ) || ((ch+size) > ADC_CH_NUM)) return (UW)E_PAR;",
+"",
+"	out_w(ADC_SQR1(unit), size-1);		// Set channel sequence length.",
+"	",
+"	/* Set channel sequence */",
+"	sqr = (UW*)ADC_SQR1(unit);",
+"	sqch = ch; sqpos = 6;",
+"	while(size--) {",
+"		*sqr |= (sqch++)<<sqpos;",
+"		if((sqpos += 6) >= 32) {",
+"			sqpos = 0;",
+"			*(++sqr) = 0; ",
+"		}",
+"	}",
+"",
+"	ll_devcb[unit].wait_tskid = tk_get_tid();",
+"	ll_devcb[unit].buf = buf;",
+"	ll_devcb[unit].asz = 0;",
+"",
+"	tk_can_wup(TSK_SELF);",
+"	out_w(ADC_CR(unit), ADC_CR_ADSTART | ADC_CR_ADVREGEN);	// Start Covert",
+"	err = tk_slp_tsk(DEVCNF_ADC_TMOSCAN);",
+"	ll_devcb[unit].wait_tskid = 0;",
+"",
+"	return (err < E_OK)? err: ll_devcb[unit].asz;",
+"}",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * A/DC open",
+" */",
+"LOCAL ER adc_open(UW unit)",
+"{",
+"	ER	err = E_OK;",
+"",
+"	/* Set sampling time */",
+"	out_w(ADC_SMPR1(unit), ll_devcb[unit].smpr1);",
+"	out_w(ADC_SMPR2(unit), ll_devcb[unit].smpr2);",
+"",
+"	/* Initialize interrupt */",
+"	out_w(ADC_ISR(unit), 0x000007FF);			// Clear all interrupt flag.",
+"	out_w(ADC_IER(unit), ADC_IER_ADRDYIE | ADC_IER_EOCIE);	// Set Interrupt mask.",
+"",
+"	if(unit != DEV_ADC_3) {",
+"		EnableInt(INTNO_INTADC1_2, DEVCNF_ADC12_INTPRI);",
+"	} else {",
+"		EnableInt(INTNO_INTADC3, DEVCNF_ADC3_INTPRI);",
+"	}",
+"",
+"	/* Enable ADC */",
+"	ll_devcb[unit].wait_tskid = tk_get_tid();",
+"	out_w(ADC_ISR(unit), in_w(ADC_ISR(unit)));		// Clear ADC_ISR",
+"	out_w(ADC_CR(unit), ADC_CR_ADEN | ADC_CR_ADVREGEN);	// Set ADEN",
+"",
+"	err = tk_slp_tsk(DEVCNF_ADC_TMOSCAN);",
+"	if(err < E_OK) err = E_TMOUT;",
+"	ll_devcb[unit].wait_tskid = 0;",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * A/DC close",
+" */",
+"LOCAL void adc_close(UW unit)",
+"{",
+"	DisableInt((unit==DEV_ADC_3)?INTNO_INTADC3:INTNO_INTADC1_2);",
+"",
+"	/* Disable ADC */",
+"	out_w(ADC_CR(unit), ADC_CR_ADDIS);		// Set ADDIS",
+"	while(in_w(ADC_ISR(unit)) & ADC_ISR_ADRDY);	// Wait until ADEN is clear",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT W dev_adc_llctl( UW unit, INT cmd, UW p1, UW p2, UW *pp)",
+"{",
+"	W	rtn	= (W)E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_ADC_OPEN:	/* Open　A/DC */",
+"		rtn = (W)adc_open(unit);",
+"		break;",
+"",
+"	case LLD_ADC_CLOSE:	/* Close　A/DC */",
+"		adc_close(unit);",
+"		break;",
+"	",
+"	case LLD_ADC_READ:	/* Read A/DC data */",
+"		rtn = adc_convert(unit, p1, p2, pp);",
+"		break;",
+"	",
+"	case LLD_ADC_RSIZE:	/* Get read data size */",
+"		rtn = ADC_CH_NUM - p1;",
+"		if(rtn < 0 ) rtn = 0;",
+"		break;",
+"	}",
+"	",
+"	return rtn;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_adc_llinit( T_ADC_DCB *p_dcb)",
+"{",
+"	const T_DINT	dint = {",
+"		.intatr	= TA_HLNG,",
+"		.inthdr	= adc_inthdr",
+"	};",
+"	UW	unit;",
+"	ER	err;",
+"",
+"	unit = p_dcb->unit;",
+"",
+"#if DEVCONF_ADC_INIT_MCLK",
+"	/* Select clock source */",
+"	switch(DEVCNF_ADCSEL) {",
+"	case 1:		/* PLLADC1CLK */",
+"		*(_UW*)RCC_PLLSAI1CFGR |= 1<<24;	// PLLADC1CLK enable",
+"		break;",
+"	case 2:		/* PLLADC3CLK */",
+"		*(_UW*)RCC_PLLSAI2CFGR |= 1<<24;	// PLLADC2CLK enable",
+"		break;",
+"	default:	/* 3: System clock, > 3 Error */",
+"		if(DEVCNF_ADCSEL > 3) return E_IO;",
+"	}",
+"	out_w(RCC_CCIPR, (in_w(RCC_CCIPR) & ~RCC_CCIPR_ADCSEL) | (DEVCNF_ADCSEL << 28));",
+"",
+"	/* Enable module clock */",
+"	*(_UW*)RCC_AHB2ENR |= RCC_AHB2ENR_ADCEN;	// ADC enable",
+"#endif",
+"",
+"	/* ADC Power-On */",
+"	out_w(ADC_CR(unit), 0);				// DEEPPWD = 0 ",
+"	out_w(ADC_CR(unit), ADC_CR_ADVREGEN);		// ADVREGEN = 1",
+"",
+"	/* Common ADC settings */",
+"	out_w(ADC_CCR, ",
+"		((DEVCNF_ADC_CKMODE & 0x03)<< 16)	// ADC clock mode",
+"		|((DEVCNF_ADC_PRESC & 0x0F)<< 18)	// ADC prescaler",
+"	);",
+"",
+"	/* ADC calibration */",
+"	out_w(ADC_CR(unit), ADC_CR_ADVREGEN | ADC_CR_ADCAL);	// ADCAL = 1",
+"	while( in_w(ADC_CR(unit)) & ADC_CR_ADCAL);		// Wait until ADCAL is clear",
+"",
+"	/* Interrupt handler definition */",
+"	err = tk_def_int((unit == DEV_ADC_3)?INTNO_INTADC3:INTNO_INTADC1_2, &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_ADC_ENABLE */",
+"#endif		/* CPU_STM32L4 */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	adc_sysdep.h",
+" *	A/D converter device driver",
+" *	System-dependent definition for STM32L4",
+" */",
+"",
+"#ifndef	__DEV_ADC_STM32L4_H__",
+"#define	__DEV_ADC_STM32L4_H__",
+"",
+"#define	DEV_ADC_UNITNM	(3)	/* Number of devive units */",
+"#define	DEV_ADC_1	(0)	/* ADC1 */",
+"#define	DEV_ADC_2	(1)	/* ADC2 */",
+"#define	DEV_ADC_3	(2)	/* ADC3 */",
+"",
+"/* NUmber of A/DC chanels */",
+"#define	ADC_CH_NUM	(19)",
+"#define	ADC_MAX_SQ	(16)",
+"",
+"/*",
+" * A/DC Clock source",
+" */",
+"#define	RCC_CCIPR_ADCSEL	0x30000000	// ADC Clock source",
+"",
+"/*----------------------------------------------------------------------",
+" * A/DC registers",
+" */",
+"",
+"/* A/DC common register */",
+"#define	ADC_CSR		(0x50040300UL)	// Common status register",
+"#define	ADC_CCR		(0x50040308UL)	// Common control register",
+"#define	ADC_CDR		(0x5004030CUL)	// Common regular register",
+"",
+"/* Base address */",
+"#define ADC1_BASE	(0x50040000UL)",
+"#define ADC2_BASE	(0x50040100UL)",
+"#define ADC3_BASE	(0x50040200UL)",
+"",
+"/* Register offset */",
+"#define	ADCx_ISR	(0x00)		// Interrupt & status register",
+"#define	ADCx_IER	(0x04)		// Interrupt enable register",
+"#define	ADCx_CR		(0x08)		// Control register",
+"#define	ADCx_CFGR	(0x0C)",
+"#define	ADCx_CFGR2	(0x10)",
+"#define	ADCx_SMPR1	(0x14)		// Sampling time register 1",
+"#define	ADCx_SMPR2	(0x18)		// Sampling time register 2",
+"#define	ADCx_TR1	(0x20)",
+"#define	ADCx_TR2	(0x24)",
+"#define	ADCx_TR3	(0x28)",
+"#define	ADCx_SQR1	(0x30)		// Regular sequence register 1",
+"#define	ADCx_SQR2	(0x34)		// Regular sequence register 2",
+"#define	ADCx_SQR3	(0x38)		// Regular sequence register 3",
+"#define	ADCx_SQR4	(0x3C)		// Regular sequence register 4",
+"#define	ADCx_DR		(0x40)		// Regular data register",
+"#define	ADCx_JSQR	(0x4C)",
+"#define	ADCx_OFR1	(0x60)",
+"#define	ADCx_OFR2	(0x64)",
+"#define	ADCx_OFR3	(0x68)",
+"#define	ADCx_OFR4	(0x6C)",
+"#define	ADCx_JDR1	(0x80)",
+"#define	ADCx_JDR2	(0x84)",
+"#define	ADCx_JDR3	(0x88)",
+"#define	ADCx_JDR4	(0x8C)",
+"#define	ADCx_AWD2CR	(0xA0)",
+"#define	ADCx_AWD3CR	(0xA4)",
+"#define	ADCx_DIFSEL	(0xB0)",
+"#define	ADCx_CALFACT	(0xB4)",
+"",
+"#define	ADC_ISR_ADRDY	(1<<0)		// ADC ready",
+"#define	ADC_ISR_EOC	(1<<2)		// End of conversion",
+"#define	ADC_ISR_EOS	(1<<3)		// End of regular sequence",
+"",
+"#define	ADC_IER_ADRDYIE	(1<<0)		// ADC ready interrupt enable",
+"#define	ADC_IER_EOCIE	(1<<2)		// End of conversion interrupt enable",
+"#define	ADC_IER_OVRIE	(1<<4)		// Overrun interrupt enable",
+"",
+"",
+"#define	ADC_CR_ADEN	(1<<0)		// ADC enable",
+"#define	ADC_CR_ADDIS	(1<<1)		// ADC disable",
+"#define	ADC_CR_ADSTART	(1<<2)		// ADC regular convert start",
+"#define	ADC_CR_ADSTP	(1<<4)		// ADC regular convert stop",
+"#define	ADC_CR_ADVREGEN	(1<<28)		// ADC voltage regulator enabled",
+"#define	ADC_CR_DEEPPWD	(1<<29)		// ADC deep powerdown enable",
+"#define	ADC_CR_ADCAL	(1<<31)		// ADC calibration",
+"",
+"/*",
+" * A/D converter interrupt number",
+"*/",
+"#define	INTNO_INTADC1_2		18",
+"#define	INTNO_INTADC3		47",
+"",
+"#endif		/* __DEV_ADC_STM32L4_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/2.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	adc_cnf_sysdep.h ",
+" *	A/D converter device driver configuration file",
+" *		for TX03_M367 (TMPM369FDFG)",
+" */",
+"#ifndef	__DEV_ADC_CNF_M367_H__",
+"#define	__DEV_ADC_CNF_M367_H__",
+"",
+"/* Device control data */",
+"/* ADC Unit-A */",
+"#define DEVCNF_ADCA_CLK		0x00000001	// Clock setting (ADxCLK register initial value)",
+"#define	DEVCNF_ADCA_INTPRI	5		// Interrupt priority",
+"#define	DEVCNF_ADCA_TMOSCAN	1000		// A/D conversion timeout time",
+"",
+"/* ADC Unit-B */",
+"#define DEVCNF_ADCB_CLK		0x00000001	// Clock setting (ADxCLK register initial value)",
+"#define	DEVCNF_ADCB_INTPRI	5		// Interrupt priority",
+"#define	DEVCNF_ADCB_TMOSCAN	1000		// A/D conversion timeout time",
+"",
+"#endif		/* __DEV_ADC_CNF_M367_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_TMPM367FDFG",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../adc.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_ADC_ENABLE",
+"/*",
+" *	dev_adc_m367.c",
+" *	A/D converter device driver",
+" *	System dependent processing for TX03_M367",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+"*/",
+"const LOCAL UW ba[DEV_ADC_UNITNM] = { ADA_BASE, ADB_BASE };",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"LOCAL struct {",
+"	ID	wait_tskid;",
+"} ll_devcb[DEV_ADC_UNITNM] = {",
+"",
+"	{0},",
+"	{0}",
+"};",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"void adc_inthdr( UINT intno)",
+"{",
+"	INT		unit;",
+"",
+"	if(intno == INTNO_INTADA) {",
+"		unit = DEV_ADC_UNIT0;",
+"	} else if( intno == INTNO_INTADB) {",
+"		unit = DEV_ADC_UNIT1;",
+"	} else {",
+"		ClearInt(intno);",
+"		return;",
+"	}",
+"",
+"	if(ll_devcb[unit].wait_tskid) {",
+"		tk_wup_tsk(ll_devcb[unit].wait_tskid);",
+"	}",
+"",
+"	ClearInt(intno);",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * A/D convert",
+" */",
+"LOCAL UW adc_convert( UINT unit, INT ch, INT size, UW *buf )",
+"{",
+"	UW	addr, rtn;",
+"",
+"	if(ch < 0 || ch >= ADC_CH_NUM) return E_PAR;",
+"",
+"	ll_devcb[unit].wait_tskid = tk_get_tid();",
+"",
+"	if( size == 1) {",
+"		/* channel fixed single convert */",
+"		out_w( ba[unit] + ADxMOD3, ADMD_CHFIX_SINGLE);	// Ch.Fixed Single mode",
+"		out_w( ba[unit] + ADxMOD2, ch);			// MOD2.ADCH = Channel",
+"		",
+"	} else  if(( ch + size ) <= ADC_CH_NUM ) {",
+"		/* channel scan single convert */",
+"		out_w( ba[unit] + ADxMOD3, ADMD_CHSCAN_SINGLE);	// Ch.Fixed scan mode",
+"		out_w( ba[unit] + ADxMOD4, ch | ((size-1)<<4));	// MOD4.SCANSTA = ch, .SCANAREA = size-1",
+"",
+"	} else {",
+"		return (UW)E_PAR;",
+"	}",
+"",
+"	tk_can_wup(TSK_SELF);",
+"	out_w( ba[unit] + ADxMOD0, ADxMOD0_ADS);	// MOD0.ADS = 1  Start Covert",
+"",
+"	rtn = (UW)tk_slp_tsk(unit?DEVCNF_ADCB_INTPRI:DEVCNF_ADCA_TMOSCAN);",
+"	if(rtn == E_OK) {",
+"		addr = ba[unit] + ADxREG00 + (ch<<2);",
+"		rtn = size;",
+"		while( size-- > 0) {",
+"			*buf++ = in_w( addr) & 0x0000FFF;",
+"			addr += 4;",
+"		}",
+"		in_w( ba[unit] + ADxMOD5);	// clear MOD5.EOCF",
+"	}",
+"",
+"	return rtn;",
+"}",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT W dev_adc_llctl( UW unit, INT cmd, UW p1, UW p2, UW *pp)",
+"{",
+"	W	rtn	= (W)E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_ADC_OPEN:	/* Open　A/DC */",
+"		if(unit == DEV_ADC_UNIT0) {",
+"			out_w(ba[unit] + ADxCLK, DEVCNF_ADCA_CLK);	// Clock setting",
+"			EnableInt(INTNO_INTADA, DEVCNF_ADCA_INTPRI);",
+"		} else {",
+"			out_w(ba[unit] + ADxCLK, DEVCNF_ADCB_CLK);	// Clock setting",
+"			EnableInt(INTNO_INTADB, DEVCNF_ADCB_INTPRI);",
+"		}",
+"		out_w(ba[unit] + ADxMOD1, ADxMOD1_DACON);		// MOD1.DACON = 1",
+"		break;",
+"",
+"	case LLD_ADC_CLOSE:	/* Close　A/DC */",
+"		DisableInt((unit?INTNO_INTADB:INTNO_INTADA));",
+"		out_w(ba[unit] + ADxMOD1, 0);		// MOD1.DACON = 0",
+"		break;",
+"	",
+"	case LLD_ADC_READ:	/* Read A/DC data */",
+"		rtn = adc_convert(unit, p1, p2, pp);",
+"		break;",
+"	",
+"	case LLD_ADC_RSIZE:	/* Get read data size */",
+"		rtn = ADC_CH_NUM - p1;",
+"		if(rtn < 0 ) rtn = 0;",
+"		break;",
+"",
+"	}",
+"	",
+"	return rtn;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_adc_llinit( T_ADC_DCB *p_dcb)",
+"{",
+"	const T_DINT	dint = {",
+"		.intatr	= TA_HLNG,",
+"		.inthdr	= adc_inthdr,",
+"	};",
+"	ER	err;",
+"",
+"	/* Interrupt handler definition */",
+"	err = tk_def_int((p_dcb->unit?INTNO_INTADB:INTNO_INTADA), &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_ADC_ENABLE */",
+"#endif		/* CPU_TMPM367FDFG */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/10/21.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	adc_sysdep.h",
+" *	A/D converter device driver",
+" *	System-dependent definition for TX03_M367",
+" */",
+"",
+"#ifndef	__DEV_ADC_M367_H__",
+"#define	__DEV_ADC_M367_H__",
+"",
+"#define	DEV_ADC_UNITNM	(2)	/* Number of devive units */",
+"#define	DEV_ADC_UNIT0	(0)",
+"#define	DEV_ADC_UNIT1	(1)",
+"",
+"#define ADC_CH_NUM	(4)		/* NUmber of A/DC chanels */",
+"",
+"/*",
+" * ADC registers",
+" */",
+"#define ADA_BASE	(0x40050000UL)",
+"#define ADB_BASE	(0x40051000UL)",
+"",
+"#define ADxCLK		(0x00)		/* Clock setting register */",
+"",
+"/* Mode register */",
+"#define ADxMOD0		(0x04)",
+"#define ADxMOD1		(0x08)",
+"#define ADxMOD2		(0x0C)",
+"#define ADxMOD3		(0x10)",
+"#define ADxMOD4		(0x14)",
+"#define ADxMOD5		(0x18)",
+"#define ADxMOD6		(0x1C)",
+"",
+"/* Monitor interrupt setting register */",
+"#define ADxCMPCR0	(0x24)",
+"#define ADxCMPCR1	(0x28)",
+"",
+"/* Conversion result comparison register */",
+"#define ADxCMP0		(0x2C)",
+"#define ADxCMP1		(0x30)",
+"",
+"/* Conversion result storage register */",
+"#define ADxREG00	(0x34)",
+"#define ADxREG01	(0x38)",
+"#define ADxREG02	(0x3C)",
+"#define ADxREG03	(0x40)",
+"#define ADxREG04	(0x44)",
+"#define ADxREG05	(0x48)",
+"#define ADxREG06	(0x4C)",
+"#define ADxREG07	(0x50)",
+"",
+"/* Register Bit definition */",
+"#define ADxMOD0_ADS	(1<<0)",
+"#define ADxMOD1_DACON	(1<<7)",
+"",
+"/* Conversion mode (ADxMOD3) */",
+"#define	ADMD_CHFIX_SINGLE	0x00	// MOD3.REPEAT = 0, MODE3.SCAN = 0",
+"#define	ADMD_CHSCAN_SINGLE	0x01	// MOD3.REPEAT = 0, MODE3.SCAN = 1",
+"",
+"/*",
+" * A/D converter interrupt number",
+"*/",
+"#define	INTNO_INTADA	43",
+"#define	INTNO_INTADB	47",
+"",
+"#endif		/* __DEV_ADC_M367_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/10/21.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	msdrvif.c",
+" *",
+" *	mSDI: Simple Device driver I/F layer for micro T-Kernel",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"#include \"msdrvif.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * FastLock fot driver I/F access",
+" */",
+"",
+"#define	LockMSDI(msdi)		Lock(&msdi->lock)",
+"#define	UnlockMSDI(msdi)	Unlock(&msdi->lock)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" *	Processing function",
+" */",
+"",
+"/*",
+" * Open function",
+" */",
+"LOCAL ER msdi_openfn( ID devid, UINT omode, T_MSDI *msdi )",
+"{",
+"	ER	err;",
+"",
+"	if ( msdi->dmsdi.openfn == NULL ) return E_OK;",
+"",
+"	Lock(&msdi->lock);",
+"	err = (*msdi->dmsdi.openfn)(devid, omode, msdi);",
+"	Unlock(&msdi->lock);",
+"",
+"	return err;",
+"}",
+"",
+"/*",
+" * Close cunction",
+" */",
+"LOCAL ER msdi_closefn( ID devid, UINT option, T_MSDI *msdi )",
+"{",
+"	ER	err;",
+"",
+"	if ( msdi->dmsdi.closefn == NULL ) return E_OK;",
+"",
+"	Lock(&msdi->lock);",
+"	err = (*msdi->dmsdi.closefn)(devid, option, msdi);",
+"	Unlock(&msdi->lock);",
+"",
+"	return err;",
+"}",
+"",
+"/*",
+" * Processing start function",
+" */",
+"LOCAL ER msdi_execfn( T_DEVREQ *req, TMO tmout, T_MSDI *msdi )",
+"{",
+"	INT	(*fp)( T_DEVREQ*, T_MSDI* );",
+"	ER	err;",
+"",
+"	fp = ( req->cmd == TDC_READ )? msdi->dmsdi.readfn: msdi->dmsdi.writefn;",
+"	if ( fp == NULL ) return E_NOSPT;",
+"",
+"	if ( req->start >= 0 && msdi->dmsdi.blksz <= 0) return E_NOSPT;",
+"",
+"	/* I/O processing */",
+"	Lock(&msdi->lock);",
+"	err = (*fp)(req, msdi);",
+"	Unlock(&msdi->lock);",
+"",
+"	req->error = err;",
+"	return E_OK;",
+"}",
+"",
+"/*",
+" * Wait-for-completion function",
+" */",
+"LOCAL INT msdi_waitfn( T_DEVREQ *req, INT nreq, TMO tmout, T_MSDI *msdi )",
+"{",
+"	return 0;",
+"}",
+"",
+"/*",
+" * Abort processing function",
+" */",
+"LOCAL ER msdi_abortfn( ID tskid, T_DEVREQ *req, INT nreq, T_MSDI *msdi )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"/*",
+" * Event function",
+" */",
+"LOCAL INT msdi_eventfn( INT evttyp, void *evtinf, T_MSDI *msdi )",
+"{",
+"	INT	ret;",
+"",
+"	if ( msdi->dmsdi.eventfn == NULL ) return E_OK;",
+"",
+"	Lock(&msdi->lock);",
+"	ret = (*msdi->dmsdi.eventfn)(evttyp, evtinf, msdi);",
+"	Unlock(&msdi->lock);",
+"",
+"	return ret;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" *	Device registration",
+" */",
+"",
+"/*",
+" * SDI Device registration",
+" */",
+"EXPORT ER msdi_def_dev( T_DMSDI *dmsdi, T_IDEV *idev, T_MSDI **p_msdi )",
+"{",
+"	T_MSDI	*msdi;",
+"	T_DDEV	ddev;",
+"	ER	err;",
+"",
+"	/* Create \"SDI\"*/",
+"	msdi = Kmalloc(sizeof(T_MSDI));",
+"	if ( msdi == NULL ) {",
+"		err = E_NOMEM;",
+"		goto err_ret1;",
+"	}",
+"",
+"	msdi->dmsdi = *dmsdi;		/* Structure Copy */",
+"",
+"	/* Create the lock for exclusive access control */",
+"	err = CreateLock(&msdi->lock, dmsdi->devnm);",
+"	if ( err < E_OK ) goto err_ret2;",
+"",
+"	/* Device registration */",
+"	ddev.exinf   = msdi;",
+"	ddev.drvatr  = dmsdi->drvatr;",
+"	ddev.devatr  = dmsdi->devatr;",
+"	ddev.nsub    = dmsdi->nsub;",
+"	ddev.blksz   = dmsdi->blksz;",
+"	ddev.openfn  = (FP)msdi_openfn;",
+"	ddev.closefn = (FP)msdi_closefn;",
+"	ddev.execfn  = (FP)msdi_execfn;",
+"	ddev.waitfn  = (FP)msdi_waitfn;",
+"	ddev.abortfn = (FP)msdi_abortfn;",
+"	ddev.eventfn = (FP)msdi_eventfn;",
+"",
+"	err = tk_def_dev(msdi->dmsdi.devnm, &ddev, idev);",
+"	if ( err < E_OK )	goto err_ret3;",
+"	",
+"	msdi->devid = (ID)err;",
+"	if(p_msdi != NULL) {",
+"		*p_msdi = msdi;",
+"	}",
+"",
+"	return E_OK;",
+"",
+"err_ret3:",
+"	DeleteLock(&msdi->lock);",
+"err_ret2:",
+"	Kfree(msdi);",
+"err_ret1:",
+"	return err;",
+"}",
+"",
+"/*",
+" * Deregistration",
+" */",
+"EXPORT ER msdi_del_dev( T_MSDI *msdi )",
+"{",
+"	ER	err;",
+"",
+"	/* Deregister device */",
+"	err = tk_def_dev(msdi->dmsdi.devnm, NULL, NULL);",
+"	if ( err > E_OK ) {",
+"		DeleteLock(&msdi->lock);	/* Delete the lock for exclusive access control */",
+"		Kfree(msdi);			/* Delete \"SDI\" */",
+"		err = E_OK;",
+"	}",
+"	return err;",
+"}",
+"",
+"/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/10/21.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	msdrvif.h",
+" *",
+" *	mSDI: Simple Device driver I/F layer for micro T-Kernel",
+" */",
+"",
+"#ifndef	__DEVICE_MSDI_H__",
+"#define	__DEVICE_MSDI_H__",
+"",
+"/*",
+" * Device registration information",
+" */",
+"typedef struct S_MSDI	T_MSDI;",
+"",
+"typedef struct {",
+"	void*	exinf;		/* Extended information (may be optional) */",
+"	UB	devnm[L_DEVNM+1]; /* Physical device name */",
+"	ATR	drvatr;		/* Driver attributes */",
+"	ATR	devatr;		/* Device attributes */",
+"	INT	nsub;		/* Number of subunits */",
+"	INT	blksz;		/* Unique data block size (-1 = unknown) */",
+"",
+"	ER  (*openfn)( ID devid, UINT omode, T_MSDI* );",
+"	ER  (*closefn)( ID devid, UINT option, T_MSDI* );",
+"	INT (*readfn)( T_DEVREQ *req, T_MSDI *p_msdi );",
+"	INT (*writefn)( T_DEVREQ *req, T_MSDI *p_msdi );",
+"	INT (*eventfn)( INT evttyp, void *evtinf, T_MSDI* );",
+"} T_DMSDI;",
+"",
+"struct S_MSDI {",
+"	ID		devid;	/* Device ID*/",
+"	FastLock	lock;	/* Lock for exclusive access control */",
+"	T_DMSDI		dmsdi;	/* Device registration information */",
+"};",
+"",
+"",
+"/*",
+" * Device registration & Delete",
+" * ",
+" */",
+"IMPORT ER msdi_def_dev( T_DMSDI *ddev, T_IDEV *idev, T_MSDI** );	/* Register */",
+"IMPORT ER msdi_del_dev( T_MSDI* );					/* Delete */",
+"",
+"#endif /* __DEVICE_MSDI_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"#include <sys/machine.h>",
+"#include <tk/tkernel.h>",
+"#include <tstdlib.h>",
+"",
+"#include \"i2c.h\"",
+"#include \"../include/dev_def.h\"",
+"#if DEV_IIC_ENABLE",
+"/*",
+" *	i2c.c",
+" *	I2C device driver",
+"*/",
+"",
+"/*---------------------------------------------------------------------*/",
+"/*I2C Device driver Control block",
+" */",
+"#if TK_SUPPORT_MEMLIB",
+"",
+"LOCAL T_I2C_DCB	*dev_i2c_cb[DEV_I2C_UNITNM];",
+"#define		get_dcb_ptr(unit)	(dev_i2c_cb[unit])",
+"#define		get_dcb_mem(unit,a)	(&dev_i2c_cb[unit]->a)",
+"",
+"#else",
+"",
+"LOCAL T_I2C_DCB	dev_i2c_cb[DEV_I2C_UNITNM];",
+"#define		get_dcb_ptr(unit)	(&dev_I2C_cb[unit])",
+"#define		get_dcb_mem(unit,a)	(&dev_i2c_cb[unit].a)",
+"",
+"#endif",
+"",
+"/*---------------------------------------------------------------------*/",
+"/* Attribute data control",
+" */",
+"LOCAL ER read_atr(T_I2C_DCB *p_dcb, T_DEVREQ *req)",
+"{",
+"	ER	err	= E_OK;",
+"",
+"	switch(req->start) {",
+"	case TDN_EVENT:			/* MBF ID for event notification */",
+"		if(req->size >= sizeof(ID)) {",
+"			*(ID*)req->buf = p_dcb->evtmbfid;",
+"		} else if(req->size != 0) {",
+"			err = E_PAR;",
+"			break;",
+"		}",
+"		req->asize = sizeof(ID);",
+"		break;",
+"	default:",
+"		err = E_PAR;",
+"		break;",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"",
+"LOCAL ER write_atr(T_I2C_DCB *p_dcb, T_DEVREQ *req)",
+"{",
+"	T_I2C_EXEC	*p_ex;",
+"	W		rtn;",
+"	ER		err	= E_OK;",
+"",
+"	switch(req->start) {",
+"	case TDN_EVENT:			/* MBF ID for event notification */",
+"		if(req->size >= sizeof(ID)) {",
+"			p_dcb->evtmbfid = *(ID*)(req->buf);",
+"		} else if(req->size != 0) {",
+"			err = E_PAR;",
+"			break;",
+"		}",
+"		req->asize = sizeof(ID);",
+"		break;",
+"	case TDN_I2C_EXEC:",
+"		if(req->size >= sizeof(T_I2C_EXEC)) {",
+"			p_ex = (T_I2C_EXEC*)(req->buf);",
+"			if(p_ex->snd_size <=0 || p_ex->snd_size > DEVCNF_I2C_MAX_SDATSZ) return E_PAR;",
+"			if(p_ex->rcv_size <=0 || p_ex->rcv_size > DEVCNF_I2C_MAX_RDATSZ) return E_PAR;",
+"",
+"			rtn = dev_i2c_llctl(p_dcb->unit, LLD_I2C_EXEC, req->start, req->size, (UW*)p_ex);",
+"			if(rtn > 0) {",
+"				req->asize = sizeof(T_I2C_EXEC);",
+"			} else {",
+"				err = (ER)rtn;",
+"			}",
+"		} else if(req->size == 0){",
+"			req->asize = sizeof(T_I2C_EXEC);",
+"		} else {",
+"			err = E_PAR;",
+"		}",
+"		break;",
+"",
+"	default:",
+"		err = E_PAR;",
+"		break;",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"/*---------------------------------------------------------------------*/",
+"/*Device-specific data control",
+" */",
+"LOCAL ER read_data(T_I2C_DCB *p_dcb, T_DEVREQ *req)",
+"{",
+"	W	rtn;",
+"	ER	err	= E_OK;",
+"",
+"	if(req->size <=0 || req->size > DEVCNF_I2C_MAX_RDATSZ) return E_PAR;",
+"",
+"	if(req->size) {",
+"		rtn = dev_i2c_llctl(p_dcb->unit, LLD_I2C_READ, req->start, req->size, req->buf);",
+"		if(rtn > 0) {",
+"			req->asize = rtn;",
+"		} else {",
+"			err = (ER)rtn;",
+"		}",
+"",
+"	} else {",
+"		req->asize = req->size;",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"",
+"LOCAL ER write_data(T_I2C_DCB *p_dcb, T_DEVREQ *req)",
+"{",
+"	W	rtn;",
+"	ER	err	= E_OK;",
+"",
+"	if(req->size <=0 || req->size > DEVCNF_I2C_MAX_SDATSZ) return E_PAR;",
+"",
+"	if(req->size) {",
+"		rtn = dev_i2c_llctl(p_dcb->unit, LLD_I2C_WRITE, req->start, req->size, req->buf);",
+"		if(rtn > 0) {",
+"			req->asize = rtn;",
+"		} else {",
+"			err = (ER)rtn;",
+"		}",
+"",
+"	} else {",
+"		req->asize = req->size;",
+"	}",
+"",
+"",
+"	return err;",
+"}",
+"",
+"/*-------------------------------------------------------",
+" * mSDI I/F function",
+" *-------------------------------------------------------",
+" */",
+"/*----------------------------------------------------------------------",
+" * Open device",
+" */",
+"ER dev_i2c_openfn( ID devid, UINT omode, T_MSDI *msdi)",
+"{",
+"	T_I2C_DCB	*p_dcb;",
+"	ER		err;",
+"",
+"	p_dcb = (T_I2C_DCB*)(msdi->dmsdi.exinf);",
+"",
+"	/* Device Open operation */",
+"	p_dcb->omode = omode;",
+"	err = (ER)dev_i2c_llctl(p_dcb->unit, LLD_I2C_OPEN, 0, 0, 0);",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Close Device",
+" */",
+"ER dev_i2c_closefn( ID devid, UINT option, T_MSDI *msdi)",
+"{",
+"	T_I2C_DCB	*p_dcb;",
+"	ER		err;",
+"",
+"	p_dcb = (T_I2C_DCB*)(msdi->dmsdi.exinf);",
+"",
+"	/* Device Close operation */",
+"	err = (ER)dev_i2c_llctl(p_dcb->unit, LLD_I2C_CLOSE, 0, 0, 0);",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Read Device",
+" */",
+"ER dev_i2c_readfn( T_DEVREQ *req, T_MSDI *p_msdi)",
+"{",
+"	T_I2C_DCB	*p_dcb;",
+"	ER		err;",
+"",
+"	p_dcb = (T_I2C_DCB*)(p_msdi->dmsdi.exinf);",
+"",
+"	if(req->start >= 0) {",
+"		// Device specific data",
+"		err = read_data( p_dcb, req);",
+"	} else {",
+"		// Device attribute data",
+"		err = read_atr( p_dcb, req);",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Write Device",
+" */",
+"ER dev_i2c_writefn( T_DEVREQ *req, T_MSDI *p_msdi)",
+"{",
+"	T_I2C_DCB	*p_dcb;",
+"	ER		rtn;",
+"",
+"	p_dcb = (T_I2C_DCB*)(p_msdi->dmsdi.exinf);",
+"",
+"	if(req->start >= 0) {",
+"		// Device specific data",
+"		rtn = write_data( p_dcb, req);",
+"	} else {",
+"		// Device attribute data",
+"		rtn = write_atr( p_dcb, req);",
+"	}",
+"",
+"	return rtn;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Event Device",
+" */",
+"ER dev_i2c_eventfn( INT evttyp, void *evtinf, T_MSDI *msdi)",
+"{",
+"	return E_NOSPT;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device driver initialization and registration",
+" */",
+"EXPORT ER dev_init_i2c( UW unit )",
+"{",
+"	T_I2C_DCB	*p_dcb;",
+"	T_IDEV		idev;",
+"	T_MSDI		*p_msdi;",
+"	T_DMSDI		dmsdi;",
+"	ER		err;",
+"	INT		i;",
+"",
+"	if( unit >= DEV_I2C_UNITNM) return E_PAR;",
+"",
+"#if TK_SUPPORT_MEMLIB",
+"	p_dcb = (T_I2C_DCB*)Kmalloc(sizeof(T_I2C_DCB));",
+"	if( p_dcb == NULL) return E_NOMEM;",
+"	dev_i2c_cb[unit]	= p_dcb;",
+"#else",
+"	p_dcb = &dev_i2c_cb[unit];",
+"#endif",
+"",
+"	/* Device registration information */",
+"	dmsdi.exinf	= p_dcb;",
+"	dmsdi.drvatr	= 0;			/* Driver attributes */",
+"	dmsdi.devatr	= TDK_UNDEF;		/* Device attributes */",
+"	dmsdi.nsub	= 0;			/* Number of sub units */",
+"	dmsdi.blksz	= 1;			/* Unique data block size (-1 = unknown) */",
+"	dmsdi.openfn	= dev_i2c_openfn;",
+"	dmsdi.closefn	= dev_i2c_closefn;",
+"	dmsdi.readfn	= dev_i2c_readfn;",
+"	dmsdi.writefn	= dev_i2c_writefn;",
+"	dmsdi.eventfn	= dev_i2c_eventfn;",
+"	",
+"	knl_strcpy( (char*)dmsdi.devnm, DEVCNF_I2C_DEVNAME);",
+"	i = knl_strlen(DEVCNF_I2C_DEVNAME);",
+"	dmsdi.devnm[i] = (UB)('a' + unit);",
+"	dmsdi.devnm[i+1] = 0;",
+"",
+"	err = msdi_def_dev( &dmsdi, &idev, &p_msdi);",
+"	if(err != E_OK) goto err_2;",
+"",
+"	p_dcb->unit	= unit;",
+"	p_dcb->evtmbfid = idev.evtmbfid;",
+"",
+"	/* Low-level device initialization */",
+"	err = dev_i2c_llinit( get_dcb_ptr(unit));",
+"	if(err != E_OK) goto err_1;",
+"",
+"	/* Set default value for attribute data */",
+"",
+"	return E_OK;",
+"",
+"err_1:",
+"	msdi_del_dev(p_msdi);",
+"err_2:",
+"	Kfree(p_dcb);",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * I2C register access support function",
+" */",
+"",
+"EXPORT ER i2c_read_reg(ID dd, UW sadr, UW radr, UB *data)",
+"{",
+"	T_I2C_EXEC	exec;",
+"	SZ		asz;",
+"	ER		err;",
+"",
+"	exec.sadr	= sadr;",
+"	exec.snd_size	= 1;",
+"	exec.snd_data	= (UB*)&radr;",
+"	exec.rcv_size	= 1;",
+"	exec.rcv_data	= data;",
+"",
+"	err = tk_swri_dev(dd, TDN_I2C_EXEC, &exec, sizeof(T_I2C_EXEC), &asz);",
+"",
+"	return err;",
+"}",
+"",
+"EXPORT ER i2c_write_reg(ID dd, UW sadr, UW radr, UB data)",
+"{",
+"	UB	snd_data[2];",
+"	SZ	asz;",
+"	ER	err;",
+"",
+"	snd_data[0] = radr;",
+"	snd_data[1] = data;",
+"	",
+"	err = tk_swri_dev(dd, sadr, snd_data, sizeof(snd_data), &asz);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_IIC_ENABLE */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	i2c_cnf.h ",
+" *	I2C device driver",
+" *		Device configuration file",
+" */",
+"#ifndef	__DEV_I2C_CNF_H__",
+"#define	__DEV_I2C_CNF_H__",
+"",
+"",
+"#define	DEVCNF_I2C_DEVNAME	\"iic\"		// Device name (\"iic\")",
+"",
+"#define	DEVCNF_I2C_MAX_SDATSZ	100		// Maximum transmission data size",
+"#define	DEVCNF_I2C_MAX_RDATSZ	100		// Maximum received data size",
+"",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Hardware dependent definition",
+" */",
+"#define DEVDEF_I2C_CNF_PATH_(a)	#a",
+"#define DEVDEF_I2C_CNF_PATH(a)	DEVDEF_I2C_CNF_PATH_(a)",
+"#define DEVDEF_I2C_CNF_SYSDEP()	DEVDEF_I2C_CNF_PATH(sysdepend/TARGET_CPU_DIR/i2c_cnf_sysdep.h)",
+"#include DEVDEF_I2C_CNF_SYSDEP()",
+"",
+"#endif		/* __DEVCNF_I2C_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	i2c.h",
+" *	I2C device driver",
+" *	Driver local definition",
+" */",
+"",
+"#ifndef	__DEV_I2C_H__",
+"#define	__DEV_I2C_H__",
+"",
+"#include \"../common/drvif/msdrvif.h\"",
+"#include \"../include/dev_i2c.h\"",
+"#include \"i2c_cnf.h\"",
+"",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Hardware dependent definition",
+" */",
+"#define DEVDEF_I2C_PATH_(a)	#a",
+"#define DEVDEF_I2C_PATH(a)	DEVDEF_I2C_PATH_(a)",
+"#define DEVDEF_I2C_SYSDEP()	DEVDEF_I2C_PATH(sysdepend/TARGET_CPU_DIR/i2c_sysdep.h)",
+"#include DEVDEF_I2C_SYSDEP()",
+"",
+"/*---------------------------------------------------------------------*/",
+"/* Device driver Control block",
+" */",
+"typedef struct {",
+"	UW	unit;		/* Unit No. */",
+"	UINT	omode;		/* Open mode */",
+"",
+"	ID	evtmbfid;			/* MBF ID for event notification */",
+"} T_I2C_DCB;",
+"",
+"/*---------------------------------------------------------------------*/",
+"/* Device driver low-level interface",
+" * 	These functions are defined in the system dependent part.",
+" */",
+"IMPORT W dev_i2c_llctl( UW, INT, UW, UW, UW*);		/* Low-Level device control */",
+"IMPORT ER dev_i2c_llinit( T_I2C_DCB *p_dcb);	/* Low-level device initialization */",
+"",
+"typedef enum {",
+"	LLD_I2C_OPEN,",
+"	LLD_I2C_CLOSE,",
+"	LLD_I2C_READ,",
+"	LLD_I2C_WRITE,",
+"	LLD_I2C_EXEC,",
+"} T_LLD_I2C_CMD;",
+"",
+"",
+"#endif		/* __DEV_I2C_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2022-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/05.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	i2c_cnf_sysdep.h ",
+" *	I2C device configuration file",
+" *		for RP2040",
+" */",
+"#ifndef	__DEV_I2C_CNF_RP2040_H__",
+"#define	__DEV_I2C_CNF_RP2040_H__",
+"",
+"/* Device initialization */",
+"#define	DEVCNF_I2C_RESET	TRUE	// Reset I2C module",
+"#define	DEVCNF_I2C_SETPINFUNC	TRUE	// Set I/O pin function",
+"",
+"/* Register initial value */",
+"",
+"// Interrupt priority",
+"#define	DEVCNF_I2C0_INTPRI	2",
+"#define	DEVCNF_I2C1_INTPRI	2",
+"",
+"/* Communication timeout time */",
+"#define	DEVCNF_I2C0_TMO		1000",
+"#define	DEVCNF_I2C1_TMO		1000",
+"",
+"#endif		/* __DEV_I2C_CNF_RP2040_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RP2040",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../i2c.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_IIC_ENABLE",
+"/*",
+" *	i2c_rp2040.c",
+"  *	I2C device driver",
+" *	System-dependent definition for RP2040",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+"*/",
+"const LOCAL UW ba[DEV_I2C_UNITNM] = { I2C0_BASE, I2C1_BASE };",
+"",
+"/*----------------------------------------------------------------------",
+" * Device data",
+" **** This data is not used in beta version",
+"*/",
+"const LOCAL struct {",
+"	UINT	intno;		// Interrupt number",
+"	PRI	intpri;		// Interrupt priority",
+"	TMO	timout;		// I2C timeout time",
+"} ll_devdat[DEV_I2C_UNITNM] = {",
+"	{	/* I2C0 */",
+"		.intno		= INTNO_I2C0,",
+"		.intpri		= DEVCNF_I2C0_INTPRI,",
+"		.timout		= DEVCNF_I2C0_TMO,",
+"	},",
+"	{	/* I2C1 */",
+"		.intno		= INTNO_I2C1,",
+"		.intpri		= DEVCNF_I2C1_INTPRI,",
+"		.timout		= DEVCNF_I2C1_TMO,",
+"	},",
+"};",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"typedef struct {",
+"	ID	wait_tskid;	// Wait Task ID",
+"	UW	state;		// Operating state",
+"	UW	sadr;		// Slave address",
+"	ER	ioerr;		// Communication error",
+"	UW	err_reason;	// Error reason",
+"	UW	sdat_num;	// Number of send data",
+"	UW	rdat_num;	// Number of receive data",
+"	UB	*sbuf;		// Send buffer",
+"	UB	*rbuf;		// Receive buffer",
+"} T_I2C_LLDCB;",
+"LOCAL T_I2C_LLDCB	ll_devcb[DEV_I2C_UNITNM];",
+"",
+"#define I2C_INT_ERROR	(I2C_INT_TX_ABRT|I2C_INT_TX_OVER|I2C_INT_RX_OVER|I2C_INT_RX_UNDER)",
+"",
+"/*-------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"LOCAL void i2c_inthdr( UINT intno )",
+"{",
+"	T_I2C_LLDCB	*p_cb;",
+"	UW		i2c_sts, cmd;",
+"	INT		unit;",
+"	BOOL		abort	= FALSE;",
+"	BOOL		wup	= FALSE;",
+"",
+"	for ( unit = 0; unit < DEV_I2C_UNITNM; unit++ ) {",
+"		if ( ll_devdat[unit].intno == intno ) {",
+"			p_cb = &ll_devcb[unit];",
+"			break;",
+"		}",
+"	}",
+"	if(unit >= DEV_I2C_UNITNM) {",
+"		ClearInt(intno);	// Clear interrupt",
+"		return;",
+"	}",
+"",
+"	i2c_sts = in_w(I2C_INTR_STAT(unit));",
+"	switch ( p_cb->state ) {",
+"	case I2C_STS_SEND:",
+"		if(i2c_sts & I2C_INT_TX_EMPTY) {",
+"			cmd = *(p_cb->sbuf)++ & I2C_DATA_CMD_DAT;",
+"			if(--(p_cb->sdat_num)) {",
+"				cmd |= I2C_DATA_CMD_CMD_WRITE;",
+"			} else {	// Last data",
+"				clr_w(I2C_INTR_MASK(unit), I2C_INT_TX_EMPTY);",
+"				if(p_cb->rdat_num) {",
+"					cmd |= I2C_DATA_CMD_CMD_WRITE | I2C_DATA_CMD_RESTART;",
+"					p_cb->state = I2C_STS_START;",
+"				} else {",
+"					cmd |= I2C_DATA_CMD_CMD_WRITE | I2C_DATA_CMD_STOP;",
+"					p_cb->state = I2C_STS_STOP;",
+"				}",
+"				wup = TRUE;",
+"			}",
+"			out_w(I2C_DATA_CMD(unit), cmd);			",
+"		} else {	// Error",
+"			abort = TRUE;	// Error",
+"		}",
+"		break;",
+"	case I2C_STS_RECV:",
+"		if(i2c_sts & I2C_INT_RX_FULL) {",
+"			*(p_cb->rbuf)++ = in_w(I2C_DATA_CMD(unit)) & I2C_DATA_CMD_DAT;",
+"			if(--(p_cb->rdat_num)) {",
+"				cmd = I2C_DATA_CMD_CMD_READ;",
+"				out_w(I2C_DATA_CMD(unit), cmd);",
+"			} else {	// Last data",
+"				clr_w(I2C_INTR_MASK(unit), I2C_INT_RX_FULL);",
+"				p_cb->state = I2C_STS_STOP;",
+"				wup = TRUE;",
+"			}",
+"		} else {",
+"			abort = TRUE;	// Error",
+"		}",
+"		break;",
+"	default:",
+"		abort = TRUE;	// Error",
+"	}",
+"",
+"	if(abort) {",
+"		out_w(I2C_INTR_MASK(unit), 0);	// Mask all innterrupts",
+"		p_cb->ioerr = E_IO;",
+"		p_cb->err_reason = i2c_sts;",
+"		p_cb->state = I2C_STS_STOP;",
+"		wup = TRUE;",
+"	}",
+"",
+"	out_w(I2C_CLR_INTR(unit), 0);	// Clear all Interrupt Registers",
+"	ClearInt(intno);		// Clear interrupt",
+"",
+"	if(wup) {",
+"		if(p_cb->wait_tskid) {",
+"			tk_wup_tsk(p_cb->wait_tskid);",
+"			p_cb->wait_tskid = 0;",
+"		}",
+"	}",
+"}",
+"/*----------------------------------------------------------------------",
+" * Execution of communication",
+" */",
+"LOCAL ER i2c_trans(INT unit, T_I2C_LLDCB *p_cb)",
+"{",
+"	UW	cmd;",
+"	UINT	imask;",
+"	ER	err;",
+"",
+"	p_cb->ioerr = err = E_OK;",
+"",
+"	out_w(I2C_TAR(unit), p_cb->sadr & I2C_TAR_7BIT_ADR);	// Set slave address",
+"	out_w(I2C_INTR_MASK(unit), 0);				// Mask all innterrupts",
+"	out_w(I2C_ENABLE(unit), I2C_ENABLE_ENABLE);		// Enable I2C",
+"	out_w(I2C_CLR_INTR(unit), 0);				// Clear all Interrupt Registers",
+"	in_w(I2C_CLR_TX_ABRT(unit));				// Clear Transmit abort",
+"",
+"	while (p_cb->state != I2C_STS_STOP) {",
+"		DI(imask);",
+"		p_cb->wait_tskid = tk_get_tid();",
+"		if(p_cb->sdat_num > 0 ) {	/* Send */",
+"			set_w(I2C_INTR_MASK(unit), I2C_INT_TX_EMPTY|I2C_INT_ERROR);",
+"			p_cb->state = I2C_STS_SEND;",
+"		} else {			/* Receive */",
+"			if(p_cb->rdat_num > 1) {",
+"				cmd = I2C_DATA_CMD_CMD_READ;",
+"			} else {	// Last data",
+"				cmd = I2C_DATA_CMD_CMD_READ | I2C_DATA_CMD_STOP;",
+"			}",
+"			set_w(I2C_INTR_MASK(unit), I2C_INT_RX_FULL|I2C_INT_ERROR);",
+"			out_w(I2C_DATA_CMD(unit), cmd);				",
+"			p_cb->state = I2C_STS_RECV;",
+"		}",
+"		EI(imask);",
+"",
+"		if(p_cb->ioerr != E_OK) {",
+"			err = p_cb->ioerr;",
+"			break;",
+"		}",
+"",
+"		err = tk_slp_tsk(ll_devdat[unit].timout);",
+"		if ( err < E_OK ) break;",
+"		else err = p_cb->ioerr;",
+"	}",
+"	out_w(I2C_ENABLE(unit), 0);				// Disable I2C",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Set communication parameters",
+" */",
+"Inline void set_com_start(UW unit, UW sadr, UW sdat_num, UW rdat_num, UB *sbuf, UB *rbuf)",
+"{",
+"	ll_devcb[unit].state	= I2C_STS_START;",
+"	ll_devcb[unit].sadr	= sadr;		/* Slave address */",
+"	ll_devcb[unit].sdat_num	= sdat_num;	/* Number of send data */",
+"	ll_devcb[unit].rdat_num	= rdat_num;	/* Number of receive data */",
+"	ll_devcb[unit].sbuf	= sbuf;		/* Send buffer */",
+"	ll_devcb[unit].rbuf	= rbuf;		/* Receive buffer */",
+"}",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT W dev_i2c_llctl( UW unit, INT cmd, UW p1, UW p2, UW *pp)",
+"{",
+"	T_I2C_EXEC	*p_ex;",
+"	ER		err	= E_OK;",
+"",
+"	p_ex = (T_I2C_EXEC*)pp;",
+"",
+"	switch(cmd) {",
+"	case LLD_I2C_OPEN:",
+"		/* Initial Configuration */",
+"		out_w(I2C_ENABLE(unit), 0);						// Disable I2C",
+"",
+"		out_w(I2C_CON(unit), I2C_CON_SLAVE_DISABLE | I2C_CON_MASTER_MODE	// Master Mode",
+"			| I2C_CON_RESTART_EN | I2C_CON_TX_EMPTY_CTRL",
+"			| I2C_CON_7BIT_ADR | I2C_CON_SPEED_FAST);			// 7bit Address & Fast Speed",
+"",
+"		out_w(I2C_RX_TL(unit), 0);",
+"		out_w(I2C_TX_TL(unit), 0);",
+"		out_w(I2C_DMA_CR(unit), I2C_DMA_CR_RDMAE | I2C_DMA_CR_TDMAE);",
+"",
+"		/* Set Baudrate (400Kbts)*/",
+"		out_w(I2C_FS_SCL_HCNT(unit), 126);",
+"		out_w(I2C_FS_SCL_LCNT(unit), 187);",
+"		out_w(I2C_FS_SPKLEN(unit), 187/16);",
+"		out_w(I2C_SDA_HOLD(unit), 38);",
+"",
+"		/* I2C interrupt enable */",
+"		EnableInt(ll_devdat[unit].intno, ll_devdat[unit].intpri);",
+"		break;",
+"",
+"	case LLD_I2C_CLOSE:",
+"		/* I2C interrupt disable */",
+"		DisableInt(ll_devdat[unit].intno);",
+"		break;",
+"",
+"	case LLD_I2C_READ:",
+"		set_com_start( unit, p1, 0, p2, NULL, (UB*)pp);",
+"		err = i2c_trans(unit, &ll_devcb[unit]);",
+"		if(err >= E_OK) err = p_ex->rcv_size - ll_devcb[unit].rdat_num;",
+"		break;",
+"",
+"	case LLD_I2C_WRITE:",
+"		set_com_start( unit, p1, p2, 0, (UB*)pp, NULL);",
+"		err = i2c_trans(unit, &ll_devcb[unit]);",
+"		if(err >= E_OK) err = p_ex->snd_size - ll_devcb[unit].sdat_num;",
+"		break;",
+"",
+"	case LLD_I2C_EXEC:",
+"		set_com_start( unit, p_ex->sadr, p_ex->snd_size, p_ex->rcv_size, p_ex->snd_data, p_ex->rcv_data);",
+"		err = i2c_trans(unit, &ll_devcb[unit]);",
+"		if(err >= E_OK) err = p_ex->snd_size + p_ex->rcv_size;",
+"		break;",
+"	}",
+"	",
+"	return (W)err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_i2c_llinit( T_I2C_DCB *p_dcb)",
+"{",
+"	T_DINT	dint;",
+"	UW	unit;",
+"	ER	err	= E_OK;",
+"",
+"	unit = p_dcb->unit;",
+"",
+"	switch(unit) {",
+"	case DEV_I2C_0:",
+"",
+"#if DEVCNF_I2C_RESET",
+"		/* Reset I2C module*/",
+"		set_w( RESETS_RESET, RESETS_RESET_I2C0);",
+"		clr_w( RESETS_RESET, RESETS_RESET_I2C0);",
+"		while((in_w(RESETS_RESET_DONE)&(RESETS_RESET_I2C0))==0);",
+"#endif",
+"",
+"#if DEVCNF_I2C_SETPINFUNC",
+"		out_w(GPIO_CTRL(8), GPIO_CTRL_FUNCSEL_I2C);",
+"		out_w(GPIO(8), GPIO_IE | GPIO_DRIVE_4MA | GPIO_PUE | GPIO_SHEMITT);",
+"		out_w(GPIO_CTRL(9), GPIO_CTRL_FUNCSEL_I2C);",
+"		out_w(GPIO(9), GPIO_IE | GPIO_DRIVE_4MA | GPIO_PUE | GPIO_SHEMITT);",
+"#endif",
+"		break;",
+"	case DEV_I2C_1:",
+"#if DEVCNF_I2C_RESET",
+"		/* Reset I2C module*/",
+"		set_w( RESETS_RESET, RESETS_RESET_I2C1);",
+"		clr_w( RESETS_RESET, RESETS_RESET_I2C1);",
+"		while((in_w(RESETS_RESET_DONE)&(RESETS_RESET_I2C1))==0);",
+"#endif",
+"",
+"#if DEVCNF_I2C_SETPINFUNC",
+"		out_w(GPIO_CTRL(6), GPIO_CTRL_FUNCSEL_I2C);",
+"		out_w(GPIO(6), GPIO_IE | GPIO_DRIVE_4MA | GPIO_PUE | GPIO_SHEMITT);",
+"		out_w(GPIO_CTRL(7), GPIO_CTRL_FUNCSEL_I2C);",
+"		out_w(GPIO(7), GPIO_IE | GPIO_DRIVE_4MA | GPIO_PUE | GPIO_SHEMITT);",
+"		break;",
+"#endif",
+"	default:",
+"		return E_PAR;",
+"	}",
+"",
+"	out_w(I2C_ENABLE(unit), 0);			// Disable I2C",
+"",
+"	/* Interrupt handler definition */",
+"	dint.intatr	= TA_HLNG;",
+"	dint.inthdr	= i2c_inthdr;",
+"	",
+"	err = tk_def_int(ll_devdat[unit].intno, &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_IIC_ENABLE */",
+"#endif		/* CPU_RP2040 */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	i2c_sysdep.h",
+" *	I2C device driver",
+" *	System-dependent definition for RP2040",
+" */",
+"",
+"#ifndef	__DEV_I2C_RP2040_H__",
+"#define	__DEV_I2C_RP2040_H__",
+"",
+"#define	DEV_I2C_UNITNM		(2)	/* Number of devive units */",
+"#define	DEV_I2C_0		(0)	/* I2C1 */",
+"#define	DEV_I2C_1		(1)	/* I2C2 */",
+"",
+"/* I2C device driver operating state */",
+"#define	I2C_STS_START		0x0000",
+"#define	I2C_STS_RESTART		0x0001",
+"#define	I2C_STS_STOP		0x0003",
+"#define	I2C_STS_SEND		0x0004",
+"#define	I2C_STS_RECV		0x0005",
+"#define	I2C_STS_TOP		0x8000",
+"",
+"/*",
+" * RCC registers ( I2C Clock setting )",
+" */",
+"#define	RCC_CCIPR_I2CSEL	0x00003000	// I2C Clock source",
+"",
+"/*----------------------------------------------------------------------",
+" * I2C registers",
+" */",
+"/* Base address */",
+"#define	I2C0_BASE		0x40044000",
+"#define	I2C1_BASE		0x40048000",
+"",
+"/* Register offset */",
+"#define	I2Cx_CON		(0x00)		// I2C Control Register",
+"#define	I2Cx_TAR		(0x04)		// I2C Target Address Register",
+"#define	I2Cx_SAR		(0x08)		// I2C Slave Address Register",
+"#define	I2Cx_DATA_CMD		(0x10)		// I2C Rx/Tx Data Buffer and Command Register",
+"",
+"#define	I2Cx_SS_SCL_HCNT	(0x14)		// Standard Speed I2C Clock SCL High Count Register",
+"#define	I2Cx_SS_SCL_LCNT	(0x18)		// Standard Speed I2C Clock SCL Low Count Register",
+"#define	I2Cx_FS_SCL_HCNT	(0x1C)		// Fast Mode or Fast Mode Plus I2C Clock SCL High Count Register",
+"#define	I2Cx_FS_SCL_LCNT	(0x20)		// Fast Mode or Fast Mode Plus I2C Clock SCL Low Count Register",
+"",
+"#define	I2Cx_INTR_STAT		(0x2C)		// I2C Interrupt Status Register",
+"#define	I2Cx_INTR_MASK		(0x30)		// I2C Interrupt Mask Register",
+"#define I2Cx_RAW_INTR_STAT	(0x34)		// I2C Raw Interrupt Status Register",
+"",
+"#define	I2Cx_RX_TL		(0x38)		// I2C Receive FIFO Threshold Register",
+"#define	I2Cx_TX_TL		(0x3C)		// I2C Transmit FIFO Threshold Register",
+"",
+"#define	I2Cx_CLR_INTR		(0x40)		// Clear Combined and Individual Interrupt Register",
+"#define	I2Cx_CLR_RX_UNDER	(0x44)		// Clear RX_UNDER Interrupt Register",
+"#define	I2Cx_CLR_RX_OVER	(0x48)		// Clear RX_OVER Interrupt Register",
+"#define	I2Cx_CLR_TX_OVER	(0x4C)		// Clear TX_OVER Interrupt Register",
+"#define	I2Cx_CLR_RD_REQ		(0x50)		// Clear RD_REQ Interrupt Register",
+"#define	I2Cx_CLR_TX_ABRT	(0x54)		// Clear TX_ABRT Interrupt Register",
+"#define	I2Cx_CLR_RX_DONE	(0x58)		// Clear RX_DONE Interrupt Register",
+"#define	I2Cx_CLR_ACTIVITY	(0x5C)		// Clear ACTIVITY Interrupt Register",
+"#define	I2Cx_CLR_STOP_DET	(0x60)		// Clear STOP_DET Interrupt Register",
+"#define	I2Cx_CLR_START_DET	(0x64)		// Clear START_DET Interrupt Register",
+"#define	I2Cx_CLR_GEN_CALL	(0x68)		// Clear GEN_CALL Interrupt Register",
+"",
+"#define	I2Cx_ENABLE		(0x6C)		// I2C ENABLE Register",
+"#define	I2Cx_STATUS		(0x70)		// I2C STATUS Register",
+"#define	I2Cx_TXFLR		(0x74)		// I2C Transmit FIFO Level Register",
+"#define	I2Cx_RXFLR		(0x78)		// I2C Receive FIFO Level Register",
+"#define	I2Cx_SDA_HOLD		(0x7C)		// I2C SDA Hold Time Length Register",
+"#define	I2Cx_TX_ABRT_SOURCE	(0x80)		// I2C Transmit Abort Source Register",
+"#define	I2Cx_SLV_DATA_NACK_ONLY	(0x84)		// Generate Slave Data NACK Register",
+"",
+"#define	I2Cx_DMA_CR		(0x88)		// DMA Control Register",
+"#define	I2Cx_DMA_TDLR		(0x8C)		// DMA Transmit Data Level Register",
+"#define	I2Cx_DMA_RDLR		(0x90)		// DMA Transmit Data Level Register",
+"",
+"#define	I2Cx_SDA_SETUP		(0x94)		// I2C SDA Setup Register",
+"#define	I2Cx_ACK_GENERAL_CALL	(0x98)		// I2C ACK General Call Register",
+"#define	I2Cx_ENABLE_STATUS	(0x9C)		// I2C Enable Status Register",
+"#define	I2Cx_FS_SPKLEN		(0xA0)		// I2C SS, FS or FM+ spike suppression limit",
+"#define	I2Cx_CLR_RESTART_DET	(0xA8)		// Clear RESTART_DET Interrupt Register",
+"#define	I2Cx_COMP_PARAM_1	(0xF4)		// Component Parameter Register 1",
+"#define	I2Cx_COMP_VERSION	(0xF8)		// I2C Component Version Register",
+"#define	I2Cx_COMP_TYPE		(0xFc)		// I2C Component Type Register",
+"",
+"/* Register bit definition */",
+"#define	I2C_CON_TX_EMPTY_CTRL		(1<<8)",
+"#define	I2C_CON_SLAVE_DISABLE		(1<<6)",
+"#define	I2C_CON_RESTART_EN		(1<<5)",
+"#define	I2C_CON_7BIT_ADR		(0<<4)",
+"#define	I2C_CON_10BIT_ADR		(1<<4)",
+"#define	I2C_CON_SPEED_HIGH		(3<<1)",
+"#define	I2C_CON_SPEED_FAST		(2<<1)",
+"#define	I2C_CON_SPEED_STANDARD		(1<<1)",
+"#define	I2C_CON_MASTER_MODE		(1<<0)",
+"",
+"#define	I2C_TAR_7BIT_ADR		(0x007F)",
+"#define	I2C_TAR_10BIT_ADR		(0x03FF)",
+"",
+"#define	I2C_ENABLE_TX_CMD_BLOCK		(1<<2)",
+"#define	I2C_ENABLE_ABORT		(1<<1)",
+"#define	I2C_ENABLE_ENABLE		(1<<0)",
+"",
+"#define	I2C_DATA_CMD_FIRST_DATA_BYTE	(1<<11)",
+"#define	I2C_DATA_CMD_RESTART		(1<<10)",
+"#define	I2C_DATA_CMD_STOP		(1<<9)",
+"#define	I2C_DATA_CMD_CMD_WRITE		(0<<8)",
+"#define	I2C_DATA_CMD_CMD_READ		(1<<8)",
+"#define	I2C_DATA_CMD_DAT		(0x000000FF)",
+"",
+"#define	I2C_INT_RESTART_DET		(1<<12)	// Detect RESTART condition (slave)",
+"#define	I2C_INT_GEN_CALL		(1<<11)	// Receive general call address ",
+"#define	I2C_INT_START_DET		(1<<10)	// Detect STRAT & RESTART condition (master & slave)",
+"#define	I2C_INT_STOP_DET		(1<<9)	// Detect STOP condition (master & slave)",
+"#define	I2C_INT_ACTIVITY		(1<<8)	// Captures activity",
+"#define	I2C_INT_RX_DONE			(1<<7)	// Transfer completed(slave)",
+"#define	I2C_INT_TX_ABRT			(1<<6)	// Transmit abort  (master & slave)",
+"#define	I2C_INT_RD_REQ			(1<<5)	// Request to receive (slave)",
+"#define	I2C_INT_TX_EMPTY		(1<<4)	// Transmit buffer empty",
+"#define	I2C_INT_TX_OVER			(1<<3)	// Transmit buffer over",
+"#define	I2C_INT_RX_FULL			(1<<2)	// Receive buffer full",
+"#define	I2C_INT_RX_OVER			(1<<1)	// Receive buffer over",
+"#define	I2C_INT_RX_UNDER		(1<<0)	// Receive buffer under",
+"",
+"#define	I2C_STATUS_RFF			(1<<4)",
+"#define	I2C_STATUS_RFNE			(1<<3)",
+"#define	I2C_STATUS_TFE			(1<<2)",
+"#define	I2C_STATUS_TFNF			(1<<1)",
+"#define	I2C_STATUS_ACTIVITY		(1<<0)",
+"",
+"#define	I2C_DMA_CR_TDMAE		(1<<1)",
+"#define	I2C_DMA_CR_RDMAE		(1<<0)",
+"",
+"/*----------------------------------------------------------------------",
+" * I2C Register access macros",
+" */",
+"#define	I2C_CON(u)			(ba[u] + I2Cx_CON)		// I2C Control Register",
+"#define	I2C_TAR(u)			(ba[u] + I2Cx_TAR)		// I2C Target Address Register",
+"#define	I2C_SAR(u)			(ba[u] + I2Cx_SAR)		// I2C Slave Address Register",
+"#define	I2C_DATA_CMD(u)			(ba[u] + I2Cx_DATA_CMD)	// I2C Rx/Tx Data Buffer and Command Register",
+"#define	I2C_SS_SCL_HCNT(u)		(ba[u] + I2Cx_SS_SCL_HCNT)	// Standard Speed I2C Clock SCL High Count Register",
+"#define	I2C_SS_SCL_LCNT(u)		(ba[u] + I2Cx_SS_SCL_LCNT)	// Standard Speed I2C Clock SCL Low Count Register",
+"#define	I2C_FS_SCL_HCNT(u)		(ba[u] + I2Cx_FS_SCL_HCNT)	// Fast Mode or Fast Mode Plus I2C Clock SCL High Count Register",
+"#define	I2C_FS_SCL_LCNT(u)		(ba[u] + I2Cx_FS_SCL_LCNT)	// Fast Mode or Fast Mode Plus I2C Clock SCL Low Count Register",
+"#define	I2C_INTR_STAT(u)		(ba[u] + I2Cx_INTR_STAT)	// I2C Interrupt Status Register",
+"#define	I2C_INTR_MASK(u)		(ba[u] + I2Cx_INTR_MASK)	// I2C Interrupt Mask Register",
+"#define I2C_RAW_INTR_STAT(u)		(ba[u] + I2Cx_RAW_INTR_STAT)	// I2C Raw Interrupt Status Register",
+"#define	I2C_RX_TL(u)			(ba[u] + I2Cx_RX_TL)		// I2C Receive FIFO Threshold Register",
+"#define	I2C_TX_TL(u)			(ba[u] + I2Cx_TX_TL)		// I2C Transmit FIFO Threshold Register",
+"#define	I2C_CLR_INTR(u)			(ba[u] + I2Cx_CLR_INTR)	// Clear Combined and Individual Interrupt Register",
+"#define	I2C_CLR_RX_UNDER(u)		(ba[u] + I2Cx_CLR_RX_UNDER)	// Clear RX_UNDER Interrupt Register",
+"#define	I2C_CLR_RX_OVER(u)		(ba[u] + I2Cx_CLR_RX_OVER)	// Clear RX_OVER Interrupt Register",
+"#define	I2C_CLR_TX_OVER(u)		(ba[u] + I2Cx_CLR_TX_OVER)	// Clear TX_OVER Interrupt Register",
+"#define	I2C_CLR_RD_REQ(u)		(ba[u] + I2Cx_CLR_RD_REQ)	// Clear RD_REQ Interrupt Register",
+"#define	I2C_CLR_TX_ABRT(u)		(ba[u] + I2Cx_CLR_TX_ABRT)	// Clear TX_ABRT Interrupt Register",
+"#define	I2C_CLR_RX_DONE(u)		(ba[u] + I2Cx_CLR_RX_DONE)	// Clear RX_DONE Interrupt Register",
+"#define	I2C_CLR_ACTIVITY(u)		(ba[u] + I2Cx_CLR_ACTIVITY)	// Clear ACTIVITY Interrupt Register",
+"#define	I2C_CLR_STOP_DET(u)		(ba[u] + I2Cx_CLR_STOP_DET)	// Clear STOP_DET Interrupt Register",
+"#define	I2C_CLR_START_DET(u)		(ba[u] + I2Cx_CLR_START_DET)	// Clear START_DET Interrupt Register",
+"#define	I2C_CLR_GEN_CALL(u)		(ba[u] + I2Cx_CLR_GEN_CALL)	// Clear GEN_CALL Interrupt Register",
+"#define	I2C_ENABLE(u)			(ba[u] + I2Cx_ENABLE)		// I2C ENABLE Register",
+"#define	I2C_STATUS(u)			(ba[u] + I2Cx_STATUS)		// I2C STATUS Register",
+"#define	I2C_TXFLR(u)			(ba[u] + I2Cx_TXFLR)		// I2C Transmit FIFO Level Register",
+"#define	I2C_RXFLR(u)			(ba[u] + I2Cx_RXFLR)		// I2C Receive FIFO Level Register",
+"#define	I2C_SDA_HOLD(u)			(ba[u] + I2Cx_SDA_HOLD)	// I2C SDA Hold Time Length Register",
+"#define	I2C_TX_ABRT_SOURCE(u)		(ba[u] + I2Cx_TX_ABRT_SOURCE)	// I2C Transmit Abort Source Register",
+"#define	I2C_SLV_DATA_NACK_ONLY(u)	(ba[u] + I2Cx_SLV_DATA_NACK_ONLY)	// Generate Slave Data NACK Register",
+"#define	I2C_DMA_CR(u)			(ba[u] + I2Cx_DMA_CR)		// DMA Control Register",
+"#define	I2C_DMA_TDLR(u)			(ba[u] + I2Cx_DMA_TDLR)	// DMA Transmit Data Level Register",
+"#define	I2C_DMA_RDLR(u)			(ba[u] + I2Cx_DMA_RDLR)	// DMA Transmit Data Level Register",
+"#define	I2C_SDA_SETUP(u)		(ba[u] + I2Cx_SDA_SETUP)	// I2C SDA Setup Register",
+"#define	I2C_ACK_GENERAL_CALL(u)		(ba[u] + I2Cx_ACK_GENERAL_CALL)// I2C ACK General Call Register",
+"#define	I2C_ENABLE_STATUS(u)		(ba[u] + I2Cx_ENABLE_STATUS)	// I2C Enable Status Register",
+"#define	I2C_FS_SPKLEN(u)		(ba[u] + I2Cx_FS_SPKLEN)	// I2C SS, FS or FM+ spike suppression limit",
+"#define	I2C_CLR_RESTART_DET(u)		(ba[u] + I2Cx_CLR_RESTART_DET)	// Clear RESTART_DET Interrupt Register",
+"#define	I2C_COMP_PARAM_1(u)		(ba[u] + I2Cx_COMP_PARAM_1)	// Component Parameter Register 1",
+"#define	I2C_COMP_VERSION(u)		(ba[u] + I2Cx_COMP_VERSION)	// I2C Component Version Register",
+"#define	I2C_COMP_TYPE(u)		(ba[u] + I2Cx_COMP_TYPE)	// I2C Component Type Register",
+"",
+"/* ",
+" * I2C interrupt number",
+" */",
+"#define	INTNO_I2C0		23",
+"#define	INTNO_I2C1		24",
+"",
+"#endif		/* __DEV_I2C_RP2040_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	i2c_cnf_sysdep.h ",
+" *	I2C device configuration file",
+" *		for RX231",
+" */",
+"#ifndef	__DEV_I2C_CNF_RX231_H__",
+"#define	__DEV_I2C_CNF_RX231_H__",
+"",
+"/* Device initialization */",
+"#define DEVCONF_I2C_INIT_MSTP	FALSE		// Initialize module stop",
+"",
+"/* Frequency selection (0-7)  ICMR1.CKS */",
+"#define	DEVCNF_I2C_CKS		1",
+"",
+"/* Interrupt priority */",
+"#define	DEVCNF_I2C_INTPRI	5",
+"",
+"/* Communication timeout time */",
+"#define	DEVCNF_I2C_TMO		1000",
+"",
+"#endif		/* __DEV_I2C_CNF_RX231_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RX231",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../i2c.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_IIC_ENABLE",
+"/*",
+" *	i2c_rx231.c",
+"  *	I2C device driver",
+" *	System-dependent definition for RX231",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"typedef struct {",
+"	ID	wait_tskid;	/* Wait Task ID */",
+"	UW	state;		/* Operating state */",
+"	UW	sadr;		/* Slave address */",
+"	ER	ioerr;		/* Communication error */",
+"	UW	sdat_num;	/* Number of send data */",
+"	UW	rdat_num;	/* Number of receive data */",
+"	UB	*sbuf;		/* Send buffer */",
+"	UB	*rbuf;		/* Receive buffer */",
+"} T_I2C_LLDCB;",
+"",
+"T_I2C_LLDCB	ll_devcb;",
+"",
+"/*-------------------------------------------------------",
+" * Interrupt handler",
+" *-------------------------------------------------------",
+" */",
+"/*",
+" * TXI: Transmit data empty interrupt",
+" */",
+"LOCAL void i2c_txi_inthdr( UINT intno )",
+"{",
+"	UB	reg;",
+"",
+"	switch(ll_devcb.state) {",
+"	case I2C_STS_START:",
+"		if(ll_devcb.sdat_num > 0 ) {	/* Send */",
+"			out_b(RIIC_ICDRT, ll_devcb.sadr);",
+"			ll_devcb.state = I2C_STS_SEND;",
+"		} else {			/* Receive */",
+"			out_b(RIIC_ICDRT, (ll_devcb.sadr|1));",
+"			reg = in_b(RIIC_ICIER);",
+"			out_b(RIIC_ICIER, (reg | RIIC_ICIER_RIE) & ~RIIC_ICIER_TIE);",
+"			ll_devcb.state = I2C_STS_RECV | I2C_STS_TOP;",
+"		}",
+"		break;",
+"",
+"	case I2C_STS_SEND:",
+"		if(--(ll_devcb.sdat_num) <= 0) {",
+"			if(ll_devcb.rdat_num == 0) {",
+"				ll_devcb.state = I2C_STS_STOP;",
+"			} else {",
+"				ll_devcb.state = I2C_STS_RESTART;",
+"			}",
+"			reg = in_b(RIIC_ICIER);",
+"			out_b(RIIC_ICIER, (reg | RIIC_ICIER_TEIE) & ~RIIC_ICIER_TIE);",
+"		}",
+"		out_b(RIIC_ICDRT, *(ll_devcb.sbuf)++);",
+"		break;",
+"	}",
+"}",
+"",
+"/*",
+" * TEI: Transmission end interrupt",
+" */",
+"LOCAL void i2c_tei_inthdr( UINT intno )",
+"{",
+"	UB	reg;",
+"",
+"	switch(ll_devcb.state) {",
+"	case I2C_STS_STOP:",
+"		reg = in_b(RIIC_ICIER);",
+"		out_b(RIIC_ICIER, (reg & ~RIIC_ICIER_TEIE) |RIIC_ICIER_SPIE);",
+"		*(UB*)RIIC_ICCR2 |= RIIC_IICR2_SP;	// Stop condition",
+"		break;",
+"	",
+"	case I2C_STS_RESTART:",
+"		out_b( RIIC_ICIER , RIIC_ICIER_TIE | RIIC_ICIER_NAKIE);	/* Enable TXI & NAKI */",
+"		*(UB*)RIIC_ICCR2 |= RIIC_IICR2_RS;	// Rester condition",
+"		ll_devcb.state = I2C_STS_START;",
+"		break;",
+"	}",
+"}",
+"",
+"",
+"LOCAL void i2c_rxi_inthdr( UINT intno )",
+"{",
+"	UB	reg;",
+"",
+"	switch(ll_devcb.state) {",
+"	case I2C_STS_RECV | I2C_STS_TOP:",
+"		if(ll_devcb.rdat_num <= 2) {	// Last data -2",
+"			*(UB*)RIIC_ICMR3 |= RIIC_ICMR3_WAIT;",
+"		}",
+"		if(ll_devcb.rdat_num == 1) {	//Next is the final data",
+"			*(UB*)RIIC_ICMR3 |= RIIC_ICMR3_ACKBT;",
+"			ll_devcb.state = I2C_STS_RECV | I2C_STS_LAST;",
+"		} else {",
+"			ll_devcb.state = I2C_STS_RECV;",
+"		}",
+"		in_b(RIIC_ICDRR);	// Dummy read",
+"		break;",
+"",
+"	case I2C_STS_RECV:",
+"		if(ll_devcb.rdat_num == 3) {	// Last data -2",
+"			*(UB*)RIIC_ICMR3 |= RIIC_ICMR3_WAIT;",
+"		}",
+"		if(ll_devcb.rdat_num == 2) {	//Next is the final data",
+"			*(UB*)RIIC_ICMR3 |= RIIC_ICMR3_ACKBT;",
+"			ll_devcb.state = I2C_STS_RECV | I2C_STS_LAST;",
+"		}",
+"		*ll_devcb.rbuf++ = in_b(RIIC_ICDRR);",
+"		ll_devcb.rdat_num--;",
+"		break;",
+"",
+"	case I2C_STS_RECV | I2C_STS_LAST:",
+"		*(UB*)RIIC_ICSR2 &= ~RIIC_ICSR2_STOP;",
+"		reg = in_b(RIIC_ICIER);",
+"		out_b(RIIC_ICIER, (reg | RIIC_ICIER_SPIE) & ~RIIC_ICIER_RIE);",
+"		*(UB*)RIIC_ICCR2 |= RIIC_IICR2_SP;",
+"		*ll_devcb.rbuf++ = in_b(RIIC_ICDRR);",
+"		*(UB*)RIIC_ICMR3 &= ~RIIC_ICMR3_WAIT;",
+"		ll_devcb.state = I2C_STS_STOP;",
+"		break;",
+"	}",
+"}",
+"",
+"LOCAL void i2c_eei_inthdr( UINT intno )",
+"{",
+"	UB	reg;",
+"",
+"	reg = in_b(RIIC_ICSR2);",
+"",
+"	if(reg & RIIC_ICSR2_STOP) {		/* Detects stop condition */",
+"		if (ll_devcb.state != I2C_STS_STOP) {",
+"			ll_devcb.ioerr = E_IO;",
+"		}",
+"		out_b( RIIC_ICIER, 0);",
+"		if(ll_devcb.wait_tskid) {",
+"			tk_wup_tsk(ll_devcb.wait_tskid);",
+"			ll_devcb.wait_tskid = 0;",
+"		}",
+"	} else {",
+"		ll_devcb.ioerr = E_IO;",
+"		ll_devcb.state = I2C_STS_STOP;",
+"		*(UB*)RIIC_ICSR2 &= ~RIIC_ICSR2_STOP;",
+"		out_b( RIIC_ICIER, RIIC_ICIER_SPIE);",
+"		*(UB*)RIIC_ICCR2 |= RIIC_IICR2_SP;	/* Stop condition */",
+"	}",
+"}",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Execution of communication",
+" */",
+"LOCAL ER i2c_trans( void)",
+"{",
+"	UB		reg;",
+"	ER		err;",
+"",
+"	if( in_b(RIIC_ICCR2) & RIIC_IICR2_BBSY) {",
+"		ll_devcb.ioerr = E_BUSY;		/* I2C bus busy */",
+"		return E_BUSY;",
+"	}",
+"",
+"	ll_devcb.ioerr		= E_OK;",
+"	ll_devcb.wait_tskid 	= tk_get_tid();",
+"",
+"	out_b( RIIC_ICIER , RIIC_ICIER_TIE | RIIC_ICIER_NAKIE);	/* Enable TXI & NAKI */",
+"//	out_b( RIIC_ICIER , 0xFF);	/* Enable TXI & NAKI */",
+"	*(UB*)RIIC_ICCR2 |= RIIC_IICR2_ST;		/* start condition */",
+"",
+"	err = tk_slp_tsk(DEVCNF_I2C_TMO);",
+"	if ( ll_devcb.ioerr != E_OK ) {",
+"		err = ll_devcb.ioerr;",
+"	}",
+"",
+"	out_b( RIIC_ICIER, 0);",
+"	reg = in_b(RIIC_ICSR2);",
+"	out_b( RIIC_ICSR2, reg & ~RIIC_ICSR2_STOP & ~RIIC_ICSR2_NACKF);",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Set communication start parameters",
+" */",
+"Inline void set_com_start(UW sadr, UW sdat_num, UW rdat_num, UB *sbuf, UB *rbuf)",
+"{",
+"	ll_devcb.state		= I2C_STS_START;",
+"	ll_devcb.sadr		= sadr<<1;	/* Slave address */",
+"	ll_devcb.sdat_num	= sdat_num;	/* Number of send data */",
+"	ll_devcb.rdat_num	= rdat_num;	/* Number of receive data */",
+"	ll_devcb.sbuf		= sbuf;		/* Send buffer */",
+"	ll_devcb.rbuf		= rbuf;		/* Receive buffer */",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT W dev_i2c_llctl( UW unit, INT cmd, UW p1, UW p2, UW *pp)",
+"{",
+"	T_I2C_EXEC	*p_ex;",
+"	ER		err	= E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_I2C_OPEN:",
+"		/* I2C Device reset */",
+"		out_b( RIIC_ICCR1, RIIC_ICCR1_IICRST | RIIC_ICCR1_SOWP);",
+"		out_b( RIIC_ICCR1, RIIC_ICCR1_IICRST| RIIC_ICCR1_ICE | RIIC_ICCR1_SOWP);",
+"",
+"		/* I2C Initial setting */",
+"		out_b( RIIC_ICSER, 0);",
+"		out_b( RIIC_ICMR1, DEVCNF_I2C_CKS<<4 );",
+"		//out_b( RIIC_ICMR3, RIIC_ICMR3_ACKWP);",
+"		out_b( RIIC_ICBRH, RIIC_ICBRH_INI);",
+"		out_b( RIIC_ICBRL, RIIC_ICBRL_INI);",
+"",
+"		/* Interrupt initialize */",
+"		out_b( RIIC_ICIER, 0);",
+"		out_b( RIIC_ICSR2, 0);",
+"		EnableInt( INTNO_RIIC_EEI, DEVCNF_I2C_INTPRI);",
+"		EnableInt( INTNO_RIIC_RXI, DEVCNF_I2C_INTPRI);",
+"		EnableInt( INTNO_RIIC_TXI, DEVCNF_I2C_INTPRI);",
+"		EnableInt( INTNO_RIIC_TEI, DEVCNF_I2C_INTPRI);",
+"",
+"		/* Release reset */",
+"		out_b( RIIC_ICCR1,  RIIC_ICCR1_ICE | RIIC_ICCR1_SOWP);",
+"		break;",
+"",
+"	case LLD_I2C_CLOSE:",
+"		/* Disable I2C interrupt */",
+"		DisableInt(INTNO_RIIC_EEI);",
+"		DisableInt(INTNO_RIIC_RXI);",
+"		DisableInt(INTNO_RIIC_TXI);",
+"		DisableInt(INTNO_RIIC_TEI);",
+"		break;",
+"",
+"	case LLD_I2C_READ:",
+"		set_com_start( p1, 0, p2, NULL, (UB*)pp);",
+"		err = i2c_trans();",
+"		if(err >= E_OK) err = p2 - ll_devcb.sdat_num;",
+"		break;",
+"",
+"	case LLD_I2C_WRITE:",
+"		set_com_start( p1, p2, 0, (UB*)pp, NULL);",
+"		err = i2c_trans();",
+"		if(err >= E_OK) err = p2 - ll_devcb.sdat_num;",
+"		break;",
+"",
+"	case LLD_I2C_EXEC:",
+"		p_ex = (T_I2C_EXEC*)pp;",
+"		set_com_start( (p_ex->sadr), p_ex->snd_size, p_ex->rcv_size, p_ex->snd_data, p_ex->rcv_data);",
+"		err = i2c_trans();",
+"		if(err >= E_OK) err = p_ex->snd_size + p_ex->rcv_size;",
+"		break;",
+"	}",
+"	",
+"	return (W)err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_i2c_llinit( T_I2C_DCB *p_dcb)",
+"{",
+"	T_DINT	dint;",
+"	ER	err;",
+"",
+"#if DEVCONF_I2C_INIT_MSTP		// Initialize module stop",
+"	UINT	sts;",
+"",
+"	if(in_w(MSTPCRB) & (1<<21)) {",
+"		DI(sts);",
+"		out_h(SYSTEM_PRCR, 0xA502);		// Disable Register Protect",
+"		*(UW*)(MSTPCRB) &= ~(1<<21);		// Release module stop",
+"		out_h(SYSTEM_PRCR, 0xA500);		// Enable Register protect",
+"		EI(sts);",
+"	}",
+"#endif	/* DEVCONF_I2C_INIT_MSTP */",
+"",
+"	*(UB*)RIIC_ICCR1 &= ~RIIC_ICCR1_ICE;		// Disable RIIC",
+"",
+"	/* Interrupt handler definition */",
+"	dint.intatr	= TA_HLNG;",
+"	dint.inthdr	= i2c_eei_inthdr;",
+"	err = tk_def_int(INTNO_RIIC_EEI, &dint);",
+"",
+"	dint.inthdr	= i2c_rxi_inthdr;",
+"	err = tk_def_int(INTNO_RIIC_RXI, &dint);",
+"",
+"	dint.inthdr	= i2c_txi_inthdr;",
+"	err = tk_def_int(INTNO_RIIC_TXI, &dint);",
+"",
+"	dint.inthdr	= i2c_tei_inthdr;",
+"	err = tk_def_int(INTNO_RIIC_TEI, &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_IIC_ENABLE */",
+"#endif		/* CPU_RX231 */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	i2c_sysdep.h",
+" *	I2C device driver",
+" *	System-dependent definition for RX231",
+" */",
+"",
+"#ifndef	__DEV_I2C_RX231_H__",
+"#define	__DEV_I2C_RX231_H__",
+"",
+"#define	DEV_I2C_UNITNM		(1)	/* Number of devive units */",
+"",
+"/* I2C device driver operating state */",
+"#define	I2C_STS_START		0x0000",
+"#define	I2C_STS_RESTART		0x0001",
+"#define	I2C_STS_STOP		0x0003",
+"#define	I2C_STS_SEND		0x0004",
+"#define	I2C_STS_RECV		0x0005",
+"#define	I2C_STS_TOP		0x8000",
+"#define	I2C_STS_LAST		0x0800",
+"",
+"/*----------------------------------------------------------------------",
+" * RIIC registers",
+" */",
+"#define	RIIC_BASE		0x00088300",
+"",
+"#define	RIIC_ICCR1		(RIIC_BASE+0x00)	/* I2C bus cintrol reg. 1 */",
+"#define	RIIC_ICCR2		(RIIC_BASE+0x01)	/* I2C bus cintrol reg. 2 */",
+"#define RIIC_ICMR1		(RIIC_BASE+0x02)	/* I2C bus mode reg. 1 */",
+"#define RIIC_ICMR2		(RIIC_BASE+0x03)	/* I2C bus mode reg. 2 */",
+"#define RIIC_ICMR3		(RIIC_BASE+0x04)	/* I2C bus mode reg. 3 */",
+"#define	RIIC_ICFER		(RIIC_BASE+0x05)	/* I2C bus function enable reg */",
+"#define	RIIC_ICSER		(RIIC_BASE+0x06)	/* I2C bus Status enable reg. */",
+"#define	RIIC_ICIER		(RIIC_BASE+0x07)	/* I2C bus Interrupt enable reg. */",
+"#define	RIIC_ICSR1		(RIIC_BASE+0x08)	/* I2C bus Status reg. 1 */",
+"#define	RIIC_ICSR2		(RIIC_BASE+0x09)	/* I2C bus Status reg. 2 */",
+"",
+"#define	RIIC_SARL(y)		(RIIC_BASE+0x0A+(y<<1))	/* Slave address reg. L0~2 */",
+"#define	RIIC_SARU(y)		(RIIC_BASE+0x0B+(y<<1))	/* Slave address reg. U0~2 */",
+"",
+"#define	RIIC_ICBRL		(RIIC_BASE+ 0x10)	/* I2C bus bit rate Low reg. */",
+"#define	RIIC_ICBRH		(RIIC_BASE+ 0x11)	/* I2C bus bit rate High reg. */",
+"#define	RIIC_ICDRT		(RIIC_BASE+ 0x12)	/* I2C bus transmit data reg. */",
+"#define	RIIC_ICDRR		(RIIC_BASE+ 0x13)	/* I2C bus receive data reg. */",
+"",
+"#define	RIIC_ICCR1_ICE		(1<<7)	",
+"#define	RIIC_ICCR1_IICRST	(1<<6)",
+"#define	RIIC_ICCR1_SOWP		(1<<4)",
+"",
+"#define	RIIC_IICR2_BBSY		(1<<7)",
+"#define	RIIC_IICR2_ST		(1<<1)",
+"#define	RIIC_IICR2_RS		(1<<2)",
+"#define	RIIC_IICR2_SP		(1<<3)",
+"",
+"#define RIIC_ICMR3_WAIT		(1<<6)",
+"#define RIIC_ICMR3_ACKWP	(1<<4)",
+"#define RIIC_ICMR3_ACKBT	(1<<3)",
+"",
+"#define	RIIC_ICIER_TIE		(1<<7)",
+"#define	RIIC_ICIER_TEIE		(1<<6)",
+"#define	RIIC_ICIER_RIE		(1<<5)",
+"#define	RIIC_ICIER_NAKIE	(1<<4)",
+"#define	RIIC_ICIER_SPIE		(1<<3)",
+"#define	RIIC_ICIER_STIE		(1<<2)",
+"#define	RIIC_ICIER_ALIE		(1<<1)",
+"#define	RIIC_ICIER_TMOIE	(1<<0)",
+"",
+"#define RIIC_ICSR2_TDRE		(1<<7)",
+"#define RIIC_ICSR2_TEND		(1<<6)",
+"#define RIIC_ICSR2_RDRF		(1<<5)",
+"#define RIIC_ICSR2_NACKF	(1<<4)",
+"#define RIIC_ICSR2_STOP		(1<<3)",
+"#define RIIC_ICSR2_START	(1<<2)",
+"#define RIIC_ICSR2_AL		(1<<1)",
+"#define RIIC_ICSR2_TMOF		(1<<0)",
+"",
+"",
+"/* Register initial value */",
+"#define	RIIC_ICMR1_INI		(1<<4)",
+"#define	RIIC_ICBRH_INI		(14-1)",
+"#define	RIIC_ICBRL_INI		(21-1)",
+"",
+"/* ",
+" * I2C interrupt number",
+"  */",
+"#define	INTNO_RIIC_EEI		246",
+"#define	INTNO_RIIC_RXI		247",
+"#define	INTNO_RIIC_TXI		248",
+"#define	INTNO_RIIC_TEI		249",
+"",
+"#endif		/* __DEV_I2C_RX231_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	i2c_cnf_sysdep.h ",
+" *	I2C device configuration file",
+" *		for RX65N",
+" */",
+"#ifndef	__DEV_I2C_CNF_RX65N_H__",
+"#define	__DEV_I2C_CNF_RX65N_H__",
+"",
+"/* Device initialization */",
+"#define DEVCONF_I2C_INIT_MSTP	FALSE		// Initialize module stop",
+"",
+"/* Communication bit rate setting */",
+"#define	DEVCNF_I2C_CKS		5		// Frequency selection (0-7)  ICMR1.CKS",
+"#define	DEVCNF_ICBRH_INI	(0xEE)",
+"#define	DEVCNF_ICBRL_INI	(0xF1)",
+"",
+"/* Interrupt priority */",
+"#define	DEVCNF_I2C0_INTPRI	5",
+"#define	DEVCNF_I2C1_INTPRI	5",
+"#define	DEVCNF_I2C2_INTPRI	5",
+"",
+"/* Communication timeout time */",
+"#define	DEVCNF_I2C0_TMO		1000",
+"#define	DEVCNF_I2C1_TMO		1000",
+"#define	DEVCNF_I2C2_TMO		1000",
+"",
+"#endif		/* __DEV_I2C_CNF_RX65N_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RX65N",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../i2c.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_IIC_ENABLE",
+"/*",
+" *	i2c_rx65n.c",
+"  *	I2C device driver",
+" *	System-dependent definition for RX65N",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+"*/",
+"const LOCAL UW ba[DEV_I2C_UNITNM] = { RIIC0_BASE, RIIC1_BASE, RIIC2_BASE };",
+"",
+"#define	RIIC_ICCR1(x)		(ba[x] + RIICx_ICCR1)	/* I2C bus cintrol reg. 1 */",
+"#define	RIIC_ICCR2(x)		(ba[x] + RIICx_ICCR2)	/* I2C bus cintrol reg. 2 */",
+"#define RIIC_ICMR1(x)		(ba[x] + RIICx_ICMR1)	/* I2C bus mode reg. 1 */",
+"#define RIIC_ICMR2(x)		(ba[x] + RIICx_ICMR2)	/* I2C bus mode reg. 2 */",
+"#define RIIC_ICMR3(x)		(ba[x] + RIICx_ICMR3)	/* I2C bus mode reg. 3 */",
+"#define	RIIC_ICFER(x)		(ba[x] + RIICx_ICFER)	/* I2C bus function enable reg */",
+"#define	RIIC_ICSER(x)		(ba[x] + RIICx_ICSER)	/* I2C bus Status enable reg. */",
+"#define	RIIC_ICIER(x)		(ba[x] + RIICx_ICIER)	/* I2C bus Interrupt enable reg. */",
+"#define	RIIC_ICSR1(x)		(ba[x] + RIICx_ICSR1)	/* I2C bus Status reg. 1 */",
+"#define	RIIC_ICSR2(x)		(ba[x] + RIICx_ICSR2)	/* I2C bus Status reg. 2 */",
+"",
+"#define	RIIC_SARL(x,y)		(ba[x] + RIICx_SARL(y))	/* Slave address reg. L0~2 */",
+"#define	RIIC_SARU(x,y)		(ba[x] + RIICx_SARU(y))	/* Slave address reg. U0~2 */",
+"",
+"#define	RIIC_ICBRL(x)		(ba[x] + RIICx_ICBRL)	/* I2C bus bit rate Low reg. */",
+"#define	RIIC_ICBRH(x)		(ba[x] + RIICx_ICBRH)	/* I2C bus bit rate High reg. */",
+"#define	RIIC_ICDRT(x)		(ba[x] + RIICx_ICDRT)	/* I2C bus transmit data reg. */",
+"#define	RIIC_ICDRR(x)		(ba[x] + RIICx_ICDRR)	/* I2C bus receive data reg. */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device data",
+"*/",
+"const LOCAL struct {",
+"	UINT	intno_rxi;	// Interrupt number (RXI)",
+"	UINT	intno_txi;	// Interrupt number (TXI)",
+"	UINT	intno_tei;	// Interrupt number (TEI)",
+"	UINT	intno_eei;	// Interrupt number (EEI)",
+"	PRI	intpri;		// Interrupt priority",
+"	TMO	timout;		// I2C timeout time",
+"} ll_devdat[DEV_I2C_UNITNM] = {",
+"	{",
+"		.intno_rxi	= INTNO_RIIC0_RXI,",
+"		.intno_txi	= INTNO_RIIC0_TXI,",
+"		.intno_tei	= INTNO_RIIC0_TEI,",
+"		.intno_eei	= INTNO_RIIC0_EEI,",
+"		.intpri		= DEVCNF_I2C0_INTPRI,",
+"		.timout		= DEVCNF_I2C0_TMO,",
+"	},",
+"	{",
+"		.intno_rxi	= INTNO_RIIC1_RXI,",
+"		.intno_txi	= INTNO_RIIC1_TXI,",
+"		.intno_tei	= INTNO_RIIC1_TEI,",
+"		.intno_eei	= INTNO_RIIC1_EEI,",
+"		.intpri		= DEVCNF_I2C1_INTPRI,",
+"		.timout		= DEVCNF_I2C1_TMO,",
+"	},",
+"	{",
+"		.intno_rxi	= INTNO_RIIC2_RXI,",
+"		.intno_txi	= INTNO_RIIC2_TXI,",
+"		.intno_tei	= INTNO_RIIC2_TEI,",
+"		.intno_eei	= INTNO_RIIC2_EEI,",
+"		.intpri		= DEVCNF_I2C2_INTPRI,",
+"		.timout		= DEVCNF_I2C2_TMO,",
+"	},",
+"};",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"typedef struct {",
+"	ID	wait_tskid;	/* Wait Task ID */",
+"	UW	state;		/* Operating state */",
+"	UW	sadr;		/* Slave address */",
+"	ER	ioerr;		/* Communication error */",
+"	UW	sdat_num;	/* Number of send data */",
+"	UW	rdat_num;	/* Number of receive data */",
+"	UB	*sbuf;		/* Send buffer */",
+"	UB	*rbuf;		/* Receive buffer */",
+"} T_I2C_LLDCB;",
+"",
+"T_I2C_LLDCB	ll_devcb[DEV_I2C_UNITNM];",
+"",
+"/*-------------------------------------------------------",
+" * Interrupt handler",
+" *-------------------------------------------------------",
+" */",
+"/*",
+" * TXI: Transmit data empty interrupt",
+" */",
+"LOCAL void i2c_txi_inthdr( UINT intno )",
+"{",
+"	T_I2C_LLDCB	*p_cb;",
+"	INT		unit;",
+"	UB		reg;",
+"",
+"	for ( unit = 0; unit < DEV_I2C_UNITNM; unit++ ) {",
+"		if ( ll_devdat[unit].intno_txi == intno ) {",
+"			p_cb = &ll_devcb[unit];",
+"			break;",
+"		}",
+"	}",
+"	if(unit >= DEV_I2C_UNITNM) {",
+"		ClearInt(intno);	// Clear interrupt",
+"		return;",
+"	}",
+"",
+"	switch(p_cb->state) {",
+"	case I2C_STS_START:",
+"		if(p_cb->sdat_num > 0 ) {	/* Send */",
+"			out_b(RIIC_ICDRT(unit), ll_devcb[unit].sadr);",
+"			p_cb->state = I2C_STS_SEND;",
+"		} else {			/* Receive */",
+"			out_b(RIIC_ICDRT(unit), (p_cb->sadr|1));",
+"			reg = in_b(RIIC_ICIER(unit));",
+"			out_b(RIIC_ICIER(unit), (reg | RIIC_ICIER_RIE) & ~RIIC_ICIER_TIE);",
+"			p_cb->state = I2C_STS_RECV | I2C_STS_TOP;",
+"		}",
+"		break;",
+"",
+"	case I2C_STS_SEND:",
+"		if(--(p_cb->sdat_num) <= 0) {",
+"			if(p_cb->rdat_num == 0) {",
+"				p_cb->state = I2C_STS_STOP;",
+"			} else {",
+"				p_cb->state = I2C_STS_RESTART;",
+"			}",
+"			reg = in_b(RIIC_ICIER(unit));",
+"			out_b(RIIC_ICIER(unit), (reg | RIIC_ICIER_TEIE) & ~RIIC_ICIER_TIE);",
+"		}",
+"		out_b(RIIC_ICDRT(unit), *(p_cb->sbuf)++);",
+"		break;",
+"	}",
+"}",
+"",
+"LOCAL void i2c_rxi_inthdr( UINT intno )",
+"{",
+"	T_I2C_LLDCB	*p_cb;",
+"	INT		unit;",
+"	UB		reg;",
+"",
+"	for ( unit = 0; unit < DEV_I2C_UNITNM; unit++ ) {",
+"		if ( ll_devdat[unit].intno_rxi == intno ) {",
+"			p_cb = &ll_devcb[unit];",
+"			break;",
+"		}",
+"	}",
+"	if(unit >= DEV_I2C_UNITNM) {",
+"		ClearInt(intno);	// Clear interrupt",
+"		return;",
+"	}",
+"",
+"	switch(p_cb->state) {",
+"	case I2C_STS_RECV | I2C_STS_TOP:",
+"		if(p_cb->rdat_num <= 2) {	// Last data -2",
+"			*(UB*)RIIC_ICMR3(unit) |= RIIC_ICMR3_WAIT;",
+"		}",
+"		if(p_cb->rdat_num == 1) {	//Next is the final data",
+"			*(UB*)RIIC_ICMR3(unit) |= RIIC_ICMR3_ACKBT;",
+"			p_cb->state = I2C_STS_RECV | I2C_STS_LAST;",
+"		} else {",
+"			p_cb->state = I2C_STS_RECV;",
+"		}",
+"		in_b(RIIC_ICDRR(unit));	// Dummy read",
+"		break;",
+"",
+"	case I2C_STS_RECV:",
+"		if(p_cb->rdat_num == 3) {	// Last data -2",
+"			*(UB*)RIIC_ICMR3(unit) |= RIIC_ICMR3_WAIT;",
+"		}",
+"		if(p_cb->rdat_num == 2) {	//Next is the final data",
+"			*(UB*)RIIC_ICMR3(unit) |= RIIC_ICMR3_ACKBT;",
+"			p_cb->state = I2C_STS_RECV | I2C_STS_LAST;",
+"		}",
+"		*(p_cb->rbuf)++ = in_b(RIIC_ICDRR(unit));",
+"		p_cb->rdat_num--;",
+"		break;",
+"",
+"	case I2C_STS_RECV | I2C_STS_LAST:",
+"		*(UB*)RIIC_ICSR2(unit) &= ~RIIC_ICSR2_STOP;",
+"		reg = in_b(RIIC_ICIER(unit));",
+"		out_b(RIIC_ICIER(unit), (reg | RIIC_ICIER_SPIE) & ~RIIC_ICIER_RIE);",
+"		*(UB*)RIIC_ICCR2(unit) |= RIIC_IICR2_SP;",
+"		*(p_cb->rbuf)++ = in_b(RIIC_ICDRR(unit));",
+"		*(UB*)RIIC_ICMR3(unit) &= ~RIIC_ICMR3_WAIT;",
+"		p_cb->state = I2C_STS_STOP;",
+"		break;",
+"	}",
+"}",
+"",
+"/*",
+" * TEI: Transmission end interrupt",
+" */",
+"LOCAL void i2c_tei_inthdr( UINT intno )",
+"{",
+"	T_I2C_LLDCB	*p_cb;",
+"	INT		unit;",
+"	UB		reg;",
+"",
+"	for ( unit = 0; unit < DEV_I2C_UNITNM; unit++ ) {",
+"		if ( ll_devdat[unit].intno_tei == intno ) {",
+"			p_cb = &ll_devcb[unit];",
+"			break;",
+"		}",
+"	}",
+"	if(unit >= DEV_I2C_UNITNM) {",
+"		ClearInt(intno);	// Clear interrupt",
+"		return;",
+"	}",
+"",
+"	switch(ll_devcb[unit].state) {",
+"	case I2C_STS_STOP:",
+"		reg = in_b(RIIC_ICIER(unit));",
+"		out_b(RIIC_ICIER(unit), (reg & ~RIIC_ICIER_TEIE) |RIIC_ICIER_SPIE);",
+"		*(UB*)RIIC_ICCR2(unit) |= RIIC_IICR2_SP;	// Stop condition",
+"		break;",
+"	",
+"	case I2C_STS_RESTART:",
+"		out_b( RIIC_ICIER(unit) , RIIC_ICIER_TIE | RIIC_ICIER_NAKIE);	/* Enable TXI & NAKI */",
+"		*(UB*)RIIC_ICCR2(unit) |= RIIC_IICR2_RS;	// Rester condition",
+"		p_cb->state = I2C_STS_START;",
+"		break;",
+"	}",
+"}",
+"",
+"LOCAL void i2c_eei_inthdr( UINT intno )",
+"{",
+"	T_I2C_LLDCB	*p_cb;",
+"	INT		unit;",
+"	UB		reg;",
+"",
+"	for ( unit = 0; unit < DEV_I2C_UNITNM; unit++ ) {",
+"		if ( ll_devdat[unit].intno_eei == intno ) {",
+"			p_cb = &ll_devcb[unit];",
+"			break;",
+"		}",
+"	}",
+"	if(unit >= DEV_I2C_UNITNM) {",
+"		ClearInt(intno);	// Clear interrupt",
+"		return;",
+"	}",
+"",
+"	reg = in_b(RIIC_ICSR2(unit));",
+"",
+"	if(reg & RIIC_ICSR2_STOP) {		/* Detects stop condition */",
+"		if (p_cb->state != I2C_STS_STOP) {",
+"			p_cb->ioerr = E_IO;",
+"		}",
+"		out_b( RIIC_ICIER(unit), 0);",
+"		if(ll_devcb[unit].wait_tskid) {",
+"			tk_wup_tsk(ll_devcb[unit].wait_tskid);",
+"			p_cb->wait_tskid = 0;",
+"		}",
+"	} else {",
+"		p_cb->ioerr = E_IO;",
+"		p_cb->state = I2C_STS_STOP;",
+"		*(UB*)RIIC_ICSR2(unit) &= ~RIIC_ICSR2_STOP;",
+"		out_b( RIIC_ICIER(unit), RIIC_ICIER_SPIE);",
+"		*(UB*)RIIC_ICCR2(unit) |= RIIC_IICR2_SP;	/* Stop condition */",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Execution of communication",
+" */",
+"LOCAL ER i2c_trans( UW unit)",
+"{",
+"	UB		reg;",
+"	ER		err;",
+"",
+"	if( in_b(RIIC_ICCR2(unit)) & RIIC_IICR2_BBSY) {",
+"		ll_devcb[unit].ioerr = E_BUSY;		/* I2C bus busy */",
+"		return E_BUSY;",
+"	}",
+"",
+"	ll_devcb[unit].ioerr		= E_OK;",
+"	ll_devcb[unit].wait_tskid 	= tk_get_tid();",
+"",
+"	out_b( RIIC_ICIER(unit) , RIIC_ICIER_TIE | RIIC_ICIER_NAKIE);	/* Enable TXI & NAKI */",
+"//	out_b( RIIC_ICIER , 0xFF);	/* Enable TXI & NAKI */",
+"	*(UB*)RIIC_ICCR2(unit) |= RIIC_IICR2_ST;		/* start condition */",
+"",
+"	err = tk_slp_tsk(ll_devdat[unit].timout);",
+"	if ( ll_devcb[unit].ioerr != E_OK ) {",
+"		err = ll_devcb[unit].ioerr;",
+"	}",
+"",
+"	out_b( RIIC_ICIER(unit), 0);",
+"	reg = in_b(RIIC_ICSR2(unit));",
+"	out_b( RIIC_ICSR2(unit), reg & ~RIIC_ICSR2_STOP & ~RIIC_ICSR2_NACKF);",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Set communication start parameters",
+" */",
+"Inline void set_com_start( T_I2C_LLDCB *p_cb, ",
+"				UW sadr, UW sdat_num, UW rdat_num, UB *sbuf, UB *rbuf)",
+"{",
+"	p_cb->state	= I2C_STS_START;",
+"	p_cb->sadr	= sadr<<1;	/* Slave address */",
+"	p_cb->sdat_num	= sdat_num;	/* Number of send data */",
+"	p_cb->rdat_num	= rdat_num;	/* Number of receive data */",
+"	p_cb->sbuf	= sbuf;		/* Send buffer */",
+"	p_cb->rbuf	= rbuf;		/* Receive buffer */",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT W dev_i2c_llctl( UW unit, INT cmd, UW p1, UW p2, UW *pp)",
+"{",
+"	T_I2C_EXEC	*p_ex;",
+"	ER		err	= E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_I2C_OPEN:",
+"		/* I2C Device reset */",
+"		out_b( RIIC_ICCR1(unit), RIIC_ICCR1_IICRST | RIIC_ICCR1_SOWP);",
+"		out_b( RIIC_ICCR1(unit), RIIC_ICCR1_IICRST| RIIC_ICCR1_ICE | RIIC_ICCR1_SOWP);",
+"",
+"		/* I2C Initial setting */",
+"		out_b( RIIC_ICSER(unit), 0);",
+"		out_b( RIIC_ICMR1(unit), DEVCNF_I2C_CKS<<4);",
+"		out_b( RIIC_ICBRH(unit), DEVCNF_ICBRH_INI);",
+"		out_b( RIIC_ICBRL(unit), DEVCNF_ICBRL_INI);",
+"",
+"		/* Interrupt initialize */",
+"		out_b( RIIC_ICIER(unit), 0);",
+"		out_b( RIIC_ICSR2(unit), 0);",
+"		EnableInt( ll_devdat[unit].intno_rxi, ll_devdat[unit].intpri);",
+"		EnableInt( ll_devdat[unit].intno_txi, ll_devdat[unit].intpri);",
+"		EnableInt( ll_devdat[unit].intno_tei, 0);",
+"		EnableInt( ll_devdat[unit].intno_eei, 0);",
+"",
+"		/* Release reset */",
+"		out_b( RIIC_ICCR1(unit),  RIIC_ICCR1_ICE | RIIC_ICCR1_SOWP);",
+"		break;",
+"",
+"	case LLD_I2C_CLOSE:",
+"		/* Disable I2C interrupt */",
+"		DisableInt(ll_devdat[unit].intno_rxi);",
+"		DisableInt(ll_devdat[unit].intno_txi);",
+"		DisableInt(ll_devdat[unit].intno_tei);",
+"		DisableInt(ll_devdat[unit].intno_eei);",
+"		break;",
+"",
+"	case LLD_I2C_READ:",
+"		set_com_start( &ll_devcb[unit], p1, 0, p2, NULL, (UB*)pp);",
+"		err = i2c_trans(unit);",
+"		if(err >= E_OK) err = p2 - ll_devcb[unit].sdat_num;",
+"		break;",
+"",
+"	case LLD_I2C_WRITE:",
+"		set_com_start( &ll_devcb[unit], p1, p2, 0, (UB*)pp, NULL);",
+"		err = i2c_trans(unit);",
+"		if(err >= E_OK) err = p2 - ll_devcb[unit].sdat_num;",
+"		break;",
+"",
+"	case LLD_I2C_EXEC:",
+"		p_ex = (T_I2C_EXEC*)pp;",
+"		set_com_start( &ll_devcb[unit], (p_ex->sadr), p_ex->snd_size, p_ex->rcv_size, p_ex->snd_data, p_ex->rcv_data);",
+"		err = i2c_trans(unit);",
+"		if(err >= E_OK) err = p_ex->snd_size + p_ex->rcv_size;",
+"		break;",
+"	}",
+"	",
+"	return (W)err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_i2c_llinit( T_I2C_DCB *p_dcb)",
+"{",
+"	T_DINT	dint = {",
+"		.intatr = TA_HLNG,",
+"	};",
+"	UW	unit;",
+"	ER	err;",
+"",
+"	unit = p_dcb->unit;",
+"",
+"#if DEVCONF_I2C_INIT_MSTP		// Initialize module stop",
+"	UINT	sts;",
+"",
+"	if(in_w(MSTPCRB) & (1<<21)) {",
+"		DI(sts);",
+"		out_h(SYSTEM_PRCR, 0xA502);		// Disable Register Protect",
+"",
+"		/* Release module stop */",
+"		switch (unit) {",
+"		case DEV_I2C_UNIT0:",
+"			*(UW*)(MSTPCRB) &= ~(1<<21);",
+"			break;",
+"		case DEV_I2C_UNIT1:",
+"			*(UW*)(MSTPCRB) &= ~(1<<20);",
+"			break;",
+"		case DEV_I2C_UNIT2:",
+"			*(UW*)(MSTPCRC) &= ~(1<<17);",
+"			break;",
+"		default:",
+"			return E_SYS;",
+"			break;",
+"		}",
+"",
+"		out_h(SYSTEM_PRCR, 0xA500);		// Enable Register protect",
+"		EI(sts);",
+"	}",
+"#endif	/* DEVCONF_I2C_INIT_MSTP */",
+"",
+"	out_b(RIIC_ICCR1(unit), in_b(RIIC_ICCR1(unit))&~RIIC_ICCR1_ICE);	// Disable RIIC",
+"",
+"	/* Interrupt handler definition */",
+"	dint.inthdr	= i2c_rxi_inthdr;",
+"	err = tk_def_int(ll_devdat[unit].intno_rxi, &dint);",
+"",
+"	dint.inthdr	= i2c_txi_inthdr;",
+"	err = tk_def_int(ll_devdat[unit].intno_txi, &dint);",
+"",
+"	dint.inthdr	= i2c_tei_inthdr;",
+"	err = tk_def_int(ll_devdat[unit].intno_tei, &dint);",
+"",
+"	dint.inthdr	= i2c_eei_inthdr;",
+"	err = tk_def_int(ll_devdat[unit].intno_eei, &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_IIC_ENABLE */",
+"#endif		/* CPU_RX65N */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	i2c_sysdep.h",
+" *	I2C device driver",
+" *	System-dependent definition for RX65N",
+" */",
+"",
+"#ifndef	__DEV_I2C_RX65N_H__",
+"#define	__DEV_I2C_RX65N_H__",
+"",
+"#define	DEV_I2C_UNITNM	(3)	// Number of devive units",
+"#define	DEV_I2C_UNIT0	(0)",
+"#define	DEV_I2C_UNIT1	(1)",
+"#define	DEV_I2C_UNIT2	(2)",
+"",
+"/* I2C device driver operating state */",
+"#define	I2C_STS_START	0x0000",
+"#define	I2C_STS_RESTART	0x0001",
+"#define	I2C_STS_STOP	0x0003",
+"#define	I2C_STS_SEND	0x0004",
+"#define	I2C_STS_RECV	0x0005",
+"#define	I2C_STS_TOP	0x8000",
+"#define	I2C_STS_LAST	0x0800",
+"",
+"/*----------------------------------------------------------------------",
+" * RIIC registers",
+" */",
+"#define	RIIC0_BASE		(0x00088300UL)",
+"#define	RIIC1_BASE		(0x00088320UL)",
+"#define	RIIC2_BASE		(0x00088340UL)",
+"",
+"#define	RIICx_ICCR1		(0x00)	/* I2C bus cintrol reg. 1 */",
+"#define	RIICx_ICCR2		(0x01)	/* I2C bus cintrol reg. 2 */",
+"#define RIICx_ICMR1		(0x02)	/* I2C bus mode reg. 1 */",
+"#define RIICx_ICMR2		(0x03)	/* I2C bus mode reg. 2 */",
+"#define RIICx_ICMR3		(0x04)	/* I2C bus mode reg. 3 */",
+"#define	RIICx_ICFER		(0x05)	/* I2C bus function enable reg */",
+"#define	RIICx_ICSER		(0x06)	/* I2C bus Status enable reg. */",
+"#define	RIICx_ICIER		(0x07)	/* I2C bus Interrupt enable reg. */",
+"#define	RIICx_ICSR1		(0x08)	/* I2C bus Status reg. 1 */",
+"#define	RIICx_ICSR2		(0x09)	/* I2C bus Status reg. 2 */",
+"",
+"#define	RIICx_SARL(y)		(0x0A+(y<<1))	/* Slave address reg. L0~2 */",
+"#define	RIICx_SARU(y)		(0x0B+(y<<1))	/* Slave address reg. U0~2 */",
+"",
+"#define	RIICx_ICBRL		(0x10)	/* I2C bus bit rate Low reg. */",
+"#define	RIICx_ICBRH		(0x11)	/* I2C bus bit rate High reg. */",
+"#define	RIICx_ICDRT		(0x12)	/* I2C bus transmit data reg. */",
+"#define	RIICx_ICDRR		(0x13)	/* I2C bus receive data reg. */",
+"",
+"#define	RIIC_ICCR1_ICE		(1<<7)	",
+"#define	RIIC_ICCR1_IICRST	(1<<6)",
+"#define	RIIC_ICCR1_SOWP		(1<<4)",
+"",
+"#define	RIIC_IICR2_BBSY		(1<<7)",
+"#define	RIIC_IICR2_ST		(1<<1)",
+"#define	RIIC_IICR2_RS		(1<<2)",
+"#define	RIIC_IICR2_SP		(1<<3)",
+"",
+"#define	RIIC_ICMR1_MTWP		(1<<7)",
+"",
+"#define RIIC_ICMR3_WAIT		(1<<6)",
+"#define RIIC_ICMR3_ACKWP	(1<<4)",
+"#define RIIC_ICMR3_ACKBT	(1<<3)",
+"",
+"#define	RIIC_ICIER_TIE		(1<<7)",
+"#define	RIIC_ICIER_TEIE		(1<<6)",
+"#define	RIIC_ICIER_RIE		(1<<5)",
+"#define	RIIC_ICIER_NAKIE	(1<<4)",
+"#define	RIIC_ICIER_SPIE		(1<<3)",
+"#define	RIIC_ICIER_STIE		(1<<2)",
+"#define	RIIC_ICIER_ALIE		(1<<1)",
+"#define	RIIC_ICIER_TMOIE	(1<<0)",
+"",
+"#define RIIC_ICSR2_TDRE		(1<<7)",
+"#define RIIC_ICSR2_TEND		(1<<6)",
+"#define RIIC_ICSR2_RDRF		(1<<5)",
+"#define RIIC_ICSR2_NACKF	(1<<4)",
+"#define RIIC_ICSR2_STOP		(1<<3)",
+"#define RIIC_ICSR2_START	(1<<2)",
+"#define RIIC_ICSR2_AL		(1<<1)",
+"#define RIIC_ICSR2_TMOF		(1<<0)",
+"",
+"/* ",
+" * I2C interrupt number",
+"*/",
+"#define	INTNO_RIIC0_RXI		52",
+"#define	INTNO_RIIC0_TXI		53",
+"#define	INTNO_RIIC0_TEI		(INTNO_GROUP_BL1+13)	//  Group interrupts (GROUPBL1 - 13)",
+"#define	INTNO_RIIC0_EEI		(INTNO_GROUP_BL1+14)	//  Group interrupts (GROUPBL1 - 14)",
+"",
+"#define	INTNO_RIIC1_RXI		50",
+"#define	INTNO_RIIC1_TXI		51",
+"#define	INTNO_RIIC1_TEI		(INTNO_GROUP_BL1+28)	//  Group interrupts (GROUPBL1 - 28)",
+"#define	INTNO_RIIC1_EEI		(INTNO_GROUP_BL1+29)	//  Group interrupts (GROUPBL1 - 29)",
+"",
+"#define	INTNO_RIIC2_RXI		54",
+"#define	INTNO_RIIC2_TXI		55",
+"#define	INTNO_RIIC2_TEI		(INTNO_GROUP_BL1+15)	//  Group interrupts (GROUPBL1 - 15)",
+"#define	INTNO_RIIC2_EEI		(INTNO_GROUP_BL1+16)	//  Group interrupts (GROUPBL1 - 16)",
+"",
+"#endif		/* __DEV_I2C_RX65N_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	i2c_cnf_sysdep.h ",
+" *	I2C device configuration file",
+" *		for RZ/A2M",
+" */",
+"#ifndef	__DEV_I2C_CNF_RZA2M_H__",
+"#define	__DEV_I2C_CNF_RZA2M_H__",
+"",
+"/* Device initialization */",
+"#define DEVCONF_I2C_INIT_MSTP	FALSE		// Initialize module stop",
+"",
+"/* Frequency selection (0-7)  ICMR1.CKS */",
+"#define	DEVCNF_I2C0_CKS		(5)",
+"#define	DEVCNF_I2C1_CKS		(5)",
+"#define	DEVCNF_I2C2_CKS		(5)",
+"#define	DEVCNF_I2C3_CKS		(5)",
+"",
+"/* Clock width  bit0-4:BRL  bit8-12 BRH */",
+"#define	DEVCNF_I2C0_BR		(16<<8)|(14)",
+"#define	DEVCNF_I2C1_BR		(16<<8)|(14)",
+"#define	DEVCNF_I2C2_BR		(16<<8)|(14)",
+"#define	DEVCNF_I2C3_BR		(16<<8)|(14)",
+"",
+"/* Interrupt priority */",
+"#define	DEVCNF_I2C0_INTPRI	5",
+"#define	DEVCNF_I2C1_INTPRI	5",
+"#define	DEVCNF_I2C2_INTPRI	5",
+"#define	DEVCNF_I2C3_INTPRI	5",
+"",
+"/* Communication timeout time */",
+"#define	DEVCNF_I2C_TMO		1000",
+"",
+"#endif		/* __DEV_I2C_CNF_RZA2M_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RZA2M",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../i2c.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_IIC_ENABLE",
+"/*",
+" *	i2c_rza2m.c",
+"  *	I2C device driver",
+" *	System-dependent definition for RZ/A2M",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+"*/",
+"const LOCAL UW ba[DEV_I2C_UNITNM] = { RIIC0_BASE, RIIC1_BASE, RIIC2_BASE, RIIC3_BASE };",
+"",
+"#define	RIIC_CR1(u)	(ba[u] + RIICx_CR1)",
+"#define	RIIC_CR2(u)	(ba[u] + RIICx_CR2)",
+"#define RIIC_MR1(u)	(ba[u] + RIICx_MR1)",
+"#define RIIC_MR2(u)	(ba[u] + RIICx_MR2)",
+"#define RIIC_MR3(u)	(ba[u] + RIICx_MR3)",
+"#define	RIIC_FER(u)	(ba[u] + RIICx_FER)",
+"#define	RIIC_SER(u)	(ba[u] + RIICx_SER)",
+"#define	RIIC_IER(u)	(ba[u] + RIICx_IER)",
+"#define	RIIC_SR1(u)	(ba[u] + RIICx_SR1)",
+"#define	RIIC_SR2(u)	(ba[u] + RIICx_SR2)",
+"#define	RIIC_SAR0(u)	(ba[u] + RIICx_SAR0)",
+"#define	RIIC_SAR1(u)	(ba[u] + RIICx_SAR1)",
+"#define	RIIC_SAR2(u)	(ba[u] + RIICx_SAR2)",
+"#define	RIIC_BRL(u)	(ba[u] + RIICx_BRL)",
+"#define	RIIC_BRH(u)	(ba[u] + RIICx_BRH)",
+"#define	RIIC_DRT(u)	(ba[u] + RIICx_DRT)",
+"#define	RIIC_DRR(u)	(ba[u] + RIICx_DRR)",
+"",
+"/*----------------------------------------------------------------------",
+" * Device data",
+"*/",
+"const LOCAL struct {",
+"	UINT	intno;		// Interrupt number",
+"	PRI	intpri;		// Interrupt priority",
+"	UW	cks;		// Frequency selection",
+"	UW	br;		//  Clock width",
+"} ll_devdat[DEV_I2C_UNITNM] = {",
+"	{.intno = INTNO_RIIC_TEI0, .intpri = DEVCNF_I2C0_INTPRI, .cks =DEVCNF_I2C0_CKS, .br = DEVCNF_I2C0_BR},",
+"	{.intno = INTNO_RIIC_TEI1, .intpri = DEVCNF_I2C1_INTPRI, .cks =DEVCNF_I2C1_CKS, .br = DEVCNF_I2C1_BR},",
+"	{.intno = INTNO_RIIC_TEI2, .intpri = DEVCNF_I2C2_INTPRI, .cks =DEVCNF_I2C2_CKS, .br = DEVCNF_I2C2_BR},",
+"	{.intno = INTNO_RIIC_TEI3, .intpri = DEVCNF_I2C3_INTPRI, .cks =DEVCNF_I2C3_CKS, .br = DEVCNF_I2C3_BR},",
+"};",
+"",
+"#define	INTNO_TEI(n)	(ll_devdat[n].intno)",
+"#define	INTNO_RI(n)	(ll_devdat[n].intno+1)",
+"#define	INTNO_TI(n)	(ll_devdat[n].intno+2)",
+"#define	INTNO_SPI(n)	(ll_devdat[n].intno+3)",
+"#define	INTNO_STI(n)	(ll_devdat[n].intno+4)",
+"#define	INTNO_NAKI(n)	(ll_devdat[n].intno+5)",
+"#define	INTNO_ALI(n)	(ll_devdat[n].intno+6)",
+"#define	INTNO_TMOI(n)	(ll_devdat[n].intno+7)",
+"",
+"#define	INT_PRI(n)	(ll_devdat[n].intpri)",
+"",
+"#define I2C_CKS(n)	(ll_devdat[n].cks)",
+"#define	I2C_BRH(n)	(ll_devdat[n].br>>8 & 0x1F)",
+"#define	I2C_BRL(n)	(ll_devdat[n].br & 0x1F)",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"typedef struct {",
+"	ID	wait_tskid;	/* Wait Task ID */",
+"	UW	state;		/* Operating state */",
+"	UW	sadr;		/* Slave address */",
+"	ER	ioerr;		/* Communication error */",
+"	UW	sdat_num;	/* Number of send data */",
+"	UW	rdat_num;	/* Number of receive data */",
+"	UB	*sbuf;		/* Send buffer */",
+"	UB	*rbuf;		/* Receive buffer */",
+"} T_I2C_LLDCB;",
+"",
+"T_I2C_LLDCB	ll_devcb[DEV_I2C_UNITNM];",
+"",
+"/*-------------------------------------------------------",
+" * Interrupt handler",
+" *-------------------------------------------------------",
+" */",
+"/*",
+" * TI: Transmit data empty interrupt",
+" */",
+"LOCAL void i2c_ti_inthdr( UINT intno )",
+"{",
+"	T_I2C_LLDCB	*p_cb;",
+"	INT		unit;",
+"",
+"	ClearInt(intno);	// Clear interrupt",
+"	for( unit = 0; unit < DEV_I2C_UNITNM; unit++) {",
+"		if( intno == INTNO_TI(unit)) break;",
+"	}",
+"	if(unit < DEV_I2C_UNITNM) {",
+"		p_cb = &ll_devcb[unit];",
+"	} else {",
+"		EndOfInt(intno);",
+"		return;",
+"	}",
+"",
+"	switch(p_cb->state) {",
+"	case I2C_STS_START:",
+"		if(p_cb->sdat_num > 0 ) {	/* Send */",
+"			out_w(RIIC_DRT(unit), p_cb->sadr);",
+"			p_cb->state = I2C_STS_SEND;",
+"		} else {			/* Receive */",
+"			out_w(RIIC_DRT(unit), (p_cb->sadr|1));",
+"			out_w(RIIC_IER(unit), (in_w(RIIC_IER(unit)) | RIIC_IER_RIE) & ~RIIC_IER_TIE);",
+"			p_cb->state = I2C_STS_RECV | I2C_STS_TOP;",
+"		}",
+"		break;",
+"",
+"	case I2C_STS_SEND:",
+"		if(--(p_cb->sdat_num) <= 0) {",
+"			if(p_cb->rdat_num == 0) {",
+"				p_cb->state = I2C_STS_STOP;",
+"			} else {",
+"				p_cb->state = I2C_STS_RESTART;",
+"			}",
+"			out_w(RIIC_IER(unit), (in_w(RIIC_IER(unit)) | RIIC_IER_TEIE) & ~RIIC_IER_TIE);",
+"		}",
+"		out_w(RIIC_DRT(unit), *(p_cb->sbuf)++);",
+"		break;",
+"	}",
+"	EndOfInt(intno);",
+"}",
+"",
+"/*",
+" * TEI: Transmission end interrupt",
+" */",
+"LOCAL void i2c_tei_inthdr( UINT intno )",
+"{",
+"	T_I2C_LLDCB	*p_cb;",
+"	INT		unit;",
+"",
+"	ClearInt(intno);	// Clear interrupt",
+"	for( unit = 0; unit < DEV_I2C_UNITNM; unit++) {",
+"		if( intno == INTNO_TEI(unit)) break;",
+"	}",
+"	if(unit < DEV_I2C_UNITNM) {",
+"		p_cb = &ll_devcb[unit];",
+"	} else {",
+"		EndOfInt(intno);",
+"		return;",
+"	}",
+"",
+"	*(_UB*)RIIC_SR2(unit) &= ~RIIC_SR2_TEND;",
+"",
+"	switch(p_cb->state) {",
+"	case I2C_STS_STOP:",
+"		out_w(RIIC_IER(unit), (in_w(RIIC_IER(unit)) & ~RIIC_IER_TEIE) |RIIC_IER_SPIE);",
+"		*(_UW*)RIIC_CR2(unit) |= RIIC_CR2_SP;	// Stop condition",
+"		break;",
+"	",
+"	case I2C_STS_RESTART:",
+"		out_w( RIIC_IER(unit) , RIIC_IER_TIE | RIIC_IER_NAKIE);	/* Enable TXI & NAKI */",
+"		*(_UW*)RIIC_CR2(unit) |= RIIC_CR2_RS;	// Rester condition",
+"		p_cb->state = I2C_STS_START;",
+"		break;",
+"	}",
+"	EndOfInt(intno);",
+"}",
+"",
+"/*",
+" * RI: Received data full interrupt",
+" */",
+"LOCAL void i2c_ri_inthdr( UINT intno )",
+"{",
+"	T_I2C_LLDCB	*p_cb;",
+"	INT		unit;",
+"",
+"	ClearInt(intno);	// Clear interrupt",
+"	for( unit = 0; unit < DEV_I2C_UNITNM; unit++) {",
+"		if( intno == INTNO_RI(unit)) break;",
+"	}",
+"	if(unit < DEV_I2C_UNITNM) {",
+"		p_cb = &ll_devcb[unit];",
+"	} else {",
+"		EndOfInt(intno);",
+"		return;",
+"	}",
+"",
+"	switch(p_cb ->state) {",
+"	case I2C_STS_RECV | I2C_STS_TOP:",
+"		if(p_cb->rdat_num <= 2) {	// Last data -2",
+"			*(_UW*)RIIC_MR3(unit) |= RIIC_MR3_WAIT;",
+"		}",
+"		if(p_cb->rdat_num == 1) {	//Next is the final data",
+"			*(_UW*)RIIC_MR3(unit) |= RIIC_MR3_ACKBT;",
+"			p_cb->state = I2C_STS_RECV | I2C_STS_LAST;",
+"		} else {",
+"			p_cb->state = I2C_STS_RECV;",
+"		}",
+"		in_w(RIIC_DRR(unit));	// Dummy read",
+"		break;",
+"",
+"	case I2C_STS_RECV:",
+"		if(p_cb->rdat_num == 3) {	// Last data -2",
+"			*(_UW*)RIIC_MR3(unit) |= RIIC_MR3_WAIT;",
+"		}",
+"		if(p_cb->rdat_num == 2) {	//Next is the final data",
+"			*(_UW*)RIIC_MR3(unit) |= RIIC_MR3_ACKBT;",
+"			p_cb->state = I2C_STS_RECV | I2C_STS_LAST;",
+"		}",
+"		*(p_cb->rbuf++) = in_w(RIIC_DRR(unit));",
+"		p_cb->rdat_num--;",
+"		break;",
+"",
+"	case I2C_STS_RECV | I2C_STS_LAST:",
+"		*(_UW*)RIIC_SR2(unit) &= ~RIIC_SR2_STOP;",
+"		out_w(RIIC_IER(unit), (in_w(RIIC_IER(unit)) | RIIC_IER_SPIE) & ~RIIC_IER_RIE);",
+"		*(_UW*)RIIC_CR2(unit) |= RIIC_CR2_SP;",
+"		*(p_cb->rbuf++) = in_w(RIIC_DRR(unit));",
+"		*(_UW*)RIIC_MR3(unit) &= ~RIIC_MR3_WAIT;",
+"		p_cb->state = I2C_STS_STOP;",
+"		break;",
+"	}",
+"	EndOfInt(intno);",
+"}",
+"",
+"LOCAL void i2c_spi_inthdr( UINT intno )",
+"{",
+"	T_I2C_LLDCB	*p_cb;",
+"	INT		unit;",
+"",
+"	ClearInt(intno);	// Clear interrupt",
+"	for( unit = 0; unit < DEV_I2C_UNITNM; unit++) {",
+"		if( intno == INTNO_SPI(unit)) break;",
+"	}",
+"	if(unit < DEV_I2C_UNITNM) {",
+"		p_cb = &ll_devcb[unit];",
+"	} else {",
+"		EndOfInt(intno);",
+"		return;",
+"	}",
+"",
+"	*(_UW*)RIIC_SR2(unit) &= ~RIIC_SR2_STOP;",
+"",
+"	if (p_cb->state != I2C_STS_STOP) {",
+"		p_cb->ioerr = E_IO;",
+"	}",
+"	out_w( RIIC_IER(unit), 0);",
+"	if(p_cb->wait_tskid) {",
+"		tk_wup_tsk(p_cb->wait_tskid);",
+"		p_cb->wait_tskid = 0;",
+"	}",
+"	EndOfInt(intno);",
+"}",
+"",
+"LOCAL void i2c_err_inthdr( UINT intno )",
+"{",
+"	INT		unit;",
+"",
+"	ClearInt(intno);	// Clear interrupt",
+"	if(intno < INTNO_RIIC_STI0 || intno > INTNO_RIIC_TMOI3) {",
+"		EndOfInt(intno);",
+"		return;",
+"	}",
+"",
+"	if(intno <= INTNO_RIIC_TMOI0 ) {",
+"		unit = DEV_I2C_0;",
+"	} else if(intno <= INTNO_RIIC_TMOI1 ) {",
+"		unit = DEV_I2C_1;",
+"	} else if(intno <= INTNO_RIIC_TMOI2 ) {",
+"		unit = DEV_I2C_2;",
+"	} else {",
+"		unit = DEV_I2C_3;",
+"	}",
+"",
+"	ll_devcb[unit].ioerr = E_IO;",
+"	ll_devcb[unit].state = I2C_STS_STOP;",
+"	out_w( RIIC_SR2(unit) ,0);",
+"	out_w( RIIC_IER(unit), RIIC_IER_SPIE);",
+"	*(_UW*)RIIC_CR2(unit) |= RIIC_CR2_SP;	/* Stop condition */",
+"	EndOfInt(intno);",
+"}",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Execution of communication",
+" */",
+"LOCAL ER i2c_trans( UW unit)",
+"{",
+"	ER		err;",
+"",
+"	if( in_w(RIIC_CR2(unit)) & RIIC_CR2_BBSY) {",
+"		ll_devcb[unit].ioerr = E_BUSY;		/* I2C bus busy */",
+"		return E_BUSY;",
+"	}",
+"",
+"	ll_devcb[unit].ioerr		= E_OK;",
+"	ll_devcb[unit].wait_tskid 	= tk_get_tid();",
+"",
+"	out_w(RIIC_IER(unit),(RIIC_IER_TIE|RIIC_IER_NAKIE|RIIC_IER_TMOIE));	/* Enable TI,NAKI  */",
+"	*(_UW*)RIIC_CR2(unit) |= RIIC_CR2_ST;			/* start condition */",
+"",
+"	err = tk_slp_tsk(DEVCNF_I2C_TMO);",
+"	if ( ll_devcb[unit].ioerr != E_OK ) {",
+"		err = ll_devcb[unit].ioerr;",
+"	}",
+"",
+"	out_w( RIIC_IER(unit), 0);",
+"	out_w( RIIC_SR2(unit), 0);",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Set communication start parameters",
+" */",
+"Inline void set_com_start(UW unit, UW sadr, UW sdat_num, UW rdat_num, UB *sbuf, UB *rbuf)",
+"{",
+"	ll_devcb[unit].state		= I2C_STS_START;",
+"	ll_devcb[unit].sadr		= sadr<<1;	/* Slave address */",
+"	ll_devcb[unit].sdat_num	= 	sdat_num;	/* Number of send data */",
+"	ll_devcb[unit].rdat_num	= 	rdat_num;	/* Number of receive data */",
+"	ll_devcb[unit].sbuf		= sbuf;		/* Send buffer */",
+"	ll_devcb[unit].rbuf		= rbuf;		/* Receive buffer */",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT W dev_i2c_llctl( UW unit, INT cmd, UW p1, UW p2, UW *pp)",
+"{",
+"	T_I2C_EXEC	*p_ex;",
+"	ER		err	= E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_I2C_OPEN:",
+"		/* I2C Device reset */",
+"		out_w( RIIC_CR1(unit), RIIC_CR1_RST | RIIC_CR1_SOWP);",
+"		out_w( RIIC_CR1(unit), RIIC_CR1_RST| RIIC_CR1_ICE | RIIC_CR1_SOWP);",
+"",
+"		/* I2C Initial setting */",
+"		out_w( RIIC_SER(unit), 0);",
+"		out_w( RIIC_MR1(unit), I2C_CKS(unit)<<4 );",
+"		out_w( RIIC_BRH(unit), I2C_BRH(unit));",
+"		out_w( RIIC_BRL(unit), I2C_BRL(unit));",
+"		*(_UW*)RIIC_FER(unit) |= RIIC_FER_TMOE;",
+"",
+"		/* Interrupt initialize */",
+"		out_w( RIIC_IER(unit), 0);",
+"		out_w( RIIC_SR2(unit), 0);",
+"		EnableInt( INTNO_TEI(unit), INT_PRI(unit));",
+"		EnableInt( INTNO_RI(unit), INT_PRI(unit));",
+"		EnableInt( INTNO_TI(unit), INT_PRI(unit));",
+"		EnableInt( INTNO_SPI(unit), INT_PRI(unit));",
+"		EnableInt( INTNO_STI(unit), INT_PRI(unit));",
+"		EnableInt( INTNO_NAKI(unit), INT_PRI(unit));",
+"		EnableInt( INTNO_ALI(unit), INT_PRI(unit));",
+"		EnableInt( INTNO_TMOI(unit), INT_PRI(unit));",
+"",
+"		/* Release reset */",
+"		out_w( RIIC_CR1(unit), RIIC_CR1_ICE | RIIC_CR1_SOWP);",
+"		break;",
+"",
+"	case LLD_I2C_CLOSE:",
+"		/* Disable I2C interrupt */",
+"		DisableInt( INTNO_TEI(unit));",
+"		DisableInt( INTNO_RI(unit));",
+"		DisableInt( INTNO_TI(unit));",
+"		DisableInt( INTNO_SPI(unit));",
+"		DisableInt( INTNO_STI(unit));",
+"		DisableInt( INTNO_NAKI(unit));",
+"		DisableInt( INTNO_ALI(unit));",
+"		DisableInt( INTNO_TMOI(unit));",
+"		break;",
+"",
+"	case LLD_I2C_READ:",
+"		set_com_start( unit, p1, 0, p2, NULL, (UB*)pp);",
+"		err = i2c_trans(unit);",
+"		if(err >= E_OK) err = p2 - ll_devcb[unit].sdat_num;",
+"		break;",
+"",
+"	case LLD_I2C_WRITE:",
+"		set_com_start( unit, p1, p2, 0, (UB*)pp, NULL);",
+"		err = i2c_trans(unit);",
+"		if(err >= E_OK) err = p2 - ll_devcb[unit].sdat_num;",
+"		break;",
+"",
+"	case LLD_I2C_EXEC:",
+"		p_ex = (T_I2C_EXEC*)pp;",
+"		set_com_start( unit, (p_ex->sadr), p_ex->snd_size, p_ex->rcv_size, p_ex->snd_data, p_ex->rcv_data);",
+"		err = i2c_trans(unit);",
+"		if(err >= E_OK) err = p_ex->snd_size + p_ex->rcv_size;",
+"		break;",
+"	}",
+"	",
+"	return (W)err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_i2c_llinit( T_I2C_DCB *p_dcb)",
+"{",
+"	T_DINT	dint;",
+"	UW	unit;",
+"	ER	err;",
+"",
+"	unit = p_dcb->unit;",
+"",
+"#if DEVCONF_I2C_INIT_MSTP		// Initialize module stop",
+"	_UB	dmy;",
+"",
+"	out_b(CPG_STBCR8, in_b(CPG_STBCR8) & ~(0x80>>unit));",
+"	dmy = in_b(CPG_STBCR8);	// dummy read",
+"",
+"#endif	/* DEVCONF_I2C_INIT_MSTP */",
+"",
+"	*(_UW*)RIIC_CR1(unit) &= ~RIIC_CR1_ICE;		// Disable RIIC",
+"",
+"	/* Interrupt handler definition */",
+"	dint.intatr	= TA_HLNG;",
+"",
+"	dint.inthdr	= i2c_ri_inthdr;",
+"	err = tk_def_int(INTNO_RI(unit), &dint);",
+"",
+"	dint.inthdr	= i2c_ti_inthdr;",
+"	err = tk_def_int(INTNO_TI(unit), &dint);",
+"",
+"	dint.inthdr	= i2c_tei_inthdr;",
+"	err = tk_def_int(INTNO_TEI(unit), &dint);",
+"",
+"	dint.inthdr	= i2c_spi_inthdr;",
+"	err = tk_def_int(INTNO_SPI(unit), &dint);",
+"",
+"	dint.inthdr	= i2c_err_inthdr;",
+"	err = tk_def_int(INTNO_STI(unit), &dint);",
+"	err = tk_def_int(INTNO_NAKI(unit), &dint);",
+"	err = tk_def_int(INTNO_ALI(unit), &dint);",
+"	err = tk_def_int(INTNO_TMOI(unit), &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_IIC_ENABLE */",
+"#endif		/* CPU_RX231 */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for micro T-Kernel",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	i2c_sysdep.h",
+" *	I2C device driver",
+" *	System-dependent definition for RZ/A2M",
+" */",
+"",
+"#ifndef	__DEV_I2C_RZA2M_H__",
+"#define	__DEV_I2C_RZA2M_H__",
+"",
+"#define	DEV_I2C_UNITNM		(4)	/* Number of devive units */",
+"#define	DEV_I2C_0		(0)	/* RIIC0 */",
+"#define	DEV_I2C_1		(1)	/* RIIC1 */",
+"#define	DEV_I2C_2		(2)	/* RIIC2 */",
+"#define	DEV_I2C_3		(3)	/* RIIC3 */",
+"",
+"/* I2C device driver operating state */",
+"#define	I2C_STS_START		0x0000",
+"#define	I2C_STS_RESTART		0x0001",
+"#define	I2C_STS_STOP		0x0003",
+"#define	I2C_STS_SEND		0x0004",
+"#define	I2C_STS_RECV		0x0005",
+"#define	I2C_STS_TOP		0x8000",
+"#define	I2C_STS_LAST		0x0800",
+"",
+"/*----------------------------------------------------------------------",
+" * RIIC registers",
+" */",
+"#define	RIIC0_BASE		0xE803A000",
+"#define	RIIC1_BASE		0xE803A400",
+"#define	RIIC2_BASE		0xE803A800",
+"#define	RIIC3_BASE		0xE803AC00",
+"",
+"#define	RIICx_CR1		(0x00)		/* I2C bus cintrol reg. 1 */",
+"#define	RIICx_CR2		(0x04)		/* I2C bus cintrol reg. 2 */",
+"#define RIICx_MR1		(0x08)		/* I2C bus mode reg. 1 */",
+"#define RIICx_MR2		(0x0C)		/* I2C bus mode reg. 2 */",
+"#define RIICx_MR3		(0x10)		/* I2C bus mode reg. 3 */",
+"#define	RIICx_FER		(0x14)		/* I2C bus function enable reg */",
+"#define	RIICx_SER		(0x18)		/* I2C bus Status enable reg. */",
+"#define	RIICx_IER		(0x1C)		/* I2C bus Interrupt enable reg. */",
+"#define	RIICx_SR1		(0x20)		/* I2C bus Status reg. 1 */",
+"#define	RIICx_SR2		(0x24)		/* I2C bus Status reg. 2 */",
+"#define	RIICx_SAR0		(0x28)		/* Slave address reg. 0 */",
+"#define	RIICx_SAR1		(0x2C)		/* Slave address reg. 1 */",
+"#define	RIICx_SAR2		(0x30)		/* Slave address reg. 2 */",
+"#define	RIICx_BRL		(0x34)		/* I2C bus bit rate Low reg. */",
+"#define	RIICx_BRH		(0x38)		/* I2C bus bit rate High reg. */",
+"#define	RIICx_DRT		(0x3C)		/* I2C bus transmit data reg. */",
+"#define	RIICx_DRR		(0x40)		/* I2C bus receive data reg. */",
+"",
+"#define	RIIC_CR1_ICE		(1<<7)	",
+"#define	RIIC_CR1_RST		(1<<6)",
+"#define	RIIC_CR1_SOWP		(1<<4)",
+"",
+"#define	RIIC_CR2_BBSY		(1<<7)",
+"#define	RIIC_CR2_ST		(1<<1)",
+"#define	RIIC_CR2_RS		(1<<2)",
+"#define	RIIC_CR2_SP		(1<<3)",
+"",
+"#define RIIC_MR3_WAIT		(1<<6)",
+"#define RIIC_MR3_ACKWP		(1<<4)",
+"#define RIIC_MR3_ACKBT		(1<<3)",
+"",
+"#define	RIIC_IER_TIE		(1<<7)",
+"#define	RIIC_IER_TEIE		(1<<6)",
+"#define	RIIC_IER_RIE		(1<<5)",
+"#define	RIIC_IER_NAKIE		(1<<4)",
+"#define	RIIC_IER_SPIE		(1<<3)",
+"#define	RIIC_IER_STIE		(1<<2)",
+"#define	RIIC_IER_ALIE		(1<<1)",
+"#define	RIIC_IER_TMOIE		(1<<0)",
+"",
+"#define RIIC_SR2_TDRE		(1<<7)",
+"#define RIIC_SR2_TEND		(1<<6)",
+"#define RIIC_SR2_RDRF		(1<<5)",
+"#define RIIC_SR2_NACKF		(1<<4)",
+"#define RIIC_SR2_STOP		(1<<3)",
+"#define RIIC_SR2_START		(1<<2)",
+"#define RIIC_SR2_AL		(1<<1)",
+"#define RIIC_SR2_TMOF		(1<<0)",
+"",
+"#define RIIC_FER_TMOE		(1<<0)",
+"",
+"/* Register initial value */",
+"#define	RIIC_MR1_INI		(1<<4)",
+"",
+"/* ",
+" * I2C interrupt number",
+"	*/",
+"#define	INTNO_RIIC_TEI0		264		// Transmit end interrupt",
+"#define	INTNO_RIIC_RI0		265		// Receive data full interrupt",
+"#define	INTNO_RIIC_TI0		266		// Transmit data empty interrupt",
+"#define	INTNO_RIIC_SPI0		267		// STOP condition detection interrupt",
+"#define	INTNO_RIIC_STI0		268		// START condition detection interrupt",
+"#define	INTNO_RIIC_NAKI0	269		// NACK reception interrupt",
+"#define	INTNO_RIIC_ALI0		270		// Abitration lost interrupt",
+"#define	INTNO_RIIC_TMOI0	271		// Time out interrupt",
+"",
+"#define	INTNO_RIIC_TEI1		272		// Transmit end interrupt",
+"#define	INTNO_RIIC_RI1		273		// Receive data full interrupt",
+"#define	INTNO_RIIC_TI1		274		// Transmit data empty interrupt",
+"#define	INTNO_RIIC_SPI1		275		// STOP condition detection interrupt",
+"#define	INTNO_RIIC_STI1		276		// START condition detection interrupt",
+"#define	INTNO_RIIC_NAKI1	277		// NACK reception interrupt",
+"#define	INTNO_RIIC_ALI1		278		// Abitration lost interrupt",
+"#define	INTNO_RIIC_TMOI1	279		// Time out interrupt",
+"",
+"#define	INTNO_RIIC_TEI2		280		// Transmit end interrupt",
+"#define	INTNO_RIIC_RI2		281		// Receive data full interrupt",
+"#define	INTNO_RIIC_TI2		282		// Transmit data empty interrupt",
+"#define	INTNO_RIIC_SPI2		283		// STOP condition detection interrupt",
+"#define	INTNO_RIIC_STI2		284		// START condition detection interrupt",
+"#define	INTNO_RIIC_NAKI2	285		// NACK reception interrupt",
+"#define	INTNO_RIIC_ALI2		286		// Abitration lost interrupt",
+"#define	INTNO_RIIC_TMOI2	287		// Time out interrupt",
+"",
+"#define	INTNO_RIIC_TEI3		288		// Transmit end interrupt",
+"#define	INTNO_RIIC_RI3		289		// Receive data full interrupt",
+"#define	INTNO_RIIC_TI3		290		// Transmit data empty interrupt",
+"#define	INTNO_RIIC_SPI3		291		// STOP condition detection interrupt",
+"#define	INTNO_RIIC_STI3		292		// START condition detection interrupt",
+"#define	INTNO_RIIC_NAKI3	293		// NACK reception interrupt",
+"#define	INTNO_RIIC_ALI3		294		// Abitration lost interrupt",
+"#define	INTNO_RIIC_TMOI3	295		// Time out interrupt",
+"",
+"#endif	/* __DEV_I2C_RZA2M_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	i2c_cnf_sysdep.h ",
+" *	I2C device configuration file",
+" *		for STM32H7",
+" */",
+"#ifndef	__DEV_I2C_CNF_STM32H7_H__",
+"#define	__DEV_I2C_CNF_STM32H7_H__",
+"",
+"/* Device initialization */",
+"#define DEVCONF_I2C_INIT_MCLK	TRUE	// Initialize module clock",
+"",
+"/* ADC Clock (I2C) */",
+"#define	DEVCNF_I2CSEL		0	// I2C clock source  0 = PCLK1",
+"",
+"/* Register initial value */",
+"#define	I2C_TIMINGR_INIT	0x60404E72	// Standard mode, 100KHz",
+"",
+"",
+"// Interrupt priority",
+"#define	DEVCNF_I2C1_INTPRI	5",
+"#define	DEVCNF_I2C2_INTPRI	5",
+"#define	DEVCNF_I2C3_INTPRI	5",
+"#define	DEVCNF_I2C4_INTPRI	5",
+"#define	DEVCNF_I2C5_INTPRI	5",
+"",
+"/* Communication timeout time */",
+"#define	DEVCNF_I2C1_TMO		1000",
+"#define	DEVCNF_I2C2_TMO		1000",
+"#define	DEVCNF_I2C3_TMO		1000",
+"#define	DEVCNF_I2C4_TMO		1000",
+"#define	DEVCNF_I2C5_TMO		1000",
+"",
+"",
+"#endif		/* __DEV_I2C_CNF_STM32H7_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2022-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_STM32H7",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../i2c.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_IIC_ENABLE",
+"/*",
+" *	i2c_stm32h7.c",
+"  *	I2C device driver",
+" *	System-dependent definition for STM32H7",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+"*/",
+"const LOCAL UW ba[DEV_I2C_UNITNM] = { I2C1_BASE, I2C2_BASE, I2C3_BASE, I2C4_BASE, I2C5_BASE };",
+"",
+"#define	I2C_CR1(u)	(ba[u] + I2Cx_CR1)",
+"#define	I2C_CR2(u)	(ba[u] + I2Cx_CR2)",
+"#define	I2C_TIMINGR(u)	(ba[u] + I2Cx_TIMINGR)",
+"#define	I2C_ISR(u)	(ba[u] + I2Cx_ISR)",
+"#define	I2C_ICR(u)	(ba[u] + I2Cx_ICR)",
+"#define	I2C_ICR(u)	(ba[u] + I2Cx_ICR)",
+"#define	I2C_RXDR(u)	(ba[u] + I2Cx_RXDR)",
+"#define	I2C_TXDR(u)	(ba[u] + I2Cx_TXDR)",
+"",
+"/*----------------------------------------------------------------------",
+" * Device data",
+"*/",
+"const LOCAL struct {",
+"	UINT	intno;		// Interrupt number",
+"	PRI	intpri;		// Interrupt priority",
+"	TMO	timout;		// I2C timeout time",
+"} ll_devdat[DEV_I2C_UNITNM] = {",
+"	{	/* I2C1 */",
+"		.intno		= INTNO_I2C1_EV,",
+"		.intpri		= DEVCNF_I2C1_INTPRI,",
+"		.timout		= DEVCNF_I2C1_TMO,",
+"	},",
+"	{	/* I2C2 */",
+"		.intno		= INTNO_I2C2_EV,",
+"		.intpri		= DEVCNF_I2C2_INTPRI,",
+"		.timout		= DEVCNF_I2C2_TMO,",
+"	},",
+"	{	/* I2C3 */",
+"		.intno		= INTNO_I2C3_EV,",
+"		.intpri		= DEVCNF_I2C3_INTPRI,",
+"		.timout		= DEVCNF_I2C3_TMO,",
+"	},",
+"	{	/* I2C4 */",
+"		.intno		= INTNO_I2C4_EV,",
+"		.intpri		= DEVCNF_I2C4_INTPRI,",
+"		.timout		= DEVCNF_I2C4_TMO,",
+"	},",
+"	{	/* I2C5 */",
+"		.intno		= INTNO_I2C5_EV,",
+"		.intpri		= DEVCNF_I2C5_INTPRI,",
+"		.timout		= DEVCNF_I2C5_TMO,",
+"	},",
+"};",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"typedef struct {",
+"	ID	wait_tskid;	/* Wait Task ID */",
+"	UW	state;		/* Operating state */",
+"	UW	sadr;		/* Slave address */",
+"	ER	ioerr;		/* Communication error */",
+"	UW	sdat_num;	/* Number of send data */",
+"	UW	rdat_num;	/* Number of receive data */",
+"	UB	*sbuf;		/* Send buffer */",
+"	UB	*rbuf;		/* Receive buffer */",
+"} T_I2C_LLDCB;",
+"LOCAL T_I2C_LLDCB	ll_devcb[DEV_I2C_UNITNM];",
+"",
+"",
+"/*-------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"/*-------------------------------------------------------",
+" * Event interrupt handler",
+" */",
+"LOCAL void i2c_evhdr( UINT intno )",
+"{",
+"	T_I2C_LLDCB	*p_cb;",
+"	UW		i2c_st;",
+"	INT		unit;",
+"	BOOL		wup	= FALSE;",
+"",
+"	for ( unit = 0; unit < DEV_I2C_UNITNM; unit++ ) {",
+"		if ( ll_devdat[unit].intno == intno ) {",
+"			p_cb = &ll_devcb[unit];",
+"			break;",
+"		}",
+"	}",
+"	if(unit >= DEV_I2C_UNITNM) return;",
+"",
+"	i2c_st = in_w(I2C_ISR(unit));",
+"	if( i2c_st & I2C_ISR_NACKF) {",
+"		p_cb->ioerr = E_IO;",
+"		wup = TRUE;",
+"",
+"	} else if( i2c_st & I2C_ISR_TXIS) {		/* TX interrupt */",
+"		out_w(I2C_TXDR(unit),*p_cb->sbuf++);",
+"		if(--(p_cb->sdat_num) <= 0) {			/* final data ? */",
+"			if(p_cb->rdat_num == 0) {",
+"				out_w(I2C_CR1(unit), I2C_CR1_PE);",
+"				p_cb->state = I2C_STS_STOP;",
+"				wup = TRUE;",
+"			} else {",
+"				out_w(I2C_CR1(unit), I2C_CR1_PE | I2C_CR1_TCIE | I2C_CR1_RXIE | I2C_CR1_NACKIE | I2C_CR1_ERRIE );",
+"			}",
+"		}",
+"",
+"	} else if( i2c_st & I2C_ISR_TC) {		/* Transfer complete */",
+"		out_w(I2C_CR1(unit), I2C_CR1_PE | I2C_CR1_RXIE | I2C_CR1_NACKIE | I2C_CR1_ERRIE );",
+"		p_cb->state = I2C_STS_START;",
+"		wup = TRUE;",
+"",
+"	} else if( i2c_st & I2C_ISR_RXNE) {	/* RX interrupt */",
+"		*(p_cb->rbuf++) = (UB)in_w(I2C_RXDR(unit));",
+"		if(--(p_cb->rdat_num) <= 0) {			/* final data ? */",
+"			out_w(I2C_CR1(unit), I2C_CR1_PE);",
+"			p_cb->state = I2C_STS_STOP;",
+"			wup = TRUE;",
+"		}",
+"	} else {	/* Error */",
+"		out_w(I2C_CR1(unit), I2C_CR1_PE);",
+"		p_cb->ioerr = E_IO;",
+"	}",
+"",
+"	out_w(I2C_ICR(unit), I2C_ICR_ALL);	// Clear all Interrupt flag",
+"	ClearInt(intno);			// Clear interrupt",
+"",
+"	if(wup) {",
+"		if(p_cb->wait_tskid) {",
+"			tk_wup_tsk(p_cb->wait_tskid);",
+"			p_cb->wait_tskid = 0;",
+"		}",
+"	}",
+"}",
+"",
+"/*-------------------------------------------------------",
+" * Error interrupt handler",
+" */",
+"LOCAL void i2c_erhdr( UINT intno )",
+"{",
+"	T_I2C_LLDCB	*p_cb;",
+"	INT		unit;",
+"",
+"	intno--;",
+"	for ( unit = 0; unit < DEV_I2C_UNITNM; unit++ ) {",
+"		if ( ll_devdat[unit].intno == intno ) {",
+"			p_cb = &ll_devcb[unit];",
+"			break;",
+"		}",
+"	}",
+"	if(unit >= DEV_I2C_UNITNM) return;",
+"",
+"	out_w(I2C_ICR(unit), I2C_ICR_ALL);	// Clear all Interrupt flag",
+"	ClearInt(intno);			// Clear interrupt",
+"	",
+"	out_w(I2C_CR1(unit), I2C_CR1_PE);",
+"",
+"	p_cb->ioerr = E_IO;",
+"	if(p_cb->wait_tskid) {",
+"		tk_wup_tsk(p_cb->wait_tskid);",
+"		p_cb->wait_tskid = 0;",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Execution of communication",
+" */",
+"LOCAL ER i2c_trans(INT unit, T_I2C_LLDCB *p_cb)",
+"{",
+"	UW		i2c_ctl;",
+"	UINT		imask;",
+"	ER		err;",
+"",
+"	p_cb->ioerr		= E_OK;",
+"	p_cb->wait_tskid	= 0;",
+"",
+"	/* I2C Device enable */",
+"	out_w(I2C_CR1(unit), I2C_CR1_PE | I2C_CR1_TXIE | I2C_CR1_RXIE | I2C_CR1_NACKIE | I2C_CR1_ERRIE );",
+"",
+"	while ((err = p_cb->ioerr) == E_OK ) {",
+"",
+"		switch ( p_cb->state ) {",
+"		case I2C_STS_START:",
+"			DI(imask);",
+"			i2c_ctl = p_cb->sadr <<1;",
+"			if(p_cb->sdat_num > 0 ) {	/* Send */",
+"				i2c_ctl |= p_cb->sdat_num <<16 ;",
+"				if( p_cb->rdat_num == 0) {",
+"					i2c_ctl |= I2C_CR2_AUTOEND;",
+"				}",
+"				out_w(I2C_CR2(unit), i2c_ctl);",
+"				p_cb->state = I2C_STS_SEND;",
+"			} else {			/* Receive */",
+"				i2c_ctl |= p_cb->rdat_num <<16 | I2C_CR2_RD_WRN | I2C_CR2_AUTOEND;",
+"				p_cb->state = I2C_STS_RECV;",
+"				out_w(I2C_CR2(unit), i2c_ctl);",
+"			}",
+"",
+"			out_w(I2C_CR2(unit), i2c_ctl | I2C_CR2_START);",
+"			EI(imask);",
+"			break;",
+"",
+"		case I2C_STS_STOP:",
+"			while(in_w(I2C_ISR(unit)) & I2C_ISR_BUSY) {",
+"				tk_dly_tsk(1);",
+"			}",
+"			break;",
+"		}",
+"		if ( p_cb->state == I2C_STS_STOP ) break;",
+"",
+"		p_cb->wait_tskid = tk_get_tid();",
+"		err = tk_slp_tsk(ll_devdat[unit].timout);",
+"		if ( err < E_OK ) break;",
+"	}",
+"",
+"	out_w(I2C_CR1(unit), 0);	/* I2C Device disable */",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Set communication parameters",
+" */",
+"Inline void set_com_start(UW unit, UW sadr, UW sdat_num, UW rdat_num, UB *sbuf, UB *rbuf)",
+"{",
+"	ll_devcb[unit].state	= I2C_STS_START;",
+"	ll_devcb[unit].sadr	= sadr;		/* Slave address */",
+"	ll_devcb[unit].sdat_num	= sdat_num;	/* Number of send data */",
+"	ll_devcb[unit].rdat_num	= rdat_num;	/* Number of receive data */",
+"	ll_devcb[unit].sbuf	= sbuf;		/* Send buffer */",
+"	ll_devcb[unit].rbuf	= rbuf;		/* Receive buffer */",
+"}",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT W dev_i2c_llctl( UW unit, INT cmd, UW p1, UW p2, UW *pp)",
+"{",
+"	T_I2C_EXEC	*p_ex;",
+"	ER		err	= E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_I2C_OPEN:",
+"		/* I2C interrupt enable */",
+"		EnableInt(ll_devdat[unit].intno, ll_devdat[unit].intpri);",
+"		EnableInt(ll_devdat[unit].intno + 1, ll_devdat[unit].intpri);",
+"		break;",
+"",
+"	case LLD_I2C_CLOSE:",
+"		/* I2C interrupt disable */",
+"		DisableInt(ll_devdat[unit].intno);",
+"		DisableInt(ll_devdat[unit].intno + 1);",
+"		break;",
+"",
+"	case LLD_I2C_READ:",
+"		set_com_start( unit, p1, 0, p2, NULL, (UB*)pp);",
+"		err = i2c_trans(unit, &ll_devcb[unit]);",
+"		if(err >= E_OK) err = p2 - ll_devcb[unit].sdat_num;",
+"		break;",
+"",
+"	case LLD_I2C_WRITE:",
+"		set_com_start( unit, p1, p2, 0, (UB*)pp, NULL);",
+"		err = i2c_trans(unit, &ll_devcb[unit]);",
+"		if(err >= E_OK) err = p2 - ll_devcb[unit].sdat_num;",
+"		break;",
+"",
+"	case LLD_I2C_EXEC:",
+"		p_ex = (T_I2C_EXEC*)pp;",
+"		set_com_start( unit, p_ex->sadr, p_ex->snd_size, p_ex->rcv_size, p_ex->snd_data, p_ex->rcv_data);",
+"		err = i2c_trans(unit, &ll_devcb[unit]);",
+"		if(err >= E_OK) err = p_ex->snd_size + p_ex->rcv_size;",
+"		break;",
+"	}",
+"	",
+"	return (W)err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_i2c_llinit( T_I2C_DCB *p_dcb)",
+"{",
+"	T_DINT	dint;",
+"",
+"	UW	unit;",
+"	UW	intno;",
+"	ER	err;",
+"",
+"	unit = p_dcb->unit;",
+"",
+"#if DEVCONF_I2C_INIT_MCLK",
+"	if(unit != DEV_I2C_4) {	// I2C 1,2,3,5",
+"		/* Select clock source */",
+"		out_w(RCC_D2CCIP2R, (in_w(RCC_D2CCIP2R) & ~RCC_D2CCIP2R_I2C1235SEL) |(DEVCNF_I2CSEL << 12));",
+"		",
+"		/* Enable module clock */",
+"		*(_UW*)RCC_APB1LENR |= (RCC_APB1LENR_I2C1EN<<unit);",
+"		",
+"	} else {		// I2C4",
+"		/* Select clock source */",
+"		out_w(RCC_D3CCIPR, (in_w(RCC_D3CCIPR) & ~RCC_D3CCIPR_I2C4SEL) |(DEVCNF_I2CSEL << 8));",
+"",
+"		/* Enable module clock */",
+"		*(_UW*)RCC_APB4ENR |= RCC_APB4ENR_I2C4EN;",
+"	}",
+"#endif",
+"	out_w(I2C_CR1(unit), 0);				// I2C disable",
+"	out_w(I2C_TIMINGR(unit), I2C_TIMINGR_INIT);		// I2C Initial setting",
+"",
+"	/* Interrupt handler definition */",
+"	intno		= ll_devdat[unit].intno;",
+"	dint.intatr	= TA_HLNG;",
+"	dint.inthdr	= i2c_evhdr;",
+"	",
+"	err = tk_def_int(intno, &dint);		// I2C event interrupt",
+"	if(err < E_OK) return err;",
+"",
+"	dint.inthdr	= i2c_erhdr;",
+"	err = tk_def_int(intno + 1, &dint);	// I2C error interrupt",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_IIC_ENABLE */",
+"#endif		/* CPU_STM32H7 */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	i2c_sysdep.h",
+" *	I2C device driver",
+" *	System-dependent definition for STM32H7",
+" */",
+"",
+"#ifndef	__DEV_I2C_STM32H7_H__",
+"#define	__DEV_I2C_STM32H7_H__",
+"",
+"#define	DEV_I2C_UNITNM		(5)	/* Number of devive units */",
+"#define	DEV_I2C_1		(0)	/* I2C1 */",
+"#define	DEV_I2C_2		(1)	/* I2C2 */",
+"#define	DEV_I2C_3		(2)	/* I2C3 */",
+"#define	DEV_I2C_4		(3)	/* I2C4 */",
+"#define	DEV_I2C_5		(4)	/* I2C5 */",
+"",
+"/* I2C device driver operating state */",
+"#define	I2C_STS_START		0x0000",
+"#define	I2C_STS_RESTART		0x0001",
+"#define	I2C_STS_STOP		0x0003",
+"#define	I2C_STS_SEND		0x0004",
+"#define	I2C_STS_RECV		0x0005",
+"#define	I2C_STS_TOP		0x8000",
+"",
+"/*",
+" * RCC registers ( I2C Clock setting )",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * I2C registers",
+" */",
+"",
+"/* Base address */",
+"#define	I2C1_BASE		0x40005400",
+"#define	I2C2_BASE		0x40005800",
+"#define	I2C3_BASE		0x40005C00",
+"#define	I2C4_BASE		0x58001C00",
+"#define	I2C5_BASE		0x40006400",
+"",
+"/* Register offset */",
+"#define	I2Cx_CR1		(0x00)		// Control register 1",
+"#define	I2Cx_CR2		(0x04)		// Control register 2",
+"#define	I2Cx_OAR1		(0x08)		// Own adress 1 register",
+"#define	I2Cx_OAR2		(0x0C)		// Own adress 2 register",
+"#define	I2Cx_TIMINGR		(0x10)		// Timing register",
+"#define	I2Cx_TIMEOUTR		(0x14)		// Timeout register",
+"#define	I2Cx_ISR		(0x18)		// Interrupt & status register",
+"#define	I2Cx_ICR		(0x1C)		// Interrupt clear register",
+"#define	I2Cx_PECR		(0x20)		// reserve",
+"#define	I2Cx_RXDR		(0x24)		// Receive data register",
+"#define	I2Cx_TXDR		(0x28)		// Transmission data register",
+"",
+"#define I2C_CR1_PE		(1<<0)		// Peripheral enable",
+"#define	I2C_CR1_TXIE		(1<<1)		// TX interrupt enable",
+"#define	I2C_CR1_RXIE		(1<<2)		// RX interrupt enable",
+"#define	I2C_CR1_NACKIE		(1<<4)		// NACK interrupt enable",
+"#define	I2C_CR1_STOPIE		(1<<5)		// STOP interrupt enable",
+"#define	I2C_CR1_TCIE		(1<<6)		// Transfer complete interrupt enable",
+"#define	I2C_CR1_ERRIE		(1<<7)		// Error interrupt enable",
+"",
+"#define	I2C_CR2_RD_WRN		(1<<10)		// Communication direction",
+"#define	I2C_CR2_START		(1<<13)		// START",
+"#define	I2C_CR2_AUTOEND		(1<<25)		// Auto end mode",
+"",
+"#define	I2C_ISR_TXE		(1<<0)		// Transfer data empty",
+"#define	I2C_ISR_TXIS		(1<<1)		// Transfer interrupt",
+"#define	I2C_ISR_RXNE		(1<<2)		// Receive data not empty",
+"#define	I2C_ISR_NACKF		(1<<4)		// NACK interrupt",
+"#define	I2C_ISR_STOPF		(1<<5)		// STOP interrupt",
+"#define	I2C_ISR_TC		(1<<6)		// Transfer complete interrupt",
+"#define	I2C_ISR_TCR		(1<<7)		// Transfer complete & reload",
+"#define	I2C_ISR_BUSY		(1<<15)		// Bus busy",
+"",
+"#define	I2C_ICR_ALL		(0x00003F38)	// All flag clear",
+"",
+"/* ",
+" * I2C interrupt number",
+"  */",
+"#define	INTNO_I2C1_EV		31		// I2C1 event interrupt",
+"#define	ININO_I2C1_ER		32		// I2C1 error interrupt",
+"",
+"#define	INTNO_I2C2_EV		33		// I2C2 event interrupt",
+"#define	ININO_I2C2_ER		34		// I2C2 error interrupt",
+"",
+"#define	INTNO_I2C3_EV		72		// I2C3 event interrupt",
+"#define	ININO_I2C3_ER		73		// I2C3 error interrupt",
+"",
+"#define	INTNO_I2C4_EV		95		// I2C4 event interrupt",
+"#define	ININO_I2C4_ER		96		// I2C4 error interrupt",
+"",
+"#define	INTNO_I2C5_EV		157		// I2C5 event interrupt",
+"#define	ININO_I2C5_ER		158		// I2C5 error interrupt",
+"",
+"#endif		/* __DEV_I2C_STM32H7_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	i2c_cnf_sysdep.h ",
+" *	I2C device configuration file",
+" *		for STM32L4",
+" */",
+"#ifndef	__DEV_I2C_CNF_STM32L4_H__",
+"#define	__DEV_I2C_CNF_STM32L4_H__",
+"",
+"/* Device clock initialization */",
+"#define DEVCNF_I2C_INIT_MCLK		TRUE		// Initialize module clock",
+"#define	DEVCNF_I2CxSEL_INIT		0x00000000	// All I2C clocks are PCLK (bit 12-17)",
+"",
+"/* Register initial value */",
+"#define	I2C_TIMINGR_INIT		0x10909CEC	// Standard mode, 100KHz",
+"//#define	I2C_TIMINGR_INIT	0x00702991	// Fast mode, 400KHz",
+"",
+"// Interrupt priority",
+"#define	DEVCNF_I2C1_INTPRI	5",
+"#define	DEVCNF_I2C2_INTPRI	5",
+"#define	DEVCNF_I2C3_INTPRI	5",
+"",
+"/* Communication timeout time */",
+"#define	DEVCNF_I2C1_TMO		1000",
+"#define	DEVCNF_I2C2_TMO		1000",
+"#define	DEVCNF_I2C3_TMO		1000",
+"",
+"",
+"#endif		/* __DEV_I2C_CNF_STM32L4_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_STM32L4",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../i2c.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_IIC_ENABLE",
+"/*",
+" *	i2c_stm32l4.c",
+"  *	I2C device driver",
+" *	System-dependent definition for STM32L4",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+"*/",
+"const LOCAL UW ba[DEV_I2C_UNITNM] = { I2C1_BASE, I2C2_BASE, I2C3_BASE };",
+"",
+"#define	I2C_CR1(u)	(ba[u] + I2Cx_CR1)",
+"#define	I2C_CR2(u)	(ba[u] + I2Cx_CR2)",
+"#define	I2C_TIMINGR(u)	(ba[u] + I2Cx_TIMINGR)",
+"#define	I2C_ISR(u)	(ba[u] + I2Cx_ISR)",
+"#define	I2C_ICR(u)	(ba[u] + I2Cx_ICR)",
+"#define	I2C_ICR(u)	(ba[u] + I2Cx_ICR)",
+"#define	I2C_RXDR(u)	(ba[u] + I2Cx_RXDR)",
+"#define	I2C_TXDR(u)	(ba[u] + I2Cx_TXDR)",
+"",
+"/*----------------------------------------------------------------------",
+" * Device data",
+"*/",
+"const LOCAL struct {",
+"	UINT	intno;		// Interrupt number",
+"	PRI	intpri;		// Interrupt priority",
+"	TMO	timout;		// I2C timeout time",
+"} ll_devdat[DEV_I2C_UNITNM] = {",
+"	{	/* I2C1 */",
+"		.intno		= INTNO_I2C1_EV,",
+"		.intpri		= DEVCNF_I2C1_INTPRI,",
+"		.timout		= DEVCNF_I2C1_TMO,",
+"	},",
+"	{	/* I2C2 */",
+"		.intno		= INTNO_I2C2_EV,",
+"		.intpri		= DEVCNF_I2C2_INTPRI,",
+"		.timout		= DEVCNF_I2C2_TMO,",
+"	},",
+"	{	/* I2C3 */",
+"		.intno		= INTNO_I2C3_EV,",
+"		.intpri		= DEVCNF_I2C3_INTPRI,",
+"		.timout		= DEVCNF_I2C3_TMO,",
+"	},",
+"};",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"typedef struct {",
+"	ID	wait_tskid;	/* Wait Task ID */",
+"	UW	state;		/* Operating state */",
+"	UW	sadr;		/* Slave address */",
+"	ER	ioerr;		/* Communication error */",
+"	UW	sdat_num;	/* Number of send data */",
+"	UW	rdat_num;	/* Number of receive data */",
+"	UB	*sbuf;		/* Send buffer */",
+"	UB	*rbuf;		/* Receive buffer */",
+"} T_I2C_LLDCB;",
+"LOCAL T_I2C_LLDCB	ll_devcb[DEV_I2C_UNITNM];",
+"",
+"",
+"/*-------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"/*-------------------------------------------------------",
+" * Event interrupt handler",
+" */",
+"LOCAL void i2c_evhdr( UINT intno )",
+"{",
+"	T_I2C_LLDCB	*p_cb;",
+"	UW		i2c_st;",
+"	INT		unit;",
+"	BOOL		wup	= FALSE;",
+"",
+"	for ( unit = 0; unit < DEV_I2C_UNITNM; unit++ ) {",
+"		if ( ll_devdat[unit].intno == intno ) {",
+"			p_cb = &ll_devcb[unit];",
+"			break;",
+"		}",
+"	}",
+"	if(unit >= DEV_I2C_UNITNM) {",
+"		ClearInt(intno);	// Clear interrupt",
+"		return;",
+"	}",
+"",
+"	i2c_st = in_w(I2C_ISR(unit));",
+"	if( i2c_st & I2C_ISR_NACKF) {",
+"		p_cb->ioerr = E_IO;",
+"		wup = TRUE;",
+"",
+"	} else if( i2c_st & I2C_ISR_TXIS) {		/* TX interrupt */",
+"		out_w(I2C_TXDR(unit),*p_cb->sbuf++);",
+"		if(--(p_cb->sdat_num) <= 0) {			/* final data ? */",
+"			if(p_cb->rdat_num == 0) {",
+"				out_w(I2C_CR1(unit), I2C_CR1_PE);",
+"				p_cb->state = I2C_STS_STOP;",
+"				wup = TRUE;",
+"			} else {",
+"				out_w(I2C_CR1(unit), I2C_CR1_PE | I2C_CR1_TCIE | I2C_CR1_RXIE | I2C_CR1_NACKIE | I2C_CR1_ERRIE );",
+"			}",
+"		}",
+"",
+"	} else if( i2c_st & I2C_ISR_TC) {		/* Transfer complete */",
+"		out_w(I2C_CR1(unit), I2C_CR1_PE | I2C_CR1_RXIE | I2C_CR1_NACKIE | I2C_CR1_ERRIE );",
+"		p_cb->state = I2C_STS_START;",
+"		wup = TRUE;",
+"",
+"	} else if( i2c_st & I2C_ISR_RXNE) {	/* RX interrupt */",
+"		*(p_cb->rbuf++) = (UB)in_w(I2C_RXDR(unit));",
+"		if(--(p_cb->rdat_num) <= 0) {			/* final data ? */",
+"			out_w(I2C_CR1(unit), I2C_CR1_PE);",
+"			p_cb->state = I2C_STS_STOP;",
+"			wup = TRUE;",
+"		}",
+"	} else {	/* Error */",
+"		out_w(I2C_CR1(unit), I2C_CR1_PE);",
+"		p_cb->ioerr = E_IO;",
+"	}",
+"",
+"	out_w(I2C_ICR(unit), I2C_ICR_ALL);	// Clear all Interrupt flag",
+"	ClearInt(intno);			// Clear interrupt",
+"",
+"	if(wup) {",
+"		if(p_cb->wait_tskid) {",
+"			tk_wup_tsk(p_cb->wait_tskid);",
+"			p_cb->wait_tskid = 0;",
+"		}",
+"	}",
+"}",
+"",
+"/*-------------------------------------------------------",
+" * Error interrupt handler",
+" */",
+"LOCAL void i2c_erhdr( UINT intno )",
+"{",
+"	T_I2C_LLDCB	*p_cb;",
+"	INT		unit;",
+"",
+"	intno--;",
+"	for ( unit = 0; unit < DEV_I2C_UNITNM; unit++ ) {",
+"		if ( ll_devdat[unit].intno == intno ) {",
+"			p_cb = &ll_devcb[unit];",
+"			break;",
+"		}",
+"	}",
+"	if(unit >= DEV_I2C_UNITNM) return;",
+"",
+"	out_w(I2C_ICR(unit), I2C_ICR_ALL);	// Clear all Interrupt flag",
+"	ClearInt(intno);			// Clear interrupt",
+"	",
+"	out_w(I2C_CR1(unit), I2C_CR1_PE);",
+"",
+"	p_cb->ioerr = E_IO;",
+"	if(p_cb->wait_tskid) {",
+"		tk_wup_tsk(p_cb->wait_tskid);",
+"		p_cb->wait_tskid = 0;",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Execution of communication",
+" */",
+"LOCAL ER i2c_trans(INT unit, T_I2C_LLDCB *p_cb)",
+"{",
+"	UW		i2c_ctl;",
+"	UINT		imask;",
+"	ER		err;",
+"",
+"	p_cb->ioerr		= E_OK;",
+"	p_cb->wait_tskid	= 0;",
+"",
+"	/* I2C Device enable */",
+"	out_w(I2C_CR1(unit), I2C_CR1_PE | I2C_CR1_TXIE | I2C_CR1_RXIE | I2C_CR1_NACKIE | I2C_CR1_ERRIE );",
+"",
+"	while ((err = p_cb->ioerr) == E_OK ) {",
+"",
+"		switch ( p_cb->state ) {",
+"		case I2C_STS_START:",
+"			DI(imask);",
+"			i2c_ctl = p_cb->sadr <<1;",
+"			if(p_cb->sdat_num > 0 ) {	/* Send */",
+"				i2c_ctl |= p_cb->sdat_num <<16 ;",
+"				if( p_cb->rdat_num == 0) {",
+"					i2c_ctl |= I2C_CR2_AUTOEND;",
+"				}",
+"				out_w(I2C_CR2(unit), i2c_ctl);",
+"				p_cb->state = I2C_STS_SEND;",
+"			} else {			/* Receive */",
+"				i2c_ctl |= p_cb->rdat_num <<16 | I2C_CR2_RD_WRN | I2C_CR2_AUTOEND;",
+"				p_cb->state = I2C_STS_RECV;",
+"				out_w(I2C_CR2(unit), i2c_ctl);",
+"			}",
+"",
+"			out_w(I2C_CR2(unit), i2c_ctl | I2C_CR2_START);",
+"			EI(imask);",
+"			break;",
+"",
+"		case I2C_STS_STOP:",
+"			while(in_w(I2C_ISR(unit)) & I2C_ISR_BUSY) {",
+"				tk_dly_tsk(1);",
+"			}",
+"			break;",
+"		}",
+"		if ( p_cb->state == I2C_STS_STOP ) break;",
+"",
+"		p_cb->wait_tskid = tk_get_tid();",
+"		err = tk_slp_tsk(ll_devdat[unit].timout);",
+"		if ( err < E_OK ) break;",
+"	}",
+"",
+"	out_w(I2C_CR1(unit), 0);	/* I2C Device disable */",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Set communication parameters",
+" */",
+"Inline void set_com_start(UW unit, UW sadr, UW sdat_num, UW rdat_num, UB *sbuf, UB *rbuf)",
+"{",
+"	ll_devcb[unit].state	= I2C_STS_START;",
+"	ll_devcb[unit].sadr	= sadr;		/* Slave address */",
+"	ll_devcb[unit].sdat_num	= sdat_num;	/* Number of send data */",
+"	ll_devcb[unit].rdat_num	= rdat_num;	/* Number of receive data */",
+"	ll_devcb[unit].sbuf	= sbuf;		/* Send buffer */",
+"	ll_devcb[unit].rbuf	= rbuf;		/* Receive buffer */",
+"}",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT W dev_i2c_llctl( UW unit, INT cmd, UW p1, UW p2, UW *pp)",
+"{",
+"	T_I2C_EXEC	*p_ex;",
+"	ER		err	= E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_I2C_OPEN:",
+"		/* I2C interrupt enable */",
+"		EnableInt(ll_devdat[unit].intno, ll_devdat[unit].intpri);",
+"		EnableInt(ll_devdat[unit].intno + 1, ll_devdat[unit].intpri);",
+"		break;",
+"",
+"	case LLD_I2C_CLOSE:",
+"		/* I2C interrupt disable */",
+"		DisableInt(ll_devdat[unit].intno);",
+"		DisableInt(ll_devdat[unit].intno + 1);",
+"		break;",
+"",
+"	case LLD_I2C_READ:",
+"		set_com_start( unit, p1, 0, p2, NULL, (UB*)pp);",
+"		err = i2c_trans(unit, &ll_devcb[unit]);",
+"		if(err >= E_OK) err = p2 - ll_devcb[unit].sdat_num;",
+"		break;",
+"",
+"	case LLD_I2C_WRITE:",
+"		set_com_start( unit, p1, p2, 0, (UB*)pp, NULL);",
+"		err = i2c_trans(unit, &ll_devcb[unit]);",
+"		if(err >= E_OK) err = p2 - ll_devcb[unit].sdat_num;",
+"		break;",
+"",
+"	case LLD_I2C_EXEC:",
+"		p_ex = (T_I2C_EXEC*)pp;",
+"		set_com_start( unit, p_ex->sadr, p_ex->snd_size, p_ex->rcv_size, p_ex->snd_data, p_ex->rcv_data);",
+"		err = i2c_trans(unit, &ll_devcb[unit]);",
+"		if(err >= E_OK) err = p_ex->snd_size + p_ex->rcv_size;",
+"		break;",
+"	}",
+"	",
+"	return (W)err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_i2c_llinit( T_I2C_DCB *p_dcb)",
+"{",
+"	T_DINT	dint;",
+"",
+"	UW	unit;",
+"	UW	intno;",
+"	ER	err;",
+"",
+"	unit = p_dcb->unit;",
+"",
+"#if DEVCNF_I2C_INIT_MCLK",
+"	/* Select clock source */",
+"	out_w(RCC_CCIPR, (in_w(RCC_CCIPR) & ~RCC_CCIPR_I2CxSEL) | DEVCNF_I2CxSEL_INIT );",
+"",
+"	/* Enable module clock */",
+"	*(_UW*)RCC_APB1ENR1 |= (RCC_APB1ENR1_I2C1EN << unit);",
+"#endif",
+"",
+"	out_w(I2C_CR1(unit), 0);				// I2C disable",
+"	out_w(I2C_TIMINGR(unit), I2C_TIMINGR_INIT);		// I2C Initial setting",
+"",
+"	/* Interrupt handler definition */",
+"	intno		= ll_devdat[unit].intno;",
+"	dint.intatr	= TA_HLNG;",
+"	dint.inthdr	= i2c_evhdr;",
+"	",
+"	err = tk_def_int(intno, &dint);		// I2C event interrupt",
+"	if(err < E_OK) return err;",
+"",
+"	dint.inthdr	= i2c_erhdr;",
+"	err = tk_def_int(intno + 1, &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_IIC_ENABLE */",
+"#endif		/* CPU_STM32L4 */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	i2c_sysdep.h",
+" *	I2C device driver",
+" *	System-dependent definition for STM32L4",
+" */",
+"",
+"#ifndef	__DEV_I2C_STM32L4_H__",
+"#define	__DEV_I2C_STM32L4_H__",
+"",
+"#define	DEV_I2C_UNITNM		(3)	/* Number of devive units */",
+"#define	DEV_I2C_1		(0)	/* I2C1 */",
+"#define	DEV_I2C_2		(1)	/* I2C2 */",
+"#define	DEV_I2C_3		(2)	/* I2C3 */",
+"",
+"/* I2C device driver operating state */",
+"#define	I2C_STS_START		0x0000",
+"#define	I2C_STS_RESTART		0x0001",
+"#define	I2C_STS_STOP		0x0003",
+"#define	I2C_STS_SEND		0x0004",
+"#define	I2C_STS_RECV		0x0005",
+"#define	I2C_STS_TOP		0x8000",
+"",
+"/*",
+" * RCC registers ( I2C Clock setting )",
+" */",
+"#define	RCC_CCIPR_I2CSEL	0x00003000	// I2C Clock source",
+"",
+"/*----------------------------------------------------------------------",
+" * I2C registers",
+" */",
+"",
+"/* Base address */",
+"#define	I2C1_BASE		0x40005400",
+"#define	I2C2_BASE		0x40005800",
+"#define	I2C3_BASE		0x40005C00",
+"",
+"/* Register offset */",
+"#define	I2Cx_CR1		(0x00)		// Control register 1",
+"#define	I2Cx_CR2		(0x04)		// Control register 2",
+"#define	I2Cx_OAR1		(0x08)		// Own adress 1 register",
+"#define	I2Cx_OAR2		(0x0C)		// Own adress 2 register",
+"#define	I2Cx_TIMINGR		(0x10)		// Timing register",
+"#define	I2Cx_TIMEOUTR		(0x14)		// Timeout register",
+"#define	I2Cx_ISR		(0x18)		// Interrupt & status register",
+"#define	I2Cx_ICR		(0x1C)		// Interrupt clear register",
+"#define	I2Cx_PECR		(0x20)		// reserve",
+"#define	I2Cx_RXDR		(0x24)		// Receive data register",
+"#define	I2Cx_TXDR		(0x28)		// Transmission data register",
+"",
+"#define I2C_CR1_PE		(1<<0)		// Peripheral enable",
+"#define	I2C_CR1_TXIE		(1<<1)		// TX interrupt enable",
+"#define	I2C_CR1_RXIE		(1<<2)		// RX interrupt enable",
+"#define	I2C_CR1_NACKIE		(1<<4)		// NACK interrupt enable",
+"#define	I2C_CR1_STOPIE		(1<<5)		// STOP interrupt enable",
+"#define	I2C_CR1_TCIE		(1<<6)		// Transfer complete interrupt enable",
+"#define	I2C_CR1_ERRIE		(1<<7)		// Error interrupt enable",
+"",
+"#define	I2C_CR2_RD_WRN		(1<<10)		// Communication direction",
+"#define	I2C_CR2_START		(1<<13)		// START",
+"#define	I2C_CR2_AUTOEND		(1<<25)		// Auto end mode",
+"",
+"#define	I2C_ISR_TXE		(1<<0)		// Transfer data empty",
+"#define	I2C_ISR_TXIS		(1<<1)		// Transfer interrupt",
+"#define	I2C_ISR_RXNE		(1<<2)		// Receive data not empty",
+"#define	I2C_ISR_NACKF		(1<<4)		// NACK interrupt",
+"#define	I2C_ISR_STOPF		(1<<5)		// STOP interrupt",
+"#define	I2C_ISR_TC		(1<<6)		// Transfer complete interrupt",
+"#define	I2C_ISR_TCR		(1<<7)		// Transfer complete & reload",
+"#define	I2C_ISR_BUSY		(1<<15)		// Bus busy",
+"",
+"#define	I2C_ICR_ALL		(0x00003F38)	// All flag clear",
+"",
+"/* ",
+" * I2C interrupt number",
+"  */",
+"#define	INTNO_I2C1_EV		31		// I2C1 event interrupt",
+"#define	ININO_I2C1_ER		32		// I2C1 error interrupt",
+"",
+"#define	INTNO_I2C2_EV		33		// I2C2 event interrupt",
+"#define	ININO_I2C2_ER		34		// I2C2 error interrupt",
+"",
+"#define	INTNO_I2C3_EV		72		// I2C3 event interrupt",
+"#define	ININO_I2C3_ER		73		// I2C3 error interrupt",
+"",
+"#endif		/* __DEV_I2C_STM32L4_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	i2c_cnf_sysdep.h ",
+" *	I2C device configuration file",
+" *		for TX03_M367 (TMPM369FDFG)",
+" */",
+"#ifndef	__DEV_I2C_CNF_M367_H__",
+"#define	__DEV_I2C_CNF_M367_H__",
+"",
+"/* Frequency selection (0-6)  SBIxCR1.SCK */",
+"#define	DEVCNF_I2C0_SCK		0",
+"#define	DEVCNF_I2C1_SCK		0",
+"#define	DEVCNF_I2C2_SCK		0",
+"",
+"// Interrupt priority",
+"#define	DEVCNF_I2C0_INTPRI	5",
+"#define	DEVCNF_I2C1_INTPRI	5",
+"#define	DEVCNF_I2C2_INTPRI	5",
+"",
+"/* Communication timeout time */",
+"#define	DEVCNF_I2C0_TMO		1000",
+"#define	DEVCNF_I2C1_TMO		1000",
+"#define	DEVCNF_I2C2_TMO		1000",
+"",
+"",
+"#endif		/* __DEV_I2C_CNF_M367_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_TMPM367FDFG",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../i2c.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_IIC_ENABLE",
+"/*",
+" *	i2c_m367.c",
+"  *	I2C device driver",
+" *	System-dependent definition for TX03_M367",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+"*/",
+"const LOCAL UW ba[DEV_I2C_UNITNM] = { I2C0_BASE, I2C1_BASE, I2C2_BASE };",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization value",
+"*/",
+"const LOCAL struct {",
+"	TMO	timout;		// I2C timeout time",
+"	PRI	intpri;		// Interrupt priority",
+"	UW	sck;		// Frequency selection",
+"} ll_devinit[DEV_I2C_UNITNM] = {",
+"	{	/* SBI0 */",
+"		.timout		= DEVCNF_I2C0_TMO,",
+"		.intpri		= DEVCNF_I2C0_INTPRI,",
+"		.sck		= DEVCNF_I2C0_SCK,",
+"	},",
+"	{	/* SBI1 */",
+"		.timout		= DEVCNF_I2C1_TMO,",
+"		.intpri		= DEVCNF_I2C1_INTPRI,",
+"		.sck		= DEVCNF_I2C1_SCK,",
+"	},",
+"	{	/* SBI2 */",
+"		.timout		= DEVCNF_I2C2_TMO,",
+"		.intpri		= DEVCNF_I2C2_INTPRI,",
+"		.sck		= DEVCNF_I2C2_SCK,",
+"	},",
+"};",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"typedef struct {",
+"	ID	wait_tskid;	/* Wait Task ID */",
+"	UW	state;		/* Operating state */",
+"	UW	sadr;		/* Slave address */",
+"	ER	ioerr;		/* Communication error */",
+"	UW	sdat_num;	/* Number of send data */",
+"	UW	rdat_num;	/* Number of receive data */",
+"	UB	*sbuf;		/* Send buffer */",
+"	UB	*rbuf;		/* Receive buffer */",
+"} T_I2C_LLDCB;",
+"LOCAL T_I2C_LLDCB	ll_devcb[DEV_I2C_UNITNM];",
+"",
+"",
+"/*-------------------------------------------------------",
+" * Interrupt handler",
+" *-------------------------------------------------------",
+" */",
+"LOCAL void i2c_inthdr( UINT intno )",
+"{",
+"	T_I2C_LLDCB	*p_cb;",
+"	UW		sbisr;",
+"	INT		unit;",
+"",
+"	for ( unit = 0; unit < DEV_I2C_UNITNM; unit++ ) {",
+"		if ( INTNO_INTSBI(unit) == intno ) {",
+"			p_cb = &ll_devcb[unit];",
+"			break;",
+"		}",
+"	}",
+"	if(unit >= DEV_I2C_UNITNM) return;",
+"",
+"	sbisr = in_w(ba[unit] + I2C_SBIxSR);",
+"	if ( (sbisr & I2C_SBIxSR_AL) != 0 ) {",
+"		/* Communication error */",
+"		p_cb->ioerr = E_IO;",
+"		goto stop;",
+"	}",
+"",
+"	switch( p_cb->state ) {",
+"	case I2C_STS_RECV | I2C_STS_TOP:",
+"		if(p_cb->rdat_num == 1) {",
+"			out_w(ba[unit] + I2C_SBIxCR1, ",
+"					I2C_SBIxCR1_INIT & ~I2C_SBIxCR1_ACK);",
+"		}",
+"		in_w(ba[unit] + I2C_SBIxDBR);",
+"		p_cb->state = I2C_STS_RECV;",
+"		break;",
+"",
+"	case I2C_STS_RECV:",
+"		if(p_cb->rdat_num == 1) {",
+"			out_w(ba[unit] + I2C_SBIxCR1, ",
+"					I2C_SBIxCR1_INIT & ~I2C_SBIxCR1_ACK);",
+"		}",
+"		*(p_cb->rbuf++) = (UB)(in_w(ba[unit] + I2C_SBIxDBR) & 0xff);",
+"		if(--(p_cb->rdat_num) <= 0) {",
+"			p_cb->state = I2C_STS_STOP;",
+"		}",
+"		break;",
+"	",
+"	case I2C_STS_SEND:",
+"		if ( (sbisr & I2C_SBIxSR_LRB) != 0 ) {",
+"			p_cb->ioerr = 1; /* Interruption by NAK */",
+"			goto stop;",
+"		}",
+"",
+"		out_w(ba[unit] + I2C_SBIxDBR, *p_cb->sbuf++);",
+"		if(--(p_cb->sdat_num) <= 0) {",
+"			if(p_cb->rdat_num == 0) {",
+"				p_cb->state = I2C_STS_STOP;",
+"			} else {",
+"				p_cb->state = I2C_STS_RESTART;",
+"			}",
+"		}",
+"		break;",
+"	",
+"	case I2C_STS_RESTART:",
+"		out_w(ba[unit] + I2C_SBIxCR2, I2C_SBIxCR2_RESTART);",
+"		if(p_cb->wait_tskid) {",
+"			tk_wup_tsk(p_cb->wait_tskid);",
+"			p_cb->wait_tskid = 0;",
+"		}",
+"		break;",
+"",
+"	case I2C_STS_STOP:",
+"	stop:",
+"		out_w(ba[unit] + I2C_SBIxCR2, I2C_SBIxCR2_STOP);",
+"		if(p_cb->wait_tskid) {",
+"			tk_wup_tsk(p_cb->wait_tskid);",
+"			p_cb->wait_tskid = 0;",
+"		}",
+"		break;",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Waiting for status change",
+" */",
+"LOCAL void i2c_wait_status( T_I2C_LLDCB *p_cb, INT unit, UW mask, UW value )",
+"{",
+"	_UW	t = CLOCK_fc;	/* Timeout value */",
+"",
+"	while ( p_cb->ioerr == E_OK ) {",
+"		if ( (in_w(ba[unit] + I2C_SBIxSR) & mask) == value ) break;",
+"		if ( --t == 0 ) p_cb->ioerr = E_TMOUT;",
+"	}",
+"	return;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Execution of communication",
+" */",
+"LOCAL ER i2c_trans(INT unit, T_I2C_LLDCB *p_cb)",
+"{",
+"	UINT		imask;",
+"	ER		err;",
+"",
+"	p_cb->ioerr		= E_OK;",
+"	p_cb->wait_tskid	= 0;",
+"",
+"	while ((err = p_cb->ioerr) == E_OK ) {",
+"",
+"		switch ( p_cb->state ) {",
+"		  case I2C_STS_RESTART:",
+"			i2c_wait_status(p_cb, unit, I2C_SBIxSR_BB, 0);",
+"			i2c_wait_status(p_cb, unit, I2C_SBIxSR_LRB, I2C_SBIxSR_LRB);",
+"			WaitUsec(5);",
+"			/* no break */",
+"",
+"		  case I2C_STS_START:",
+"			DI(imask);",
+"			out_w(ba[unit] + I2C_SBIxCR1, I2C_SBIxCR1_INIT);",
+"			if(p_cb->sdat_num > 0 ) {	/* Send */",
+"				out_w(ba[unit] + I2C_SBIxDBR, p_cb->sadr);",
+"				p_cb->state = I2C_STS_SEND;",
+"			} else {			/* Receive */",
+"				out_w(ba[unit] + I2C_SBIxDBR, (p_cb->sadr|1));",
+"				p_cb->state = I2C_STS_RECV | I2C_STS_TOP;",
+"			}",
+"			out_w(ba[unit] + I2C_SBIxCR2, I2C_SBIxCR2_START);",
+"			EI(imask);",
+"			break;",
+"",
+"		  case I2C_STS_STOP:",
+"			i2c_wait_status(p_cb, unit, I2C_SBIxSR_BB, 0);",
+"			break;",
+"		}",
+"		if ( (err = p_cb->ioerr) != E_OK || p_cb->state == I2C_STS_STOP ) break;",
+"",
+"		p_cb->wait_tskid = tk_get_tid();",
+"		err = tk_slp_tsk(ll_devinit[unit].timout);",
+"		if ( err < E_OK ) break;",
+"	}",
+"",
+"	/* Communication stop */",
+"	DI(imask);",
+"	out_w(ba[unit] + I2C_SBIxCR2, I2C_SBIxCR2_STOP);",
+"	EI(imask);",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Set communication parameters",
+" */",
+"Inline void set_com_start(UW unit, UW sadr, UW sdat_num, UW rdat_num, UB *sbuf, UB *rbuf)",
+"{",
+"	ll_devcb[unit].state	= I2C_STS_START;",
+"	ll_devcb[unit].sadr	= sadr<<1;	/* Slave address */",
+"	ll_devcb[unit].sdat_num	= sdat_num;	/* Number of send data */",
+"	ll_devcb[unit].rdat_num	= rdat_num;	/* Number of receive data */",
+"	ll_devcb[unit].sbuf	= sbuf;		/* Send buffer */",
+"	ll_devcb[unit].rbuf	= rbuf;		/* Receive buffer */",
+"}",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT W dev_i2c_llctl( UW unit, INT cmd, UW p1, UW p2, UW *pp)",
+"{",
+"	T_I2C_EXEC	*p_ex;",
+"	ER		err	= E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_I2C_OPEN:",
+"		/* I2C Device reset */",
+"		out_w(ba[unit] + I2C_SBIxCR0, I2C_SBIxCR0_SBIEN);",
+"		out_w(ba[unit] + I2C_SBIxCR2, I2C_SBIxCR2_SBIM_I2C | I2C_SBIxCR2_SWRST(2));",
+"		out_w(ba[unit] + I2C_SBIxCR2, I2C_SBIxCR2_SBIM_I2C | I2C_SBIxCR2_SWRST(1));",
+"		while ( (in_w(ba[unit] + I2C_SBIxCR1) & I2C_SBIxCR1_SWRMON) == 0 );",
+"",
+"		/* I2C Initial setting */",
+"		out_w(ba[unit] + I2C_SBIxCR1, I2C_SBIxCR1_INIT | ll_devinit[unit].sck);",
+"		out_w(ba[unit] + I2C_SBIxCR2, I2C_SBIxCR2_STOP);",
+"		out_w(ba[unit] + I2C_SBIxBR0, 0);",
+"",
+"		EnableInt(INTNO_INTSBI(unit), ll_devinit[unit].intpri);",
+"		break;",
+"",
+"	case LLD_I2C_CLOSE:",
+"		/* Disable I2C interrupt */",
+"		DisableInt(INTNO_INTSBI(unit));",
+"		break;",
+"",
+"	case LLD_I2C_READ:",
+"		set_com_start( unit, p1, 0, p2, NULL, (UB*)pp);",
+"		err = i2c_trans(unit, &ll_devcb[unit]);",
+"		if(err >= E_OK) err = p2 - ll_devcb[unit].sdat_num;",
+"		break;",
+"",
+"	case LLD_I2C_WRITE:",
+"		set_com_start( unit, p1, p2, 0, (UB*)pp, NULL);",
+"		err = i2c_trans(unit, &ll_devcb[unit]);",
+"		if(err >= E_OK) err = p2 - ll_devcb[unit].sdat_num;",
+"		break;",
+"",
+"	case LLD_I2C_EXEC:",
+"		p_ex = (T_I2C_EXEC*)pp;",
+"		set_com_start( unit, p_ex->sadr, p_ex->snd_size, p_ex->rcv_size, p_ex->snd_data, p_ex->rcv_data);",
+"		err = i2c_trans(unit, &ll_devcb[unit]);",
+"		if(err >= E_OK) err = p_ex->snd_size + p_ex->rcv_size;",
+"		break;",
+"	}",
+"	",
+"	return (W)err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_i2c_llinit( T_I2C_DCB *p_dcb)",
+"{",
+"	const T_DINT	dint = {",
+"		.intatr	= TA_HLNG,",
+"		.inthdr	= i2c_inthdr,",
+"	};",
+"	ER	err;",
+"",
+"	/* Interrupt handler definition */",
+"	err = tk_def_int(INTNO_INTSBI(p_dcb->unit), &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_IIC_ENABLE */",
+"#endif		/* CPU_TMPM367FDFG */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	i2c_sysdep.h",
+" *	I2C device driver",
+" *	System-dependent definition for TX03_M367",
+" */",
+"",
+"#ifndef	__DEV_I2C_M367_H__",
+"#define	__DEV_I2C_M367_H__",
+"",
+"#define	DEV_I2C_UNITNM		(3)	/* Number of devive units */",
+"",
+"/* I2C device driver operating state */",
+"#define	I2C_STS_START		0x0000",
+"#define	I2C_STS_RESTART		0x0001",
+"#define	I2C_STS_STOP		0x0003",
+"#define	I2C_STS_SEND		0x0004",
+"#define	I2C_STS_RECV		0x0005",
+"#define	I2C_STS_TOP		0x8000",
+"",
+"/*----------------------------------------------------------------------",
+" * I2C registers",
+" */",
+"#define	I2C0_BASE		(0x400E0000UL)",
+"#define	I2C1_BASE		(0x400E0100UL)",
+"#define	I2C2_BASE		(0x400E0200UL)",
+"",
+"#define	I2C_SBIxCR0		0x0000		/* RW Control register 0 */",
+"#define	I2C_SBIxCR1		0x0004		/* RW Control register 1 */",
+"#define	I2C_SBIxDBR		0x0008		/* RW Data buffer register */",
+"#define	I2C_SBIxI2CAR		0x000C		/* RW I2C bus address register */",
+"#define	I2C_SBIxCR2		0x0010		/* W  Control register 2 */",
+"#define	I2C_SBIxSR		0x0010		/* R  Status register */",
+"#define	I2C_SBIxBR0		0x0014		/* RW Baud rate register 0 */",
+"",
+"/* Control register 0 - Bit definition */",
+"#define	I2C_SBIxCR0_SBIEN	(1 << 7)	/* RW Serial bus interface enable */",
+"",
+"/* Control register 1 - Bit definition */",
+"#define	I2C_SBIxCR1_BC(n)	((n) << 5)	/* RW Selection of transfer bit number */",
+"#define	I2C_SBIxCR1_ACK		(1 << 4)	/* RW ACK */",
+"#define	I2C_SBIxCR1_SCK(n)	((n) << 0)	/* W  Output clock frequency selection */",
+"#define	I2C_SBIxCR1_SWRMON	(1 << 0)	/* R  Software reset status moitor */",
+"",
+"/* Control register 2 - Bit definition */",
+"#define	I2C_SBIxCR2_MST		(1 << 7)	/* W Master / Slave mode Selection */",
+"#define	I2C_SBIxCR2_TRX		(1 << 6)	/* W Send / Receive selection */",
+"#define	I2C_SBIxCR2_BB		(1 << 5)	/* W Generation of start / stop condition */",
+"#define	I2C_SBIxCR2_PIN		(1 << 4)	/* W INTSBIx Release interrupt request */",
+"#define	I2C_SBIxCR2_SBIM(n)	((n) << 2)	/* W Select operating mode of serial bus interface */",
+"#define	I2C_SBIxCR2_SBIM_SIO	I2C_SBIxCR2_SBIM(1)",
+"#define	I2C_SBIxCR2_SBIM_I2C	I2C_SBIxCR2_SBIM(2)",
+"#define	I2C_SBIxCR2_SWRST(n)	((n) << 0)	/* W Occurrence of software reset */",
+"",
+"/* Status register 0 Bit definition */",
+"#define	I2C_SBIxSR_MST		(1 << 7)	/* R Master / slave selection */",
+"#define	I2C_SBIxSR_TRX		(1 << 6)	/* R Transmitter / receiver selection status */",
+"#define	I2C_SBIxSR_BB		(1 << 5)	/* R I2C Bus state */",
+"#define	I2C_SBIxSR_PIN		(1 << 4)	/* R INTSBIx Interrupt request status */",
+"#define	I2C_SBIxSR_AL		(1 << 3)	/* R Arbitration lost detection */",
+"#define	I2C_SBIxSR_AAS		(1 << 2)	/* R Slave address match detection */",
+"#define	I2C_SBIxSR_ADO		(1 << 1)	/* R General call detection */",
+"#define	I2C_SBIxSR_LRB		(1 << 0)	/* R Last received bit */",
+"",
+"/* Baud rate register 0 Bit definition */",
+"#define	I2C_SBIxBR0_I2SBI	(1 << 6)	/* RW IDLE mode */",
+"/* ",
+" * I2C interrupt number",
+"  */",
+"#define	INTNO_INTSBI(n)		(26 + (n))	/* n=0～2 : I2C/SIO */",
+"",
+"/*",
+" * I2C/SIO setting value",
+" */",
+"#define	I2C_SBIxCR1_INIT	(	\\",
+"		I2C_SBIxCR1_BC(0) |	\\",
+"		I2C_SBIxCR1_ACK 	)",
+"",
+"#define	I2C_SBIxCR2_START	(	\\",
+"		I2C_SBIxCR2_SBIM_I2C |	\\",
+"		I2C_SBIxCR2_MST |	\\",
+"		I2C_SBIxCR2_TRX |	\\",
+"		I2C_SBIxCR2_BB |	\\",
+"		I2C_SBIxCR2_PIN		)",
+"",
+"#define	I2C_SBIxCR2_RESTART	(	\\",
+"		I2C_SBIxCR2_SBIM_I2C |	\\",
+"		I2C_SBIxCR2_PIN		)",
+"",
+"#define	I2C_SBIxCR2_STOP	(	\\",
+"		I2C_SBIxCR2_SBIM_I2C |	\\",
+"		I2C_SBIxCR2_MST |	\\",
+"		I2C_SBIxCR2_TRX |	\\",
+"		I2C_SBIxCR2_PIN		)",
+"",
+"#endif		/* __DEV_I2C_M367_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	dev_adc.c",
+" *	A/D converter device driver",
+"*/",
+"",
+"#ifndef	__DEVINC_ADC_H__",
+"#define	__DEVINC_ADC_H__",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Device driver initialization",
+" */",
+"IMPORT ER dev_init_adc( UW unit );	/* Device driver initialization */",
+"",
+"#endif	/* __DEVINC_ADC_H__# */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/08.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dev_def.c",
+" *	Device driver common definition",
+"*/",
+"",
+"#ifndef	__DEVINC_DEVDEF_H__",
+"#define	__DEVINC_DEVDEF_H__",
+"",
+"#include <config_device.h>",
+"",
+"#if USE_SDEV_DRV		/* Use Sample device driver */",
+"",
+"#if DEVCNF_USE_SER && DEV_SER_UNITNM	/* Use Serial communication device */",
+"#define DEV_SER_ENABLE		1",
+"#else",
+"#define DEV_SER_ENABLE		0",
+"#endif	/* DEVCNF_USE_SER */",
+"",
+"#if DEVCNF_USE_ADC && DEV_ADC_UNITNM	/* Use A/D conversion device */",
+"#define DEV_ADC_ENABLE		1",
+"#else",
+"#define DEV_ADC_ENABLE		0",
+"#endif	/* DEVCNF_USE_ADC */",
+"",
+"#if DEVCNF_USE_IIC && DEV_I2C_UNITNM	/* Use I2C communication device */",
+"#define DEV_IIC_ENABLE		1",
+"#else",
+"#define DEV_IIC_ENABLE		0",
+"#endif	/* DEVCNF_USE_IIC */",
+"",
+"#else				/* Do not use sample device driver */",
+"",
+"#define DEV_SER_ENABLE		0		// Serial communication device ",
+"#define DEV_ADC_ENABLE		0		// A/D conversion device",
+"#define DEV_IIC_ENABLE		0		// I2C communication device",
+"",
+"#endif	/* USE_SDEV_DRV */",
+"#endif	/* __DEVINC_DEVICE_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	dev_i2c.h",
+" *	I2C device driver",
+" */",
+"",
+"#ifndef	__DEVINC_I2C_H__",
+"#define	__DEVINC_I2C_H__",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Device driver initialization",
+" */",
+"IMPORT ER dev_init_i2c( UW unit );	/* Device driver initialization */",
+"",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Attribute data number",
+" */",
+"typedef enum {",
+"	TDN_I2C_EXEC	= -100",
+"} T_DN_I2C_ATR;",
+"",
+"/* Send / receive data type (Used by I2C_ATR_EXEC) */",
+"typedef struct {",
+"	UW		sadr;",
+"	SZ		snd_size;",
+"	UB		*snd_data;",
+"	SZ		rcv_size;",
+"	UB		*rcv_data;",
+"} T_I2C_EXEC;",
+"",
+"/* I2C register access support function */",
+"EXPORT ER i2c_read_reg(ID dd, UW sadr, UW radr, UB *data);",
+"EXPORT ER i2c_write_reg(ID dd, UW sadr, UW radr, UB data);",
+"",
+"",
+"#endif	/* __DEVINC_I2C_H__ */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/05/17.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	device.c",
+" *	Device driver definition for User program",
+"*/",
+"",
+"#ifndef	__DEVINC_DEVICE_H__",
+"#define	__DEVINC_DEVICE_H__",
+"",
+"#include <config_device.h>",
+"",
+"#if USE_SDEV_DRV		/* Use Sample device driver */",
+"",
+"#if DEVCNF_USE_SER		/* Use Serial communication device */",
+"#include \"dev_ser.h\"",
+"#endif	/* DEVCNF_USE_SER */",
+"",
+"#if DEVCNF_USE_ADC		/* Use A/D conversion device */",
+"#include \"dev_adc.h\"",
+"#endif	/* DEVCNF_USE_ADC */",
+"",
+"#if DEVCNF_USE_IIC		/* Use I2C communication device */",
+"#include \"dev_i2c.h\"",
+"#endif	/* DEVCNF_USE_IIC */",
+"",
+"#endif	/* USE_SDEV_DRV */",
+"#endif	/* __DEVINC_DEVICE_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dev_ser.h",
+" *	Serial communication device driver",
+" */",
+"",
+"#ifndef	__DEVINC_SER_H__",
+"#define	__DEVINC_SER_H__",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Device driver initialization",
+" */",
+"IMPORT ER dev_init_ser( UW unit );",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Attribute data number",
+" */",
+"typedef enum {",
+"	TDN_SER_MODE	= -100,		/* RW: Communication mode */",
+"	TDN_SER_SPEED	= -101,		/* RW: Communication Speed */",
+"	TDN_SER_SNDTMO	= -102,		/* RW: Send timeout */",
+"	TDN_SER_RCVTMO	= -103,		/* RW: Receive timeout */",
+"	TDN_SER_COMERR	= -104,		/* R-: Communication Error */",
+"	TDN_SER_BREAK	= -105,		/* -W: Send Break */",
+"} T_DN_SER_ATR;",
+"",
+"/* Communication Error */",
+"#define	DEV_SER_ERR_ROVR	(1<<7)	/* Recive buffe over flow */",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Hardware dependent definition",
+" */",
+"",
+"#define DEVDEF_SER_MODE_PATH_(a)	#a",
+"#define DEVDEF_SER_MODE_PATH(a)		DEVDEF_SER_MODE_PATH_(a)",
+"#define DEVDEF_SER_MODE_SYSDEP()	DEVDEF_SER_MODE_PATH(../ser/sysdepend/TARGET_CPU_DIR/ser_mode_sysdep.h)",
+"#include DEVDEF_SER_MODE_SYSDEP()",
+"",
+"#endif	/* __DEVINC_SER_H__ */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"#include <sys/machine.h>",
+"#include <tk/tkernel.h>",
+"#include <tstdlib.h>",
+"",
+"#include \"ser.h\"",
+"#include \"../include/dev_def.h\"",
+"#if DEV_SER_ENABLE",
+"/*",
+" *	ser.c",
+" *	Serial communication driver",
+"*/",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Serial Device driver Control block",
+" */",
+"#if TK_SUPPORT_MEMLIB",
+"",
+"LOCAL T_SER_DCB	*dev_ser_cb[DEV_SER_UNITNM];",
+"#define		get_dcb_mem(unit,a)	(dev_ser_cb[unit]->a)",
+"",
+"#else",
+"",
+"LOCAL T_SER_DCB	dev_ser_cb[DEV_SER_UNITNM];",
+"#define		get_dcb_mem(unit,a)	(dev_ser_cb[unit].a)",
+"",
+"#endif",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Serial device driver low-level interface",
+" *",
+" *	Called from a low level interrupt handler.",
+" */",
+"EXPORT BOOL dev_ser_get_snddat(UW unit, UW *data)",
+"{",
+"	T_SER_BUFF	*p_buff;",
+"",
+"	p_buff = &get_dcb_mem(unit, snd_buff);",
+"	if(p_buff->top != p_buff->tail) {",
+"		*data = p_buff->data[p_buff->tail];",
+"		if(++p_buff->tail >= DEVCONF_SER_BUFFSIZE) p_buff->tail = 0;",
+"",
+"		if(p_buff->wait_tskid) {",
+"			tk_wup_tsk( p_buff->wait_tskid);",
+"			p_buff->wait_tskid = 0;",
+"		}",
+"		return TRUE;",
+"	} else {",
+"		return FALSE;",
+"	}",
+"}",
+"",
+"EXPORT void dev_ser_notify_rcv(UW unit, UW data)",
+"{",
+"	T_SER_BUFF	*p_buff;",
+"	INT		next;",
+"",
+"	p_buff = &get_dcb_mem( unit, rcv_buff);",
+"	next = p_buff->top + 1;",
+"	if(next >= DEVCONF_SER_BUFFSIZE) next = 0;",
+"	if(next != p_buff->tail) {",
+"		p_buff->data[p_buff->top] = data;",
+"		p_buff->top = next;",
+"	} else {	",
+"		dev_ser_notify_err( unit, DEV_SER_ERR_ROVR);	/* Buffer over flow */",
+"	}",
+"",
+"	if(p_buff->wait_tskid) {",
+"		tk_wup_tsk( p_buff->wait_tskid);",
+"		p_buff->wait_tskid = 0;",
+"	}",
+"",
+"}",
+"",
+"EXPORT void dev_ser_notify_err(UW unit, UW err)",
+"{",
+"	get_dcb_mem(unit, com_error) |= err;	",
+"}",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Attribute data control",
+" */",
+"",
+"LOCAL ER set_atr_size(T_DEVREQ *req)",
+"{",
+"	switch(req->start) {",
+"	case TDN_EVENT:			/* MBF ID for event notification */",
+"		req->asize = sizeof(ID);",
+"		break;",
+"	case TDN_SER_MODE:		/* Communication mode */",
+"	case TDN_SER_SPEED:		/* Communication speed */",
+"	case TDN_SER_COMERR:		/* Communication Error */",
+"		req->asize = sizeof(UW);",
+"		break;",
+"	case TDN_SER_SNDTMO:		/* Send timeout */",
+"	case TDN_SER_RCVTMO:		/* Receive timeout */",
+"		req->asize = sizeof(TMO);",
+"		break;",
+"	default:",
+"		return E_PAR;",
+"	}",
+"	return E_OK;",
+"}",
+"",
+"LOCAL ER read_atr(T_SER_DCB *p_dcb, T_DEVREQ *req)",
+"{",
+"	UINT	imask;",
+"	ER	err;",
+"",
+"	err = set_atr_size(req);",
+"	if(err != E_OK) return err;",
+"",
+"	if(req->size) {",
+"		switch(req->start) {",
+"		case TDN_EVENT:			/* MBF ID for event notification */",
+"			*(ID*)req->buf = p_dcb->evtmbfid;",
+"			break;",
+"		case TDN_SER_MODE:		/* Communication mode */",
+"			*(UW*)req->buf = p_dcb->com_mode;",
+"			break;",
+"		case TDN_SER_SPEED:		/* Communication speed */",
+"			*(UW*)req->buf = p_dcb->com_speed;",
+"			break;",
+"		case TDN_SER_SNDTMO:		/* Send timeout */",
+"			*(TMO*)req->buf = p_dcb->snd_tmo;",
+"			break;",
+"		case TDN_SER_RCVTMO:		/* Receive timeout */",
+"			*(TMO*)req->buf = p_dcb->rcv_tmo;",
+"			break;",
+"		case TDN_SER_COMERR:		/* Communication Error */",
+"			DI(imask);",
+"			*(UW*)req->buf = p_dcb->com_error;",
+"			p_dcb->com_error = 0;",
+"			EI(imask);",
+"			break;",
+"		case TDN_SER_BREAK:		/* Send Break */",
+"			/* no break */",
+"		default:",
+"			err = E_PAR;",
+"		}",
+"	}",
+"	return err;",
+"}",
+"",
+"LOCAL ER write_atr(T_SER_DCB *p_dcb, T_DEVREQ *req)",
+"{",
+"	ER	err;",
+"",
+"	err = set_atr_size(req);",
+"	if(err != E_OK) return err;",
+"",
+"	if(req->size) {",
+"		switch(req->start) {",
+"		case TDN_EVENT:			/* Message buffer ID for event notification */",
+"			p_dcb->evtmbfid = *(ID*)req->buf;",
+"			break;",
+"		case TDN_SER_MODE:		/* Communication mode */",
+"			p_dcb->com_mode = *(UW*)req->buf;",
+"			err = dev_ser_llctl( p_dcb->unit, LLD_SER_MODE, p_dcb->com_mode);",
+"			break;",
+"		case TDN_SER_SPEED:		/* Communication speed */",
+"			p_dcb->com_speed = *(UW*)req->buf;",
+"			err = dev_ser_llctl( p_dcb->unit, LLD_SER_SPEED, p_dcb->com_speed);",
+"			break;",
+"		case TDN_SER_SNDTMO:		/* Send timeout */",
+"			p_dcb->snd_tmo = *(TMO*)req->buf;",
+"			break;",
+"		case TDN_SER_RCVTMO:		/* Receive timeout */",
+"			p_dcb->rcv_tmo = *(TMO*)req->buf;",
+"			break;",
+"		case TDN_SER_BREAK:		/* Send Break */",
+"			err = dev_ser_llctl( p_dcb->unit, LLD_SER_BREAK, *(UW*)req->buf);",
+"			break;",
+"		default:",
+"			err = E_PAR;",
+"		}",
+"	}",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------*/",
+"/*　Device-specific data control",
+" */",
+"",
+"LOCAL ER read_data( T_SER_DCB *p_dcb, T_DEVREQ *req)",
+"{",
+"	T_SER_BUFF	*p_buff;",
+"	UW		tail;",
+"	UB		*pd;",
+"	SZ		rsize;",
+"	ER		err;",
+"",
+"	p_buff	= &p_dcb->rcv_buff;",
+"	tail	= p_buff->tail;",
+"	pd	= req->buf;",
+"	rsize	= req->size;",
+"	err	= E_OK;",
+"",
+"	if(rsize != 0 ) {		/* size != 0 : Receive data */",
+"		while(rsize) {",
+"			DisableInt(p_dcb->intno_rcv);	/* Disable Receive Int. */",
+"			if(p_buff->top != tail) {",
+"				*pd++ = p_buff->data[tail++];",
+"				if(tail >= DEVCONF_SER_BUFFSIZE ) tail = 0;",
+"				p_buff->tail = tail;",
+"				EnableInt(p_dcb->intno_rcv, p_dcb->int_pri);	/* Enable Receive Int. */",
+"				rsize--;",
+"			} else {",
+"				p_buff->wait_tskid = tk_get_tid();",
+"				EnableInt(p_dcb->intno_rcv, p_dcb->int_pri);	/* Enable Receive Int. */",
+"				err = tk_slp_tsk(p_dcb->rcv_tmo);",
+"				if( err != E_OK) break;",
+"			}",
+"		}",
+"		req->asize = req->size - rsize;",
+"	} else {		/* size = 0: Get the number of readable data */",
+"		/* Disable Receive Int. */",
+"		rsize = p_buff->top - p_buff->tail;",
+"		/* Enable Receive Int. */",
+"		if(rsize < 0) {",
+"			rsize += DEVCONF_SER_BUFFSIZE;",
+"		}",
+"		req->asize = rsize;",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"LOCAL ER write_data( T_SER_DCB *p_dcb, T_DEVREQ *req)",
+"{",
+"	T_SER_BUFF	*p_buff;",
+"	UW		next;",
+"	UB		*pd;",
+"	INT		ssize;",
+"	ER		err;",
+"	BOOL		s;",
+"",
+"	p_buff	= &p_dcb->snd_buff;",
+"	pd	= req->buf;",
+"	ssize	= req->size;",
+"	err	= E_OK;",
+"",
+"	if(ssize != 0) {		/* size != 0 : Send data */",
+"		while(ssize) {",
+"			next = p_buff->top + 1;",
+"			if(next >= DEVCONF_SER_BUFFSIZE) next = 0;",
+"			",
+"			DisableInt(p_dcb->intno_snd);	/* Disable Send Int. */",
+"			if(next != p_buff->tail) {",
+"				s = FALSE;",
+"				if(p_buff->top == p_buff->tail) {",
+"					s = (E_OK == dev_ser_llctl( p_dcb->unit, LLD_SER_SEND, *pd));",
+"				}",
+"				if(s) {		/* Successful transmission. */",
+"					pd++;",
+"				} else {	/* FIFO is full. */",
+"					p_buff->data[p_buff->top] = *pd++;",
+"					p_buff->top = next;",
+"				}",
+"				EnableInt(p_dcb->intno_snd, p_dcb->int_pri);	/* Enable Send Int. */",
+"				ssize--;",
+"			} else {",
+"				p_buff->wait_tskid = tk_get_tid();",
+"				EnableInt(p_dcb->intno_snd, p_dcb->int_pri);	/* Enable Send Int. */",
+"				err = tk_slp_tsk(p_dcb->snd_tmo);",
+"				if(err != E_OK) break;",
+"			}",
+"		}",
+"		req->asize = req->size - ssize;",
+"	} else {		/* size = 0: Get the number of writable data */",
+"		DisableInt(p_dcb->intno_snd);			/* Disable Send Int. */",
+"		ssize = p_buff->top - p_buff->tail;",
+"		EnableInt(p_dcb->intno_snd, p_dcb->int_pri);	/* Enable send Int. */",
+"		if(ssize < 0) {",
+"			ssize += DEVCONF_SER_BUFFSIZE;",
+"		}",
+"		req->asize = DEVCONF_SER_BUFFSIZE - ssize;",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * mSDI I/F function",
+" */",
+"/*----------------------------------------------------------------------",
+" * Open device",
+" */",
+"ER dev_ser_openfn( ID devid, UINT omode, T_MSDI *p_msdi)",
+"{",
+"	T_SER_DCB	*p_dcb;",
+"	ER		err;",
+"",
+"	p_dcb = (T_SER_DCB*)p_msdi->dmsdi.exinf;",
+"",
+"	/* Device Open operation */",
+"	p_dcb->omode = omode;",
+"	buff_init(&p_dcb->snd_buff);",
+"	buff_init(&p_dcb->rcv_buff);",
+"",
+"	err = dev_ser_llctl(p_dcb->unit, LLD_SER_START, 0);",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Close Device",
+" */",
+"ER dev_ser_closefn( ID devid, UINT option, T_MSDI *p_msdi)",
+"{",
+"	T_SER_DCB	*p_dcb;",
+"	ER		err;",
+"",
+"	p_dcb = (T_SER_DCB*)(p_msdi->dmsdi.exinf);",
+"",
+"	/* Device Close operation */",
+"	err = dev_ser_llctl(p_dcb->unit, LLD_SER_STOP, 0);",
+"	",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Read Device",
+" */",
+"ER dev_ser_readfn( T_DEVREQ *req, T_MSDI *p_msdi)",
+"{",
+"	T_SER_DCB	*p_dcb;",
+"	ER		err;",
+"",
+"	p_dcb = (T_SER_DCB*)(p_msdi->dmsdi.exinf);",
+"",
+"	if(req->start >= 0) {	// Device specific data",
+"		if( p_dcb->omode & TD_READ ) {",
+"			err = read_data( p_dcb, req);",
+"		} else {",
+"			err = E_OACV;",
+"		}",
+"	} else {		// Device attribute data",
+"		err = read_atr( p_dcb, req);",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Write Device",
+" */",
+"ER dev_ser_writefn( T_DEVREQ *req, T_MSDI *p_msdi)",
+"{",
+"	T_SER_DCB	*p_dcb;",
+"	ER		err;",
+"",
+"	p_dcb = (T_SER_DCB*)(p_msdi->dmsdi.exinf);",
+"",
+"	if(req->start >= 0) {	// Device specific data",
+"		if( p_dcb->omode & TD_WRITE) {",
+"			err = write_data( p_dcb, req);",
+"		} else {",
+"			err = E_OACV;",
+"		}",
+"	} else {		// Device attribute data",
+"		err = write_atr( p_dcb, req);",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Event Device",
+" */",
+"ER dev_ser_eventfn( INT evttyp, void *evtinf, T_MSDI *p_msdi)",
+"{",
+"	return E_NOSPT;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Serial communication Device initialization and registration",
+" */",
+"EXPORT ER dev_init_ser( UW unit )",
+"{",
+"	T_SER_DCB	*p_dcb;",
+"	T_IDEV		idev;",
+"	T_MSDI		*p_msdi;",
+"	T_DMSDI		dmsdi;",
+"	ER		err;",
+"	INT		i;",
+"",
+"	if( unit >= DEV_SER_UNITNM) return E_PAR;",
+"",
+"#if TK_SUPPORT_MEMLIB",
+"	p_dcb = (T_SER_DCB*)Kmalloc(sizeof(T_SER_DCB));",
+"	if( p_dcb == NULL) return E_NOMEM;",
+"	dev_ser_cb[unit]	= p_dcb;",
+"#else",
+"	p_dcb = &dev_ser_cb[unit];",
+"#endif",
+"",
+"	/* Device registration information */",
+"	dmsdi.exinf	= p_dcb;",
+"	dmsdi.drvatr	= 0;			/* Driver attributes */",
+"	dmsdi.devatr	= TDK_UNDEF;		/* Device attributes */",
+"	dmsdi.nsub	= 0;			/* Number of subunits */",
+"	dmsdi.blksz	= 1;			/* Unique data block size (-1 = unknown) */",
+"	dmsdi.openfn	= dev_ser_openfn;",
+"	dmsdi.closefn	= dev_ser_closefn;",
+"	dmsdi.readfn	= dev_ser_readfn;",
+"	dmsdi.writefn	= dev_ser_writefn;",
+"	dmsdi.eventfn	= dev_ser_eventfn;",
+"	",
+"	knl_strcpy( (char*)dmsdi.devnm, DEVCNF_SER_DEVNAME);",
+"	i = knl_strlen(DEVCNF_SER_DEVNAME);",
+"	dmsdi.devnm[i] = (UB)('a' + unit);",
+"	dmsdi.devnm[i+1] = 0;",
+"",
+"	err = msdi_def_dev( &dmsdi, &idev, &p_msdi);",
+"	if(err != E_OK) goto err_2;",
+"",
+"	p_dcb->unit	= unit;",
+"	p_dcb->evtmbfid	= idev.evtmbfid;",
+"",
+"	/* Low-level device initialization */",
+"	err = dev_ser_llinit( p_dcb);",
+"	if(err != E_OK) goto err_1;",
+"",
+"	/* Set default value for attribute data */",
+"	p_dcb->com_speed = DEVCNF_SER_SPEED;",
+"	dev_ser_llctl( unit, LLD_SER_SPEED, DEVCNF_SER_SPEED);",
+"	p_dcb->com_mode = DEVCNF_SER_MODE;",
+"	dev_ser_llctl( unit, LLD_SER_MODE, DEVCNF_SER_MODE);",
+"	p_dcb->snd_tmo = DEVCNF_SER_SND_TMO;",
+"	p_dcb->rcv_tmo = DEVCNF_SER_RCV_TMO;",
+"",
+"	return E_OK;",
+"",
+"err_1:",
+"	msdi_del_dev(p_msdi);",
+"err_2:",
+"	Kfree(p_dcb);",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_SER_ENABLE */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	ser_cnf.h ",
+" *	Serial communication device driver",
+" *		Device configuration file",
+" */",
+"#ifndef	__DEV_SER_CNF_H__",
+"#define	__DEV_SER_CNF_H__",
+"",
+"#define	DEVCNF_SER_DEVNAME	\"ser\"		// Device name (\"ser\")",
+"",
+"#define	DEVCONF_SER_BUFFSIZE	50		//  Communication data buffer size",
+"",
+"/* Default value for attribute data */",
+"#define	DEVCNF_SER_SPEED	115200		// Communication speed (baud rate)",
+"#define DEVCNF_SER_MODE		(DEV_SER_MODE_CTSEN | DEV_SER_MODE_RTSEN | \\",
+"				DEV_SER_MODE_8BIT | DEV_SER_MODE_1STOP | DEV_SER_MODE_PNON)",
+"						// Mode: Hard flow control enable,",
+"						// 	data 8bit, stop 1bit, no parity",
+"#define	DEVCNF_SER_SND_TMO	TMO_FEVR	// Send timeout ",
+"#define DEVCNF_SER_RCV_TMO	TMO_FEVR	// Receive timeout ",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Hardware dependent definition",
+" */",
+"#define DEVDEF_SER_CNF_PATH_(a)	#a",
+"#define DEVDEF_SER_CNF_PATH(a)	DEVDEF_SER_CNF_PATH_(a)",
+"#define DEVDEF_SER_CNF_SYSDEP()	DEVDEF_SER_CNF_PATH(sysdepend/TARGET_CPU_DIR/ser_cnf_sysdep.h)",
+"#include DEVDEF_SER_CNF_SYSDEP()",
+"",
+"#endif		/* __DEV_SER_CNF_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dev_ser.h",
+" *	Serial communication device driver",
+" *	Driver local definition",
+" */",
+"",
+"#ifndef	__DEV_SER_H__",
+"#define	__DEV_SER_H__",
+"",
+"#include \"../include/dev_ser.h\"",
+"#include \"../common/drvif/msdrvif.h\"",
+"#include \"ser_cnf.h\"",
+"",
+"/*----------------------------------------------------------------------*/",
+"/* Hardware dependent definition",
+" */",
+"#define DEVDEF_SER_PATH_(a)	#a",
+"#define DEVDEF_SER_PATH(a)	DEVDEF_SER_PATH_(a)",
+"#define DEVDEF_SER_SYSDEP()	DEVDEF_SER_PATH(sysdepend/TARGET_CPU_DIR/ser_sysdep.h)",
+"#include DEVDEF_SER_SYSDEP()",
+"",
+"/*----------------------------------------------------------------------",
+" * Communication data buffer",
+" */",
+"typedef struct {",
+"	UW	top;",
+"	UW	tail;",
+"	ID	wait_tskid;",
+"	UB	data[DEVCONF_SER_BUFFSIZE];",
+"} T_SER_BUFF;",
+"",
+"Inline	void buff_init(T_SER_BUFF *buff)",
+"{",
+"	buff->top = buff->tail = buff->wait_tskid = 0;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device driver Control block",
+" */",
+"typedef struct {",
+"	UW	unit;		/* Unit No. */",
+"	UINT	omode;		/* Open mode */",
+"",
+"	/* Attribute data */",
+"	ID	evtmbfid;	/* MBF ID for event notification */",
+"	UW	com_mode;	/* Communication mode */",
+"	UW	com_speed;	/* Communication Speed */",
+"	UW	com_error;	/* Communication Error */",
+"	TMO	snd_tmo;	/* Send timeout */",
+"	TMO	rcv_tmo;	/* Receive timeout */",
+"",
+"	/* Intrrupt */",
+"	UINT	intno_rcv;	/* Receive interrupt number */",
+"	UINT	intno_snd;	/* Send interrupt number */",
+"	UINT	int_pri;	/* Interrupt priority */",
+"",
+"	/* Communication data buffer */",
+"	T_SER_BUFF	snd_buff;",
+"	T_SER_BUFF	rcv_buff;",
+"",
+"} T_SER_DCB;",
+"",
+"/*----------------------------------------------------------------------",
+" * Serial device driver low-level interface",
+" */",
+"",
+"/* The following functions are defined in the system common part. */",
+"IMPORT BOOL dev_ser_get_snddat(UW unit, UW *data);	/* Get send data */",
+"IMPORT void dev_ser_notify_rcv(UW unit, UW data);	/* Notification of receipt */",
+"IMPORT void dev_ser_notify_err(UW unit, UW err);	/* Communication error notification */",
+"",
+"/* The following functions are defined in the system-dependent part. */",
+"",
+"/* Low-level device control */",
+"IMPORT ER dev_ser_llctl(UW, INT, UW);		/* Low-Level device control */",
+"IMPORT ER dev_ser_llinit(T_SER_DCB*);		/* Low-level device initialization */",
+"",
+"/* Low-level device control command */",
+"typedef enum {",
+"	LLD_SER_MODE,		/* Set Communication mode */",
+"	LLD_SER_SPEED,		/* Set Communication Speed */",
+"	LLD_SER_START,		/* Start communication */",
+"	LLD_SER_STOP,		/* Stop Start communication */",
+"	LLD_SER_SEND,		/* Send data */",
+"	LLD_SER_BREAK,		/* Send Break */",
+"	LLD_SER_INTCTL,		/* Interrupt control */",
+"} T_LLD_SER_CMD;",
+"",
+"#endif		/* __DEV_SER_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2022-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/05.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	ser_cnf_sysdep.h ",
+" *	Serial Device configuration file",
+" *		for RP2040",
+" */",
+"#ifndef	__DEV_SER_CNF_RP2040_H__",
+"#define	__DEV_SER_CNF_RP2040_H__",
+"",
+"/* Interrupt priority */",
+"#define	DEVCNF_UART0_INTPRI	2",
+"#define	DEVCNF_UART1_INTPRI	2",
+"",
+"/* Debug option",
+" *	Specify the device used by T-Monitor.",
+" *	  -1 : T-Monitor does not use serial devices",
+" */",
+"#if USE_TMONITOR",
+"#define	DEVCNF_SER_DBGUN	0		// Used by T-Monitor",
+"#else ",
+"#define	DEVCNF_SER_DBGUN	-1		// T-Monitor not executed",
+"#endif",
+"",
+"#endif	/* __DEV_SER_CNF_RP2040_H__ */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	ser_mode_sysdep.h",
+" *	Serial communication device driver",
+" *	Communication mode definition for RP2040",
+" */",
+"",
+"#ifndef	__DEV_SER_MODE_RP2040_H__",
+"#define	__DEV_SER_MODE_RP2040_H__",
+"",
+"#define	DEV_SER_MODE_7BIT	(0x00000040)	/* Word length 7bit */",
+"#define	DEV_SER_MODE_8BIT	(0x00000060)	/* Word length 8bit */",
+"",
+"#define	DEV_SER_MODE_1STOP	(0x00000000)	/* Stop-bit 1bit */",
+"#define	DEV_SER_MODE_2STOP	(0x00000008)	/* Stop-bit 2bit */",
+"",
+"#define DEV_SER_MODE_PODD	(0x00000002)	/* parity Odd */",
+"#define DEV_SER_MODE_PEVEN	(0x00000006)	/* parity Even */",
+"#define DEV_SER_MODE_PNON	(0x00000000)	/* parity None */",
+"",
+"#define	DEV_SER_MODE_CTSEN	(0x00000000)	/* CTS Hard flow control enable */",
+"#define	DEV_SER_MODE_RTSEN	(0x00000000)	/* RTS Hard flow control enable */",
+"",
+"/* Communication Error */",
+"#define	DEV_SER_ERR_OE		(1<<3)	/* Overrun Error */",
+"#define	DEV_SER_ERR_BE		(1<<2)	/* Break error */",
+"#define	DEV_SER_ERR_PE		(1<<1)	/* Parity Error */",
+"#define	DEV_SER_ERR_FE		(1<<0)	/* Framing Error */",
+"",
+"#endif	/* __DEV_SER_MODE_RP2040_H__ */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RP2040",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../ser.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_SER_ENABLE",
+"/*",
+" *	ser_rp2040.c",
+" *	Serial communication device driver",
+" *	System dependent processing for RP2040",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+" */",
+"const LOCAL UW ba[DEV_SER_UNITNM] = { UART0_BASE, UART1_BASE };",
+"",
+"#define	UART_DR(x)	(ba[x] + UARTx_DR)	// Data Register",
+"#define	UART_RSR(x)	(ba[x] + UARTx_RSR)	// Receive Status Register/Error Clear Register",
+"#define	UART_FR(x)	(ba[x] + UARTx_FR)	// Flag Register",
+"",
+"#define	UART_IBRD(x)	(ba[x] + UARTx_IBRD)	// Integer Baud Rate Register",
+"#define	UART_FBRD(x)	(ba[x] + UARTx_FBRD)	// Fractional Baud Rate Register",
+"#define	UART_LCR_H(x)	(ba[x] + UARTx_LCR_H)	// Line Control Register",
+"#define	UART_CR(x)	(ba[x] + UARTx_CR)	// Control Register",
+"",
+"#define	UART_IFLS(x)	(ba[x] + UARTx_IFLS)	// Interrupt FIFO Level Select Register",
+"#define	UART_IMSC(x)	(ba[x] + UARTx_IMSC)	// Interrupt Mask Set/Clear Register",
+"#define	UART_RIS(x)	(ba[x] + UARTx_RIS)	// Raw Interrupt Status Register",
+"#define	UART_MIS(x)	(ba[x] + UARTx_MIS)	// Masked Interrupt Status Register",
+"#define	UART_ICR(x)	(ba[x] + UARTx_ICR)	// Interrupt Clear Register",
+"",
+"/*----------------------------------------------------------------------",
+" * Device data",
+"*/",
+"const LOCAL struct {",
+"	UINT	intno;		// Interrupt number",
+"	PRI	intpri;		// Interrupt priority",
+"} ll_devdat[DEV_SER_UNITNM] = {",
+"	{	/* UART0 */",
+"		.intno		= INTNO_UART0,",
+"		.intpri		= DEVCNF_UART0_INTPRI,",
+"	},",
+"	{	/* UART1 */",
+"		.intno		= INTNO_UART1,",
+"		.intpri		= DEVCNF_UART1_INTPRI,",
+"	},",
+"};",
+"",
+"/*----------------------------------------------------------------------",
+" * Device low-level control data",
+"*/",
+"typedef struct {",
+"	UW	mode;		// Serial mode",
+"	UW	speed;		// Spped (bit rate)",
+"} T_DEV_SER_LLDEVCB;",
+"",
+"LOCAL T_DEV_SER_LLDEVCB		ll_devcb[DEV_SER_UNITNM];",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"void usart_inthdr( UINT intno)",
+"{",
+"	W	unit;",
+"	UW	mis, data;",
+"",
+"	if(intno == INTNO_UART0) {",
+"		unit = DEV_SER_UNIT0;",
+"	} else if(intno == INTNO_UART1) {",
+"		unit = DEV_SER_UNIT1;",
+"	} else {",
+"		ClearInt(intno);",
+"		return;",
+"	}",
+"",
+"	mis = in_w(UART_MIS(unit));		// Get interrupt factor",
+"",
+"	out_w(UART_ICR(unit), -1);		// Clear interrupt",
+"	ClearInt(intno);",
+"",
+"	/* Reception process */",
+"	if( mis & UART_MIS_RX) {",
+"		data = in_w(UART_DR(unit));",
+"		if(data & UART_DR_ERR) {",
+"			dev_ser_notify_err(unit, (data>>8)&0x0F);	/* Notify the main process of this error. */",
+"		} else {",
+"			dev_ser_notify_rcv(unit, data & UART_DR_DATA);	/* Notify the main process of data reception. */",
+"		}",
+"	}",
+"",
+"	/* Transmission process */",
+"	if( mis & UART_MIS_TX) {",
+"		if( dev_ser_get_snddat(unit, &data)) {",
+"			out_w(UART_DR(unit), data);",
+"		} else {",
+"			clr_w(UART_IMSC(unit), UART_IMSC_TXIM);	// Set TXI Interrupt mask.",
+"		}",
+"	}",
+"",
+"	/* Break error handling */",
+"	if( mis & UART_MIS_BE) {",
+"		dev_ser_notify_err(unit, DEV_SER_ERR_BE);	/* Notify the main process of this error. */",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Set mode & Start communication",
+" */",
+"LOCAL void start_com(UW unit, UW mode, UW speed)",
+"{",
+"	UW	ibrd, fbrd, rdiv;",
+"",
+"	/* Baud rate setting */",
+"	rdiv = (8 * CLK_PERI_FREQ / speed);",
+"	ibrd = rdiv>>7; fbrd = 0;",
+"	if(ibrd == 0) {",
+"		ibrd = 1; ",
+"	} else if(ibrd >= 65535) {",
+"		ibrd = 65535;",
+"	} else {",
+"		fbrd = ((rdiv & 0x7f) + 1) / 2;",
+"	}",
+"	out_w(UART_IBRD(unit), ibrd);",
+"	out_w(UART_FBRD(unit), fbrd);",
+"",
+"	/* Communication data format setting */",
+"	out_w(UART_LCR_H(unit), mode);		",
+"",
+"	/* UART enabled */",
+"	out_w(UART_CR(unit), UART_CR_RXE | UART_CR_TXE | UART_CR_UARTEN);",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Stop communication",
+" */",
+"LOCAL void stop_com(UW unit)",
+"{",
+"	if(unit != DEVCNF_SER_DBGUN) {",
+"		out_w(UART_CR(unit), UART_CR_RXE | UART_CR_TXE);	// UART disable.",
+"	} else {	/* Used by T-Monitor */",
+"		out_w(UART_CR(unit), UART_CR_DEBUG);",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT ER dev_ser_llctl( UW unit, INT cmd, UW parm)",
+"{",
+"	ER	err	= E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_SER_MODE:	/* Set Communication mode */",
+"		ll_devcb[unit].mode = parm;",
+"		break;",
+"	",
+"	case LLD_SER_SPEED:	/* Set Communication Speed */",
+"		ll_devcb[unit].speed = parm;",
+"		break;",
+"	",
+"	case LLD_SER_START:	/* Start communication */",
+"		out_w(UART_CR(unit), UART_CR_RXE | UART_CR_TXE);		// UART disable.",
+"		out_w(UART_IMSC(unit), UART_IMSC_RXIM | UART_IMSC_BEIM);	// Clear RXI Interrupt mask.",
+"		",
+"		out_w(UART_ICR(unit), 0);					// Clear interrupt",
+"		ClearInt(ll_devdat[unit].intno);",
+"		EnableInt(ll_devdat[unit].intno, ll_devdat[unit].intpri);	// Enable Interrupt",
+"",
+"		start_com( unit, ll_devcb[unit].mode, ll_devcb[unit].speed);",
+"		break;",
+"	",
+"	case LLD_SER_STOP:",
+"		DisableInt(ll_devdat[unit].intno);",
+"		stop_com(unit);",
+"		break;",
+"",
+"	case LLD_SER_SEND:",
+"		if(in_w(UART_FR(unit)) & UART_FR_TXFF) {",
+"			err = E_BUSY;				// Transmit FIFO full.",
+"		} else {",
+"			out_w(UART_DR(unit), parm);		// Set Transmission data",
+"			set_w(UART_IMSC(unit), UART_IMSC_TXIM);	// Clear TXI Interrupt mask.",
+"		}",
+"		break;",
+"",
+"	case LLD_SER_BREAK:",
+"		if(parm) {",
+"			set_w(UART_LCR_H(unit), UART_LCR_H_BRK);	/* Send Break */",
+"		} else {",
+"			clr_w(UART_LCR_H(unit), UART_LCR_H_BRK);	/* Stop Break */",
+"		}",
+"		break;",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_ser_llinit( T_SER_DCB *p_dcb)",
+"{",
+"	const T_DINT	dint = {",
+"		.intatr	= TA_HLNG,",
+"		.inthdr	= usart_inthdr,",
+"	};",
+"	UW	unit;",
+"	ER	err;",
+"",
+"	unit = p_dcb->unit;",
+"",
+"	/* UART device initialize */",
+"	stop_com(unit);",
+"",
+"	/* Device Control block Initizlize */",
+"	p_dcb->intno_rcv = p_dcb->intno_snd = ll_devdat[unit].intno;",
+"	p_dcb->int_pri = ll_devdat[unit].intpri;",
+"",
+"	/* Interrupt handler definition */",
+"	err = tk_def_int(ll_devdat[unit].intno, &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_SER_ENABLE */",
+"#endif		/* CPU_RP2040 */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2022-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"/*",
+" *	ser_sysdep.h",
+" *	Serial communication device driver",
+" *	System-dependent definition for RP2040",
+" */",
+"",
+"#ifndef	__DEV_SER_RP2040_H__",
+"#define	__DEV_SER_RP2040_H__",
+"",
+"#define	DEV_SER_UNITNM	(2)	/* Number of devive channels */",
+"#define DEV_SER_UNIT0	(0)	/* Ch.0 - UART0 */",
+"#define DEV_SER_UNIT1	(1)	/* Ch.1 - UART1 */",
+"",
+"/*",
+" * UART registers",
+" */",
+"",
+"/* Base address for each channel */",
+"#define	UART0_BASE	(0x40034000UL)",
+"#define	UART1_BASE	(0x40038000UL)",
+"",
+"#define	UARTx_DR		(0x000)	// Data Register",
+"#define	UARTx_RSR		(0x004)	// Receive Status Register/Error Clear Register",
+"#define	UARTx_FR		(0x018)	// Flag Register",
+"#define	UARTx_ILPR		(0x020)	// IrDA Low-Power Counter Register",
+"#define	UARTx_IBRD		(0x024)	// Integer Baud Rate Register",
+"#define	UARTx_FBRD		(0x028)	// Fractional Baud Rate Register",
+"#define	UARTx_LCR_H		(0x02c)	// Line Control Register",
+"#define	UARTx_CR		(0x030)	// Control Register",
+"#define	UARTx_IFLS		(0x034)	// Interrupt FIFO Level Select Register",
+"#define	UARTx_IMSC		(0x038)	// Interrupt Mask Set/Clear Register",
+"#define	UARTx_RIS		(0x03c)	// Raw Interrupt Status Register",
+"#define	UARTx_MIS		(0x040)	// Masked Interrupt Status Register",
+"#define	UARTx_ICR		(0x044)	// Interrupt Clear Register",
+"#define	UARTx_DMACR		(0x048)	// DMA Control Register",
+"#define	UARTx_PERIPHID0		(0xFE0)	// UARTPeriphID0 Register",
+"#define	UARTx_PERIPHID1		(0xFE4)	// UARTPeriphID1 Register",
+"#define	UARTx_PERIPHID2		(0xFE8)	// UARTPeriphID2 Register",
+"#define	UARTx_PERIPHID3		(0xFEc)	// UARTPeriphID3 Register",
+"#define	UARTx_PCELLID0		(0xFF0)	// UARTPCellID0 Register",
+"#define	UARTx_PCELLID1		(0xFF4)	// UARTPCellID1 Register",
+"#define	UARTx_PCELLID2		(0xFF8)	// UARTPCellID2 Register",
+"#define	UARTx_PCELLID3		(0xFFc)	// UARTPCellID3 Register",
+"",
+"/* Register bit definition */",
+"#define	UART_DR_ERR		(0x0F00)	// Error Bits",
+"#define	UART_DR_DATA		(0x00FF)	// Receive & Trnsmit Data",
+"",
+"#define	UART_FR_RI		(1<<8)	// Ring indicator.",
+"#define	UART_FR_TXFE		(1<<7)	// Transmit FIFO empty.",
+"#define	UART_FR_RXFF		(1<<6)	// Receive FIFO full.",
+"#define	UART_FR_TXFF		(1<<5)	// Transmit FIFO full.",
+"#define	UART_FR_RXFE		(1<<4)	// Receive FIFO empty.",
+"#define	UART_FR_BUSY		(1<<3)	// UART busy.",
+"#define	UART_FR_DCD		(1<<2)	// Data carrier detect.",
+"#define	UART_FR_DSR		(1<<1)	// Data set ready.",
+"#define	UART_FR_CTS		(1<<0)	// Clear to send.",
+"",
+"#define	UART_LCR_H_SPS		(1<<7)	// Stick parity select",
+"#define	UART_LCR_H_WLEN		(3<<5)	// Word length",
+"#define	UART_LCR_H_FEN		(1<<4)	// Enable FIFOs (0:disable)",
+"#define	UART_LCR_H_STP2		(1<<3)	// Two stop bits (1:enable)",
+"#define	UART_LCR_H_EPS		(1<<2)	// Even parity select (0: odd 1:even)",
+"#define	UART_LCR_H_PEN		(1<<1)	// Parity enable (0: no parity)",
+"#define	UART_LCR_H_BRK		(1<<0)	// Send break (1: break)",
+"",
+"#define	UART_LCR_H_WLEN_8	(3<<5)	// Word length 8",
+"#define	UART_LCR_H_WLEN_7	(2<<5)	// Word length 7",
+"#define	UART_LCR_H_WLEN_6	(1<<5)	// Word length 6",
+"#define	UART_LCR_H_WLEN_5	(0<<5)	// Word length 5",
+"",
+"#define	UART_CR_CTSEN		(1<<15)	// CTS hardware flow control enable.",
+"#define	UART_CR_RTSEN		(1<<14)	// RTS hardware flow control enable.",
+"#define	UART_CR_OUT2		(1<<13)	// For DTE this can be used as Ring Indicator (RI).",
+"#define	UART_CR_OUT1		(1<<12)	// For DTE this can be used as Data Carrier Detect (DCD).",
+"#define	UART_CR_RTS		(1<<11)	// Request to send.(nUARTRTS is LOW)",
+"#define	UART_CR_DTR		(1<<10)	// Data transmit ready.(nUARTDTR is LOW.)",
+"#define	UART_CR_RXE		(1<<9)	// Receive enable.",
+"#define	UART_CR_TXE		(1<<8)	// Transmit enable.",
+"#define	UART_CR_LBE		(1<<7)	// Loopback enable.",
+"#define	UART_CR_SIRLP		(1<<2)	// SIR low-power IrDA mode.",
+"#define	UART_CR_SIREN		(1<<1)	// SIR enable.",
+"#define	UART_CR_UARTEN		(1<<0)	// UART enable.",
+"",
+"#define	UART_IMSC_OEIM		(1<<10)	// Overrun error interrupt mask.",
+"#define	UART_IMSC_BEIM		(1<<9)	// Break error interrupt mask.",
+"#define	UART_IMSC_PEIM		(1<<8)	// Parity error interrupt mask.",
+"#define	UART_IMSC_FEIM		(1<<7)	// Framing error interrupt mask.",
+"#define	UART_IMSC_RTIM		(1<<6)	// Receive timeout interrupt mask.",
+"#define	UART_IMSC_TXIM		(1<<5)	// Transmit interrupt mask.",
+"#define	UART_IMSC_RXIM		(1<<4)	// Receive interrupt mask.",
+"#define	UART_IMSC_DSRMIM	(1<<3)	// nUARTDSR modem interrupt mask.",
+"#define	UART_IMSC_DCDMIM	(1<<2)	// nUARTDCD modem interrupt mask.",
+"#define	UART_IMSC_CTSMIM	(1<<1)	// nUARTCTS modem interrupt mask.",
+"#define	UART_IMSC_RIMIM		(1<<0)	// nUARTRI modem interrupt mask.",
+"",
+"#define	UART_IMSC_EI		(0xFFFFFFF0)",
+"",
+"#define	UART_RIS_OE		(1<<10)	// Overrun error interrupt status.",
+"#define	UART_RIS_BE		(1<<9)	// Break error interrupt status.",
+"#define	UART_RIS_PE		(1<<8)	// Parity error interrupt status.",
+"#define	UART_RIS_FE		(1<<7)	// Framing error interrupt status.",
+"#define	UART_RIS_RT		(1<<6)	// Receive timeout interrupt status.",
+"#define	UART_RIS_TX		(1<<5)	// Transmit interrupt status.",
+"#define	UART_RIS_RX		(1<<4)	// Receive interrupt status.",
+"#define	UART_RIS_DSRM		(1<<3)	// nUARTDSR modem interrupt status.",
+"#define	UART_RIS_DCDM		(1<<2)	// nUARTDCD modem interrupt status.",
+"#define	UART_RIS_CTSM		(1<<1)	// nUARTCTS modem interrupt status.",
+"#define	UART_RIS_RIM		(1<<0)	// nUARTRI modem interrupt status.",
+"",
+"#define	UART_MIS_OE		(1<<10)	// Overrun error interrupt status.",
+"#define	UART_MIS_BE		(1<<9)	// Break error interrupt status.",
+"#define	UART_MIS_PE		(1<<8)	// Parity error interrupt status.",
+"#define	UART_MIS_FE		(1<<7)	// Framing error interrupt status.",
+"#define	UART_MIS_RT		(1<<6)	// Receive timeout interrupt status.",
+"#define	UART_MIS_TX		(1<<5)	// Transmit interrupt status.",
+"#define	UART_MIS_RX		(1<<4)	// Receive interrupt status.",
+"#define	UART_MIS_DSRM		(1<<3)	// nUARTDSR modem interrupt status.",
+"#define	UART_MIS_DCDM		(1<<2)	// nUARTDCD modem interrupt status.",
+"#define	UART_MIS_CTSM		(1<<1)	// nUARTCTS modem interrupt status.",
+"#define	UART_MIS_RIM		(1<<0)	// nUARTRI modem interrupt status.",
+"",
+"/*Initial register value when using debug */",
+"#define	UART_IBRD_DEBUG		(67)",
+"#define	UART_FBRD_DEBUG		(52)",
+"#define	UART_LCR_H_DEBUG	(0x00000070)",
+"#define UART_CR_DEBUG		(0x00000301)	/* USART enable */",
+"",
+"/* USART interrupt number */",
+"#define	INTNO_UART0		20",
+"#define	INTNO_UART1		21",
+"",
+"#endif	/* __DEV_SER_RP2040_H__ */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	ser_cnf_sysdep.h ",
+" *	Serial Device configuration file",
+" *		for RX231",
+" */",
+"#ifndef	__DEV_SER_CNF_RX231_H__",
+"#define	__DEV_SER_CNF_RX231_H__",
+"",
+"/* Device initialization */",
+"#define DEVCONF_SER_INIT_MSTP	FALSE		// Initialize module stop",
+"",
+"/* Interrupt priority */",
+"#define	DEVCNF_SCI0_INTPRI	5",
+"#define	DEVCNF_SCI1_INTPRI	5",
+"#define	DEVCNF_SCI5_INTPRI	5",
+"#define	DEVCNF_SCI6_INTPRI	5",
+"#define	DEVCNF_SCI8_INTPRI	5",
+"#define	DEVCNF_SCI9_INTPRI	5",
+"#define	DEVCNF_SCI12_INTPRI	5",
+"",
+"/* Debug option",
+" *	Specify the device used by T-Monitor.",
+" *	  0 - 6: \"sera\" - \"serg\"",
+" *	  other : T-Monitor does not use serial devices",
+" */",
+"#if USE_TMONITOR",
+"#define	DEVCNF_SER_DBGUN	3		// Used by T-Monitor",
+"#else ",
+"#define	DEVCNF_SER_DBGUN	-1		// T-Monitor not executed",
+"#endif",
+"",
+"#endif		/* __DEV_SER_CNF_RX231_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	ser_mode_sysdep.h",
+" *	Serial communication device driver",
+" *	Communication mode definition for RX231",
+" */",
+"",
+"#ifndef	__DEV_SER_MODE_RX231_H__",
+"#define	__DEV_SER_MODE_RX231_H__",
+"",
+"#define	DEV_SER_MODE_7BIT	(0x00000040)	/* Word length 7bit */",
+"#define	DEV_SER_MODE_8BIT	(0x00000000)	/* Word length 8bit */",
+"",
+"#define	DEV_SER_MODE_1STOP	(0x00000000)	/* Stop-bit 1bit */",
+"#define	DEV_SER_MODE_2STOP	(0x00000008)	/* Stop-bit 2bit */",
+"",
+"#define DEV_SER_MODE_PODD	(0x00000030)	/* parity Odd */",
+"#define DEV_SER_MODE_PEVEN	(0x00000020)	/* parity Even */",
+"#define DEV_SER_MODE_PNON	(0x00000000)	/* parity None */",
+"",
+"#define	DEV_SER_MODE_CTSEN	(0x00008000)	/* CTS Hard flow control enable */",
+"#define	DEV_SER_MODE_RTSEN	(0x00004000)	/* RTS Hard flow control enable */",
+"",
+"/* Communication Error */",
+"#define	DEV_SER_ERR_PE		(1<<3)	/* Parity Error */",
+"#define	DEV_SER_ERR_FE		(1<<4)	/* Framing Error */",
+"#define	DEV_SER_ERR_OE		(1<<5)	/* Overrun Error */",
+"",
+"",
+"#endif /* __DEV_SER_MODE_RX231_H__ */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RX231",
+"",
+"#include <tk/tkernel.h>",
+"#include <tm/tmonitor.h>",
+"#include \"../../ser.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_SER_ENABLE",
+"/*",
+" *	ser_rx231.c",
+" *	Serial communication device driver",
+" *	System dependent processing for RX231",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+" */",
+"const LOCAL UW ba[DEV_SER_UNITNM] = {",
+"	SCI0_BASE, SCI1_BASE, SCI5_BASE, SCI6_BASE, ",
+"	SCI8_BASE, SCI9_BASE, SCI12_BASE",
+"};",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt number Table",
+" */",
+"const LOCAL UINT inotbl[DEV_SER_UNITNM] = {",
+"	INTNO_SCI0_ERI, INTNO_SCI1_ERI, INTNO_SCI5_ERI, INTNO_SCI6_ERI,",
+"	INTNO_SCI8_ERI,INTNO_SCI9_ERI, INTNO_SCI12_ERI",
+"};",
+"#define	INTNO_ERI(n)	(inotbl[n])",
+"#define INTNO_RXI(n)	(inotbl[n]+1)",
+"#define INTNO_TXI(n)	(inotbl[n]+2)",
+"#define INTNO_TXE(n)	(inotbl[n]+3)",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt priority Table",
+" */",
+"const LOCAL INT pritbl[DEV_SER_UNITNM] = {",
+"	DEVCNF_SCI0_INTPRI, DEVCNF_SCI1_INTPRI, DEVCNF_SCI5_INTPRI, DEVCNF_SCI6_INTPRI,",
+"	DEVCNF_SCI8_INTPRI, DEVCNF_SCI9_INTPRI, DEVCNF_SCI12_INTPRI",
+"};",
+"#define INTPRI(n)	(pritbl[n])",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"typedef struct {",
+"	UW	mode;		// Serial mode",
+"	UW	speed;		// Spped (bit rate)",
+"} T_DEV_SER_LLDEVCB;",
+"",
+"LOCAL T_DEV_SER_LLDEVCB		ll_devcb[DEV_SER_UNITNM];",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"",
+"/*",
+" * TXI: Transmit data empty interrupt",
+" */",
+"void sci_txi_inthdr( UINT intno)",
+"{",
+"	UW	unit, data;",
+"",
+"	unit = (intno - INTNO_SCI0_TXI) >>2 ;",
+"	if(unit >= DEV_SER_UNITNM ) return;",
+"",
+"	if( dev_ser_get_snddat(unit, &data)) {",
+"		out_b(ba[unit] + SCI_TDR, (UB)data);",
+"	}",
+"}",
+"",
+"/*",
+" * RXI: Receive data full interrupt",
+" */",
+"void sci_rxi_inthdr( UINT intno)",
+"{",
+"	UW	unit, data;",
+"",
+"	unit = (intno - INTNO_SCI0_RXI) >>2 ;",
+"	if(unit >= DEV_SER_UNITNM ) return;",
+"",
+"	data = in_b(ba[unit] + SCI_RDR);",
+"	dev_ser_notify_rcv(unit, data);	/* Notify the main process of data reception. */",
+"",
+"}",
+"",
+"/*",
+" * ERI: Receive error interrupt",
+" */",
+"void sci_eri_inthdr( UINT intno)",
+"{",
+"	UW	unit, ssr;",
+"",
+"	unit = (intno - INTNO_SCI0_ERI) >>2 ;",
+"	if(unit >= DEV_SER_UNITNM ) return;",
+"",
+"	ssr = in_b(ba[unit] + SCI_SSR);",
+"	out_b(ba[unit] + SCI_SSR, 0);		/* Clear error */",
+"",
+"	ssr &= (SCI_SSR_ORER | SCI_SSR_PER | SCI_SSR_FER);",
+"	dev_ser_notify_err(unit, ssr);	/* Notify error to main process */",
+"}",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Set mode & Start communication",
+" */",
+"LOCAL void start_com(UW unit, UW mode, UW speed)",
+"{",
+"	UB	data;",
+"",
+"	/* Set communication mode & Speed */",
+"	out_b( ba[unit] + SCI_SMR, (UB)((mode & 0x00000078)|(speed>>8 & 0x00000003)));",
+"	out_b( ba[unit] + SCI_SCMR, 0xF2);",
+"	data = in_b( ba[unit] + SCI_SEMR);",
+"	out_b( ba[unit] + SCI_SEMR, (data & ~SCI_SEMR_ABCS) | (speed & SCI_SEMR_ABCS));",
+"	out_b( ba[unit] + SCI_BRR, speed >>16);",
+"",
+"	/* SCR.TE,RE,TIE,RIE <- 1 */",
+"	out_b( ba[unit] + SCI_SCR, ",
+"		(SCI_SCR_RE | SCI_SCR_TE | SCI_SCR_RIE | SCI_SCR_TIE | SCI_SCR_INI));",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Stop communication",
+" */",
+"LOCAL void stop_com(UW unit)",
+"{",
+"	if(unit != DEVCNF_SER_DBGUN) {",
+"		out_b(ba[unit] + SCI_SCR, SCI_SCR_INI);		/* SCR.TIE,RIE,TE,RE,TEIE <- 0 & Set SCR.CKE */",
+"	} else {	/* Used by T-Monitor */",
+"		out_b(ba[unit] + SCI_SCR, SCI_SCR_DEBUG);",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Calculate baud rate",
+" */",
+"LOCAL UW calc_brr(UW baud)",
+"{",
+"	UW	abcs, brr, cks;",
+"	W	work;",
+"",
+"	work = SYSCLK_PCLKB / (baud * 256);",
+"	if(work < 16) {",
+"		abcs	= SCI_SEMR_ABCS;",
+"		cks	= 0;",
+"		brr = SYSCLK_PCLKB / (baud * 16) - 1;",
+"	} else if(work < 32) {",
+"		abcs	= 0;",
+"		cks	= 0;",
+"		brr = SYSCLK_PCLKB / (baud * 32) - 1;",
+"	} else if(work < 64) {",
+"		abcs	= SCI_SEMR_ABCS;",
+"		cks	= 1;",
+"		brr = SYSCLK_PCLKB / (baud * 64) - 1;",
+"	} else if(work < 128) {",
+"		abcs	= 0;",
+"		cks	= 1;",
+"		brr = SYSCLK_PCLKB / (baud * 128) - 1;",
+"	} else if(work < 256) {",
+"		abcs	= SCI_SEMR_ABCS;",
+"		cks	= 2;",
+"		brr = SYSCLK_PCLKB / (baud * 256) - 1;",
+"	} else if(work < 512) {",
+"		abcs	= 0;",
+"		cks	= 2;",
+"		brr = SYSCLK_PCLKB / (baud * 512) - 1;",
+"	} else if(work < 1024) {",
+"		abcs	= SCI_SEMR_ABCS;",
+"		cks	= 3;",
+"		brr = SYSCLK_PCLKB / (baud * 1024) - 1;",
+"	} else if(work < 2048) {",
+"		abcs	= 0;",
+"		cks	= 3;",
+"		brr = SYSCLK_PCLKB / (baud * 2048) - 1;",
+"	} else {",
+"		return 0;",
+"	}",
+"",
+"	return (brr<<16 | cks << 8 | abcs);",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT ER dev_ser_llctl( UW unit, INT cmd, UW parm)",
+"{",
+"	UW	data;",
+"	ER	err	= E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_SER_MODE:	/* Set Communication mode */",
+"		ll_devcb[unit].mode = parm;",
+"		break;",
+"	",
+"	case LLD_SER_SPEED:	/* Set Communication Speed */",
+"		data = calc_brr(parm);",
+"		if(data != 0) {",
+"			ll_devcb[unit].speed = data;",
+"		} else {",
+"			err = E_PAR;",
+"		}",
+"		break;",
+"	",
+"	case LLD_SER_START:	/* Start communication */",
+"		/* Clear Interrupt */",
+"		in_b(ba[unit] + SCI_SSR);",
+"		out_b(ba[unit] + SCI_SSR, 0xC0);",
+"		/* Enable Interrupt */",
+"		EnableInt( INTNO_ERI(unit), INTPRI(unit));",
+"		EnableInt( INTNO_RXI(unit), INTPRI(unit));",
+"		EnableInt( INTNO_TXI(unit), INTPRI(unit));",
+"		/* Set mode & Start communication */",
+"		start_com( unit, ll_devcb[unit].mode, ll_devcb[unit].speed);",
+"		break;",
+"	",
+"	case LLD_SER_STOP:",
+"		/* Disable Interrupt */",
+"		DisableInt( INTNO_ERI(unit));",
+"		DisableInt( INTNO_RXI(unit));",
+"		DisableInt( INTNO_TXI(unit));",
+"		stop_com(unit);			// Stop communication",
+"		break;",
+"",
+"	case LLD_SER_SEND:",
+"		if((in_b( ba[unit] + SCI_SSR) & SCI_SSR_TDRF) != 0) {",
+"			out_b(ba[unit] + SCI_TDR, (UB)parm);",
+"			err = E_OK;",
+"		} else {",
+"			err = E_BUSY;",
+"		}",
+"		break;",
+"",
+"	case LLD_SER_BREAK:	/* Send Break */",
+"		err = E_NOSPT;",
+"		break;",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_ser_llinit( T_SER_DCB *p_dcb)",
+"{",
+"	T_DINT		dint;",
+"	UW		unit;",
+"	ER		err;",
+"",
+"	unit = p_dcb->unit;",
+"",
+"#if DEVCONF_SER_INIT_MSTP		// Initialize module stop",
+"	const UINT	mstp_bit[] = { 31, 30, 26, 25, 27, 26, 4};",
+"	UINT		sts;",
+"	UW		*mstp;",
+"",
+"	if(unit == 4 || unit == 5) {",
+"		mstp = (UB*)MSTPCRC;",
+"	} else {",
+"		mstp = (UB*)MSTPCRB;",
+"	}",
+"",
+"	if(in_w(mstp) & (1<<mstp_bit[unit])) {",
+"		DI(sts);",
+"		out_h(SYSTEM_PRCR, 0xA502);	/* Disable Register Protect */",
+"		*mstp &= ~(1<<mstp_bit[unit]);	/* Release module stop */",
+"		out_h(SYSTEM_PRCR, 0xA500);	/* Enable Register protect */",
+"		EI(sts);",
+"	}",
+"#endif		/* DEVCONF_SER_INIT_MSTP */",
+"",
+"	stop_com(unit);					/* Stop communication */",
+"	out_b(ba[unit] + SCI_SPMR, SCI_SPMR_INI);	/* Set Hard flow control */",
+"",
+"	/* Device Control block Initizlize */",
+"	p_dcb->intno_rcv = INTNO_SCI0_RXI + (unit<<2);",
+"	p_dcb->intno_snd = INTNO_SCI0_TXI + (unit<<2);",
+"",
+"	/* Interrupt handler definition */",
+"	dint.intatr	= TA_HLNG;",
+"	dint.inthdr	= sci_eri_inthdr;",
+"	err = tk_def_int(INTNO_ERI(unit), &dint);",
+"	dint.inthdr	= sci_rxi_inthdr;",
+"	err = tk_def_int(INTNO_RXI(unit), &dint);	",
+"	dint.inthdr	= sci_txi_inthdr;",
+"	err = tk_def_int(INTNO_TXI(unit), &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_SER_ENABLE */",
+"#endif		/* CPU_RX231 */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	ser_sysdep.h",
+" *	Serial communication device driver",
+" *	System-dependent definition for RX231",
+" */",
+"",
+"#ifndef	__DEV_SER_RX231_H__",
+"#define	__DEV_SER_RX231_H__",
+"",
+"#define	DEV_SER_UNITNM		(7)	/* Number of devive channels */",
+"",
+"/*",
+" * UART registers",
+" */",
+"",
+"/* Base address for each channel */",
+"#define	SCI0_BASE		(0x8A000)",
+"#define	SCI1_BASE		(0x8A020)",
+"#define	SCI5_BASE		(0x8A0A0)",
+"#define	SCI6_BASE		(0x8A0C0)",
+"#define	SCI8_BASE		(0x8A100)",
+"#define	SCI9_BASE		(0x8A120)",
+"#define SCI12_BASE		(0x8B300)",
+"",
+"/* Register offset */",
+"#define	SCI_SMR			(0x00000000)	// Serial mode register",
+"#define	SCI_BRR			(0x00000001)	// Bit rate register",
+"#define	SCI_SCR			(0x00000002)	// Serial control register",
+"#define	SCI_SSR			(0x00000004)	// Serial status register",
+"#define	SCI_TDR			(0x00000003)	// Transmit data register",
+"#define	SCI_RDR			(0x00000005)	// Receive data register",
+"#define	SCI_SCMR		(0x00000006)	// Smart card mode register",
+"#define	SCI_SEMR		(0x00000007)	// Serial extended mode register",
+"#define	SCI_SPMR		(0x0000000D)	// SPI mode register",
+"",
+"/*  SMR: Serial mode register */",
+"#define	SCI_SMR_PCLK_01		(0x00)		// Clock select bit",
+"#define	SCI_SMR_PCLK_04		(0x01)",
+"#define	SCI_SMR_PCLK_16		(0x02)",
+"#define	SCI_SMR_PCLK_64		(0x03)",
+"#define	SCI_SMR_CHR		(0x40)		// Character length bit",
+"",
+"/* SCR: Serial control register */",
+"#define	SCI_SCR_TEIE		(0x04)		// Transmit end interrupt enable",
+"#define	SCI_SCR_RE		(0x10)		// Receive enable",
+"#define	SCI_SCR_TE		(0x20)		// Transmit enable",
+"#define	SCI_SCR_RIE		(0x40)		// Receive interrupt enable",
+"#define	SCI_SCR_TIE		(0x80)		// Transmit end interrupt enable",
+"",
+"#define	SCI_SCR_INI		(0x00)		// SCR initial value",
+"#define	SCI_SCR_DEBUG		(0x32)		// SCR initial value when using debug",
+"",
+"/* SSR: Serial status register */",
+"#define	SCI_SSR_TEND		(0x04)		// Transmit end",
+"#define	SCI_SSR_PER		(0x08)		// Parity error",
+"#define	SCI_SSR_FER		(0x10)		// Framing error",
+"#define	SCI_SSR_ORER		(0x20)		// Overrun error",
+"#define SCI_SSR_RDRF		(0x40)		// Receive data full",
+"#define SCI_SSR_TDRF		(0x80)		// Transmit data empty",
+"",
+"/* SEMR: Serial extended mode register */",
+"#define SCI_SEMR_ABCS		(0x10)		// Clock select */",
+"",
+"/* SPMR: SPI mode register */",
+"#define	SCI_SPMR_INI		(0x00)		// SPMR initial value",
+"",
+"/*",
+" *UART interrupt number",
+" */",
+"#define	INTNO_SCI0_ERI		214		// Receive error interrupt",
+"#define	INTNO_SCI0_RXI		215		// Receive data full interrupt",
+"#define	INTNO_SCI0_TXI		216		// Transmit data empty interrupt",
+"#define	INTNO_SCI0_TEI		217		// Transmit end interrupt",
+"",
+"#define	INTNO_SCI1_ERI		218		// Receive error interrupt",
+"#define	INTNO_SCI1_RXI		219		// Receive data full interrupt",
+"#define	INTNO_SCI1_TXI		220		// Transmit data empty interrupt",
+"#define	INTNO_SCI1_TEI		221		// Transmit end interrupt",
+"",
+"#define	INTNO_SCI5_ERI		222		// Receive error interrupt",
+"#define	INTNO_SCI5_RXI		223		// Receive data full interrupt",
+"#define	INTNO_SCI5_TXI		224		// Transmit data empty interrupt",
+"#define	INTNO_SCI5_TEI		225		// Transmit end interrupt",
+"",
+"#define	INTNO_SCI6_ERI		226		// Receive error interrupt",
+"#define	INTNO_SCI6_RXI		227		// Receive data full interrupt",
+"#define	INTNO_SCI6_TXI		228		// Transmit data empty interrupt",
+"#define	INTNO_SCI6_TEI		229		// Transmit end interrupt",
+"",
+"#define	INTNO_SCI8_ERI		230		// Receive error interrupt",
+"#define	INTNO_SCI8_RXI		231		// Receive data full interrupt",
+"#define	INTNO_SCI8_TXI		232		// Transmit data empty interrupt",
+"#define	INTNO_SCI8_TEI		233		// Transmit end interrupt",
+"",
+"#define	INTNO_SCI9_ERI		234		// Receive error interrupt",
+"#define	INTNO_SCI9_RXI		235		// Receive data full interrupt",
+"#define	INTNO_SCI9_TXI		236		// Transmit data empty interrupt",
+"#define	INTNO_SCI9_TEI		237		// Transmit end interrupt",
+"",
+"#define	INTNO_SCI12_ERI		238		// Receive error interrupt",
+"#define	INTNO_SCI12_RXI		239		// Receive data full interrupt",
+"#define	INTNO_SCI12_TXI		240		// Transmit data empty interrupt",
+"#define	INTNO_SCI12_TEI		241		// Transmit end interrupt",
+"",
+"",
+"#endif		/* __DEV_SER_RX231_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	ser_cnf_sysdep.h ",
+" *	Serial Device configuration file",
+" *		for RX65N",
+" */",
+"#ifndef	__DEV_SER_CNF_RX65N_H__",
+"#define	__DEV_SER_CNF_RX65N_H__",
+"",
+"/* Device initialization */",
+"#define DEVCONF_SER_INIT_MSTP	FALSE		// Initialize module stop",
+"",
+"/* Interrupt priority */",
+"#define	DEVCNF_SCI0_INTPRI	5",
+"#define	DEVCNF_SCI1_INTPRI	5",
+"#define	DEVCNF_SCI2_INTPRI	5",
+"#define	DEVCNF_SCI3_INTPRI	5",
+"#define	DEVCNF_SCI4_INTPRI	5",
+"#define	DEVCNF_SCI5_INTPRI	5",
+"#define	DEVCNF_SCI6_INTPRI	5",
+"#define	DEVCNF_SCI7_INTPRI	5",
+"#define	DEVCNF_SCI8_INTPRI	5",
+"#define	DEVCNF_SCI9_INTPRI	5",
+"#define	DEVCNF_SCI10_INTPRI	5",
+"#define	DEVCNF_SCI11_INTPRI	5",
+"#define	DEVCNF_SCI12_INTPRI	5",
+"",
+"/* Debug option",
+" *	Specify the device used by T-Monitor.",
+" *	  0 - 6: \"sera\" - \"serg\"",
+" *	  other : T-Monitor does not use serial devices",
+" */",
+"#if USE_TMONITOR",
+"#define	DEVCNF_SER_DBGUN	8		// Used by T-Monitor",
+"#else ",
+"#define	DEVCNF_SER_DBGUN	-1		// T-Monitor not executed",
+"#endif",
+"",
+"#endif		/* __DEV_SER_CNF_RX65N_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	ser_mode_sysdep.h",
+" *	Serial communication device driver",
+" *	Communication mode definition for RX65N",
+" */",
+"",
+"#ifndef	__DEV_SER_MODE_RX65N_H__",
+"#define	__DEV_SER_MODE_RX65N_H__",
+"",
+"#define	DEV_SER_MODE_7BIT	(0x00000040)	/* Word length 7bit */",
+"#define	DEV_SER_MODE_8BIT	(0x00000000)	/* Word length 8bit */",
+"",
+"#define	DEV_SER_MODE_1STOP	(0x00000000)	/* Stop-bit 1bit */",
+"#define	DEV_SER_MODE_2STOP	(0x00000008)	/* Stop-bit 2bit */",
+"",
+"#define DEV_SER_MODE_PODD	(0x00000030)	/* parity Odd */",
+"#define DEV_SER_MODE_PEVEN	(0x00000020)	/* parity Even */",
+"#define DEV_SER_MODE_PNON	(0x00000000)	/* parity None */",
+"",
+"#define	DEV_SER_MODE_CTSEN	(0x00008000)	/* CTS Hard flow control enable */",
+"#define	DEV_SER_MODE_RTSEN	(0x00004000)	/* RTS Hard flow control enable */",
+"",
+"/* Communication Error */",
+"#define	DEV_SER_ERR_PE		(1<<3)	/* Parity Error */",
+"#define	DEV_SER_ERR_FE		(1<<4)	/* Framing Error */",
+"#define	DEV_SER_ERR_OE		(1<<5)	/* Overrun Error */",
+"",
+"",
+"#endif /* __DEV_SER_MODE_RX65N_H__ */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RX65N",
+"",
+"#include <tk/tkernel.h>",
+"#include <tm/tmonitor.h>",
+"#include \"../../ser.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_SER_ENABLE",
+"/*",
+" *	ser_rx65n.c",
+" *	Serial communication device driver",
+" *	System dependent processing for RX65N",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+" */",
+"const LOCAL UW ba[DEV_SER_UNITNM] = {",
+"	SCI0_BASE, SCI1_BASE, SCI2_BASE, SCI3_BASE, SCI4_BASE, SCI5_BASE, SCI6_BASE, ",
+"	SCI7_BASE, SCI8_BASE, SCI9_BASE, SCI10_BASE, SCI11_BASE, SCI12_BASE",
+"};",
+"",
+"#define	SCI_SMR(x)	(ba[x] + SCIx_SMR)	// Serial mode register",
+"#define	SCI_BRR(x)	(ba[x] + SCIx_BRR)	// Bit rate register",
+"#define	SCI_SCR(x)	(ba[x] + SCIx_SCR)	// Serial control register",
+"#define	SCI_SSR(x)	(ba[x] + SCIx_SSR)	// Serial status register",
+"#define	SCI_TDR(x)	(ba[x] + SCIx_TDR)	// Transmit data register",
+"#define	SCI_RDR(x)	(ba[x] + SCIx_RDR)	// Receive data register",
+"#define	SCI_SCMR(x)	(ba[x] + SCIx_SCMR)	// Smart card mode register",
+"#define	SCI_SEMR(x)	(ba[x] + SCIx_SEMR)	// Serial extended mode register",
+"#define	SCI_SPMR(x)	(ba[x] + SCIx_SPMR)	// SPI mode register",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt number Table",
+" */",
+"const LOCAL UINT inotbl[DEV_SER_UNITNM] = {",
+"	INTNO_SCI0_RXI, INTNO_SCI1_RXI, INTNO_SCI2_RXI, INTNO_SCI3_RXI, INTNO_SCI4_RXI,",
+"	INTNO_SCI5_RXI, INTNO_SCI6_RXI, INTNO_SCI7_RXI, INTNO_SCI8_RXI, INTNO_SCI9_RXI,",
+"	INTNO_SCI10_RXI, INTNO_SCI11_RXI, INTNO_SCI12_RXI",
+"};",
+"#define INTNO_RXI(n)	(inotbl[n])",
+"#define INTNO_TXI(n)	(inotbl[n]+1)",
+"",
+"const LOCAL UINT eritbl[DEV_SER_UNITNM] = {",
+"	INTNO_SCI0_ERI, INTNO_SCI1_ERI, INTNO_SCI2_ERI, INTNO_SCI3_ERI, INTNO_SCI4_ERI,",
+"	INTNO_SCI5_ERI, INTNO_SCI6_ERI, INTNO_SCI7_ERI, INTNO_SCI8_ERI, INTNO_SCI9_ERI,",
+"	INTNO_SCI10_ERI, INTNO_SCI11_ERI, INTNO_SCI12_ERI",
+"};",
+"#define INTNO_ERI(n)	(eritbl[n])",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt priority Table",
+" */",
+"const LOCAL INT pritbl[DEV_SER_UNITNM] = {",
+"	DEVCNF_SCI0_INTPRI, DEVCNF_SCI1_INTPRI, DEVCNF_SCI2_INTPRI, DEVCNF_SCI3_INTPRI, DEVCNF_SCI4_INTPRI, ",
+"	DEVCNF_SCI5_INTPRI, DEVCNF_SCI6_INTPRI, DEVCNF_SCI7_INTPRI, DEVCNF_SCI8_INTPRI, DEVCNF_SCI9_INTPRI,",
+"	DEVCNF_SCI10_INTPRI, DEVCNF_SCI11_INTPRI, DEVCNF_SCI12_INTPRI",
+"};",
+"#define INTPRI(n)	(pritbl[n])",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"typedef struct {",
+"	UW	mode;		// Serial mode",
+"	UW	speed;		// Spped (bit rate)",
+"} T_DEV_SER_LLDEVCB;",
+"",
+"LOCAL T_DEV_SER_LLDEVCB		ll_devcb[DEV_SER_UNITNM];",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"",
+"/*",
+" * TXI: Transmit data empty interrupt",
+" */",
+"void sci_txi_inthdr( UINT intno)",
+"{",
+"	UW	unit, data;",
+"",
+"	ClearInt(intno);",
+"	for( unit = 0; unit < DEV_SER_UNITNM; unit++) {",
+"		if(INTNO_TXI(unit) == intno) break;",
+"	}",
+"	if(unit >= DEV_SER_UNITNM ) return;",
+"",
+"	if( dev_ser_get_snddat(unit, &data)) {",
+"		out_b(SCI_TDR(unit), (UB)data);",
+"	}",
+"}",
+"",
+"/*",
+" * RXI: Receive data full interrupt",
+" */",
+"void sci_rxi_inthdr( UINT intno)",
+"{",
+"	UW	unit, data;",
+"",
+"	for( unit = 0; unit < DEV_SER_UNITNM; unit++) {",
+"		if(INTNO_RXI(unit) == intno) break;",
+"	}",
+"	if(unit >= DEV_SER_UNITNM ) return;",
+"",
+"	data = in_b(SCI_RDR(unit));",
+"	dev_ser_notify_rcv(unit, data);	/* Notify the main process of data reception. */",
+"}",
+"",
+"/*",
+" * ERI: Receive error interrupt",
+" */",
+"void sci_eri_inthdr( UINT intno)",
+"{",
+"	UW	unit, ssr;",
+"",
+"	for( unit = 0; unit < DEV_SER_UNITNM; unit++) {",
+"		if(INTNO_ERI(unit) == intno) break;",
+"	}",
+"	if(unit >= DEV_SER_UNITNM ) return;",
+"",
+"	ssr = in_b(SCI_SSR(unit));",
+"	out_b(SCI_SSR(unit), 0);		/* Clear error */",
+"",
+"	ssr &= (SCI_SSR_ORER | SCI_SSR_PER | SCI_SSR_FER);",
+"	dev_ser_notify_err(unit, ssr);	/* Notify error to main process */",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Set mode & Start communication",
+" */",
+"LOCAL void start_com(UW unit, UW mode, UW speed)",
+"{",
+"	UB	data;",
+"",
+"	/* Set communication mode & Speed */",
+"	out_b( SCI_SMR(unit), (UB)((mode & 0x00000078)|(speed>>8 & 0x00000003)));",
+"	out_b( SCI_SCMR(unit), 0xF2);",
+"	data = in_b( SCI_SEMR(unit));",
+"	out_b( SCI_SEMR(unit), (data & ~SCI_SEMR_ABCS) | (speed & SCI_SEMR_ABCS));",
+"	out_b( SCI_BRR(unit), speed >>16);",
+"",
+"	/* SCR.TE,RE,TIE,RIE <- 1 */",
+"	out_b( SCI_SCR(unit), (SCI_SCR_RE | SCI_SCR_TE | SCI_SCR_RIE | SCI_SCR_TIE | SCI_SCR_INI));",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Stop communication",
+" */",
+"LOCAL void stop_com(UW unit)",
+"{",
+"	if(unit != DEVCNF_SER_DBGUN) {",
+"		out_b(SCI_SCR(unit), SCI_SCR_INI);		/* SCR.TIE,RIE,TE,RE,TEIE <- 0 & Set SCR.CKE */",
+"	} else {	/* Used by T-Monitor */",
+"		out_b(SCI_SCR(unit), SCI_SCR_DEBUG);",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Calculate baud rate",
+" */",
+"LOCAL UW calc_brr(UW baud)",
+"{",
+"	UW	abcs, brr, cks;",
+"	W	work;",
+"",
+"	work = SYSCLK_PCLKB / (baud * 256);",
+"	if(work < 16) {",
+"		abcs	= SCI_SEMR_ABCS;",
+"		cks	= 0;",
+"		brr = SYSCLK_PCLKB / (baud * 16) - 1;",
+"	} else if(work < 32) {",
+"		abcs	= 0;",
+"		cks	= 0;",
+"		brr = SYSCLK_PCLKB / (baud * 32) - 1;",
+"	} else if(work < 64) {",
+"		abcs	= SCI_SEMR_ABCS;",
+"		cks	= 1;",
+"		brr = SYSCLK_PCLKB / (baud * 64) - 1;",
+"	} else if(work < 128) {",
+"		abcs	= 0;",
+"		cks	= 1;",
+"		brr = SYSCLK_PCLKB / (baud * 128) - 1;",
+"	} else if(work < 256) {",
+"		abcs	= SCI_SEMR_ABCS;",
+"		cks	= 2;",
+"		brr = SYSCLK_PCLKB / (baud * 256) - 1;",
+"	} else if(work < 512) {",
+"		abcs	= 0;",
+"		cks	= 2;",
+"		brr = SYSCLK_PCLKB / (baud * 512) - 1;",
+"	} else if(work < 1024) {",
+"		abcs	= SCI_SEMR_ABCS;",
+"		cks	= 3;",
+"		brr = SYSCLK_PCLKB / (baud * 1024) - 1;",
+"	} else if(work < 2048) {",
+"		abcs	= 0;",
+"		cks	= 3;",
+"		brr = SYSCLK_PCLKB / (baud * 2048) - 1;",
+"	} else {",
+"		return 0;",
+"	}",
+"",
+"	return (brr<<16 | cks << 8 | abcs);",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT ER dev_ser_llctl( UW unit, INT cmd, UW parm)",
+"{",
+"	UW	data;",
+"	ER	err	= E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_SER_MODE:	/* Set Communication mode */",
+"		ll_devcb[unit].mode = parm;",
+"		break;",
+"	",
+"	case LLD_SER_SPEED:	/* Set Communication Speed */",
+"		data = calc_brr(parm);",
+"		if(data != 0) {",
+"			ll_devcb[unit].speed = data;",
+"		} else {",
+"			err = E_PAR;",
+"		}",
+"		break;",
+"	",
+"	case LLD_SER_START:	/* Start communication */",
+"		/* Clear Interrupt */",
+"		in_b(SCI_SSR(unit));",
+"		out_b(SCI_SSR(unit), 0xC0);",
+"		/* Enable Interrupt */",
+"		EnableInt( INTNO_RXI(unit), INTPRI(unit));",
+"		EnableInt( INTNO_TXI(unit), INTPRI(unit));",
+"		EnableInt( INTNO_ERI(unit), 0);",
+"		/* Set mode & Start communication */",
+"		start_com( unit, ll_devcb[unit].mode, ll_devcb[unit].speed);",
+"		break;",
+"	",
+"	case LLD_SER_STOP:",
+"		/* Disable Interrupt */",
+"		DisableInt( INTNO_RXI(unit));",
+"		DisableInt( INTNO_TXI(unit));",
+"		DisableInt( INTNO_ERI(unit));",
+"		stop_com(unit);			// Stop communication",
+"		break;",
+"",
+"	case LLD_SER_SEND:",
+"		if((in_b( SCI_SSR(unit)) & SCI_SSR_TDRF) != 0) {",
+"			out_b(SCI_TDR(unit), (UB)parm);",
+"			err = E_OK;",
+"		} else {",
+"			err = E_BUSY;",
+"		}",
+"		break;",
+"",
+"	case LLD_SER_BREAK:	/* Send Break */",
+"		err = E_NOSPT;",
+"		break;",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_ser_llinit( T_SER_DCB *p_dcb)",
+"{",
+"	T_DINT		dint;",
+"	UW		unit;",
+"	ER		err;",
+"",
+"	unit = p_dcb->unit;",
+"",
+"#if DEVCONF_SER_INIT_MSTP		// Initialize module stop",
+"	const UINT	mstp_bit[] = { 31, 30, 29, 28, 27, 26, 25, 24, 27, 26, 25, 24, 4};",
+"	UINT		sts;",
+"	UW		*mstp;",
+"",
+"	if(unit >= 8 && unit <= 11) {	// SCI8-11",
+"		mstp = (UB*)MSTPCRC;",
+"	} else { 			// SCI0-7, 12",
+"		mstp = (UB*)MSTPCRB;",
+"	}",
+"",
+"	if(in_w(mstp) & (1<<mstp_bit[unit])) {",
+"		DI(sts);",
+"		out_h(SYSTEM_PRCR, 0xA502);	/* Disable Register Protect */",
+"		*mstp &= ~(1<<mstp_bit[unit]);	/* Release module stop */",
+"		out_h(SYSTEM_PRCR, 0xA500);	/* Enable Register protect */",
+"		EI(sts);",
+"	}",
+"#endif		/* DEVCONF_SER_INIT_MSTP */",
+"",
+"	stop_com(unit);					/* Stop communication */",
+"	out_b(SCI_SPMR(unit), SCI_SPMR_INI);	/* Set Hard flow control */",
+"",
+"	/* Device Control block Initizlize */",
+"	p_dcb->intno_rcv = INTNO_SCI0_RXI + (unit<<2);",
+"	p_dcb->intno_snd = INTNO_SCI0_TXI + (unit<<2);",
+"",
+"	/* Interrupt handler definition */",
+"	dint.intatr	= TA_HLNG;",
+"	dint.inthdr	= sci_eri_inthdr;",
+"	err = tk_def_int(INTNO_ERI(unit), &dint);",
+"	dint.inthdr	= sci_rxi_inthdr;",
+"	err = tk_def_int(INTNO_RXI(unit), &dint);	",
+"	dint.inthdr	= sci_txi_inthdr;",
+"	err = tk_def_int(INTNO_TXI(unit), &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_SER_ENABLE */",
+"#endif		/* CPU_RX65N */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	ser_sysdep.h",
+" *	Serial communication device driver",
+" *	System-dependent definition for RX65N",
+" */",
+"",
+"#ifndef	__DEV_SER_RX65N_H__",
+"#define	__DEV_SER_RX65N_H__",
+"",
+"#define	DEV_SER_UNITNM		(13)	/* Number of devive channels */",
+"",
+"/*",
+" * UART registers",
+" */",
+"",
+"/* Base address for each channel */",
+"#define	SCI0_BASE		(0x0008A000)",
+"#define	SCI1_BASE		(0x0008A020)",
+"#define	SCI2_BASE		(0x0008A040)",
+"#define	SCI3_BASE		(0x0008A060)",
+"#define	SCI4_BASE		(0x0008A080)",
+"#define	SCI5_BASE		(0x0008A0A0)",
+"#define	SCI6_BASE		(0x0008A0C0)",
+"#define	SCI7_BASE		(0x0008A0E0)",
+"#define	SCI8_BASE		(0x0008A100)",
+"#define	SCI9_BASE		(0x0008A120)",
+"#define SCI10_BASE		(0x000D0040)",
+"#define SCI11_BASE		(0x000D0060)",
+"#define SCI12_BASE		(0x0008B300)",
+"",
+"/* Register offset */",
+"#define	SCIx_SMR		(0x00000000)	// Serial mode register",
+"#define	SCIx_BRR		(0x00000001)	// Bit rate register",
+"#define	SCIx_SCR		(0x00000002)	// Serial control register",
+"#define	SCIx_SSR		(0x00000004)	// Serial status register",
+"#define	SCIx_TDR		(0x00000003)	// Transmit data register",
+"#define	SCIx_RDR		(0x00000005)	// Receive data register",
+"#define	SCIx_SCMR		(0x00000006)	// Smart card mode register",
+"#define	SCIx_SEMR		(0x00000007)	// Serial extended mode register",
+"#define	SCIx_SPMR		(0x0000000D)	// SPI mode register",
+"",
+"/*  SMR: Serial mode register */",
+"#define	SCI_SMR_PCLK_01		(0x00)		// Clock select bit",
+"#define	SCI_SMR_PCLK_04		(0x01)",
+"#define	SCI_SMR_PCLK_16		(0x02)",
+"#define	SCI_SMR_PCLK_64		(0x03)",
+"#define	SCI_SMR_CHR		(0x40)		// Character length bit",
+"",
+"/* SCR: Serial control register */",
+"#define	SCI_SCR_TEIE		(0x04)		// Transmit end interrupt enable",
+"#define	SCI_SCR_RE		(0x10)		// Receive enable",
+"#define	SCI_SCR_TE		(0x20)		// Transmit enable",
+"#define	SCI_SCR_RIE		(0x40)		// Receive interrupt enable",
+"#define	SCI_SCR_TIE		(0x80)		// Transmit end interrupt enable",
+"",
+"#define	SCI_SCR_INI		(0x00)		// SCR initial value",
+"#define	SCI_SCR_DEBUG		(0x32)		// SCR initial value when using debug",
+"",
+"/* SSR: Serial status register */",
+"#define	SCI_SSR_TEND		(0x04)		// Transmit end",
+"#define	SCI_SSR_PER		(0x08)		// Parity error",
+"#define	SCI_SSR_FER		(0x10)		// Framing error",
+"#define	SCI_SSR_ORER		(0x20)		// Overrun error",
+"#define SCI_SSR_RDRF		(0x40)		// Receive data full",
+"#define SCI_SSR_TDRF		(0x80)		// Transmit data empty",
+"",
+"/* SEMR: Serial extended mode register */",
+"#define SCI_SEMR_ABCS		(0x10)		// Clock select */",
+"",
+"/* SPMR: SPI mode register */",
+"#define	SCI_SPMR_INI		(0x00)		// SPMR initial value",
+"",
+"/*",
+" *UART interrupt number",
+" */",
+"#define	INTNO_SCI0_RXI		58		// Receive data full interrupt",
+"#define	INTNO_SCI0_TXI		59		// Transmit data empty interrupt",
+"",
+"#define	INTNO_SCI1_RXI		60		// Receive data full interrupt",
+"#define	INTNO_SCI1_TXI		61		// Transmit data empty interrupt",
+"",
+"#define	INTNO_SCI2_RXI		62		// Receive data full interrupt",
+"#define	INTNO_SCI2_TXI		63		// Transmit data empty interrupt",
+"",
+"#define	INTNO_SCI3_RXI		58		// Receive data full interrupt",
+"#define	INTNO_SCI3_TXI		59		// Transmit data empty interrupt",
+"",
+"#define	INTNO_SCI4_RXI		82		// Receive data full interrupt",
+"#define	INTNO_SCI4_TXI		83		// Transmit data empty interrupt",
+"",
+"#define	INTNO_SCI5_RXI		84		// Receive data full interrupt",
+"#define	INTNO_SCI5_TXI		85		// Transmit data empty interrupt",
+"",
+"#define	INTNO_SCI6_RXI		86		// Receive data full interrupt",
+"#define	INTNO_SCI6_TXI		87		// Transmit data empty interrupt",
+"",
+"#define	INTNO_SCI7_RXI		98		// Receive data full interrupt",
+"#define	INTNO_SCI7_TXI		99		// Transmit data empty interrupt",
+"",
+"#define	INTNO_SCI8_RXI		100		// Receive data full interrupt",
+"#define	INTNO_SCI8_TXI		101		// Transmit data empty interrupt",
+"",
+"#define	INTNO_SCI9_RXI		102		// Receive data full interrupt",
+"#define	INTNO_SCI9_TXI		103		// Transmit data empty interrupt",
+"",
+"#define	INTNO_SCI10_RXI		104		// Receive data full interrupt",
+"#define	INTNO_SCI10_TXI		105		// Transmit data empty interrupt",
+"",
+"#define	INTNO_SCI11_RXI		114		// Receive data full interrupt",
+"#define	INTNO_SCI11_TXI		115		// Transmit data empty interrupt",
+"",
+"#define	INTNO_SCI12_RXI		116		// Receive data full interrupt",
+"#define	INTNO_SCI12_TXI		117		// Transmit data empty interrupt",
+"",
+"/* Receive error interrupt (Group Interrupt) */",
+"#define INTNO_SCI0_ERI		(INTNO_GROUP_BL0+1)",
+"#define INTNO_SCI1_ERI		(INTNO_GROUP_BL0+3)",
+"#define INTNO_SCI2_ERI		(INTNO_GROUP_BL0+5)",
+"#define INTNO_SCI3_ERI		(INTNO_GROUP_BL0+7)",
+"#define INTNO_SCI4_ERI		(INTNO_GROUP_BL0+9)",
+"#define INTNO_SCI5_ERI		(INTNO_GROUP_BL0+11)",
+"#define INTNO_SCI6_ERI		(INTNO_GROUP_BL0+13)",
+"#define INTNO_SCI7_ERI		(INTNO_GROUP_BL0+15)",
+"#define INTNO_SCI8_ERI		(INTNO_GROUP_BL1+25)",
+"#define INTNO_SCI9_ERI		(INTNO_GROUP_BL1+27)",
+"#define INTNO_SCI10_ERI		(INTNO_GROUP_AL0+9)",
+"#define INTNO_SCI11_ERI		(INTNO_GROUP_AL0+13)",
+"#define INTNO_SCI12_ERI		(INTNO_GROUP_BL0+17)",
+"",
+"#endif		/* __DEV_SER_RX65N_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	ser_cnf_sysdep.h ",
+" *	Serial Device configuration file",
+" *		for RZ/A2M",
+" */",
+"#ifndef	__DEV_SER_CNF_RZA2M_H__",
+"#define	__DEV_SER_CNF_RZA2M_H__",
+"",
+"/* Device initialization */",
+"#define DEVCONF_SER_INIT_MSTP	FALSE		// Initialize module stop",
+"",
+"/* Interrupt priority */",
+"#define	DEVCNF_SER0_INTPRI	5",
+"#define	DEVCNF_SER1_INTPRI	5",
+"#define	DEVCNF_SER2_INTPRI	5",
+"#define	DEVCNF_SER3_INTPRI	5",
+"#define	DEVCNF_SER4_INTPRI	5",
+"",
+"/* Debug option",
+" *	Specify the device used by T-Monitor.",
+" *	  0 - 4: \"sera\" - \"sere\"",
+" *	  other : T-Monitor does not use serial devices",
+" */",
+"#if USE_TMONITOR",
+"#define	DEVCNF_SER_DBGUN	4		// Used by T-Monitor",
+"#else ",
+"#define	DEVCNF_SER_DBGUN	-1		// T-Monitor not executed",
+"#endif",
+"",
+"#endif		/* __DEV_SER_CNF_RZA2M_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	ser_mode_sysdep.h",
+" *	Serial communication device driver",
+" *	Communication mode definition for RZ/A2M",
+" */",
+"",
+"#ifndef	__DEV_SER_MODE_RZA2M_H__",
+"#define	__DEV_SER_MODE_RZA2M_H__",
+"",
+"#define	DEV_SER_MODE_7BIT	(0x00000040)	/* Word length 7bit */",
+"#define	DEV_SER_MODE_8BIT	(0x00000000)	/* Word length 8bit */",
+"",
+"#define	DEV_SER_MODE_1STOP	(0x00000000)	/* Stop-bit 1bit */",
+"#define	DEV_SER_MODE_2STOP	(0x00000008)	/* Stop-bit 2bit */",
+"",
+"#define DEV_SER_MODE_PODD	(0x00000030)	/* parity Odd */",
+"#define DEV_SER_MODE_PEVEN	(0x00000020)	/* parity Even */",
+"#define DEV_SER_MODE_PNON	(0x00000000)	/* parity None */",
+"",
+"#define	DEV_SER_MODE_CTSEN	(0x00008000)	/* CTS Hard flow control enable */",
+"#define	DEV_SER_MODE_RTSEN	(0x00004000)	/* RTS Hard flow control enable */",
+"",
+"/* Communication Error */",
+"#define	DEV_SER_ERR_PE		(1<<2)	/* Parity Error */",
+"#define	DEV_SER_ERR_FE		(1<<3)	/* Framing Error */",
+"#define	DEV_SER_ERR_OE		(1<<0)	/* Overrun Error */",
+"",
+"",
+"#endif /* __DEV_SER_MODE_RZA2M_H__ */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RZA2M",
+"",
+"#include <tk/tkernel.h>",
+"#include <tm/tmonitor.h>",
+"#include \"../../ser.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_SER_ENABLE",
+"",
+"/*",
+" *	ser_rza2m.c",
+" *	Serial communication device driver",
+" *	System dependent processing for RZ/A2M",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+" */",
+"const LOCAL UW ba[DEV_SER_UNITNM] = ",
+"	{ SCI0_BASE, SCI1_BASE, SCI2_BASE, SCI3_BASE, SCI4_BASE};",
+"",
+"/*----------------------------------------------------------------------",
+" * Device data",
+"*/",
+"const LOCAL struct {",
+"	UINT	intno;		// Interrupt number",
+"	PRI	intpri;		// Interrupt priority",
+"} ll_devdat[DEV_SER_UNITNM] = {",
+"	{.intno = INTNO_SCI0_ERI, DEVCNF_SER0_INTPRI},",
+"	{.intno = INTNO_SCI1_ERI, DEVCNF_SER1_INTPRI},",
+"	{.intno = INTNO_SCI2_ERI, DEVCNF_SER2_INTPRI},",
+"	{.intno = INTNO_SCI3_ERI, DEVCNF_SER3_INTPRI},",
+"	{.intno = INTNO_SCI4_ERI, DEVCNF_SER4_INTPRI},",
+"};",
+"",
+"#define	INTNO_BRI(n)	(ll_devdat[n].intno)",
+"#define	INTNO_ERI(n)	(ll_devdat[n].intno)",
+"#define INTNO_RXI(n)	(ll_devdat[n].intno+1)",
+"#define INTNO_TXI(n)	(ll_devdat[n].intno+2)",
+"#define INTNO_TEI(n)	(ll_devdat[n].intno+3)",
+"#define INTNO_DRI(n)	(ll_devdat[n].intno+3)",
+"",
+"#define	INT_PRI(n)	(ll_devdat[n].intpri)",
+"",
+"/*----------------------------------------------------------------------",
+" * Device control data",
+"*/",
+"typedef struct {",
+"	UW	mode;		// Serial mode",
+"	UW	speed;		// Spped (bit rate)",
+"} T_DEV_SER_LLDEVCB;",
+"",
+"LOCAL T_DEV_SER_LLDEVCB		ll_devcb[DEV_SER_UNITNM];",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"",
+"/*",
+" * TXI: Transmit data empty interrupt",
+" */",
+"void sci_txi_inthdr( UINT intno)",
+"{",
+"	UW	unit, data;",
+"	UH	reg;",
+"	UINT	inttxi = INTNO_SCI0_TXI;",
+"",
+"	ClearInt(intno);",
+"",
+"	for(unit = 0; unit < DEV_SER_UNITNM; unit++, inttxi+=6) {",
+"		if(intno == inttxi) break;",
+"	}",
+"",
+"	if(unit < DEV_SER_UNITNM ) {",
+"		if( dev_ser_get_snddat(unit, &data)) {",
+"			out_b(ba[unit] + SCI_FTDR, (UB)data);",
+"		} else {",
+"			reg = in_h(ba[unit] + SCI_SCR);",
+"			out_h(ba[unit] + SCI_SCR, reg & ~SCI_SCR_TIE);",
+"		}",
+"	}",
+"",
+"	EndOfInt(intno);",
+"}",
+"",
+"/*",
+" * RXI: Receive data full interrupt",
+" */",
+"void sci_rxi_inthdr( UINT intno)",
+"{",
+"	UW	unit, data;",
+"	UH	reg;",
+"	UINT	intrxi = INTNO_SCI0_RXI;",
+"",
+"	ClearInt(intno);",
+"",
+"	for(unit = 0; unit < DEV_SER_UNITNM; unit++, intrxi+=6) {",
+"		if(intno == intrxi) break;",
+"	}",
+"",
+"	if(unit < DEV_SER_UNITNM ) {",
+"		data = in_b(ba[unit] + SCI_FRDR);",
+"",
+"		/* Clear DR & RDF bit */",
+"		reg = in_h(ba[unit] + SCI_FSR);",
+"		out_h(ba[unit] + SCI_FSR, reg & ~(SCI_FSR_DR|SCI_FSR_RDF));",
+"",
+"		dev_ser_notify_rcv(unit, data);	/* Notify the main process of data reception. */	",
+"	}",
+"",
+"	EndOfInt(intno);",
+"}",
+"",
+"/*",
+" * ERI: Receive error interrupt",
+" */",
+"void sci_eri_inthdr( UINT intno)",
+"{",
+"	UW	unit, err;",
+"	UH	reg;",
+"	UINT	interi = INTNO_SCI0_ERI;",
+"",
+"	ClearInt(intno);",
+"",
+"	for(unit = 0; unit < DEV_SER_UNITNM; unit++, interi+=6) {",
+"		if(intno == interi) break;",
+"	}",
+"",
+"	if(unit < DEV_SER_UNITNM ) {",
+"		reg = in_h(ba[unit] + SCI_FSR);",
+"		out_h(ba[unit] + SCI_FSR, reg & ~SCI_FSR_ER);	/* Clear receive error */",
+"		err = (UW)(reg & (DEV_SER_ERR_PE | DEV_SER_ERR_FE));",
+"",
+"		reg = in_h(ba[unit] + SCI_LSR);",
+"		out_h(ba[unit] + SCI_FSR, reg & ~SCI_LSR_ORER);	/* Clear receive error */",
+"		err |= (UW)(reg & DEV_SER_ERR_OE);",
+"",
+"		dev_ser_notify_err(unit, err);	/* Notify error to main process */",
+"	}",
+"",
+"	EndOfInt(intno);",
+"}",
+"",
+"",
+"/*----------------------------------------------------------------------",
+" * Set mode & Start communication",
+" */",
+"LOCAL void start_com(UW unit, UW mode, UW speed)",
+"{",
+"	UH	reg;",
+"",
+"	/* Set communication mode & Speed */",
+"	out_h( ba[unit] + SCI_SMR, (UH)((mode & 0x00000078)|(speed>>8 & 0x00000003)));",
+"",
+"	reg = in_h( ba[unit] + SCI_SEMR);",
+"	out_h( ba[unit] + SCI_SEMR, (UH)((reg & ~SCI_SEMR_ABCS)|(speed & SCI_SEMR_ABCS)));",
+"",
+"	out_b( ba[unit] + SCI_BRR, (UB)(speed >>16));",
+"",
+"	/* Clear DR & RDF bit */",
+"	reg = in_h(ba[unit] + SCI_FSR);",
+"	out_h(ba[unit] + SCI_FSR, reg & ~(SCI_FSR_DR|SCI_FSR_RDF));",
+"",
+"	/* SCR.TE,RE,RIE,REIE<- 1 */",
+"	out_h( ba[unit] + SCI_SCR, ",
+"		(SCI_SCR_RE | SCI_SCR_TE | SCI_SCR_RIE | SCI_SCR_REIE));",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Stop communication",
+" */",
+"LOCAL void stop_com(UW unit)",
+"{",
+"	if(unit != DEVCNF_SER_DBGUN) {",
+"		out_h(ba[unit] + SCI_SCR, SCI_SCR_INI);",
+"	} else {	/* Used by T-Monitor */",
+"		out_h(ba[unit] + SCI_SCR, SCI_SCR_DEBUG);",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Calculate baud rate",
+" */",
+"typedef	struct {",
+"	UW	baud;	// baud tate",
+"	UW	val;	// set value",
+"} T_BPS_VAL;",
+"",
+"LOCAL const T_BPS_VAL	bps_tbl[] = {",
+"	/* Val : brr<<16 | cks << 8 | abcs */",
+"	/* P1 clock=66.67MHz */",
+"	{ 500000,	(  3<<16) + (0<<8) + 0 },",
+"	{ 230400,	(  8<<16) + (0<<8) + 0 },",
+"	{ 115200,	( 17<<16) + (0<<8) + 0 },",
+"	{  38400,	( 53<<16) + (0<<8) + 0 },",
+"	{  31250,	( 65<<16) + (0<<8) + 0 },",
+"	{  28800,	( 71<<16) + (0<<8) + 0 },",
+"	{  19200,	(106<<16) + (0<<8) + 0 },",
+"	{  14400,	(142<<16) + (0<<8) + 0 },",
+"	{   9600,	(214<<16) + (0<<8) + 0 },",
+"	{   4800,	(106<<16) + (1<<8) + 0 },",
+"	{   2400,	(214<<16) + (1<<8) + 0 },",
+"	{   1200,	(106<<16) + (2<<8) + 0 },",
+"	{    600,	(214<<16) + (2<<8) + 0 },",
+"	{    300,	(106<<16) + (3<<8) + 0 },",
+"	{    150,	(214<<16) + (3<<8) + 0 },",
+"	{      0,	0 }",
+"};",
+"",
+"LOCAL UW calc_brr(UW baud)",
+"{",
+"	const T_BPS_VAL		*p_tbl;",
+"",
+"	for(p_tbl = bps_tbl; p_tbl->baud != 0; p_tbl++) {",
+"		if(p_tbl->baud == baud) break;",
+"	}",
+"",
+"	return (p_tbl->baud != 0)? p_tbl->val: 0;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT ER dev_ser_llctl( UW unit, INT cmd, UW parm)",
+"{",
+"	UW	data;",
+"	UH	reg;",
+"	ER	err	= E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_SER_MODE:	/* Set Communication mode */",
+"		ll_devcb[unit].mode = parm;",
+"		break;",
+"	",
+"	case LLD_SER_SPEED:	/* Set Communication Speed */",
+"		data = calc_brr(parm);",
+"		if(data != 0) {",
+"			ll_devcb[unit].speed = data;",
+"		} else {",
+"			err = E_PAR;",
+"		}",
+"		break;",
+"	",
+"	case LLD_SER_START:	/* Start communication */",
+"		/* FIFO initialize */",
+"		out_h(ba[unit] + SCI_FCR, SCI_FCR_RFRST | SCI_FCR_TFRST);	/* FIFO Reset */",
+"		out_h(ba[unit] + SCI_FCR, SCI_FCR_INI);				/* Set RSTRG */",
+"		out_h(ba[unit] + SCI_FTCR, SCI_FTCR_INI);			/* Set FIFO trigger */",
+"",
+"		/* Initialize status & Clear Error bits */",
+"		reg = in_h(ba[unit] + SCI_FSR);",
+"		out_h(ba[unit] + SCI_FSR, 0);			/* Initialize FSR */",
+"		reg = in_h(ba[unit] + SCI_LSR);",
+"		out_h(ba[unit] + SCI_LSR, 0);			/* Initialize LSR */",
+"",
+"		/* Clear Interrupt */",
+"		ClearInt( INTNO_ERI(unit));",
+"		ClearInt( INTNO_RXI(unit));",
+"		ClearInt( INTNO_TXI(unit));",
+"",
+"		/* Enable Interrupt */",
+"		EnableInt( INTNO_ERI(unit), INT_PRI(unit));",
+"		EnableInt( INTNO_RXI(unit), INT_PRI(unit));",
+"		EnableInt( INTNO_TXI(unit), INT_PRI(unit));",
+"	",
+"		/* Set mode & Start communication */",
+"		start_com( unit, ll_devcb[unit].mode, ll_devcb[unit].speed);",
+"		break;",
+"	",
+"	case LLD_SER_STOP:",
+"		/* Disable Interrupt */",
+"		DisableInt( INTNO_ERI(unit));",
+"		DisableInt( INTNO_RXI(unit));",
+"		DisableInt( INTNO_TXI(unit));",
+"		stop_com(unit);			// Stop communication",
+"		break;",
+"",
+"	case LLD_SER_SEND:",
+"		reg = in_h( ba[unit] + SCI_FDR);",
+"		if((reg>>8) < 0x0010) {",
+"			out_b(ba[unit] + SCI_FTDR, (UB)parm);",
+"			reg = in_h(ba[unit] + SCI_SCR);",
+"			out_h(ba[unit] + SCI_SCR, reg | SCI_SCR_TIE);",
+"			err = E_OK;",
+"		} else {",
+"			err = E_BUSY;",
+"		}",
+"		break;",
+"",
+"	case LLD_SER_BREAK:	/* Send Break */",
+"		err = E_NOSPT;",
+"		break;",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_ser_llinit( T_SER_DCB *p_dcb)",
+"{",
+"	T_DINT		dint;",
+"	UW		unit;",
+"	ER		err;",
+"",
+"	unit = p_dcb->unit;",
+"",
+"#if DEVCONF_SER_INIT_MSTP		// Initialize module stop",
+"	UB	stbc;",
+"",
+"	stbc = in_b(CPG_STBCR1);",
+"	out_b(CPG_STBCR1, stbc & ~(1<<(7-unit)));",
+"	stbc = in_b(CPG_STBCR1);	// dummy read",
+"	",
+"#endif		/* DEVCONF_SER_INIT_MSTP */",
+"",
+"	stop_com(unit);					/* Stop communication */",
+"	out_h(ba[unit] + SCI_SPTR, SCI_SPTR_INI);	/* Serial port setting */",
+"	out_h( ba[unit] + SCI_SEMR, 0);",
+"",
+"",
+"	/* Device Control block Initizlize */",
+"	p_dcb->intno_rcv = INTNO_RXI(unit);",
+"	p_dcb->intno_snd = INTNO_TXI(unit);",
+"	p_dcb->int_pri = INT_PRI(unit);",
+"",
+"	/* Interrupt handler definition */",
+"	dint.intatr	= TA_HLNG;",
+"	dint.inthdr	= sci_eri_inthdr;",
+"	err = tk_def_int(INTNO_ERI(unit), &dint);",
+"	dint.inthdr	= sci_rxi_inthdr;",
+"	err = tk_def_int(INTNO_RXI(unit), &dint);	",
+"	dint.inthdr	= sci_txi_inthdr;",
+"	err = tk_def_int(INTNO_TXI(unit), &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_SER_ENABLE */",
+"#endif		/* CPU_RZA2M */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	ser_sysdep.h",
+" *	Serial communication device driver",
+" *	System-dependent definition for RZ/A2M",
+" */",
+"",
+"#ifndef	__DEV_SER_RZA2M_H__",
+"#define	__DEV_SER_RZA2M_H__",
+"",
+"#define	DEV_SER_UNITNM		(5)	/* Number of devive channels */",
+"",
+"/*",
+" * UART registers",
+" */",
+"",
+"/* Base address for each channel */",
+"#define	SCI0_BASE		(0xE8007000)",
+"#define	SCI1_BASE		(0xE8007800)",
+"#define	SCI2_BASE		(0xE8008000)",
+"#define	SCI3_BASE		(0xE8008800)",
+"#define	SCI4_BASE		(0xE8009000)",
+"",
+"/* Register offset */",
+"#define	SCI_SMR			(0x00000000)	// Serial mode register",
+"#define	SCI_BRR			(0x00000002)	// Bit rate register",
+"#define	SCI_MDDR		(0x00000002)	// Modulation duty register",
+"#define	SCI_SCR			(0x00000004)	// Serial control register",
+"#define	SCI_FTDR		(0x00000006)	// Transmit FIFO data register",
+"#define	SCI_FSR			(0x00000008)	// Serial status register",
+"#define	SCI_FRDR		(0x0000000A)	// Receive FIFO data register",
+"#define	SCI_FCR			(0x0000000C)	// FIFO control register",
+"#define	SCI_FDR			(0x0000000E)	// FIFO data number register",
+"#define	SCI_SPTR		(0x00000010)	// Serial port register",
+"#define	SCI_LSR			(0x00000012)	// Line status register",
+"#define	SCI_SEMR		(0x00000014)	// Serial extended mode register",
+"#define	SCI_FTCR		(0x00000016)	// FIFO trigger control",
+"",
+"/*  SMR: Serial mode register */",
+"#define	SCI_SMR_CKS		(0x0003)	// Clock select bit",
+"#define	SCI_SMR_CHR		(0x0040)	// Character length bit",
+"",
+"/* SCR: Serial control register */",
+"#define	SCI_SCR_TEIE		(0x0004)	// Transmit end interrupt enable",
+"#define	SCI_SCR_REIE		(0x0008)	// Receive error interrupt enable",
+"#define	SCI_SCR_RE		(0x0010)	// Receive enable",
+"#define	SCI_SCR_TE		(0x0020)	// Transmit enable",
+"#define	SCI_SCR_RIE		(0x0040)	// Receive interrupt enable",
+"#define	SCI_SCR_TIE		(0x0080)	// Transmit interrupt enable",
+"",
+"#define	SCI_SCR_INI		(0x0000)	// SCR initial value",
+"#define	SCI_SCR_DEBUG		(0x0030)	// SCR initial value when using debug",
+"",
+"/* FSR: Serial status register */",
+"#define SCI_FSR_DR		(0x0001)	// Receive data ready",
+"#define SCI_FSR_RDF		(0x0002)	// Receive FIFO data full",
+"#define	SCI_FSR_PER		(0x0004)	// Parity error",
+"#define	SCI_FSR_FER		(0x0008)	// Framing error",
+"#define	SCI_FSR_BRK		(0x0010)	// Break detection",
+"#define SCI_FSR_TDFE		(0x0020)	// Transmit FIFO data empty",
+"#define	SCI_FSR_TEND		(0x0040)	// Transmit end",
+"#define	SCI_FSR_ER		(0x0080)	// Receive error",
+"",
+"/* SPTR: Serial port register */",
+"#define	SCI_SPTR_INI		(0x0003)	// SPTR  initial value",
+"",
+"/* LSR: Line status register */",
+"#define	SCI_LSR_ORER		(0x0001)	// Overrun error",
+"",
+"/* SEMR: Serial extended mode register */",
+"#define SCI_SEMR_ABCS		(0x01)		// Clock select */",
+"",
+"/* FCR: FIFO control register */",
+"#define	SCI_FCR_RFRST		(0x0002)	// Receive FIFO Reset",
+"#define	SCI_FCR_TFRST		(0x0004)	// Transmit FIFO Reset",
+"",
+"#define	SCI_FCR_INI		(0x0600)	// FCR initial value",
+"",
+"/* FTCR: FIFO trigger control*/",
+"#define	SCI_FTCR_INI		(0x8186)	// SPTR initial value (RTRGS=1, RFTC=0, TTRGS=1, TFTC=6)",
+"",
+"/*",
+" *UART interrupt number",
+" */",
+"#define	INTNO_SCI0_ERI		297		// Receive error interrupt",
+"#define	INTNO_SCI0_RXI		298		// Receive data full interrupt",
+"#define	INTNO_SCI0_TXI		299		// Transmit data empty interrupt",
+"#define	INTNO_SCI0_TEI		300		// Transmit end interrupt",
+"",
+"#define	INTNO_SCI1_ERI		303		// Receive error interrupt",
+"#define	INTNO_SCI1_RXI		304		// Receive data full interrupt",
+"#define	INTNO_SCI1_TXI		305		// Transmit data empty interrupt",
+"#define	INTNO_SCI1_TEI		306		// Transmit end interrupt",
+"",
+"#define	INTNO_SCI2_ERI		309		// Receive error interrupt",
+"#define	INTNO_SCI2_RXI		310		// Receive data full interrupt",
+"#define	INTNO_SCI2_TXI		311		// Transmit data empty interrupt",
+"#define	INTNO_SCI2_TEI		312		// Transmit end interrupt",
+"",
+"#define	INTNO_SCI3_ERI		315		// Receive error interrupt",
+"#define	INTNO_SCI3_RXI		316		// Receive data full interrupt",
+"#define	INTNO_SCI3_TXI		317		// Transmit data empty interrupt",
+"#define	INTNO_SCI3_TEI		318		// Transmit end interrupt",
+"",
+"#define	INTNO_SCI4_ERI		321		// Receive error interrupt",
+"#define	INTNO_SCI4_RXI		322		// Receive data full interrupt",
+"#define	INTNO_SCI4_TXI		323		// Transmit data empty interrupt",
+"#define	INTNO_SCI4_TEI		324		// Transmit end interrupt",
+"",
+"",
+"#endif		/* __DEV_SER_RZA2M_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	ser_cnf_sysdep.h ",
+" *	Serial Device configuration file",
+" *		for STM32H7",
+" */",
+"#ifndef	__DEV_SER_CNF_STM32H7_H__",
+"#define	__DEV_SER_CNF_STM32H7_H__",
+"",
+"/* Device initialization */",
+"#define DEVCONF_SER_INIT_MCLK	TRUE		// Initialize module clock",
+"#define DEVCNF_USARTxSEL_INIT	0x00000000	// All UART clocks are PCLK (bit 0-5)",
+"",
+"/* Device control data */",
+"",
+"// Interrupt priority",
+"#define	DEVCNF_USART1_INTPRI	5",
+"#define	DEVCNF_USART2_INTPRI	5",
+"#define	DEVCNF_USART3_INTPRI	5",
+"#define	DEVCNF_UART4_INTPRI	5",
+"#define	DEVCNF_UART5_INTPRI	5",
+"#define	DEVCNF_USART6_INTPRI	5",
+"#define	DEVCNF_UART7_INTPRI	5",
+"#define	DEVCNF_UART8_INTPRI	5",
+"#define	DEVCNF_UART9_INTPRI	5",
+"#define	DEVCNF_USART10_INTPRI	5",
+"",
+"/* Debug option",
+" *	Specify the device used by T-Monitor.",
+" *	  -1 : T-Monitor does not use serial devices",
+" */",
+"#if USE_TMONITOR",
+"#define	DEVCNF_SER_DBGUN	2		// Used by T-Monitor",
+"#else ",
+"#define	DEVCNF_SER_DBGUN	-1		// T-Monitor not executed",
+"#endif",
+"",
+"#endif		/* __DEV_SER_CNF_STM32H7_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	ser_mode_stm32h7.h",
+" *	Serial communication device driver",
+" *	Communication mode definition for STM32H7",
+" */",
+"",
+"#ifndef	__DEV_SER_MODE_STM32H7_H__",
+"#define	__DEV_SER_MODE_STM32H7_H__",
+"",
+"#define	DEV_SER_MODE_7BIT	(0x10000000)	/* Word length 7bit */",
+"#define	DEV_SER_MODE_8BIT	(0x00000000)	/* Word length 8bit */",
+"",
+"#define	DEV_SER_MODE_1STOP	(0x00000000)	/* Stop-bit 1bit */",
+"#define	DEV_SER_MODE_2STOP	(0x00002000)	/* Stop-bit 2bit */",
+"",
+"#define DEV_SER_MODE_PODD	(0x00000400)	/* parity Odd */",
+"#define DEV_SER_MODE_PEVEN	(0x00000600)	/* parity Even */",
+"#define DEV_SER_MODE_PNON	(0x00000000)	/* parity None */",
+"",
+"#define	DEV_SER_MODE_CTSEN	(0x00008000)	/* CTS Hard flow control enable */",
+"#define	DEV_SER_MODE_RTSEN	(0x00004000)	/* RTS Hard flow control enable */",
+"",
+"/* Communication Error */",
+"#define	DEV_SER_ERR_PE		(1<<0)	/* Parity Error */",
+"#define	DEV_SER_ERR_FE		(1<<1)	/* Framing Error */",
+"#define	DEV_SER_ERR_NF		(1<<2)	/* Start bit noise detection flag */",
+"#define	DEV_SER_ERR_OE		(1<<3)	/* Overrun Error */",
+"",
+"#endif /* __DEV_SER_MODE_STM32H7_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_STM32H7",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../ser.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_SER_ENABLE",
+"/*",
+" *	ser_stm32h7.c",
+" *	Serial communication device driver",
+" *	System dependent processing for STM32H7",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+" */",
+"const LOCAL UW ba[DEV_SER_UNITNM] = {",
+"	USART1_BASE, USART2_BASE, USART3_BASE, UART4_BASE, UART5_BASE, ",
+"	USART6_BASE,UART7_BASE, UART8_BASE, UART9_BASE, USART10_BASE",
+"};",
+"",
+"#define	USART_CR1(x)	(ba[x] + USARTx_CR1)	/* Control register 1 */",
+"#define	USART_CR2(x)	(ba[x] + USARTx_CR2)	/* Control register 2 */",
+"#define	USART_CR3(x)	(ba[x] + USARTx_CR3)	/* Control register 3 */",
+"#define	USART_BRR(x)	(ba[x] + USARTx_BRR)	/* baud rate register */",
+"#define	USART_GTPR(x)	(ba[x] + USARTx_GTPR)	/* Guard time and Priscaler register */",
+"#define	USART_RTOR(x)	(ba[x] + USARTx_RTOR)	/* Receiver timeout register */",
+"#define	USART_RQR(x)	(ba[x] + USARTx_RQR)	/* Request register */",
+"#define	USART_ISR(x)	(ba[x] + USARTx_ISR)	/* Interrupts and status register */",
+"#define	USART_ICR(x)	(ba[x] + USARTx_ICR)	/* Interrupt flag clear register */",
+"#define	USART_RDR(x)	(ba[x] + USARTx_RDR)	/* Received data register */",
+"#define	USART_TDR(x)	(ba[x] + USARTx_TDR)	/* Transmission data register */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device data",
+"*/",
+"const LOCAL struct {",
+"	UINT	intno;		// Interrupt number",
+"	PRI	intpri;		// Interrupt priority",
+"} ll_devdat[DEV_SER_UNITNM] = {",
+"	{	/* USART1 */",
+"		.intno		= INTNO_USART1,",
+"		.intpri		= DEVCNF_USART1_INTPRI,",
+"	},",
+"	{	/* USART2 */",
+"		.intno		= INTNO_USART2,",
+"		.intpri		= DEVCNF_USART2_INTPRI,",
+"	},",
+"	{	/* USART3 */",
+"		.intno		= INTNO_USART3,",
+"		.intpri		= DEVCNF_USART3_INTPRI,",
+"	},",
+"	{	/* UART4 */",
+"		.intno		= INTNO_UART4,",
+"		.intpri		= DEVCNF_UART4_INTPRI,",
+"	},",
+"	{	/* UART5 */",
+"		.intno		= INTNO_UART5,",
+"		.intpri		= DEVCNF_UART5_INTPRI,",
+"	},",
+"	{	/* USART6 */",
+"		.intno		= INTNO_USART6,",
+"		.intpri		= DEVCNF_USART6_INTPRI,",
+"	},",
+"	{	/* UART7 */",
+"		.intno		= INTNO_UART7,",
+"		.intpri		= DEVCNF_UART7_INTPRI,",
+"	},",
+"	{	/* UART8 */",
+"		.intno		= INTNO_UART8,",
+"		.intpri		= DEVCNF_UART8_INTPRI,",
+"	},",
+"	{	/* UART9 */",
+"		.intno		= INTNO_UART9,",
+"		.intpri		= DEVCNF_UART9_INTPRI,",
+"	},",
+"	{	/* USART10 */",
+"		.intno		= INTNO_USART10,",
+"		.intpri		= DEVCNF_USART10_INTPRI,",
+"	},",
+"};",
+"",
+"/*----------------------------------------------------------------------",
+" * Device low-level control data",
+"*/",
+"typedef struct {",
+"	UW	mode;		// Serial mode",
+"	UW	speed;		// Spped (bit rate)",
+"} T_DEV_SER_LLDEVCB;",
+"",
+"LOCAL T_DEV_SER_LLDEVCB		ll_devcb[DEV_SER_UNITNM];",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"void usart_inthdr( UINT intno)",
+"{",
+"	UW	data, err;",
+"	UW	isr;",
+"	W	unit;",
+"",
+"	for( unit = 0; unit < DEV_SER_UNITNM; unit++ ) {",
+"		if( ll_devdat[unit].intno == intno) break;",
+"	}",
+"	if( unit >= DEV_SER_UNITNM) return;",
+"	",
+"	isr = in_w(USART_ISR(unit));			// Get interrupt factor",
+"	out_w(USART_ICR(unit), USART_ICR_ALL);		// Clear Interrupt",
+"	ClearInt(intno);",
+"",
+"	/* Reception process */",
+"	if( isr & USART_ISR_RXNE) {",
+"		data = in_w(USART_RDR(unit));",
+"		dev_ser_notify_rcv(unit, data);	/* Notify the main process of data reception. */",
+"	}",
+"",
+"	/* Transmission process */",
+"	if( isr & USART_ISR_TXE ) {",
+"		if( dev_ser_get_snddat(unit, &data)) {",
+"			out_w(USART_TDR(unit), data);",
+"		} else {",
+"			*(_UW*)( USART_CR1(unit)) &= ~USART_CR1_TXFNFIE;	// Disable TXE interrupt",
+"		}",
+"	}",
+"",
+"	/* Error handling */",
+"	err = isr & USART_ISR_ERR;",
+"	if(err) {",
+"		dev_ser_notify_err(unit, err);	/* Notify the main process of this error. */",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Set mode & Start communication",
+" */",
+"#define	MASK_MODE_CR1	(USART_CR1_M1| USART_CR1_M0|USART_CR1_PS|USART_CR1_PCE)",
+"",
+"LOCAL void start_com(UW unit, UW mode, UW speed)",
+"{",
+"	out_w(USART_CR2(unit), mode & USART_CR2_STOP);		// Set stop-bit",
+"	out_w(USART_CR3(unit), mode & (USART_CR3_RTSE | USART_CR3_CTSE)); // Set RTS/CTS",
+"	out_w(USART_BRR(unit), speed);				// Set communication Speed",
+"",
+"	/* Set mode & Start communication */",
+"	out_w(USART_CR1(unit),",
+"		USART_CR1_RXFNEIE | USART_CR1_PEIE		// Unmask Receive & Parity error interrupt",
+"		| (mode & MASK_MODE_CR1 )			// Set word length & parity",
+"		| USART_CR1_UE | USART_CR1_RE | USART_CR1_TE	// USART enable",
+"	);",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Stop communication",
+" */",
+"LOCAL void stop_com(UW unit)",
+"{",
+"	if(unit != DEVCNF_SER_DBGUN) {",
+"		out_w(USART_CR1(unit), 0);",
+"	} else {	/* Used by T-Monitor */",
+"		out_w(USART_CR1(unit), USART_CR1_DEBUG);",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT ER dev_ser_llctl( UW unit, INT cmd, UW parm)",
+"{",
+"	ER	err	= E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_SER_MODE:	/* Set Communication mode */",
+"		ll_devcb[unit].mode = parm;",
+"		break;",
+"	",
+"	case LLD_SER_SPEED:	/* Set Communication Speed */",
+"		ll_devcb[unit].speed = ((PCLK1*1000*1000) + parm/2)/parm;",
+"		break;",
+"	",
+"	case LLD_SER_START:	/* Start communication */",
+"		out_w(USART_CR1(unit), 0);",
+"		out_w(USART_ICR(unit), USART_ICR_ALL);			// Clear interrupt",
+"		ClearInt(ll_devdat[unit].intno);",
+"		EnableInt(ll_devdat[unit].intno, ll_devdat[unit].intpri);	// Enable Interrupt",
+"		start_com( unit, ll_devcb[unit].mode, ll_devcb[unit].speed);",
+"		break;",
+"	",
+"	case LLD_SER_STOP:",
+"		DisableInt(ll_devdat[unit].intno);",
+"		stop_com(unit);",
+"		break;",
+"",
+"	case LLD_SER_SEND:",
+"		if(in_w(USART_ISR(unit)) & USART_ISR_TXE) {",
+"			out_w(USART_TDR(unit), parm);			// Set Transmission data",
+"			*(_UW*)( USART_CR1(unit)) |= USART_CR1_TXFNFIE;	// Enable TXE interrupt",
+"			err = E_OK;",
+"		} else {",
+"			err = E_BUSY;",
+"		}",
+"		break;",
+"",
+"	case LLD_SER_BREAK:	/* Send Break */",
+"		if(parm) {",
+"			out_w(USART_RQR(unit), USART_RQR_SBKRQ);",
+"		}",
+"		break;",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_ser_llinit( T_SER_DCB *p_dcb)",
+"{",
+"	const T_DINT	dint = {",
+"		.intatr	= TA_HLNG,",
+"		.inthdr	= usart_inthdr,",
+"	};",
+"	UW	unit;",
+"	ER	err;",
+"",
+"	unit = p_dcb->unit;",
+"",
+"#if DEVCONF_SER_INIT_MCLK",
+"	/* Select clock source */",
+"	out_w(RCC_D2CCIP2R, (in_w(RCC_D2CCIP2R) & ~RCC_D2CCIP2R_USARTxSEL) | DEVCNF_USARTxSEL_INIT );",
+"",
+"	/* Enable module clock */",
+"	switch(unit) {",
+"	case 0:	// USART1",
+"		*(_UW*)RCC_APB2ENR |= RCC_APB2ENR_USART1EN;",
+"		break;",
+"	case 1:	// USART2",
+"		*(_UW*)RCC_APB1LENR |= RCC_APB1LENR_USART2EN;",
+"		break;",
+"	case 2:	// USART3",
+"		*(_UW*)RCC_APB1LENR |= RCC_APB1LENR_USART3EN;",
+"		break;",
+"	case 3:	// UART4",
+"		*(_UW*)RCC_APB1LENR |= RCC_APB1LENR_UART4EN;",
+"		break;",
+"	case 4:	// UART5",
+"		*(_UW*)RCC_APB1LENR |= RCC_APB1LENR_UART5EN;",
+"		break;",
+"	case 5:	// USART6",
+"		*(_UW*)RCC_APB2ENR |= RCC_APB2ENR_USART6EN;",
+"		break;",
+"	case 6:	// UART7",
+"		*(_UW*)RCC_APB1LENR |= RCC_APB1LENR_UART7EN;",
+"		break;",
+"	case 7:	// UART8",
+"		*(_UW*)RCC_APB1LENR |= RCC_APB1LENR_UART8EN;",
+"		break;",
+"	case 8:	// UART9",
+"		*(_UW*)RCC_APB2ENR |= RCC_APB2ENR_UART9EN;",
+"		break;",
+"	case 9:	// USART10",
+"		break;",
+"		*(_UW*)RCC_APB2ENR |= RCC_APB2ENR_USART10EN;",
+"	}",
+"#endif",
+"",
+"	/* USART device initialize (Disable USART & Disable all interrupt) */",
+"	stop_com(unit);",
+"",
+"	/* Initizlize Device Control block */",
+"	p_dcb->intno_rcv = p_dcb->intno_snd = INTNO_USART1 + unit;",
+"	p_dcb->int_pri = ll_devdat[unit].intpri;",
+"",
+"	/* Interrupt handler definition */",
+"	err = tk_def_int(ll_devdat[unit].intno, &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_SER_ENABLE */",
+"#endif		/* CPU_STM32H7 */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	ser_sysdep.h",
+" *	Serial communication device driver",
+" *	System-dependent definition for STM32H7",
+" */",
+"",
+"#ifndef	__DEV_SER_STM32H7_H__",
+"#define	__DEV_SER_STM32H7_H__",
+"",
+"#define	DEV_SER_UNITNM	(10)	/* Number of devive channels */",
+"#define DEV_SER_UNIT0	(0)	/* Ch.0 - USART1 */",
+"#define DEV_SER_UNIT1	(1)	/* Ch.1 - USART2 */",
+"#define DEV_SER_UNIT2	(2)	/* Ch.2 - USART3 */",
+"#define DEV_SER_UNIT3	(3)	/* Ch.3 - UART4 */",
+"#define DEV_SER_UNIT4	(4)	/* Ch.4 - UART5 */",
+"#define DEV_SER_UNIT5	(5)	/* Ch.5 - USART6 */",
+"#define DEV_SER_UNIT6	(6)	/* Ch.6 - UART7 */",
+"#define DEV_SER_UNIT7	(7)	/* Ch.7 - UART8 */",
+"#define DEV_SER_UNIT8	(8)	/* Ch.8 - UART9 */",
+"#define DEV_SER_UNIT9	(9)	/* Ch.9 - USART10 */",
+"",
+"/*",
+" * USART registers",
+" */",
+"",
+"/* Base address for each channel */",
+"#define	USART1_BASE	(0x40011000UL)",
+"#define	USART2_BASE	(0x40004400UL)",
+"#define	USART3_BASE	(0x40004800UL)",
+"#define	UART4_BASE	(0x40004C00UL)",
+"#define	UART5_BASE	(0x40005000UL)",
+"#define	USART6_BASE	(0x40011400UL)",
+"#define	UART7_BASE	(0x40007800UL)",
+"#define	UART8_BASE	(0x40007C00UL)",
+"#define	UART9_BASE	(0x40007800UL)",
+"#define	USART10_BASE	(0x40011C00UL)",
+"",
+"/* Register offset */",
+"#define	USARTx_CR1	(0x0000)	/* Control register 1 */",
+"#define	USARTx_CR2	(0x0004)	/* Control register 2 */",
+"#define	USARTx_CR3	(0x0008)	/* Control register 3 */",
+"#define	USARTx_BRR	(0x000C)	/* baud rate register */",
+"#define	USARTx_GTPR	(0x0010)	/* Guard time and Priscaler register */",
+"#define	USARTx_RTOR	(0x0014)	/* Receiver timeout register */",
+"#define	USARTx_RQR	(0x0018)	/* Request register */",
+"#define	USARTx_ISR	(0x001C)	/* Interrupts and status register */",
+"#define	USARTx_ICR	(0x0020)	/* Interrupt flag clear register */",
+"#define	USARTx_RDR	(0x0024)	/* Received data register */",
+"#define	USARTx_TDR	(0x0028)	/* Transmission data register */",
+"#define	USARTx_PRESC	(0x002C)	/* Prescaler register */",
+"",
+"/* Register bit definition */",
+"#define	USART_CR1_UE		(1<<0)	/* USART enable */",
+"#define	USART_CR1_UESM		(1<<1)	/* USART enable in STOP mode */",
+"#define	USART_CR1_RE		(1<<2)	/* Receiver enable */",
+"#define	USART_CR1_TE		(1<<3)	/* Transmitter enable */",
+"#define	USART_CR1_IDLEIE	(1<<4)	/* IDLE interrupt enable */",
+"#define	USART_CR1_RXFNEIE	(1<<5)	/* RXFIFO not empty interrupt enable */",
+"#define	USART_CR1_TCIE		(1<<6)	/* TCOE interrupt enable */",
+"#define	USART_CR1_TXFNFIE	(1<<7)	/* TXFIFO not full interrupt enable */",
+"#define	USART_CR1_PEIE		(1<<8)	/* PE interrupt enable */",
+"#define	USART_CR1_PS		(1<<9)	/* Parity selection */",
+"#define	USART_CR1_PCE		(1<<10)	/* Parity control enable */",
+"#define	USART_CR1_WAKE		(1<<11)	/* Receive wakeup method */",
+"#define	USART_CR1_M0		(1<<12)	/* Word length 0 */",
+"#define	USART_CR1_MME		(1<<13)	/* Mute mode enable */",
+"#define	USART_CR1_CMIE		(1<<14)	/* Character match interrupt enable */",
+"#define	USART_CR1_OVER8		(1<<15)	/* Oversampling mode */",
+"#define	USART_CR1_RTOIE		(1<<26)	/* Receiver timeout interrupt enable */",
+"#define	USART_CR1_EOBIE		(1<<27)	/* End of Block interrupt enabled */",
+"#define	USART_CR1_M1		(1<<28)	/* Word length 1 */",
+"#define	USART_CR1_FIFOEN	(1<<29)	/* FIFO mode enable */",
+"#define	USART_CR1_TXFEIE	(1<<30)	/* TXFIFO empty interrupt enable */",
+"#define	USART_CR1_RXFFIE	(1<<31)	/* RXFIFO Full interrupt enable */",
+"",
+"#define	USART_CR2_STOP		(3<<12)	/* RW Stop-bit */",
+"",
+"#define	USART_CR3_RTSE		(1<<8)	/* RTS enable */",
+"#define	USART_CR3_CTSE		(1<<9)	/* CTS enable */",
+"",
+"#define	USART_RQR_SBKRQ		(1<<1)	/* Break send request */",
+"",
+"#define	USART_ISR_PE		(1<<0)	/* Parity error */",
+"#define	USART_ISR_FE		(1<<1)	/* Framing error */",
+"#define	USART_ISR_NF		(1<<2)	/* Start bit noise detection */",
+"#define	USART_ISR_ORE		(1<<3)	/* Overrun error */",
+"#define	USART_ISR_IDLE		(1<<4)	/* Idle line detection */",
+"#define	USART_ISR_RXNE		(1<<5)	/* Received data register not empty */",
+"#define	USART_ISR_TC		(1<<6)	/* Transmission completely */",
+"#define	USART_ISR_TXE		(1<<7)	/* Transmission data register empty */",
+"#define	USART_ISR_LBDF		(1<<8)	/* LIN break detection */",
+"#define	USART_ISR_CTSIF		(1<<9)	/* CTS interrupt */",
+"#define	USART_ISR_CTS		(1<<10)	/* CTS flag */",
+"#define	USART_ISR_RTOF		(1<<11)	/* Receiver timeout */",
+"#define	USART_ISR_EOBF		(1<<12)	/* End of block */",
+"#define	USART_ISR_UDR		(1<<13)	/* SPI slave underrun error flag */",
+"#define	USART_ISR_ABRE		(1<<14)	/* Automatic baud rate error */",
+"#define	USART_ISR_ABRF		(1<<15)	/* Automatic baud rate flag */",
+"#define	USART_ISR_BUSY		(1<<16)	/* Busy flag */",
+"#define	USART_ISR_CMF		(1<<17)	/* Character match flag */",
+"#define	USART_ISR_SBKF		(1<<18)	/* Break transmission flag */",
+"#define	USART_ISR_RWU		(1<<19)	/* Receiver mute mode flag */",
+"#define	USART_ISR_WUF		(1<<20)	/* Wakeup flag */",
+"#define	USART_ISR_TEACK		(1<<21)	/* Transmission ACK flag */",
+"#define	USART_ISR_REACK		(1<<22)	/* Receive ACK flag */",
+"#define	USART_ISR_ERR		(USART_ISR_PE|USART_ISR_FE|USART_ISR_NF|USART_ISR_ORE)",
+"",
+"#define	USART_ICR_PECF		(1<<0)	/* Parity error clear flag */",
+"#define	USART_ICR_FECF		(1<<1)	/* Framing error clear flag */",
+"#define	USART_ICR_NECF		(1<<2)	/* Noise detected clear flag */",
+"#define	USART_ICR_ORECF		(1<<3)	/* Overrun error clear flag */",
+"#define	USART_ICR_IDLECF	(1<<4)	/* Idle line detected clear flag */",
+"#define	USART_ICR_TXFECF	(1<<5)	/* TXFIFO empty clear flag */",
+"#define	USART_ICR_TCCF		(1<<6)	/* Transmission complete clear flag */",
+"#define	USART_ICR_TCBGTCF	(1<<7)	/* Transmission complete before Guard time clear flag */",
+"#define	USART_ICR_LBDCF		(1<<8)	/* LIN break detection clear flag */",
+"#define	USART_ICR_CTSCF		(1<<9)	/* CTS clear flag */",
+"#define	USART_ICR_RTOCF		(1<<11)	/* Receiver timeout clear flag */",
+"#define	USART_ICR_EOBCF		(1<<12)	/* End of block clear flag */",
+"#define	USART_ICR_UDRCF		(1<<13)	/* SPI slave underrun clear flag */",
+"#define	USART_ICR_CMCF		(1<<17)	/* Character match clear flag */",
+"#define	USART_ICR_WUCF		(1<<20)	/* Wakeup from low-power mode clear flag */",
+"#define	USART_ICR_ALL		(0x00126BFF)",
+"",
+"/*Initial register value when using debug */",
+"#define USART_CR1_DEBUG		0x0000000D	/* USART enable, 8bit, Non parity */",
+"#define USART_CR2_DEBUG		0		/* Stop bit 1 */",
+"#define USART_CR3_DEBUG		0		/* No hard flow control */",
+"",
+"",
+"/* USART interrupt number */",
+"#define	INTNO_USART1		37",
+"#define	INTNO_USART2		38",
+"#define	INTNO_USART3		39",
+"#define	INTNO_UART4		52",
+"#define	INTNO_UART5		53",
+"#define	INTNO_USART6		78",
+"#define	INTNO_UART7		89",
+"#define	INTNO_UART8		90",
+"#define	INTNO_UART9		162",
+"#define	INTNO_USART10		163",
+"",
+"#endif		/* __DEV_SER_STM32H7_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	ser_cnf_sysdep.h ",
+" *	Serial Device configuration file",
+" *		for STM32L4",
+" */",
+"#ifndef	__DEV_SER_CNF_STM32L4_H__",
+"#define	__DEV_SER_CNF_STM32L4_H__",
+"",
+"/* Device clock initialization */",
+"#define DEVCNF_SER_INIT_MCLK		TRUE		// Initialize module clock",
+"#define DEVCNF_USARTxSEL_INIT		0x00000000	// All UART clocks are PCLK (bit 0-9)",
+"",
+"/* Interrupt priority */",
+"#define	DEVCNF_USART1_INTPRI	5",
+"#define	DEVCNF_USART2_INTPRI	5",
+"#define	DEVCNF_USART3_INTPRI	5",
+"#define	DEVCNF_UART4_INTPRI	5",
+"#define	DEVCNF_UART5_INTPRI	5",
+"",
+"/* Debug option",
+" *	Specify the device used by T-Monitor.",
+" *	  -1 : T-Monitor does not use serial devices",
+" */",
+"#if USE_TMONITOR",
+"#define	DEVCNF_SER_DBGUN	1		// Used by T-Monitor",
+"#else ",
+"#define	DEVCNF_SER_DBGUN	-1		// T-Monitor not executed",
+"#endif",
+"",
+"#endif		/* __DEV_SER_CNF_STM32L4_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	ser_mode_stm32l4.h",
+" *	Serial communication device driver",
+" *	Communication mode definition for STM32L4",
+" */",
+"",
+"#ifndef	__DEV_SER_MODE_STM32L4_H__",
+"#define	__DEV_SER_MODE_STM32L4_H__",
+"",
+"#define	DEV_SER_MODE_7BIT	(0x10000000)	/* Word length 7bit */",
+"#define	DEV_SER_MODE_8BIT	(0x00000000)	/* Word length 8bit */",
+"",
+"#define	DEV_SER_MODE_1STOP	(0x00000000)	/* Stop-bit 1bit */",
+"#define	DEV_SER_MODE_2STOP	(0x00002000)	/* Stop-bit 2bit */",
+"",
+"#define DEV_SER_MODE_PODD	(0x00000400)	/* parity Odd */",
+"#define DEV_SER_MODE_PEVEN	(0x00000600)	/* parity Even */",
+"#define DEV_SER_MODE_PNON	(0x00000000)	/* parity None */",
+"",
+"#define	DEV_SER_MODE_CTSEN	(0x00008000)	/* CTS Hard flow control enable */",
+"#define	DEV_SER_MODE_RTSEN	(0x00004000)	/* RTS Hard flow control enable */",
+"",
+"/* Communication Error */",
+"#define	DEV_SER_ERR_PE		(1<<0)	/* Parity Error */",
+"#define	DEV_SER_ERR_FE		(1<<1)	/* Framing Error */",
+"#define	DEV_SER_ERR_NF		(1<<2)	/* Start bit noise detection flag */",
+"#define	DEV_SER_ERR_OE		(1<<3)	/* Overrun Error */",
+"",
+"#endif /* __DEV_SER_MODE_STM32L4_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_STM32L4",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../ser.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_SER_ENABLE",
+"/*",
+" *	ser_stm32l4.c",
+" *	Serial communication device driver",
+" *	System dependent processing for STM32L4",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+" */",
+"const LOCAL UW ba[DEV_SER_UNITNM] = {",
+"	USART1_BASE, USART2_BASE, USART3_BASE, UART4_BASE, UART5_BASE",
+"};",
+"",
+"#define	USART_CR1(x)	(ba[x] + USARTx_CR1)	/* Control register 1 */",
+"#define	USART_CR2(x)	(ba[x] + USARTx_CR2)	/* Control register 2 */",
+"#define	USART_CR3(x)	(ba[x] + USARTx_CR3)	/* Control register 3 */",
+"#define	USART_BRR(x)	(ba[x] + USARTx_BRR)	/* baud rate register */",
+"#define	USART_GTPR(x)	(ba[x] + USARTx_GTPR)	/* Guard time and Priscaler register */",
+"#define	USART_RTOR(x)	(ba[x] + USARTx_RTOR)	/* Receiver timeout register */",
+"#define	USART_RQR(x)	(ba[x] + USARTx_RQR)	/* Request register */",
+"#define	USART_ISR(x)	(ba[x] + USARTx_ISR)	/* Interrupts and status register */",
+"#define	USART_ICR(x)	(ba[x] + USARTx_ICR)	/* Interrupt flag clear register */",
+"#define	USART_RDR(x)	(ba[x] + USARTx_RDR)	/* Received data register */",
+"#define	USART_TDR(x)	(ba[x] + USARTx_TDR)	/* Transmission data register */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device data",
+"*/",
+"const LOCAL struct {",
+"	UINT	intno;		// Interrupt number",
+"	PRI	intpri;		// Interrupt priority",
+"} ll_devdat[DEV_SER_UNITNM] = {",
+"	{	/* USART1 */",
+"		.intno		= INTNO_USART1,",
+"		.intpri		= DEVCNF_USART1_INTPRI,",
+"	},",
+"	{	/* USART2 */",
+"		.intno		= INTNO_USART2,",
+"		.intpri		= DEVCNF_USART2_INTPRI,",
+"	},",
+"	{	/* USART3 */",
+"		.intno		= INTNO_USART3,",
+"		.intpri		= DEVCNF_USART3_INTPRI,",
+"	},",
+"	{	/* UART4 */",
+"		.intno		= INTNO_UART4,",
+"		.intpri		= DEVCNF_UART4_INTPRI,",
+"	},",
+"	{	/* UART5 */",
+"		.intno		= INTNO_UART5,",
+"		.intpri		= DEVCNF_UART5_INTPRI,",
+"	},",
+"};",
+"",
+"/*----------------------------------------------------------------------",
+" * Device low-level control data",
+"*/",
+"typedef struct {",
+"	UW	mode;		// Serial mode",
+"	UW	speed;		// Spped (bit rate)",
+"} T_DEV_SER_LLDEVCB;",
+"",
+"LOCAL T_DEV_SER_LLDEVCB		ll_devcb[DEV_SER_UNITNM];",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"void usart_inthdr( UINT intno)",
+"{",
+"	UW	data, err;",
+"	UW	isr;",
+"	W	unit;",
+"",
+"	if(intno>=INTNO_USART1 && intno<=INTNO_USART3) {",
+"		unit = intno -INTNO_USART1;",
+"	} else if(intno>=INTNO_UART4 && intno<=INTNO_UART5) {",
+"		unit = intno -INTNO_UART4 + DEV_SER_UNIT3;",
+"	} else {",
+"		ClearInt(intno);",
+"		return;",
+"	}",
+"	",
+"	isr = in_w(USART_ISR(unit));			// Get interrupt factor",
+"",
+"	out_w(USART_ICR(unit), USART_ICR_ALL);		// Clear Interrupt",
+"	ClearInt(intno);",
+"",
+"	/* Reception process */",
+"	if( isr & USART_ISR_RXNE) {",
+"		data = in_w(USART_RDR(unit));",
+"		dev_ser_notify_rcv(unit, data);	/* Notify the main process of data reception. */",
+"	}",
+"",
+"	/* Transmission process */",
+"	if( isr & USART_ISR_TXE ) {",
+"		if( dev_ser_get_snddat(unit, &data)) {",
+"			out_w(USART_TDR(unit), data);",
+"		} else {",
+"			*(_UW*)( USART_CR1(unit)) &= ~USART_CR1_TXEIE;	// Disable TXE interrupt",
+"		}",
+"	}",
+"",
+"	/* Error handling */",
+"	err = isr & USART_ISR_ERR;",
+"	if(err) {",
+"		dev_ser_notify_err(unit, err);	/* Notify the main process of this error. */",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Set mode & Start communication",
+" */",
+"#define	MASK_MODE_CR1	(USART_CR1_M1| USART_CR1_M0|USART_CR1_PS|USART_CR1_PCE)",
+"",
+"LOCAL void start_com(UW unit, UW mode, UW speed)",
+"{",
+"",
+"",
+"	out_w(USART_CR2(unit), mode & USART_CR2_STOP);		// Set stop-bit",
+"	out_w(USART_CR3(unit), mode & (USART_CR3_RTSE | USART_CR3_CTSE)); // Set RTS/CTS",
+"	out_w(USART_BRR(unit), speed);				// Set communication Speed",
+"",
+"	/* Set mode & Start communication */",
+"	out_w(USART_CR1(unit),",
+"		USART_CR1_RXNEIE | USART_CR1_PEIE		// Unmask Receive & Parity error interrupt",
+"		| (mode & MASK_MODE_CR1 )			// Set word length & parity",
+"		| USART_CR1_UE | USART_CR1_RE | USART_CR1_TE	// USART enable",
+"	);",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Stop communication",
+" */",
+"LOCAL void stop_com(UW unit)",
+"{",
+"	if(unit != DEVCNF_SER_DBGUN) {",
+"		out_w(USART_CR1(unit), 0);",
+"	} else {	/* Used by T-Monitor */",
+"		out_w(USART_CR1(unit), USART_CR1_DEBUG);",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT ER dev_ser_llctl( UW unit, INT cmd, UW parm)",
+"{",
+"	ER	err	= E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_SER_MODE:	/* Set Communication mode */",
+"		ll_devcb[unit].mode = parm;",
+"		break;",
+"	",
+"	case LLD_SER_SPEED:	/* Set Communication Speed */",
+"		ll_devcb[unit].speed = ((TMCLK*1000*1000)+parm/2)/parm;",
+"		break;",
+"	",
+"	case LLD_SER_START:	/* Start communication */",
+"		out_w(USART_CR1(unit), 0);",
+"		out_w(USART_ICR(unit), USART_ICR_ALL);			// Clear interrupt",
+"		ClearInt(ll_devdat[unit].intno);",
+"		EnableInt(ll_devdat[unit].intno, ll_devdat[unit].intpri);	// Enable Interrupt",
+"		start_com( unit, ll_devcb[unit].mode, ll_devcb[unit].speed);",
+"		break;",
+"	",
+"	case LLD_SER_STOP:",
+"		DisableInt(ll_devdat[unit].intno);",
+"		stop_com(unit);",
+"		break;",
+"",
+"	case LLD_SER_SEND:",
+"		if(in_w(USART_ISR(unit)) & USART_ISR_TXE) {",
+"			out_w(USART_TDR(unit), parm);			// Set Transmission data",
+"			*(_UW*)( USART_CR1(unit)) |= USART_CR1_TXEIE;	// Enable TXE interrupt",
+"			err = E_OK;",
+"		} else {",
+"			err = E_BUSY;",
+"		}",
+"		break;",
+"",
+"	case LLD_SER_BREAK:	/* Send Break */",
+"		if(parm) {",
+"			out_w(USART_RQR(unit), USART_RQR_SBKRQ);",
+"		}",
+"		break;",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_ser_llinit( T_SER_DCB *p_dcb)",
+"{",
+"	const T_DINT	dint = {",
+"		.intatr	= TA_HLNG,",
+"		.inthdr	= usart_inthdr,",
+"	};",
+"	UW	unit;",
+"	ER	err;",
+"",
+"	unit = p_dcb->unit;",
+"",
+"#if DEVCNF_SER_INIT_MCLK",
+"	/* Select clock source */",
+"	out_w(RCC_CCIPR, (in_w(RCC_CCIPR) & ~RCC_CCIPR_USARTxSEL) | DEVCNF_USARTxSEL_INIT );",
+"",
+"	/* Enable module clock */",
+"	switch(unit) {",
+"	case 0:	// USART1",
+"		*(_UW*)RCC_APB2ENR |= RCC_APB2ENR_USART1EN;",
+"		break;",
+"	case 1:	// USART2",
+"		*(_UW*)RCC_APB1ENR1 |= RCC_APB1ENR1_USART2EN;",
+"		break;",
+"	case 2:	// USART3",
+"		*(_UW*)RCC_APB1ENR1 |= RCC_APB1ENR1_USART3EN;",
+"		break;",
+"	case 3:	// UART4",
+"		*(_UW*)RCC_APB1ENR1 |= RCC_APB1ENR1_UART4EN;",
+"		break;",
+"	case 4:	// UART5",
+"		*(_UW*)RCC_APB1ENR1 |= RCC_APB1ENR1_UART5EN;",
+"		break;",
+"	}",
+"#endif",
+"",
+"	/* USART device initialize (Disable USART & Disable all interrupt) */",
+"	stop_com(unit);",
+"",
+"	/* Device Control block Initizlize */",
+"	p_dcb->intno_rcv = p_dcb->intno_snd = ll_devdat[unit].intno;",
+"	p_dcb->int_pri = ll_devdat[unit].intpri;",
+"",
+"	/* Interrupt handler definition */",
+"	err = tk_def_int(ll_devdat[unit].intno, &dint);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_SER_ENABLE */",
+"#endif		/* CPU_STM32L4 */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2022-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	ser_sysdep.h",
+" *	Serial communication device driver",
+" *	System-dependent definition for STM32L4",
+" */",
+"",
+"#ifndef	__DEV_SER_STM32L4_H__",
+"#define	__DEV_SER_STM32L4_H__",
+"",
+"#define	DEV_SER_UNITNM	(5)	/* Number of devive channels */",
+"#define DEV_SER_UNIT0	(0)	/* Ch.0 - USART1 */",
+"#define DEV_SER_UNIT1	(1)	/* Ch.1 - USART2 */",
+"#define DEV_SER_UNIT2	(2)	/* Ch.2 - USART3 */",
+"#define DEV_SER_UNIT3	(3)	/* Ch.2 - UART4 */",
+"#define DEV_SER_UNIT4	(4)	/* Ch.2 - UART5 */",
+"",
+"/*",
+" * USART registers",
+" */",
+"",
+"/* Base address for each channel */",
+"#define	USART1_BASE	(0x40013800UL)",
+"#define	USART2_BASE	(0x40004400UL)",
+"#define	USART3_BASE	(0x40004800UL)",
+"#define	UART4_BASE	(0x40004C00UL)",
+"#define	UART5_BASE	(0x40005000UL)",
+"",
+"/* Register offset */",
+"#define	USARTx_CR1	(0x0000)	/* Control register 1 */",
+"#define	USARTx_CR2	(0x0004)	/* Control register 2 */",
+"#define	USARTx_CR3	(0x0008)	/* Control register 3 */",
+"#define	USARTx_BRR	(0x000C)	/* baud rate register */",
+"#define	USARTx_GTPR	(0x0010)	/* Guard time and Priscaler register */",
+"#define	USARTx_RTOR	(0x0014)	/* Receiver timeout register */",
+"#define	USARTx_RQR	(0x0018)	/* Request register */",
+"#define	USARTx_ISR	(0x001C)	/* Interrupts and status register */",
+"#define	USARTx_ICR	(0x0020)	/* Interrupt flag clear register */",
+"#define	USARTx_RDR	(0x0024)	/* Received data register */",
+"#define	USARTx_TDR	(0x0028)	/* Transmission data register */",
+"",
+"/* Register bit definition */",
+"#define	USART_CR1_UE		(1<<0)	/* RW USART enable */",
+"#define	USART_CR1_UESM		(1<<1)	/* RW USART enable in STOP mode */",
+"#define	USART_CR1_RE		(1<<2)	/* RW Receiver enable */",
+"#define	USART_CR1_TE		(1<<3)	/* RW Transmitter enable */",
+"#define	USART_CR1_IDLEIE	(1<<4)	/* RW IDLE interrupt enable */",
+"#define	USART_CR1_RXNEIE	(1<<5)	/* RW RXNE interrupt enable */",
+"#define	USART_CR1_TCIE		(1<<6)	/* RW TCOE interrupt enable */",
+"#define	USART_CR1_TXEIE		(1<<7)	/* RW TXE interrupt enable */",
+"#define	USART_CR1_PEIE		(1<<8)	/* RW PE interrupt enable */",
+"#define	USART_CR1_PS		(1<<9)	/* RW Parity selection */",
+"#define	USART_CR1_PCE		(1<<10)	/* RW Parity control enable */",
+"#define	USART_CR1_WAKE		(1<<11)	/* RW Receive wakeup method */",
+"#define	USART_CR1_M0		(1<<12)	/* RW Word length 0 */",
+"#define	USART_CR1_MME		(1<<13)	/* RW Mute mode enable */",
+"#define	USART_CR1_CMIE		(1<<14)	/* RW Character match interrupt enable */",
+"#define	USART_CR1_OVER8		(1<<15)	/* RW Oversampling mode */",
+"#define	USART_CR1_RTOIE		(1<<26)	/* RW Receiver timeout interrupt enable */",
+"#define	USART_CR1_EOBIE		(1<<27)	/* RW End of Block interrupt enabled */",
+"#define	USART_CR1_M1		(1<<28)	/* RW Word length 1 */",
+"",
+"#define	USART_CR2_STOP		(3<<12)	/* RW Stop-bit */",
+"",
+"#define	USART_CR3_RTSE		(1<<8)	/* RTS enable */",
+"#define	USART_CR3_CTSE		(1<<9)	/* CTS enable */",
+"",
+"#define	USART_RQR_SBKRQ		(1<<1)	/* Break send request */",
+"",
+"#define	USART_ISR_PE		(1<<0)	/* R Parity error */",
+"#define	USART_ISR_FE		(1<<1)	/* R Framing error */",
+"#define	USART_ISR_NF		(1<<2)	/* R Start bit noise detection */",
+"#define	USART_ISR_ORE		(1<<3)	/* R Overrun error */",
+"#define	USART_ISR_IDLE		(1<<4)	/* R Idle line detection */",
+"#define	USART_ISR_RXNE		(1<<5)	/* R Received data register not empty */",
+"#define	USART_ISR_TC		(1<<6)	/* R Transmission completely */",
+"#define	USART_ISR_TXE		(1<<7)	/* R Transmission data register empty */",
+"#define	USART_ISR_LBDF		(1<<8)	/* R LIN break detection */",
+"#define	USART_ISR_CTSIF		(1<<9)	/* R CTS interrupt */",
+"#define	USART_ISR_CTS		(1<<10)	/* R CTS flag */",
+"#define	USART_ISR_RTOF		(1<<11)	/* R Receiver timeout */",
+"#define	USART_ISR_EOBF		(1<<12)	/* R End of block */",
+"#define	USART_ISR_ABRE		(1<<14)	/* R Automatic baud rate error */",
+"#define	USART_ISR_ABRF		(1<<15)	/* R Automatic baud rate flag */",
+"#define	USART_ISR_BUSY		(1<<16)	/* R Busy flag */",
+"#define	USART_ISR_CMF		(1<<17)	/* R Character match flag */",
+"#define	USART_ISR_SBKF		(1<<18)	/* R Break transmission flag */",
+"#define	USART_ISR_RWU		(1<<6)	/* R Receiver mute mode flag */",
+"#define	USART_ISR_WUF		(1<<6)	/* R Wakeup flag */",
+"#define	USART_ISR_TEACK		(1<<6)	/* R Transmission ACK flag */",
+"#define	USART_ISR_REACK		(1<<6)	/* R Receive ACK flag */",
+"#define	USART_ISR_ERR		(USART_ISR_PE|USART_ISR_FE|USART_ISR_NF|USART_ISR_ORE)",
+"",
+"#define	USART_ICR_PECF		(1<<0)",
+"#define	USART_ICR_FECF		(1<<1)",
+"#define	USART_ICR_NCF		(1<<2)",
+"#define	USART_ICR_ORECF		(1<<3)",
+"#define	USART_ICR_IDLECF	(1<<4)",
+"#define	USART_ICR_TCCF		(1<<6)",
+"#define	USART_ICR_TCBGTCF	(1<<7)",
+"#define	USART_ICR_LBDCF		(1<<8)",
+"#define	USART_ICR_CTSCF		(1<<9)",
+"#define	USART_ICR_RTOCF		(1<<11)",
+"#define	USART_ICR_EOBCF		(1<<12)",
+"#define	USART_ICR_CMCF		(1<<17)",
+"#define	USART_ICR_WUCF		(1<<20)",
+"#define	USART_ICR_ALL		(0x00121BDF)",
+"",
+"/*Initial register value when using debug */",
+"#define USART_CR1_DEBUG		0x0000000D	/* USART enable, 8bit, Non parity */",
+"#define USART_CR2_DEBUG		0		/* Stop bit 1 */",
+"#define USART_CR3_DEBUG		0		/* No hard flow control */",
+"",
+"",
+"/* USART interrupt number */",
+"#define	INTNO_USART1		37",
+"#define	INTNO_USART2		38",
+"#define	INTNO_USART3		39",
+"#define	INTNO_UART4		52",
+"#define	INTNO_UART5		53",
+"",
+"#endif		/* __DEV_SER_STM32L4_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	ser_cnf_sysdep.h ",
+" *	Serial Device configuration file",
+" *		for TX03_M367 (TMPM369FDFG)",
+" */",
+"#ifndef	__DEV_SER_CNF_M367_H__",
+"#define	__DEV_SER_CNF_M367_H__",
+"",
+"/* Interrupt priority */",
+"#define	DEVCNF_UART4_INTPRI	5",
+"#define	DEVCNF_UART5_INTPRI	5",
+"",
+"/* Debug option",
+" *	Specify the device used by T-Monitor.",
+" *	  0: \"sera\" - UART4",
+" *	  1: \"serb\" - UART5",
+" *	  other : T-Monitor does not use serial devices",
+" */",
+"#if USE_TMONITOR",
+"#define	DEVCNF_SER_DBGUN	1		// Used by T-Monitor",
+"#else ",
+"#define	DEVCNF_SER_DBGUN	-1		// T-Monitor not executed",
+"#endif",
+"",
+"#endif		/* __DEV_SER_CNF_M367_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/08.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_TMPM367FDFG",
+"",
+"#include <tk/tkernel.h>",
+"#include \"../../ser.h\"",
+"#include \"../../../include/dev_def.h\"",
+"#if DEV_SER_ENABLE",
+"/*",
+" *	ser_m367.c",
+" *	Serial communication device driver",
+" *	System dependent processing for TX03_M367",
+" */",
+"",
+"/*----------------------------------------------------------------------",
+" * Device register base address",
+" */",
+"const LOCAL UW ba[DEV_SER_UNITNM] = { UART4_BASE, UART5_BASE};",
+"",
+"/*----------------------------------------------------------------------",
+" * Device data",
+"*/",
+"const LOCAL struct {",
+"	UINT	intno;		// Interrupt number",
+"	PRI	intpri;		// Interrupt priority",
+"} ll_devdat[DEV_SER_UNITNM] = {",
+"	{	/* UART4 */",
+"		.intno		= INTNO_UART0,",
+"		.intpri		= DEVCNF_UART4_INTPRI,",
+"	},",
+"	{	/* UART5 */",
+"		.intno		= INTNO_UART1,",
+"		.intpri		= DEVCNF_UART5_INTPRI,",
+"	},",
+"};",
+"",
+"/*----------------------------------------------------------------------",
+" * Device low-level control data",
+"*/",
+"typedef struct {",
+"	UW	mode;		// Serial mode",
+"	UW	speed;		// Spped (bit rate)",
+"} T_DEV_SER_LLDEVCB;",
+"",
+"LOCAL T_DEV_SER_LLDEVCB		ll_devcb[DEV_SER_UNITNM];",
+"",
+"/*----------------------------------------------------------------------",
+" * Interrupt handler",
+" */",
+"void uart_inthdr( UINT intno)",
+"{",
+"	UW	data, err;",
+"	W	unit;",
+"",
+"	if(intno>=INTNO_UART0 && intno<=INTNO_UART1) {",
+"		unit = intno - INTNO_UART0;",
+"	} else {",
+"		ClearInt(intno);",
+"		return;",
+"	}",
+"	",
+"	/* Clear Interrupt */",
+"	out_w( ba[unit] + UARTxICR, UARTxINT_ALL);",
+"	ClearInt(intno);",
+"",
+"	/* Reception processing */",
+"	while( (in_w( ba[unit] + UARTxFR) & UARTxFR_RXFE) == 0) {",
+"		data	= in_w(ba[unit] + UARTxDR);",
+"		err	= data >> 8;",
+"		",
+"		if (err) {",
+"			dev_ser_notify_err(unit, err);	/* Notify the main process of the communication error. */",
+"			out_w( ba[unit] + UARTxECR, 0);	/* Clear error */",
+"			data &= 0x000000FF;",
+"		}",
+"		dev_ser_notify_rcv(unit, data);	/* Notify the main process of data reception. */",
+"	}",
+"",
+"	/* Transmission process */",
+"	while( (in_w( ba[unit] + UARTxFR) & UARTxFR_TXFF) == 0 ) {",
+"		if( !dev_ser_get_snddat(unit, &data))  break;",
+"		out_w( ba[unit] + UARTxDR, data);",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Set mode & Start communication",
+" */",
+"LOCAL void start_com(UW unit, UW mode, UW speed)",
+"{",
+"	/* Set communication Speed */",
+"	out_w( ba[unit] + UARTxIBDR, speed >> 6);",
+"	out_w( ba[unit] + UARTxFBDR, speed & 0x3f);		",
+"",
+"	/* Set communication mode */",
+"	out_w( ba[unit] + UARTxLCR_H, (mode & (UARTxLCR_H_SPS|UARTxLCR_H_WLEN(8)| UARTxLCR_H_STP2| UARTxLCR_H_EPS|UARTxLCR_H_PEN)) |UARTxLCR_H_FEN);",
+"	*(UW*)(ba[unit] + UARTxCR) |= mode & (UARTxCR_CTSEN | UARTxCR_RTSEN);",
+"",
+"	/* Start communication */",
+"	*(UW*)(ba[unit] + UARTxCR) |= (UARTxCR_TXE | UARTxCR_RXE | UARTxCR_UARTEN);",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Stop communication",
+" */",
+"LOCAL void stop_com(UW unit)",
+"{",
+"	if(unit != DEVCNF_SER_DBGUN) {",
+"		out_w( ba[unit] + UARTxCR, 0);",
+"	} else {	/* Used by T-Monitor */",
+"		out_w( ba[unit] + UARTxCR, UARTxCR_UARTEN | UARTxCR_TXE | UARTxCR_RXE);",
+"	}",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Low level device control",
+" */",
+"EXPORT ER dev_ser_llctl( UW unit, INT cmd, UW parm)",
+"{",
+"	ER	err	= E_OK;",
+"",
+"	switch(cmd) {",
+"	case LLD_SER_MODE:	/* Set Communication mode */",
+"		ll_devcb[unit].mode = parm;",
+"		break;",
+"	",
+"	case LLD_SER_SPEED:	/* Set Communication Speed */",
+"		ll_devcb[unit].speed = ((CLOCK_fsys * (64*2 / 16) / parm) + 1) >> 1;",
+"		break;",
+"	",
+"	case LLD_SER_START:	/* Start communication */",
+"		out_w(ba[unit] + UARTxICR, UARTxINT_ALL);	// Clear interrupt",
+"		out_w(ba[unit] + UARTxIMSC, UARTxINT_COM);	// Unmask all interrupts",
+"		EnableInt(ll_devdat[unit].intno, ll_devdat[unit].intpri);	// Enable Interrupt",
+"		start_com( unit, ll_devcb[unit].mode, ll_devcb[unit].speed);",
+"		break;",
+"	",
+"	case LLD_SER_STOP:",
+"		DisableInt(ll_devdat[unit].intno);",
+"		stop_com(unit);",
+"		break;",
+"",
+"	case LLD_SER_SEND:",
+"		if((in_w( ba[unit] + UARTxFR) & UARTxFR_TXFF) == 0) {",
+"			out_w(ba[unit] + UARTxDR, parm);",
+"			err = E_OK;",
+"		} else {",
+"			err = E_BUSY;",
+"		}",
+"		break;",
+"",
+"	case LLD_SER_BREAK:	/* Send Break */",
+"		if(parm) {",
+"			*(UW*)(ba[unit] + UARTxLCR_H) |= UARTxLCR_H_BRK;",
+"		} else {",
+"			*(UW*)(ba[unit] + UARTxLCR_H) &= ~UARTxLCR_H_BRK;",
+"		}",
+"		break;",
+"	}",
+"",
+"	return err;",
+"}",
+"",
+"/*----------------------------------------------------------------------",
+" * Device initialization",
+" */",
+"EXPORT ER dev_ser_llinit( T_SER_DCB *p_dcb)",
+"{",
+"	const T_DINT	dint = {",
+"		.intatr	= TA_HLNG,",
+"		.inthdr	= uart_inthdr,",
+"	};",
+"	UW	unit;",
+"	ER	err;",
+"",
+"	unit = p_dcb->unit;",
+"",
+"	out_w( ba[unit] + UARTxCR, 0);",
+"",
+"	/* UART device initialize */",
+"	out_w(ba[unit] + UARTxIMSC, 0);			// Mask all interrupt",
+"	out_w(ba[unit] + UARTxECR, 0);			// Clear error",
+"	out_w(ba[unit] + UARTxIFLS, 			// Set FIFO level",
+"			UARTxIFLS_RXIFLSEL(UARTxIFLS_RXINI) |",
+"			UARTxIFLS_TXIFLSEL(UARTxIFLS_TXINI));",
+"	out_w(ba[unit] + UARTxICR, 0x000007FF);		// Clear interrupt",
+"	out_w(ba[unit] + UARTxDMACR, 0);		// Stop DMA",
+"",
+"	/* Device Control block Initizlize */",
+"	p_dcb->intno_rcv = p_dcb->intno_snd = ll_devdat[unit].intno;",
+"",
+"	/* Interrupt handler definition */",
+"	err = tk_def_int(ll_devdat[unit].intno, &dint);",
+"",
+"	stop_com(unit);",
+"",
+"	return err;",
+"}",
+"",
+"#endif		/* DEV_SER_ENABLE */",
+"#endif		/* CPU_TMPM367FDFG */﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	ser_mode_sysdep.h",
+" *	Serial communication device driver",
+" *	Communication mode definition for TX03_M367",
+" */",
+"",
+"#ifndef	__DEV_SER_MODE_M367_H__",
+"#define	__DEV_SER_MODE_M367_H__",
+"",
+"#define	DEV_SER_MODE_7BIT	(0x00000040)	/* Word length 7bit */",
+"#define	DEV_SER_MODE_8BIT	(0x00000060)	/* Word length 8bit */",
+"",
+"#define	DEV_SER_MODE_1STOP	(0x00000000)	/* Stop-bit 1bit */",
+"#define	DEV_SER_MODE_2STOP	(0x00000008)	/* Stop-bit 2bit */",
+"",
+"#define DEV_SER_MODE_PODD	(0x00000002)	/* parity Odd */",
+"#define DEV_SER_MODE_PEVEN	(0x00000006)	/* parity Even */",
+"#define DEV_SER_MODE_PNON	(0x00000000)	/* parity None */",
+"",
+"#define	DEV_SER_MODE_CTSEN	(0x00008000)	/* CTS Hard flow control enable */",
+"#define	DEV_SER_MODE_RTSEN	(0x00004000)	/* RTS Hard flow control enable */",
+"",
+"/* Communication Error */",
+"#define	DEV_SER_ERR_OE		(1<<3)	/* Overrun Error */",
+"#define	DEV_SER_ERR_BE		(1<<2)	/* Break Error */",
+"#define	DEV_SER_ERR_PE		(1<<1)	/* Parity Error */",
+"#define	DEV_SER_ERR_FE		(1<<0)	/* Framing Error */",
+"",
+"",
+"#endif /* __DEV_SER_MODE_M367_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    Device Driver for μT-Kernel 3.0",
+" *",
+" *    Copyright (C) 2020-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	ser_sysdep.h",
+" *	Serial communication device driver",
+" *	System-dependent definition for TX03_M367",
+" */",
+"",
+"#ifndef	__DEV_SER_M367_H__",
+"#define	__DEV_SER_M367_H__",
+"",
+"#define	DEV_SER_UNITNM		(2)	/* Number of devive channels */",
+"#define DEV_SER_UNIT0		(0)	/* UART Ch.4 */",
+"#define DEV_SER_UNIT1		(1)	/* UART Ch.5 */",
+"",
+"/*",
+" * UART registers",
+" */",
+"",
+"/* Base address for each channel */",
+"#define	UART4_BASE		(0x40048000UL)	/* UART Ch.4 */",
+"#define	UART5_BASE		(0x40049000UL)	/* UART Ch.5 */",
+"",
+"/* UART modem */",
+"#define	UARTxDR 		(0x0000)	/* Data register */",
+"#define	UARTxRSR 		(0x0004)	/* Receive status register */",
+"#define	UARTxECR 		(0x0004)	/* Error clear register */",
+"#define	UARTxFR 		(0x0018)	/* Flag register */",
+"#define	UARTxILPR 		(0x0020)	/* IrDA low-power counter */",
+"#define	UARTxIBDR 		(0x0024)	/* Integer baud rate register */",
+"#define	UARTxFBDR 		(0x0028)	/* Fractional baud rate register */",
+"#define	UARTxLCR_H 		(0x002C)	/* Line control register */",
+"#define	UARTxCR 		(0x0030)	/* Control register */",
+"#define	UARTxIFLS 		(0x0034)	/* Interrupt FIFO level select register */",
+"#define	UARTxIMSC 		(0x0038)	/* Interrupt mask set/clear register */",
+"#define	UARTxRIS 		(0x003C)	/* Raw interrupt status register */",
+"#define	UARTxMIS 		(0x0040)	/* Masked interrupt status register */",
+"#define	UARTxICR 		(0x0044)	/* Interrupt clear register */",
+"#define	UARTxDMACR 		(0x0048)	/* DMA control register */",
+"",
+"#define	UARTxDR_OE		(1 << 11)	/* R Overrun error */",
+"#define	UARTxDR_BE		(1 << 10)	/* R Break error */",
+"#define	UARTxDR_PE		(1 << 9)	/* R Parity error */",
+"#define	UARTxDR_FE		(1 << 8)	/* R Framing error */",
+"#define	UARTxDR_DATA		(0xff)		/* RW Send / receive data */",
+"",
+"#define	UARTxRSR_OE		(1 << 3)	/* R Overrun error */",
+"#define	UARTxRSR_BE		(1 << 2)	/* R Break error */",
+"#define	UARTxRSR_PE		(1 << 1)	/* R Parity error */",
+"#define	UARTxRSR_FE		(1 << 0)	/* R Framing error */",
+"",
+"#define	UARTxFR_RI		(1 << 8)	/* R Link indicator */",
+"#define	UARTxFR_TXFE		(1 << 7)	/* R Send empty */",
+"#define	UARTxFR_RXFF		(1 << 6)	/* R Receive full */",
+"#define	UARTxFR_TXFF		(1 << 5)	/* R Send full */",
+"#define	UARTxFR_RXFE		(1 << 4)	/* R Receive empty */",
+"#define	UARTxFR_BUSY		(1 << 3)	/* R UART busy */",
+"#define	UARTxFR_DCD		(1 << 2)	/* R Data carrier detect */",
+"#define	UARTxFR_DSR		(1 << 1)	/* R Data set ready */",
+"#define	UARTxFR_CTS		(1 << 0)	/* R Clear to send */",
+"",
+"#define	UARTxLCR_H_SPS		(1 << 7)	/* RW Stick parity selection */",
+"#define	UARTxLCR_H_WLEN(n)	(((n)-5) << 5)	/* RW Word length (5～8bit) */",
+"#define	UARTxLCR_H_FEN		(1 << 4)	/* RW Enable FIFO */",
+"#define	UARTxLCR_H_STP2		(1 << 3)	/* RW Stop bit selection */",
+"#define	UARTxLCR_H_EPS		(1 << 2)	/* RW Even parity selection */",
+"#define	UARTxLCR_H_PEN		(1 << 1)	/* RW Parity enable */",
+"#define	UARTxLCR_H_BRK		(1 << 0)	/* RW Send break */",
+"",
+"#define	UARTxCR_CTSEN		(1 << 15)	/* RW CTS Hardware flow control enable */",
+"#define	UARTxCR_RTSEN		(1 << 14)	/* RW RTS Hardware flow control enable */",
+"#define	UARTxCR_RTS		(1 << 11)	/* RW Request to send(RTS) */",
+"#define	UARTxCR_DTR		(1 << 10)	/* RW Ready to send data (DTS) */",
+"#define	UARTxCR_RXE		(1 << 9)	/* RW Receive enable */",
+"#define	UARTxCR_TXE		(1 << 8)	/* RW Send enable */",
+"#define	UARTxCR_SIRLP		(1 << 2)	/* RW IrDA  SIR Low power mode */",
+"#define	UARTxCR_SIREN		(1 << 1)	/* RW SIR Enable */",
+"#define	UARTxCR_UARTEN		(1 << 0)	/* RW UART Enable */",
+"",
+"#define	UARTxIFLS_RXIFLSEL(n)	((n) << 3)	/* RW Receive interrupt FIFO Level */",
+"#define	UARTxIFLS_TXIFLSEL(n)	((n) << 0)	/* RW Transmission interrupt FIFO Level */",
+"#define	UARTxIFLS_1_8		0		/* FIFO 1/8 */",
+"#define	UARTxIFLS_1_4		1		/* FIFO 1/4 */",
+"#define	UARTxIFLS_1_2		2		/* FIFO 1/2 */",
+"#define	UARTxIFLS_3_4		3		/* FIFO 3/4 */",
+"#define	UARTxIFLS_7_8		4		/* FIFO 7/8 */",
+"",
+"#define UARTxIFLS_RXINI		UARTxIFLS_1_2	// Receive FIFO 1/2",
+"#define UARTxIFLS_TXINI		UARTxIFLS_1_4	// Send FIFO 1/4",
+"",
+"#define	UARTxINT_OE		(1 << 10)	/* RW Overrun error interrupt */",
+"#define	UARTxINT_BE		(1 << 9)	/* RW Break error interrupt */",
+"#define	UARTxINT_PE		(1 << 8)	/* RW Parity error interrupt */",
+"#define	UARTxINT_FE		(1 << 7)	/* RW Framing error interrupt */",
+"#define	UARTxINT_RT		(1 << 6)	/* RW Receive timeout interrupt */",
+"#define	UARTxINT_TX		(1 << 5)	/* RW Transmission interrupt */",
+"#define	UARTxINT_RX		(1 << 4)	/* RW Receive interrupt */",
+"#define	UARTxINT_DSR		(1 << 3)	/* RW DSR Modem interrupt */",
+"#define	UARTxINT_DCD		(1 << 2)	/* RW DCD Modem interrupt */",
+"#define	UARTxINT_CTS		(1 << 1)	/* RW CTS Modem interrupt */",
+"#define	UARTxINT_RI		(1 << 0)	/* RW RIN Modem interrupt */",
+"",
+"#define	UARTxINT_ALL		(0x000007FF)",
+"#define	UARTxINT_COM		(UARTxINT_OE|UARTxINT_BE|UARTxINT_PE|UARTxINT_FE| \\",
+"					UARTxINT_RT|UARTxINT_TX|UARTxINT_RX)",
+"",
+"#define	UARTxDMACR_DMAONERR	(1 << 2)	/* RW DMA On error */",
+"#define	UARTxDMACR_TXDMAE	(1 << 1)	/* RW Transmission DMA Enable */",
+"#define	UARTxDMACR_RXDMAE	(1 << 0)	/* RW Receive DMA Enable */",
+"",
+"/* UART interrupt number */",
+"#define	INTNO_UART0		24		/* UART Ch.4 */",
+"#define	INTNO_UART1		25		/* UART Ch.5 */",
+"",
+"#endif		/* __DEV_SER_M367_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#ifndef __BSP_LIBBSP_H__",
+"#define __BSP_LIBBSP_H__",
+"",
+"/* System dependencies */",
+"#define LIBBSP_PATH_(a)		#a",
+"#define LIBBSP_PATH(a)		LIBBSP_PATH_(a)",
+"#define LIBBSP_SYSDEP()		LIBBSP_PATH(sysdepend/TARGET_DIR/libbsp.h)",
+"#include LIBBSP_SYSDEP()",
+"",
+"#endif /* __BSP_LIBBSP_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/05.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	libbsp.h",
+" *	System dependencies definition (RP2040 depended)",
+" */",
+"",
+"#ifndef __BSP_LIBBSP_DEPEND_CPU_H__",
+"#define __BSP_LIBBSP_DEPEND_CPU_H__",
+"",
+"/* GPIO Contrl */",
+"#define GPIO_MODE_OUT	1			// GPIO output mode",
+"#define GPIO_MODE_IN	0			// GPIO input mode",
+"",
+"ER	gpio_set_pin(UINT no, UINT mode);	// Set GPIO pin",
+"ER	gpio_set_val(UINT no, UINT val);	// Set output value",
+"UINT	gpio_get_val(UINT no);			// Get Input value",
+"",
+"/* PWM Control */",
+"ER	pwm_init(UINT no);",
+"ER	pwm_set_div(UINT no, UINT div);	// set div value",
+"ER	pwm_set_pin(UINT no);			// Set PWM output pin",
+"ER	pwm_set_wrap(UINT no, UW wrap);		// Set counter wrap value",
+"ER	pwm_set_cc(UINT no, UW cc);		// Set counter compare value",
+"ER	pwm_set_enabled(UINT no, BOOL enable);	// Enable/Disable chanel",
+"",
+"#endif	/* __BSP_LIBBSP_DEPEND_CPU_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	libbsp.h",
+" *	System dependencies definition (RaspberryPi Pico depended)",
+" */",
+"",
+"#ifndef __BSP_LIBBSP_DEPEND_H__",
+"#define __BSP_LIBBSP_DEPEND_H__",
+"",
+"",
+"/* CPU-dependent definition */",
+"#include \"../cpu/rp2040/libbsp.h\"",
+"",
+"#endif	/* __BSP_LIBBSP_DEPEND_H__ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	inittask.h",
+" *	Initial task definition",
+" */",
+"",
+"#ifndef _INITTASK_DEF_",
+"#define _INITTASK_DEF_",
+"",
+"/*",
+" * Initial task parameter",
+" */",
+"#define INITTASK_EXINF		(0x0)",
+"#define INITTASK_ITSKPRI	(1)",
+"#define INITTASK_STKSZ		(1*1024)",
+"#define INITTASK_DSNAME		\"inittsk\"",
+"",
+"#if USE_IMALLOC",
+"",
+"#define INITTASK_TSKATR		(TA_HLNG | TA_RNG0)",
+"#define INITTASK_STACK		(NULL)",
+"",
+"#else",
+"",
+"#define INITTASK_TSKATR		(TA_HLNG | TA_RNG0 | TA_USERBUF)",
+"#define INITTASK_STACK		init_task_stack",
+"",
+"#endif",
+"",
+"#endif /* _INITTASK_DEF_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06A",
+" *",
+" *    Copyright (C) 2006-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03 .",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	knldef.h",
+" *	micro T-Kernel system definition form Configulation",
+" */",
+"",
+"#ifndef _SYS_KNLDEF_H_",
+"#define _SYS_KNLDEF_H_",
+"",
+"#include <sys/sysdef.h>",
+"",
+"#include <config.h>",
+"/*---------------------------------------------------------------------- */",
+"/* Check configuration data",
+" */",
+"#if ( CNF_TIMER_PERIOD < MIN_TIMER_PERIOD || CNF_TIMER_PERIOD > MAX_TIMER_PERIOD )",
+"# error \"CNF_TIMER_PERIOD is out of range.\"",
+"#endif",
+"",
+"#if CNF_MAX_TSKPRI < 16",
+"# error \"The maximum task priority must be 16 or higher.\"",
+"#endif",
+"",
+"#if USE_PTMR && !CPU_HAS_PTMR",
+"# error \"USE_PTMR cannot be specified.\"",
+"#endif",
+"",
+"#if USE_FPU && !CPU_HAS_FPU",
+"# error \"USE_FPU cannot be specified.\"",
+"#endif",
+"",
+"#if USE_DSP && !CPU_HAS_DSP",
+"# error \"USE_DSP cannot be specified.\"",
+"#endif",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* System memory area definition",
+" */",
+"#define	SYSTEMAREA_TOP	CNF_SYSTEMAREA_TOP",
+"#define SYSTEMAREA_END	CNF_SYSTEMAREA_END",
+"",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* Task priority configuration",
+" */",
+"#define MIN_TSKPRI	(1)			/* Minimum priority number = highest priority */",
+"#define MAX_TSKPRI	(CNF_MAX_TSKPRI)	/* Maximum priority number = lowest priority */",
+"#define NUM_TSKPRI	(CNF_MAX_TSKPRI)	/* Number of priority levels */",
+"#define CHK_PRI(pri)	((MIN_TSKPRI) <= (pri) && (pri) <= (MAX_TSKPRI))",
+"",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* System Timer period",
+" */",
+"#define	TIMER_PERIOD	CNF_TIMER_PERIOD",
+"",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* Kernel object configuration",
+" */",
+"",
+"/* Task configuration */",
+"#define MIN_TSKID	(1)",
+"#define MAX_TSKID	(CNF_MAX_TSKID)",
+"#define NUM_TSKID	(MAX_TSKID)",
+"#define CHK_TSKID(id)	((MIN_TSKID) <= (id) && (id) <= (MAX_TSKID))",
+"#define INDEX_TSK(id)	((id)-(MIN_TSKID))",
+"#define ID_TSK(index)	((index)+(MIN_TSKID))",
+"",
+"/* Semaphore configuration */",
+"#if USE_SEMAPHORE",
+"#define MAX_SEMID	(CNF_MAX_SEMID)",
+"#define MIN_SEMID	(1)",
+"#define NUM_SEMID	(MAX_SEMID)",
+"#define CHK_SEMID(id)	((MIN_SEMID) <= (id) && (id) <= (MAX_SEMID))",
+"#define INDEX_SEM(id)	((id)-(MIN_SEMID))",
+"#define ID_SEM(index)	((index)+(MIN_SEMID))",
+"#else",
+"#define MAX_SEMID	(0)",
+"#endif",
+"",
+"/* Event flag configuration */",
+"#if USE_EVENTFLAG",
+"#define MIN_FLGID	(1)",
+"#define MAX_FLGID	(CNF_MAX_FLGID)",
+"#define NUM_FLGID	(MAX_FLGID)",
+"#define CHK_FLGID(id)	((MIN_FLGID) <= (id) && (id) <= (MAX_FLGID))",
+"#define INDEX_FLG(id)	((id)-(MIN_FLGID))",
+"#define ID_FLG(index)	((index)+(MIN_FLGID))",
+"#else",
+"#define MAX_FLGID	(0)",
+"#endif",
+"",
+"/* Mailbox configuration */",
+"#if USE_MAILBOX",
+"#define MIN_MBXID	(1)",
+"#define MAX_MBXID	(CNF_MAX_MBXID)",
+"#define NUM_MBXID	(MAX_MBXID)",
+"#define CHK_MBXID(id)	((MIN_MBXID) <= (id) && (id) <= (MAX_MBXID))",
+"#define INDEX_MBX(id)	((id)-(MIN_MBXID))",
+"#define ID_MBX(index)	((index)+(MIN_MBXID))",
+"#else",
+"#define MAX_MBXID	(0)",
+"#endif",
+"",
+"/* Mutex configuration */",
+"#if USE_MUTEX",
+"#define MIN_MTXID	(1)",
+"#define MAX_MTXID	(CNF_MAX_MTXID)",
+"#define NUM_MTXID	(MAX_MTXID)",
+"#define CHK_MTXID(id)	((MIN_MTXID) <= (id) && (id) <= (MAX_MTXID))",
+"#define INDEX_MTX(id)	((id)-(MIN_MTXID))",
+"#define ID_MTX(index)	((index)+(MIN_MTXID))",
+"#else",
+"#define NUM_MTXID	(0)",
+"#endif",
+"",
+"/* Message buffer configuration */",
+"#if USE_MESSAGEBUFFER",
+"#define MIN_MBFID	(1)",
+"#define MAX_MBFID	(CNF_MAX_MBFID)",
+"#define NUM_MBFID	(MAX_MBFID)",
+"#define CHK_MBFID(id)	((MIN_MBFID) <= (id) && (id) <= (MAX_MBFID))",
+"#define INDEX_MBF(id)	((id)-(MIN_MBFID))",
+"#define ID_MBF(index)	((index)+(MIN_MBFID))",
+"#else",
+"#define MAX_MBFID	(0)",
+"#endif",
+"",
+"/* Memory pool configuration */",
+"#if USE_MEMORYPOOL",
+"#define MIN_MPLID	(1)",
+"#define MAX_MPLID	(CNF_MAX_MPLID)",
+"#define NUM_MPLID	(MAX_MPLID)",
+"#define CHK_MPLID(id)	((MIN_MPLID) <= (id) && (id) <= (MAX_MPLID))",
+"#define INDEX_MPL(id)	((id)-(MIN_MPLID))",
+"#define ID_MPL(index)	((index)+(MIN_MPLID))",
+"#else",
+"#define MAX_MPLID	(0)",
+"#endif",
+"",
+"/* Fixed size memory pool configuration */",
+"#if USE_FIX_MEMORYPOOL",
+"#define MIN_MPFID	(1)",
+"#define MAX_MPFID	(CNF_MAX_MPFID)",
+"#define NUM_MPFID	(MAX_MPFID)",
+"#define CHK_MPFID(id)	((MIN_MPFID) <= (id) && (id) <= (MAX_MPFID))",
+"#define INDEX_MPF(id)	((id)-(MIN_MPFID))",
+"#define ID_MPF(index)	((index)+(MIN_MPFID))",
+"#else",
+"#define MAX_MPFID	(0)",
+"#endif",
+"",
+"/* Cyclic handler configuration */",
+"#if USE_CYCLICHANDLER",
+"#define MIN_CYCID	(1)",
+"#define MAX_CYCID	(CNF_MAX_CYCID)",
+"#define NUM_CYCID	(MAX_CYCID)",
+"#define CHK_CYCID(id)	((MIN_CYCID) <= (id) && (id) <= (MAX_CYCID))",
+"#define INDEX_CYC(id)	((id)-(MIN_CYCID))",
+"#define ID_CYC(index)	((index)+(MIN_CYCID))",
+"#else",
+"#define MAX_CYCID	(0)",
+"#endif",
+"",
+"",
+"/* Alarm handler configuration */",
+"#if USE_ALARMHANDLER",
+"#define MIN_ALMID	(1)",
+"#define MAX_ALMID	(CNF_MAX_ALMID)",
+"#define NUM_ALMID	(MAX_ALMID)",
+"#define CHK_ALMID(id)	((MIN_ALMID) <= (id) && (id) <= (MAX_ALMID))",
+"#define INDEX_ALM(id)	((id)-(MIN_ALMID))",
+"#define ID_ALM(index)	((index)+(MIN_ALMID))",
+"#else",
+"#define MAX_ALMID	(0)",
+"#endif",
+"",
+"/* Rendezvous configuration */",
+"#if USE_LEGACY_API && USE_RENDEZVOUS",
+"#define MIN_PORID	(1)",
+"#define MAX_PORID	(CNF_MAX_PORID)",
+"#define NUM_PORID	(MAX_PORID)",
+"#define CHK_PORID(id)	((MIN_PORID) <= (id) && (id) <= (MAX_PORID))",
+"#define INDEX_POR(id)	((id)-(MIN_PORID))",
+"#define ID_POR(index)	((index)+(MIN_PORID))",
+"#else",
+"#define MAX_PORID	(0)",
+"#endif /* USE_LEGACY_API && USE_RENDEZVOUS */",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* Device configuration",
+" */",
+"#if USE_DEVICE",
+"#define MAX_REGDEV	(CNF_MAX_REGDEV)",
+"#define MAX_OPNDEV	(CNF_MAX_OPNDEV)",
+"#define MAX_REQDEV	(CNF_MAX_REQDEV)",
+"#define DEVT_MBFSZ0	(CNF_DEVT_MBFSZ0)",
+"#define DEVT_MBFSZ1	(CNF_DEVT_MBFSZ1)",
+"#else",
+"#define MAX_REGDEV	(0)",
+"#endif /* USE_DEVICE */",
+"",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* Stack size definition",
+" */",
+"#define EXC_STACK_SIZE	CNF_EXC_STACK_SIZE",
+"#define	TMP_STACK_SIZE	CNF_TMP_STACK_SIZE",
+"",
+"/*---------------------------------------------------------------------- */",
+"/* Version Number",
+" */",
+"#define VER_MAKER	CNF_VER_MAKER",
+"#define VER_PRID	CNF_VER_PRID",
+"#define VER_MAJOR	3",
+"#define VER_MINOR	0",
+"#define VER_SPVER	(0x6000 | (VER_MAJOR << 8) | VER_MINOR)",
+"#define VER_PRVER	CNF_VER_PRVER",
+"#define VER_PRNO1	CNF_VER_PRNO1",
+"#define VER_PRNO2	CNF_VER_PRNO2",
+"#define VER_PRNO3	CNF_VER_PRNO3",
+"#define VER_PRNO4	CNF_VER_PRNO4",
+"",
+"",
+"#endif /* _SYS_KNLDEF_H_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine.h",
+" *	Machine type definition ",
+" */",
+"",
+"#ifndef __SYS_MACHINE_H__",
+"#define __SYS_MACHINE_H__",
+"",
+"/* ===== System dependencies definitions ================================ */",
+"#include <config.h>",
+"",
+"#ifdef _IOTE_M367_",
+"#include \"sysdepend/iote_m367/machine.h\"",
+"#define Csym(sym) sym",
+"#endif",
+"",
+"#ifdef _IOTE_STM32L4_",
+"#include \"sysdepend/iote_stm32l4/machine.h\"",
+"#define Csym(sym) sym",
+"#endif",
+"",
+"#ifdef _IOTE_RX231_",
+"#include \"sysdepend/iote_rx231/machine.h\"",
+"#define Csym(sym) _##sym",
+"#endif",
+"",
+"#ifdef _IOTE_RZA2M_",
+"#include \"sysdepend/iote_rza2m/machine.h\"",
+"#define Csym(sym) sym",
+"#endif",
+"",
+"/* ----- μT-Kernel BSP ------------------------------------------------- */",
+"#ifdef _NUCLEO_L476_",
+"#include \"sysdepend/nucleo_l476/machine.h\"",
+"#define Csym(sym) sym",
+"#endif",
+"",
+"#ifdef _NUCLEO_H723_",
+"#include \"sysdepend/nucleo_h723/machine.h\"",
+"#define Csym(sym) sym",
+"#endif",
+"",
+"#ifdef _RTB_RX65N_",
+"#include \"sysdepend/rtb_rx65n/machine.h\"",
+"#define Csym(sym) _##sym",
+"#endif",
+"",
+"#ifdef _RSK_RX65N_",
+"#include \"sysdepend/rsk_rx65n/machine.h\"",
+"#define Csym(sym) _##sym",
+"#endif",
+"",
+"#ifdef _PICO_RP2040_",
+"#include \"sysdepend/pico_rp2040/machine.h\"",
+"#define Csym(sym) sym",
+"#endif",
+"",
+"/* ===== C compiler dependencies definitions ============================= */",
+"",
+"#ifdef __GNUC__",
+"",
+"#define Inline static __inline__",
+"#define Asm __asm__ volatile",
+"#define Noinit(decl) decl __attribute__((section(\".noinit\")))",
+"#define	Section(decl,name) decl __attribute__((section(#name)))",
+"#define WEAK_FUNC __attribute__((weak))",
+"",
+"#define _VECTOR_ENTRY(name) .word name",
+"#define _WEAK_ENTRY(name) .weak name",
+"",
+"#endif /* __GNUC__ */",
+"",
+"#endif /* __SYS_MACHINE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile",
+" */",
+"",
+"#ifndef __SYS_PROFILE_H__",
+"#define __SYS_PROFILE_H__",
+"",
+"#include <sys/machine.h>",
+"#include <sys/knldef.h>",
+"",
+"/*",
+" **** System-depeneded profile",
+" */",
+"",
+"/* System dependencies */",
+"#define PROF_PATH_(a)		#a",
+"#define PROF_PATH(a)		PROF_PATH_(a)",
+"#define PROF_SYSDEP()		PROF_PATH(sysdepend/TARGET_DIR/profile.h)",
+"#include PROF_SYSDEP()",
+"",
+"",
+"/* ",
+" **** Common profile",
+" */",
+"",
+"/*",
+" * OS type and version",
+" */",
+"#define TK_SPECVER_MAGIC		6					/* micro T-Kernel magic number */",
+"#define TK_SPECVER_MAJOR		3					/* major version number */",
+"#define TK_SPECVER_MINOR		0					/* minor version number */",
+"#define TK_SPECVER			((TK_SPECVER_MAJOR << 8) | TK_SPECVER_MINOR)",
+"",
+"/*",
+" * Maximum task priority (>= 16)",
+" */",
+"#define TK_MAX_TSKPRI			(MAX_TSKPRI)		/* Maximum task priority */",
+"#define TK_WAKEUP_MAXCNT		(+2147483647L)		/* Maximum queuing number of the task wakeup requests. */",
+"#define TK_SEMAPHORE_MAXCNT		(+2147483647L)		/* Maximum semaphore count */",
+"/*",
+" * Maximum queuing count of the forced wait of tasks.",
+" */",
+"#define TK_SUSPEND_MAXCNT		(+2147483647L)",
+"",
+"/*",
+" * Device Driver",
+" */",
+"#define TK_SUPPORT_TASKEVENT		FALSE				/* Support of task event */",
+"#define TK_SUPPORT_DISWAI		FALSE				/* Support of disabling wait (API: tk_dis_wai) */",
+"",
+"/*",
+" * Memory management",
+" */",
+"#define TK_SUPPORT_USERBUF		TRUE				/* Support of user-specified buffer (TA_USERBUF) */",
+"#define TK_SUPPORT_AUTOBUF		TRUE				/* Support of automatic buffer allocation (No TA_USERBUF specification) */",
+"#define TK_SUPPORT_MEMLIB		(USE_IMALLOC)			/* Support of memory allocation library */",
+"",
+"/*",
+" * Task exception",
+" */",
+"#define TK_SUPPORT_TASKEXCEPTION	FALSE				/* Support of task exception */",
+"",
+"/*",
+" * Subsystem",
+" */",
+"#define TK_SUPPORT_SUBSYSTEM		FALSE				/* Support of subsystem */",
+"#define TK_SUPPORT_SSYEVENT		FALSE				/* Support of subsystem event processing */",
+"",
+"/*",
+" * System configuration information",
+" */",
+"#define TK_SUPPORT_SYSCONF		FALSE				/* Support of getting system configuration information */",
+"",
+"/*",
+" * Data types and size",
+" */",
+"#define TK_HAS_DOUBLEWORD		TRUE				/* Support of 64-bit data types (D, UD, VD) */",
+"#define TK_SUPPORT_USEC			FALSE				/* Support of microsecond */",
+"#define TK_SUPPORT_LARGEDEV		FALSE				/* Support of Large Mass-storage Device (64-bit) */",
+"#define TK_SUPPORT_SERCD		FALSE				/* Support of sub error code */",
+"",
+"/*",
+" * other function",
+" */",
+"#define TK_TRAP_SVC			FALSE				/* Use CPU Trap instruction for system call entry */",
+"#define TK_HAS_SYSSTACK			FALSE				/* Task has a separate system stack. */",
+"#define	TK_SUPPORT_UTC			TRUE				/* Support of UTC(Unix style) */",
+"#define TK_SUPPORT_TRONTIME		TRUE				/* Support of TRON time */",
+"",
+"/*",
+" * Debug support",
+" */",
+"#define TK_SUPPORT_DSNAME		(USE_OBJECT_NAME)	/* Support of DS object names */",
+"#define TK_SUPPORT_DBGSPT		(USE_DBGSPT)		/* Support of T-Kernel/DS */",
+"",
+"",
+"#endif /* __SYS_PROFILE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	queue.h",
+" *",
+" *	Queuing operation",
+" */",
+"",
+"#ifndef	__SYS_QUEUE_H__",
+"#define __SYS_QUEUE_H__",
+"",
+"#include <tk/tkernel.h>",
+"",
+"#ifdef __cplusplus",
+"extern \"C\" {",
+"#endif",
+"",
+"/*",
+" * Double-link queue (ring)",
+" */",
+"typedef struct queue {",
+"	struct queue	*next;",
+"	struct queue	*prev;",
+"} QUEUE;",
+"",
+"/*",
+" * Queue initialization ",
+" */",
+"Inline void QueInit( QUEUE *que )",
+"{",
+"	que->next = (struct queue *)que;",
+"	que->prev = (struct queue *)que;",
+"}",
+"",
+"/*",
+" * TRUE if the queue is empty ",
+" */",
+"Inline BOOL isQueEmpty( QUEUE *que )",
+"{",
+"	return ( que->next == que )? TRUE: FALSE;",
+"}",
+"",
+"/*",
+" * Insert in queue ",
+" *	Inserts entry directly prior to que ",
+" */",
+"Inline void QueInsert( QUEUE *entry, QUEUE *que )",
+"{",
+"	entry->prev = (struct queue*) que->prev;",
+"	entry->next = que;",
+"	que->prev->next = entry;",
+"	que->prev = entry;",
+"}",
+"",
+"/*",
+" * Delete from queue ",
+" *	Deletes entry from queue ",
+" *	No action is performed if entry is empty. ",
+" */",
+"Inline void QueRemove( QUEUE *entry )",
+"{",
+"	if ( entry->next != entry ) {",
+"		entry->prev->next = (struct queue*) entry->next;",
+"		entry->next->prev = (struct queue*) entry->prev;",
+"	}",
+"}",
+"",
+"/*",
+" * Remove top entry ",
+" *	Deletes the entry directly after que from the queue,",
+" *	and returns the deleted entry.",
+" *	Returns NULL if que is empty.",
+" */",
+"Inline QUEUE* QueRemoveNext( QUEUE *que )",
+"{",
+"	QUEUE	*entry;",
+"",
+"	if ( que->next == que ) {",
+"		return NULL;",
+"	}",
+"",
+"	entry = que->next;",
+"	que->next = (struct queue*)entry->next;",
+"	entry->next->prev = que;",
+"",
+"	return entry;",
+"}",
+"",
+"#ifdef __cplusplus",
+"}",
+"#endif",
+"#endif /* __SYS_QUEUE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition.",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __SYS_SYSDEF_H__",
+"#define __SYS_SYSDEF_H__",
+"",
+"/* System dependencies */",
+"#define SYSDEF_PATH_(a)		#a",
+"#define SYSDEF_PATH(a)		SYSDEF_PATH_(a)",
+"#define SYSDEF_SYSDEP()		SYSDEF_PATH(sysdepend/TARGET_DIR/sysdef.h)",
+"#include SYSDEF_SYSDEP()",
+"",
+"#endif /* __SYS_SYSDEF_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine.h",
+" *",
+" *	Machine type definition (ARMv6-M core depended)",
+" */",
+"",
+"#ifndef __SYS_MACHINE_CORE_H__",
+"#define __SYS_MACHINE_CORE_H__",
+"",
+"/*",
+" * CPU_xxxx		CPU type",
+" * ALLOW_MISALIGN	1 if access to misalignment data is allowed ",
+" * BIGENDIAN		1 if big endian ",
+" */",
+"",
+"/* ----- ARMv6-M definition ----- */",
+"",
+"#define ALLOW_MISALIGN		0",
+"#define INT_BITWIDTH		32",
+"",
+"/*",
+" * Endianness",
+" */",
+"#define BIGENDIAN		0	/* Default (Little Endian) */",
+"",
+"#endif /* __SYS_MACHINE_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (ARMv6-M depended)",
+" */",
+"",
+"#ifndef __SYS_PROFILE_CORE_H__",
+"#define __SYS_PROFILE_CORE_H__",
+"",
+"#define TK_ALLOW_MISALIGN	(ALLOW_MISALIGN)	/* Memory misalign access is permitted */",
+"#define TK_BIGENDIAN		(BIGENDIAN)		/* Is Big Endian (Must be defined) */",
+"",
+"/*",
+" * FPU and co-processors",
+" */",
+"#define TK_SUPPORT_COP0		FALSE			/* Support of co-processor-0 */",
+"#define TK_SUPPORT_COP1		FALSE			/* Support of co-processor-1 */",
+"#define TK_SUPPORT_COP2		FALSE			/* Support of co-processor-2 */",
+"#define TK_SUPPORT_COP3		FALSE			/* Support of co-processor-3 */",
+"",
+"/*",
+" * low-level function",
+" */",
+"#define TK_SUPPORT_REGOPS	TRUE			/* Support of get/set register operation */",
+"#define TK_SUPPORT_ASM		FALSE			/* Support of assembly language function entry/exit */",
+"",
+"/*",
+" * Interrupt",
+" */",
+"#define TK_SUPPORT_INTCTRL	TRUE			/* Support of interrupt controller management. */",
+"#define TK_HAS_ENAINTLEVEL	TRUE 			/* Can specify interrupt priority level */",
+"#define TK_SUPPORT_CPUINTLEVEL	FALSE			/* Support of get/set of CPU interrupt mask level */",
+"#define TK_SUPPORT_CTRLINTLEVEL	FALSE			/* Support of get/set of interrupt controller interrupt mask level */",
+"#define TK_SUPPORT_INTMODE	FALSE			/* Supoprt of interrupt mode setting */",
+"",
+"/*",
+" * Cache control",
+" */",
+"#define TK_SUPPORT_CACHECTRL	FALSE			/* support of cache control */",
+"#define TK_SUPPORT_WBCACHE	FALSE			/* Support of write-back cache */",
+"#define TK_SUPPORT_WTCACHE	FALSE			/* Support of write-through cache */",
+"",
+"/*",
+" * Real memory protection level of TA_RNGn (0..3)",
+" */",
+"#define TK_MEM_RNG0		0",
+"#define TK_MEM_RNG1		0",
+"#define TK_MEM_RNG2		0",
+"#define TK_MEM_RNG3		0",
+"",
+"/*",
+" * Device Support",
+" */",
+"#define TK_SUPPORT_MICROWAIT	TRUE			/* Support of micro wait */",
+"",
+"#endif /* __SYS_PROFILE_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef_depend.h",
+" *",
+" *	System dependencies definition (ARMv6-M core depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __SYS_SYSDEF_DEPEND_CORE_H__",
+"#define __SYS_SYSDEF_DEPEND_CORE_H__",
+"",
+"/*",
+" * Program status register (PSR)",
+" */",
+"#define PSR_N		0x80000000	/* Condition flag Negative */",
+"#define PSR_Z		0x40000000	/* Zero */",
+"#define PSR_C		0x20000000	/* Carry */",
+"#define PSR_V		0x10000000	/* Overflow */",
+"#define PSR_Q		0x08000000	/* Saturation */",
+"",
+"#define PSR_INT_MSK	0x000000FF	/* Interrupt status mask */",
+"",
+"// Exception model.",
+"#define EXP_M(n)	(n)			/* Exception model */",
+"#define EXP_USR		EXP_M(0)	/* User mode, No Exception */",
+"#define EXP_RST		EXP_M(1)	/* Reset */",
+"#define EXP_NMI		EXP_M(2)	/* Non Maskable Interrupt */",
+"#define EXP_HDF		EXP_M(3)	/* Hardware fault */",
+"#define EXP_SVC		EXP_M(11)	/* SVC call */",
+"#define EXP_PSV		EXP_M(14)	/* Software asynchronous System call */",
+"#define EXP_STK		EXP_M(15)	/* System tick */",
+"#define EXP_EXT(n)	(EXP_M(16) + n)	/* External interrupt */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * NVIC register - System control block",
+" */",
+"#define SCB_ICSR	0xE000ED04",
+"#define SCB_VTOR	0xE000ED08",
+"#define SCB_AIRCR	0xE000ED0C",
+"",
+"#define SCB_SCR		0xE000ED10",
+"#define SCB_CCR		0xE000ED14",
+"#define SCB_SHPR2	0xE000ED1C",
+"#define SCB_SHPR3	0xE000ED20",
+"",
+"#define ICSR_PENDSVSET	0x10000000	/* Set PendSV exception. */",
+"#define ICSR_PENDSVCLR	0x08000000	/* Clear PendSV exception. */",
+"#define ICSR_PENDSTSET	0x04000000	/* Set SysCTick exception */",
+"#define ICSR_PENDSTCLR	0x02000000	/* Clear SysCTick exception */",
+"",
+"/*",
+" * The number of the implemented bit width for priority value fields.",
+" * The LSB of (8-INTPRI_BITWIDTH) bits priority value is ignored, ",
+" * Bacause each priory bits is INTPRI_BITWIDTH bits.",
+" */",
+"#define INTPRI_VAL(x)	((x) << (8-INTPRI_BITWIDTH))",
+"",
+"",
+"/* SHPR: System Handler Priority Register",
+" *   SHRP1    (Rev)     (Rev)     (Rev)     (Rev)",
+" *   SHRP2    SVCall    (Rev)     (Rev)     (Rev)",
+" *   SHPR3    SysTick   PendSV    (Rsv)     (Rev)",
+" */",
+"#define	SCB_SHPR2_VAL	((INTPRI_VAL(INTPRI_SVC)<<23))",
+"#define SCB_SHPR3_VAL	((INTPRI_VAL(INTPRI_SYSTICK)<<24)|(INTPRI_VAL(INTPRI_PENDSV)<<16))",
+"",
+"/*",
+" * System Timer",
+" */",
+"#define SYST_CSR	0xE000E010	/* SysTick Control and Status */",
+"#define SYST_RVR	0xE000E014	/* SysTick Reload value */",
+"#define SYST_CVR	0xE000E018	/* SysTick Current value */",
+"",
+"/*",
+" * NVIC (Nested Vectored Interrupt Controller)",
+" */",
+"#define NVIC_ISER_BASE	0xE000E100",
+"#define NVIC_ISER(x)	(NVIC_ISER_BASE + (((x) / 32) << 2))",
+"",
+"#define NVIC_ICER_BASE	0xE000E180",
+"#define NVIC_ICER(x)	(NVIC_ICER_BASE + (((x) / 32) << 2))",
+"",
+"#define NVIC_ISPR_BASE	0xE000E200",
+"#define NVIC_ISPR(x)	(NVIC_ISPR_BASE + (((x) / 32) << 2))",
+"",
+"#define NVIC_ICPR_BASE	0xE000E280",
+"#define NVIC_ICPR(x)	(NVIC_ICPR_BASE + (((x) / 32) << 2))",
+"",
+"/* Interrupt Priority Registers (IPR) are byte-accessible. */",
+"#define NVIC_IPR_BASE	0xE000E400",
+"#define NVIC_IPR(x)	(NVIC_IPR_BASE + (x))",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Definition of minimum system stack size",
+" *	Minimum system stack size when setting the system stack size",
+" *	per task by 'tk_cre_tsk().'",
+" *  this size must be larger than the size of SStackFrame",
+" */",
+"#define MIN_SYS_STACK_SIZE	128",
+"",
+"/*",
+" * Default task system stack ",
+" */",
+"",
+"#define DEFAULT_SYS_STKSZ	MIN_SYS_STACK_SIZE",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"#endif /* __SYS_SYSDEF_DEPEND_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine.h",
+" *",
+" *	Machine type definition (ARMv7-A core depended)",
+" */",
+"",
+"#ifndef __SYS_MACHINE_CORE_H__",
+"#define __SYS_MACHINE_CORE_H__",
+"",
+"/*",
+" * CPU_xxxx		CPU type",
+" * ALLOW_MISALIGN	1 if access to misalignment data is allowed ",
+" * INT_BITWIDTH		Integer bit width",
+" * BIGENDIAN		1 if big endian ",
+" */",
+"",
+"/* ----- ARMv7-A definition ----- */",
+"",
+"#define ALLOW_MISALIGN		0",
+"#define INT_BITWIDTH		32",
+"",
+"/*",
+" * Endianness",
+" */",
+"#define BIGENDIAN		0	/* Default (Little Endian) */",
+"",
+"#endif /* __SYS_MACHINE_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06A",
+" *",
+" *    Copyright (C) 2006-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (ARMv7-A core depended)",
+" */",
+"",
+"#ifndef __SYS_PROFILE_CORE_H__",
+"#define __SYS_PROFILE_CORE_H__",
+"",
+"#define TK_ALLOW_MISALIGN	(ALLOW_MISALIGN)	/* Memory misalign access is permitted */",
+"#define TK_BIGENDIAN		(BIGENDIAN)		/* Is Big Endian (Must be defined) */",
+"",
+"/*",
+" * FPU and co-processors",
+" */",
+"#define TK_SUPPORT_FPU		FALSE			/* Support of FPU */",
+"#define TK_SUPPORT_COP0		FALSE			/* Support of co-processor-0 */",
+"#define TK_SUPPORT_COP1		FALSE			/* Support of co-processor-1 */",
+"#define TK_SUPPORT_COP2		FALSE			/* Support of co-processor-2 */",
+"#define TK_SUPPORT_COP3		FALSE			/* Support of co-processor-3 */",
+"",
+"/*",
+" * low-level function",
+" */",
+"#define TK_SUPPORT_REGOPS	TRUE			/* Support of get/set register operation */",
+"#define TK_SUPPORT_ASM		FALSE			/* Support of assembly language function entry/exit */",
+"",
+"/*",
+" * Interrupt",
+" */",
+"#define TK_SUPPORT_INTCTRL	TRUE			/* Support of interrupt controller management. */",
+"#define TK_HAS_ENAINTLEVEL	TRUE 			/* Can specify interrupt priority level */",
+"#define TK_SUPPORT_CPUINTLEVEL	FALSE			/* Support of get/set of CPU interrupt mask level */",
+"#define TK_SUPPORT_CTRLINTLEVEL	TRUE			/* Support of get/set of interrupt controller interrupt mask level */",
+"#define TK_SUPPORT_INTMODE	TRUE			/* Supoprt of interrupt mode setting */",
+"",
+"/*",
+" * Cache control",
+" */",
+"#define TK_SUPPORT_CACHECTRL	FALSE			/* Support of cache control */",
+"#define TK_SUPPORT_SETCACHEMODE	FALSE			/* Support of set cache mode */",
+"#define TK_SUPPORT_WBCACHE	FALSE			/* Support of write-back cache */",
+"#define TK_SUPPORT_WTCACHE	FALSE			/* Support of write-through cache */",
+"",
+"/*",
+" * Real memory protection level of TA_RNGn (0..3)",
+" */",
+"#define TK_MEM_RNG0		0",
+"#define TK_MEM_RNG1		0",
+"#define TK_MEM_RNG2		0",
+"#define TK_MEM_RNG3		0",
+"",
+"/*",
+" * Device Support",
+" */",
+"#define TK_SUPPORT_MICROWAIT	TRUE			/* Support of micro wait */",
+"",
+"#endif /* __SYS_PROFILE_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef_depend.h",
+" *",
+" *	System dependencies definition (ARMv7-A core depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __SYS_SYSDEF_DEPEND_CORE_H__",
+"#define __SYS_SYSDEF_DEPEND_CORE_H__",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Program Status Register (PSR)",
+" */",
+"#define	PSR_N		0x80000000	/* conditional flag  negative */",
+"#define	PSR_Z		0x40000000	/*		     zero */",
+"#define	PSR_C		0x20000000	/*		     carry */",
+"#define	PSR_V		0x10000000	/*		     overflow */",
+"#define	PSR_Q		0x08000000	/* Sticky overflow */",
+"#define	PSR_GE		0x000f0000	/* SIMD >= flag  */",
+"",
+"#define	PSR_J		0x01000000	/* Jazelle mode */",
+"#define	PSR_IT		0x0600fc00	/* Thumb If-Then state */",
+"#define	PSR_E		0x00000200	/* data endian */",
+"#define	PSR_A		0x00000100	/* disable asynchronous abort */",
+"#define	PSR_I		0x00000080	/* disable interrupt(IRQ) */",
+"#define	PSR_F		0x00000040	/* disable fast interrupt(FIQ) */",
+"#define	PSR_T		0x00000020	/* Thumb mode */",
+"",
+"#define	PSR_M(n)	( n )		/* processor mode 0-31 */",
+"#define	PSR_USR		PSR_M(16)	/* user mode */",
+"#define	PSR_FIQ		PSR_M(17)	/* fast interrupt(FIQ) mode */",
+"#define	PSR_IRQ		PSR_M(18)	/* interrupt (IRQ) mode */",
+"#define	PSR_SVC		PSR_M(19)	/* supervisor mode */",
+"#define	PSR_ABT		PSR_M(23)	/* abort mode */",
+"#define	PSR_UND		PSR_M(27)	/* undefined instruction mode */",
+"#define	PSR_SYS		PSR_M(31)	/* system mode */",
+"",
+"#define PSR_DI		( PSR_I|PSR_A )	/* disable (ordinary) interrupt */",
+"",
+"/*",
+" * CP15 System Control Register (SCTLR)",
+" */",
+"#define CP15_SCTLR_I	0x00001000",
+"#define CP15_SCTLR_Z	0x00000800",
+"#define CP15_SCTLR_C	0x00000004",
+"#define CP15_SCTLR_A	0x00000002",
+"#define CP15_SCTLR_M	0x00000001",
+"#define CP15_SCTLR_V	0x00002000",
+"",
+"/*",
+" * CP15 Auxiliary Control Register(ACTLR)",
+" */",
+"#define CP15_ACTLR_DPF		0x00000004",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Parameter of SVC instruction ",
+" */",
+"#define	SVC_SYSCALL		6	/* micro T-Kernel system call */",
+"#define	SVC_FORCE_DISPATCH	7	/* force dispatch */",
+"#define	SVC_DISPATCH		8	/* task dispatcher */",
+"#define	SVC_DEBUG_SUPPORT	9	/* debug support function */",
+"#define	SVC_EXTENDED_SVC	10	/* Extended SVC */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Number of SVC handlers",
+" */",
+"#define N_SVCHDR		(11)	/* Number of SVC handlers ( used by micro T-Kernel) */",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * GIC(Generic Interrupt Controller) register",
+" * 	GIC-400 ",
+" */",
+"",
+"/* Distributor register address */",
+"#define GICD_CTLR		(GICD_BASE + 0x0000)		/* Distributor Control Register */",
+"#define GICD_TYPER		(GICD_BASE + 0x0004)		/* Interrupt Controller Type Register */",
+"#define GICD_IIDR		(GICD_BASE + 0x0008)		/* Distributor Implementer Identification Register */",
+"",
+"#define GICD_IGROUPR(n)		(GICD_BASE + 0x0080 + (0x04*(n)))	/* Interrupt Group Registerse */",
+"#define GICD_ISENABLER(n)	(GICD_BASE + 0x0100 + (0x04*(n)))	/* Interrupt Set-Enable Registers */",
+"#define GICD_ICENABLER(n)	(GICD_BASE + 0x0180 + (0x04*(n)))	/* Interrupt Clear-Enable Registers */",
+"#define GICD_ISPENDR(n)		(GICD_BASE + 0x0200 + (0x04*(n)))	/* Interrupt Set-Pending Registers */",
+"#define GICD_ICPENDR(n)		(GICD_BASE + 0x0280 + (0x04*(n)))	/* Interrupt Clear-Pending Registers */",
+"#define GICD_ISACTIVER(n)	(GICD_BASE + 0x0300 + (0x04*(n)))	/* Interrupt Set-Active Registers */",
+"#define GICD_ICACTIVER(n)	(GICD_BASE + 0x0380 + (0x04*(n)))	/* Interrupt Clear-Active Registers */",
+"#define GICD_IPRIORITYR(n)	(GICD_BASE + 0x0400 + (0x04*(n)))	/* Interrupt Priority Registers */",
+"#define GICD_ITARGETR(n)	(GICD_BASE + 0x0800 + (0x04*(n)))	/* Interrupt Processor Targets Registersi */",
+"#define GICD_ICFGR(n)		(GICD_BASE + 0x0C00 + (0x04*(n)))	/* Interrupt Configuration Registers */",
+"#define GICD_PPISR		(GICD_BASE + 0x0D00)		/* Private Peripheral Interrupt Status Register */",
+"#define GICD_SPISR(n)		(GICD_BASE + 0x0D04 + (0x04*(n)))	/* Shared Peripheral Interrupt Status Registers */",
+"#define GICD_SGIR		(GICD_BASE + 0x0F00)		/* Software Generated Interrupt Register */",
+"#define GICD_CPENDSGIR(n)	(GICD_BASE + 0x0F10 + (0x04*(n))) /* SGI Clear-Pending Registers */",
+"#define GICD_SPENDSGIR(n)	(GICD_BASE + 0x0F20 + (0x04*(n))) /* SGI Set-Pending Registers */",
+"",
+"#define GICD_PIDR4		(GICD_BASE + 0x0FD0)		/* Peripheral ID 4 Register */",
+"#define GICD_PIDR5		(GICD_BASE + 0x0FD4)		/* Peripheral ID 5 Register */",
+"#define GICD_PIDR6		(GICD_BASE + 0x0FD8)		/* Peripheral ID 6 Register */",
+"#define GICD_PIDR7		(GICD_BASE + 0x0FDC)		/* Peripheral ID 7 Register */",
+"#define GICD_PIDR0		(GICD_BASE + 0x0FE0)		/* Peripheral ID 0 Register */",
+"#define GICD_PIDR1		(GICD_BASE + 0x0FE4)		/* Peripheral ID 1 Register */",
+"#define GICD_PIDR2		(GICD_BASE + 0x0FE8)		/* Peripheral ID 2 Register */",
+"#define GICD_PIDR3		(GICD_BASE + 0x0FEC)		/* Peripheral ID 3 Register */",
+"",
+"#define GICD_CIDR0		(GICD_BASE + 0x0FF0)		/* Component ID 0 Register */",
+"#define GICD_CIDR1		(GICD_BASE + 0x0FF4)		/* Component ID 1 Register */",
+"#define GICD_CIDR2		(GICD_BASE + 0x0FF8)		/* Component ID 2 Register */",
+"#define GICD_CIDR3		(GICD_BASE + 0x0FFC)		/* Component ID 3 Register */",
+"",
+"/* Number of registers*/",
+"#define GICD_IGROUPR_N		16",
+"#define GICD_ICFGR_N		32",
+"#define GICD_IPRIORITYR_N	128",
+"#define GICD_ITARGETR_N		128",
+"#define GICD_ISENABLER_N	16",
+"#define GICD_ICENABLER_N	16",
+"",
+"/* CPU interface register address */",
+"#define GICC_CTLR		(GICC_BASE + 0x0000)		/* CPU Interface Control Register */",
+"#define GICC_PMR		(GICC_BASE + 0x0004)		/* Interrupt Priority Mask Register */",
+"#define GICC_BPR		(GICC_BASE + 0x0008)		/* Binary Point Register */",
+"#define GICC_IAR		(GICC_BASE + 0x000C)		/* Interrupt Acknowledge Register */",
+"#define GICC_EOIR		(GICC_BASE + 0x0010)		/* End of Interrupt Register */",
+"#define GICC_RPR		(GICC_BASE + 0x0014)		/* Running Priority Register */",
+"#define GICC_HPPIR		(GICC_BASE + 0x0018)		/* Highest Priority Pending Interrupt Register */",
+"#define GICC_ABPR		(GICC_BASE + 0x001C)		/* Aliased Binary Point Register */",
+"#define GICC_AIAR		(GICC_BASE + 0x0020)		/* Aliased Interrupt Acknowledge Register */",
+"#define GICC_AEOIR		(GICC_BASE + 0x0024)		/* Aliased End of Interrupt Register */",
+"#define GICC_AHPPIR		(GICC_BASE + 0x0028)		/* Aliased Highest Priority Pending Interrupt Register */",
+"#define GICC_APR0		(GICC_BASE + 0x00D0)		/* Active Priority Register */",
+"#define GICC_NSAPR0		(GICC_BASE + 0x00E0)		/* Non-Secure Active Priority Register */",
+"#define GICC_IIDR		(GICC_BASE + 0x00FC)		/* CPU Interface Identification Register */",
+"#define GICC_DIR		(GICC_BASE + 0x1000)		/* Deactivate Interrupt Register */",
+"",
+"",
+"/*",
+" * VFP Status/Control Register (FPSCR)",
+" */",
+"#define	FPSCR_N		0x80000000	/* Cond. flag	minus */",
+"#define	FPSCR_Z		0x40000000	/*		zero */",
+"#define	FPSCR_C		0x20000000	/*		carry */",
+"#define	FPSCR_V		0x10000000	/*		overflow */",
+"#define	FPSCR_AHP	0x04000000	/* Alternative Half-Precision */",
+"#define	FPSCR_DN	0x02000000	/* Default NaN */",
+"#define	FPSCR_FZ	0x01000000	/* Flush to zeto */",
+"#define	FPSCR_RMODE(n)	( (n) << 22 )	/* Round mode */",
+"#define	FPSCR_STRIDE(n)	( (n) << 20 )	/* Short Vector */",
+"#define	FPSCR_LEN(n)	( (n) << 16 )	/* Short Vector */",
+"#define	FPSCR_IDE	0x00008000	/* Enable Trap	input denormal */",
+"#define	FPSCR_IXE	0x00001000	/*		inexact */",
+"#define	FPSCR_UFE	0x00000800	/*		undefflow */",
+"#define	FPSCR_OFE	0x00000400	/*		overflow */",
+"#define	FPSCR_DZE	0x00000200	/*		division by zero */",
+"#define	FPSCR_IOE	0x00000100	/*		invalid operation */",
+"#define	FPSCR_IDC	0x00000080	/* Except.Flag	input denormal */",
+"#define	FPSCR_IXC	0x00000010	/*		inexact */",
+"#define	FPSCR_UFC	0x00000008	/*		undeflow */",
+"#define	FPSCR_OFC	0x00000004	/*		overflow */",
+"#define	FPSCR_DZC	0x00000002	/*		division by zero */",
+"#define	FPSCR_IOC	0x00000001	/*		invalid operation */",
+"",
+"#define FPSCR_INIT	0x00000000	/* Init value (Full-compliance mode) */",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * memory barrier instruction",
+" *	ISB()	Instruction Synchronization Barrier",
+" *	DSB()	Data Synchronization Barrier",
+" *	DMB()	Data Memory Barrier",
+" */",
+"#define ISB()		Asm(\"isb\")",
+"#define DSB()		Asm(\"dsb\")",
+"#define DMB()		Asm(\"dmb\")",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Definition of minimum system stack size",
+" *	Minimum system stack size when setting the system stack size",
+" *	per task by 'tk_cre_tsk().'",
+" *  this size must be larger than the size of SStackFrame",
+" */",
+"#if USE_FPU",
+"#define MIN_SYS_STACK_SIZE	128+256",
+"#else",
+"#define MIN_SYS_STACK_SIZE	128",
+"#endif /* USE_FPU */",
+"/*",
+" * Default task system stack ",
+" */",
+"",
+"#define DEFAULT_SYS_STKSZ	(MIN_SYS_STACK_SIZE)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/* ",
+" *	Exception Stack Size",
+" */",
+"#define	FIQ_STACK_SIZE	(256)	/* FIQ exception stack size */",
+"#define	UND_STACK_SIZE	(256)	/* Undefined instruction exception stack size */",
+"#define	ABT_STACK_SIZE	(256)	/* Abort exception stack size */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/* ",
+" *	FPU control during interrupt handler execution",
+" *		0: do nothing    1: Disable FPU",
+" */",
+"#define	INTHDR_DIS_FPU	1",
+"",
+"#endif /* __SYS_SYSDEF_DEPEND_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine.h",
+" *",
+" *	Machine type definition (ARMv7-M core depended)",
+" */",
+"",
+"#ifndef __SYS_MACHINE_CORE_H__",
+"#define __SYS_MACHINE_CORE_H__",
+"",
+"/*",
+" * CPU_xxxx		CPU type",
+" * ALLOW_MISALIGN	1 if access to misalignment data is allowed ",
+" * BIGENDIAN		1 if big endian ",
+" */",
+"",
+"/* ----- ARMv7-M definition ----- */",
+"",
+"#define ALLOW_MISALIGN		0",
+"#define INT_BITWIDTH		32",
+"",
+"/*",
+" * Endianness",
+" */",
+"#define BIGENDIAN		0	/* Default (Little Endian) */",
+"",
+"#endif /* __SYS_MACHINE_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06A",
+" *",
+" *    Copyright (C) 2006-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (ARMv7-M depended)",
+" */",
+"",
+"#ifndef __SYS_PROFILE_CORE_H__",
+"#define __SYS_PROFILE_CORE_H__",
+"",
+"#define TK_ALLOW_MISALIGN	(ALLOW_MISALIGN)	/* Memory misalign access is permitted */",
+"#define TK_BIGENDIAN		(BIGENDIAN)		/* Is Big Endian (Must be defined) */",
+"",
+"/*",
+" * FPU and co-processors",
+" */",
+"#ifdef CPU_CORE_ACM4F	/* ARM Cortex-M4F has FPU */",
+"#define TK_SUPPORT_FPU		TRUE			/* Support of FPU */",
+"#define TK_SUPPORT_COP0		TRUE			/* Support of co-processor-0 */",
+"#else",
+"#define TK_SUPPORT_FPU		FALSE			/* Support of FPU */",
+"#define TK_SUPPORT_COP0		FALSE			/* Support of co-processor-0 */",
+"#endif  /* CPU_CORE_ACM4F */",
+"",
+"#define TK_SUPPORT_COP1		FALSE			/* Support of co-processor-1 */",
+"#define TK_SUPPORT_COP2		FALSE			/* Support of co-processor-2 */",
+"#define TK_SUPPORT_COP3		FALSE			/* Support of co-processor-3 */",
+"",
+"/*",
+" * low-level function",
+" */",
+"#define TK_SUPPORT_REGOPS	TRUE			/* Support of get/set register operation */",
+"#define TK_SUPPORT_ASM		FALSE			/* Support of assembly language function entry/exit */",
+"",
+"/*",
+" * Interrupt",
+" */",
+"#define TK_SUPPORT_INTCTRL	TRUE			/* Support of interrupt controller management. */",
+"#define TK_HAS_ENAINTLEVEL	TRUE 			/* Can specify interrupt priority level */",
+"#define TK_SUPPORT_CPUINTLEVEL	TRUE			/* Support of get/set of CPU interrupt mask level */",
+"#define TK_SUPPORT_CTRLINTLEVEL	FALSE			/* Support of get/set of interrupt controller interrupt mask level */",
+"#define TK_SUPPORT_INTMODE	TRUE			/* Supoprt of interrupt mode setting */",
+"",
+"/*",
+" * Cache control",
+" */",
+"#define TK_SUPPORT_CACHECTRL	FALSE			/* support of cache control */",
+"#define TK_SUPPORT_SETCACHEMODE	FALSE			/* Support of set cache mode */",
+"#define TK_SUPPORT_WBCACHE	FALSE			/* Support of write-back cache */",
+"#define TK_SUPPORT_WTCACHE	FALSE			/* Support of write-through cache */",
+"",
+"/*",
+" * Real memory protection level of TA_RNGn (0..3)",
+" */",
+"#define TK_MEM_RNG0		0",
+"#define TK_MEM_RNG1		0",
+"#define TK_MEM_RNG2		0",
+"#define TK_MEM_RNG3		0",
+"",
+"/*",
+" * Device Support",
+" */",
+"#define TK_SUPPORT_MICROWAIT	TRUE			/* Support of micro wait */",
+"",
+"#endif /* __SYS_PROFILE_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06A",
+" *",
+" *    Copyright (C) 2006-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef_depend.h",
+" *",
+" *	System dependencies definition (ARMv7-M core depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __SYS_SYSDEF_DEPEND_CORE_H__",
+"#define __SYS_SYSDEF_DEPEND_CORE_H__",
+"",
+"/*",
+" * Program status register (PSR)",
+" */",
+"#define PSR_N		0x80000000	/* Condition flag Negative */",
+"#define PSR_Z		0x40000000	/* Zero */",
+"#define PSR_C		0x20000000	/* Carry */",
+"#define PSR_V		0x10000000	/* Overflow */",
+"#define PSR_Q		0x08000000	/* Saturation */",
+"",
+"#define PSR_INT_MSK	0x000000FF	/* Interrupt status mask */",
+"",
+"// Exception model.",
+"#define EXP_M(n)	(n)			/* Exception model */",
+"#define EXP_USR		EXP_M(0)	/* User mode, No Exception */",
+"#define EXP_RST		EXP_M(1)	/* Reset */",
+"#define EXP_NMI		EXP_M(2)	/* Non Maskable Interrupt */",
+"#define EXP_HDF		EXP_M(3)	/* Hardware fault */",
+"#define EXP_MEM		EXP_M(4)	/* Memory fault */",
+"#define EXP_BUS		EXP_M(5)	/* Bus fault */",
+"#define EXP_USF		EXP_M(6)	/* Usage fault */",
+"#define EXP_SVC		EXP_M(11)	/* SVC call */",
+"#define EXP_DBG		EXP_M(12)	/* Debug monitor */",
+"#define EXP_PSV		EXP_M(14)	/* Software asynchronous System call */",
+"#define EXP_STK		EXP_M(15)	/* System tick */",
+"#define EXP_EXT(n)	(EXP_M(16) + n)	/* External interrupt */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * NVIC register - System control block",
+" */",
+"#define SCB_ICSR	0xE000ED04",
+"#define SCB_VTOR	0xE000ED08",
+"#define SCB_AIRCR	0xE000ED0C",
+"",
+"#define SCB_SCR		0xE000ED10",
+"#define SCB_CCR		0xE000ED14",
+"#define SCB_SHPR1	0xE000ED18",
+"#define SCB_SHPR2	0xE000ED1C",
+"#define SCB_SHPR3	0xE000ED20",
+"#define SCB_SHCSR	0xE000ED24",
+"#define SCB_CFSR	0xE000ED28",
+"#define SCB_HFSR	0xE000ED2C",
+"",
+"#define SCB_MMFAR	0xE000ED34",
+"#define SCB_BFAR	0xE000ED38",
+"",
+"#define SCB_STIR	0xE000EF00",
+"",
+"#define ICSR_PENDSVSET	0x10000000	/* Trigger PendSV exception. */",
+"#define ICSR_PENDSVCLR	0x08000000	/* Remove the pending state from the PendSV exception. */",
+"#define ICSR_PENDSTCLR	0x02000000	/* SysCTick Clean pending */",
+"",
+"#define AIRCR_VECTKEY	0x05FA0000	/* AIRCR bit.31~16  VECTKEY */",
+"#define AIRCR_PRIGROUP7	0x00000700	/* AIRCR bit.10~8   PRIGROUP */",
+"#define	AIRCR_PRIGROUP6	0x00000600",
+"#define	AIRCR_PRIGROUP5	0x00000500",
+"#define	AIRCR_PRIGROUP4	0x00000400",
+"#define	AIRCR_PRIGROUP3	0x00000300",
+"#define	AIRCR_PRIGROUP2	0x00000200",
+"#define	AIRCR_PRIGROUP1	0x00000100",
+"#define	AIRCR_PRIGROUP0	0x00000000",
+"",
+"/*",
+" * The number of the implemented bit width for priority value fields.",
+" * The LSB of (8-INTPRI_BITWIDTH) bits priority value is ignored, ",
+" * Bacause each priory bits is INTPRI_BITWIDTH bits.",
+" */",
+"#define INTPRI_VAL(x)	((x) << (8-INTPRI_BITWIDTH))",
+"",
+"",
+"/* SHPR: System Handler Priority Register",
+" *   SHRP1    (ReV)     Usage     Bus       Memmory",
+" *   SHRP2    SVCall    (Rev)     (Rev)     (Rev)",
+" *   SHPR3    SysTick   PendSV    (Rsv)     DebugMon-",
+" */",
+"#define	SCB_SHPR2_VAL	((INTPRI_VAL(INTPRI_SVC)<<23))",
+"#define SCB_SHPR3_VAL	((INTPRI_VAL(INTPRI_SYSTICK)<<24)|(INTPRI_VAL(INTPRI_PENDSV)<<16))",
+"",
+"/*",
+" * System Timer",
+" */",
+"#define SYST_CSR	0xE000E010	/* SysTick Control and Status */",
+"#define SYST_RVR	0xE000E014	/* SysTick Reload value */",
+"#define SYST_CVR	0xE000E018	/* SysTick Current value */",
+"",
+"/*",
+" * NVIC (Nested Vectored Interrupt Controller)",
+" */",
+"#define NVIC_ICTR	0xE000E004",
+"",
+"#define NVIC_ISER_BASE	0xE000E100",
+"#define NVIC_ISER(x)	(NVIC_ISER_BASE + (((x) / 32) << 2))",
+"",
+"#define NVIC_ICER_BASE	0xE000E180",
+"#define NVIC_ICER(x)	(NVIC_ICER_BASE + (((x) / 32) << 2))",
+"",
+"#define NVIC_ISPR_BASE	0xE000E200",
+"#define NVIC_ISPR(x)	(NVIC_ISPR_BASE + (((x) / 32) << 2))",
+"",
+"#define NVIC_ICPR_BASE	0xE000E280",
+"#define NVIC_ICPR(x)	(NVIC_ICPR_BASE + (((x) / 32) << 2))",
+"",
+"#define NVIC_IABR_BASE	0xE000E300",
+"#define NVIC_IABR(x)	(NVIC_IABR_BASE + (((x) / 32) << 2))",
+"",
+"/* Interrupt Priority Registers (IPR) are byte-accessible. */",
+"#define NVIC_IPR_BASE	0xE000E400",
+"#define NVIC_IPR(x)	(NVIC_IPR_BASE + (x))",
+"",
+"",
+"#ifdef CPU_CORE_ACM4F	/* ARM Cortex-M4F has FPU */",
+"/*",
+" * FPU (Floating point unit) register  - System control block",
+" */",
+"#define	FPU_CPACR	0xE000ED88",
+"#define FPU_FPCCR	0xE000EF34",
+"#define	FPU_FPCAR	0xE000EF38",
+"#define FPU_FPDSCR	0xE000EF3C",
+"",
+"#define	FPU_CPACR_FPUENABLE	0x00F00000	/* Enable FPU (CP10,CP11) */",
+"#define FPU_FPCCR_ASPEN		0x80000000	/* FPCCR.ASPEN */",
+"#define FPU_FPCCR_LSPEN		0x40000000	/* FPCCR.LSPEN */",
+"",
+"#endif  /* CPU_CORE_ACM4F */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Definition of minimum system stack size",
+" *	Minimum system stack size when setting the system stack size",
+" *	per task by 'tk_cre_tsk().'",
+" *  this size must be larger than the size of SStackFrame",
+" */",
+"#define MIN_SYS_STACK_SIZE	128",
+"",
+"/*",
+" * Default task system stack ",
+" */",
+"",
+"#define DEFAULT_SYS_STKSZ	MIN_SYS_STACK_SIZE",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"#endif /* __SYS_SYSDEF_DEPEND_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.02",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/10/21 .",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine.h",
+" *",
+" *	Machine type definition (RXv2 core depended)",
+" */",
+"",
+"#ifndef __SYS_MACHINE_CORE_H__",
+"#define __SYS_MACHINE_CORE_H__",
+"",
+"/*",
+" * CPU_xxxx		CPU type",
+" * ALLOW_MISALIGN	1 if access to misalignment data is allowed ",
+" * BIGENDIAN		1 if big endian ",
+" */",
+"",
+"/* ----- RXv2 definition ----- */",
+"#define CPU_RX_V2		1",
+"#define ALLOW_MISALIGN		0",
+"#define INT_BITWIDTH		32",
+"",
+"/*",
+" * Endianness",
+" */",
+"#define BIGENDIAN		0	/* Default (Little Endian) */",
+"",
+"#endif /* __SYS_MACHINE_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06A",
+" *",
+" *    Copyright (C) 2006-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (RXv2 core depended)",
+" */",
+"",
+"#ifndef __SYS_PROFILE_CORE_H__",
+"#define __SYS_PROFILE_CORE_H__",
+"",
+"#define TK_ALLOW_MISALIGN	(ALLOW_MISALIGN)	/* Memory misalign access is permitted */",
+"#define TK_BIGENDIAN		(BIGENDIAN)		/* Is Big Endian (Must be defined) */",
+"",
+"/*",
+" * FPU and co-processors",
+" */",
+"#if USE_FPU",
+"#define TK_SUPPORT_FPU		TRUE			/* Support of FPU */",
+"#define TK_SUPPORT_COP0		TRUE			/* Support of co-processor-0 */",
+"#else",
+"#define TK_SUPPORT_FPU		FALSE			/* Support of FPU */",
+"#define TK_SUPPORT_COP0		FALSE			/* Support of co-processor-0 */",
+"#endif",
+"",
+"#if USE_DSP",
+"#define TK_SUPPORT_COP1		TRUE			/* Support of co-processor-1 */",
+"#else",
+"#define TK_SUPPORT_COP1		FALSE			/* Support of co-processor-1 */",
+"#endif",
+"",
+"#define TK_SUPPORT_COP2		FALSE			/* Support of co-processor-2 */",
+"#define TK_SUPPORT_COP3		FALSE			/* Support of co-processor-3 */",
+"",
+"/*",
+" * low-level function",
+" */",
+"#define TK_SUPPORT_REGOPS	TRUE			/* Support of get/set register operation */",
+"#define TK_SUPPORT_ASM		FALSE			/* Support of assembly language function entry/exit */",
+"",
+"/*",
+" * Interrupt",
+" */",
+"#define TK_SUPPORT_INTCTRL	TRUE			/* Support of interrupt controller management. */",
+"#define TK_HAS_ENAINTLEVEL	TRUE 			/* Can specify interrupt priority level */",
+"#define TK_SUPPORT_CPUINTLEVEL	TRUE			/* Support of get/set of CPU interrupt mask level */",
+"#define TK_SUPPORT_CTRLINTLEVEL	FALSE			/* Support of get/set of interrupt controller interrupt mask level */",
+"#define TK_SUPPORT_INTMODE	TRUE			/* Supoprt of interrupt mode setting */",
+"",
+"/*",
+" * Cache control",
+" */",
+"#define TK_SUPPORT_CACHECTRL	FALSE			/* support of cache control */",
+"#define TK_SUPPORT_SETCACHEMODE	FALSE			/* Support of set cache mode */",
+"#define TK_SUPPORT_WBCACHE	FALSE			/* Support of write-back cache */",
+"#define TK_SUPPORT_WTCACHE	FALSE			/* Support of write-through cache */",
+"",
+"/*",
+" * Real memory protection level of TA_RNGn (0..3)",
+" */",
+"#define TK_MEM_RNG0		0",
+"#define TK_MEM_RNG1		0",
+"#define TK_MEM_RNG2		0",
+"#define TK_MEM_RNG3		0",
+"",
+"/*",
+" * Device Support",
+" */",
+"#define TK_SUPPORT_MICROWAIT	TRUE			/* Support of micro wait */",
+"",
+"#endif /* __SYS_PROFILE_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef_depend.h",
+" *",
+" *	System dependencies definition (RXv2 core depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __SYS_SYSDEF_DEPEND_CORE_H__",
+"#define __SYS_SYSDEF_DEPEND_CORE_H__",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * PSW : Processor Status Word",
+" */",
+"#define PSW_I		(0x000010000)	/* bit-16: Interrupt enable bit */",
+"#define PSW_IPL		(0x00F000000)	/* bit 24~27: IPL(Interrupt priority level) */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * FPSW : Floating point Status Word",
+" */",
+"#define FPSW_VAL	(0x00000100)	/* FPSW initial value */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * SYSTEM module registers",
+" */",
+"",
+"/* Register write protection register */",
+"#define SYSTEM_PRCR	(0x000803FE)",
+"",
+"/* Clock generation registers */",
+"#define SYSTEM_SCKCR	(0x00080020)",
+"#define SYSTEM_SCKCR2	(0x00080024)",
+"#define SYSTEM_SCKCR3	(0x00080026)",
+"#define SYSTEM_PLLCR	(0x00080028)",
+"#define SYSTEM_PLLCR2	(0x0008002A)",
+"#define SYSTEM_BCKCR	(0x00080030)",
+"#define SYSTEM_MOSCCR	(0x00080032)",
+"#define SYSTEM_SOSCCR	(0x00080033)",
+"#define SYSTEM_LOCOCR	(0x00080034)",
+"#define SYSTEM_ILOCOCR	(0x00080035)",
+"#define SYSTEM_HOCOCR	(0x00080036)",
+"#define SYSTEM_HOCOCR2	(0x00080037)",
+"#define SYSTEM_OSCOVFSR	(0x0008003C)",
+"#define SYSTEM_OSTDCR	(0x00080040)",
+"#define SYSTEM_OSTDSR	(0x00080041)",
+"#define SYSTEM_OPCCR	(0x000800A0)",
+"#define	SYSTEM_RSTCKCR	(0x000800A1)",
+"#define SYSTEM_MOSCWTCR	(0x000800A2)",
+"#define SYSTEM_SOSCWTCR	(0x000800A3)",
+"#define SYSTEM_ROMWT	(0x0008101C)",
+"#define SYSTEM_MOFCR	(0x0008C293)",
+"#define SYSTEM_HOCOPCR	(0x0008C294)",
+"",
+"/* Reset control registers */",
+"#define SYSTEM_RSTSR0	(0x0008C290)",
+"#define SYSTEM_RSTSR1	(0x0008C291)",
+"#define SYSTEM_RSTSR2	(0x000800C0)",
+"#define SYSTEM_SWRR	(0x000800C2)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Definition of minimum system stack size",
+" *	Minimum system stack size when setting the system stack size",
+" *	per task by 'tk_cre_tsk().'",
+" *  this size must be larger than the size of SStackFrame",
+" */",
+"#define MIN_SYS_STACK_SIZE	128",
+"",
+"/*",
+" * Default task system stack ",
+" */",
+"#define DEFAULT_SYS_STKSZ	MIN_SYS_STACK_SIZE",
+"",
+"",
+"#endif /* __SYS_SYSDEF_DEPEND_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine_depend.h",
+" *",
+" *	Machine type definition (RP2040 depended)",
+" */",
+"",
+"#ifndef __SYS_SYSDEPEND_MACHINE_CPU_H__",
+"#define __SYS_SYSDEPEND_MACHINE_CPU_H__",
+"",
+"/*",
+" **** CPU core-depeneded profile (ARMv6M(ARM Cortex-M0+))",
+" */",
+"",
+"#include \"../core/armv6m/machine.h\"",
+"",
+"/*",
+" **** CPU-depeneded profile (RP2040)",
+" */",
+"",
+"#define	TARGET_CPU_DIR		rp2040		/* Sysdepend-CPU-Directory name */",
+"",
+"",
+"#endif /* __SYS_SYSDEPEND_MACHINE_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/3.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (RP2040 depended)",
+" */",
+"",
+"#ifndef __SYS_DEPEND_PROFILE_CPU_H__",
+"#define __SYS_DEPEND_PROFILE_CPU_H__",
+"",
+"/*",
+" **** CPU core-depeneded profile (ARM Cortex-M0+)",
+" */",
+"#include \"../core/armv6m/profile.h\"",
+"",
+"/*",
+" **** CPU-depeneded profile (RP2040)",
+" */",
+"",
+"/*",
+" * Device Support",
+" */",
+"#define TK_SUPPORT_IOPORT	TRUE		/* Support of I/O port access */",
+"",
+"/*",
+" * Physical timer",
+" */",
+"#if USE_PTMR",
+"#define TK_SUPPORT_PTIMER	TRUE		/* Support of physical timer */",
+"#define TK_MAX_PTIMER		8		/* Maximum number of physical timers. */",
+"#else",
+"#define TK_SUPPORT_PTIMER	FALSE		/* Support of physical timer */",
+"#define TK_MAX_PTIMER		0		/* Maximum number of physical timers. */",
+"#endif",
+"",
+"",
+"#endif /* __SYS_DEPEND_PROFILE_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/05.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition (RP2040 depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __TK_SYSDEF_DEPEND_CPU_H__",
+"#define __TK_SYSDEF_DEPEND_CPU_H__",
+"",
+"#include \"../../../machine.h\"",
+"",
+"/* CPU Core-dependent definition */",
+"#include \"../core/armv6m/sysdef.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Internal Memorie (Main RAM) 64KB*4bank + 4KB*2bank",
+" */",
+"",
+"#define INTERNAL_RAM_START      0x20000000",
+"#define INTERNAL_RAM_SIZE       (64*1024*4)",
+"",
+"#define INTERNAL_RAM_END        (INTERNAL_RAM_START+INTERNAL_RAM_SIZE)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Initial Stack pointer (Used in initialization process)",
+" */",
+"#define	INITIAL_SP		INTERNAL_RAM_END",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System Timer clock",
+" */",
+"",
+"/* Settable interval range (millisecond) */",
+"#define MIN_TIMER_PERIOD	1",
+"#define MAX_TIMER_PERIOD	50",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Number of Interrupt vectors",
+" */",
+"#define N_INTVEC		32	/* Number of Interrupt vectors */",
+"#define	N_SYSVEC		16	/* Number of System Exceptions */",
+"",
+"/*",
+" * The number of the implemented bit width for priority value fields.",
+" */",
+"#define INTPRI_BITWIDTH		2",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt Priority Levels",
+" */",
+"#define INTPRI_MAX_EXTINT_PRI	1	/* Highest Ext. interrupt level */",
+"#define INTPRI_SVC		0	/* SVCall */",
+"#define INTPRI_SYSTICK		0	/* SysTick */",
+"#define INTPRI_PENDSV		3	/* PendSV */",
+"",
+"/*",
+" * Time-event handler interrupt level",
+" */",
+"#define TIMER_INTLEVEL		0",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Coprocessor",
+" */",
+"#define CPU_HAS_FPU		0",
+"#define CPU_HAS_DPS		0",
+"",
+"/*",
+" *  Number of coprocessors to use. Depends on user configuration",
+" */",
+"#define NUM_COPROCESSOR		0",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * APB Peripherals",
+" */",
+"/* Clocks */",
+"#define CLOCKS_BASE             0x40008000",
+"#define CLK_GPOUT0              (CLOCKS_BASE+0x00)",
+"#define CLK_GPOUT1              (CLOCKS_BASE+0x0C)",
+"#define CLK_GPOUT2              (CLOCKS_BASE+0x18)",
+"#define CLK_GPOUT3              (CLOCKS_BASE+0x24)",
+"#define CLK_REF	                (CLOCKS_BASE+0x30)",
+"#define CLK_SYS	                (CLOCKS_BASE+0x3C)",
+"#define CLK_PERI                (CLOCKS_BASE+0x48)",
+"#define CLK_USB	                (CLOCKS_BASE+0x54)",
+"#define CLK_ADC	                (CLOCKS_BASE+0x60)",
+"#define CLK_RTC	                (CLOCKS_BASE+0x6C)",
+"#define CLK_SYS_RESUS_CTRL      (CLOCKS_BASE+0x78)",
+"#define CLK_SYS_RESUS_STATUS    (CLOCKS_BASE+0x7C)",
+"",
+"#define	CLK_x_CTRL              (0x00)",
+"#define	CLK_x_DIV               (0x04)",
+"#define	CLK_x_SELECTED          (0x08)",
+"",
+"#define CLK_SYS_CTRL_SRC        (0x00000001)",
+"#define CLK_SYS_CTRL_AUXSRC     (0x000000e0)",
+"#define CLK_REF_CTRL_SRC        (0x00000003)",
+"#define CLK_CTRL_ENABLE	        (0x00000800)",
+"",
+"#define CLK_KIND_GPOUT0         0",
+"#define CLK_KIND_GPOUT1         1",
+"#define CLK_KIND_GPOUT2         2",
+"#define CLK_KIND_GPOUT3         3",
+"#define CLK_KIND_REF            4",
+"#define CLK_KIND_SYS            5",
+"#define CLK_KIND_PERI           6",
+"#define CLK_KIND_USB            7",
+"#define CLK_KIND_ADC            8",
+"#define CLK_KIND_RTC            9",
+"",
+"/* Reset Controler */",
+"#define RESETS_BASE             0x4000C000",
+"#define RESETS_RESET            (RESETS_BASE+0x0)",
+"#define RESETS_WDSEL            (RESETS_BASE+0x4)",
+"#define RESETS_RESET_DONE       (RESETS_BASE+0x8)",
+"",
+"#define RESETS_RESET_USBCTRL	(0x01000000)",
+"#define RESETS_RESET_UART1	(0x00800000)",
+"#define RESETS_RESET_UART0	(0x00400000)",
+"#define RESETS_RESET_TIMER	(0x00200000)",
+"#define RESETS_RESET_TBMAN	(0x00100000)",
+"#define RESETS_RESET_SYSINFO	(0x00080000)",
+"#define RESETS_RESET_SYSCFG	(0x00040000)",
+"#define RESETS_RESET_SPI1	(0x00020000)",
+"#define RESETS_RESET_SPI0	(0x00010000)",
+"#define RESETS_RESET_RTC	(0x00008000)",
+"#define RESETS_RESET_PWM	(0x00004000)",
+"#define RESETS_RESET_PLLUSB	(0x00002000)",
+"#define RESETS_RESET_PLLSYS	(0x00001000)",
+"#define RESETS_RESET_PIO1	(0x00000800)",
+"#define RESETS_RESET_PIO0	(0x00000400)",
+"#define RESETS_RESET_PADS_QSPI	(0x00000200)",
+"#define RESETS_RESET_PADS_BANK0	(0x00000100)",
+"#define RESETS_RESET_JTAG	(0x00000080)",
+"#define RESETS_RESET_IO_QSPI	(0x00000040)",
+"#define RESETS_RESET_IO_BANK0	(0x00000020)",
+"#define RESETS_RESET_I2C1	(0x00000010)",
+"#define RESETS_RESET_I2C0	(0x00000008)",
+"#define RESETS_RESET_DMA	(0x00000004)",
+"#define RESETS_RESET_BUSCTRL	(0x00000002)",
+"#define RESETS_RESET_ADC	(0x00000001)",
+"",
+"/* GPIO */",
+"#define	GPIO_NUM		30",
+"",
+"#define IO_BANK0_BASE		0x40014000",
+"#define	GPIO_CTRL(n)		(IO_BANK0_BASE+0x04+(n*8))",
+"",
+"#define	GPIO_CTRL_FUNCSEL_XIP	0",
+"#define	GPIO_CTRL_FUNCSEL_SPI	1",
+"#define	GPIO_CTRL_FUNCSEL_UART	2",
+"#define	GPIO_CTRL_FUNCSEL_I2C	3",
+"#define	GPIO_CTRL_FUNCSEL_PWM	4",
+"#define	GPIO_CTRL_FUNCSEL_SIO	5",
+"#define	GPIO_CTRL_FUNCSEL_PIO0	6",
+"#define	GPIO_CTRL_FUNCSEL_PIO1	7",
+"#define	GPIO_CTRL_FUNCSEL_GPCK	8",
+"#define	GPIO_CTRL_FUNCSEL_USB	9",
+"#define	GPIO_CTRL_FUNCSEL_NULL	31",
+"",
+"#define	IO_QSPI_BASE		0x40018000",
+"",
+"#define PADS_BANK0_BASE		0x4001c000",
+"#define	GPIO(n)			(PADS_BANK0_BASE+0x4+(n*4))",
+"",
+"#define	GPIO_OD			(1<<7)",
+"#define	GPIO_IE			(1<<6)",
+"#define	GPIO_DRIVE_2MA		(0<<4)",
+"#define	GPIO_DRIVE_4MA		(1<<4)",
+"#define	GPIO_DRIVE_8MA		(2<<4)",
+"#define	GPIO_DRIVE_12MA		(3<<4)",
+"#define	GPIO_PUE		(1<<3)",
+"#define	GPIO_PDE		(1<<2)",
+"#define	GPIO_SHEMITT		(1<<1)",
+"#define	GPIO_SLEWDAST		(1<<0)",
+"",
+"/* Crystal Oscillator(XOSC) */",
+"#define XOSC_BASE               0x40024000",
+"#define XOSC_CTRL               (XOSC_BASE+0x00)",
+"#define XOSC_STATUS             (XOSC_BASE+0x04)",
+"#define XOSC_STARTUP            (XOSC_BASE+0x0C)",
+"",
+"#define	XOSC_CTRL_ENABLE        (0x00FAB000)",
+"#define	XOSC_CTRL_DISABLE       (0x00D1E000)",
+"#define	XOSC_CTRL_FRANG_1_15MHZ (0x00000AA0)",
+"",
+"#define	XOSC_STATUS_STABLE      (0x80000000)",
+"",
+"/* PLL */",
+"#define PLL_SYS_BASE            (0x40028000)",
+"#define PLL_USB_BASE            (0x4002C000)",
+"",
+"#define PLL_CS                  (0x00)",
+"#define	PLL_PWR                 (0x04)",
+"#define	PLL_FBDIV_INT           (0x08)",
+"#define	PLL_PRIM                (0x0C)",
+"",
+"#define	PLL_CS_LOCK             (1<<31)",
+"#define	PLL_PWR_PD              (1<<0)",
+"#define	PLL_PWR_VCOPD           (1<<5)",
+"#define	PLL_PWR_POSTDIVPD       (1<<3)",
+"#define PLL_PRIM_POSTDIV1_LSB   (16)",
+"#define PLL_PRIM_POSTDIV2_LSB   (12)",
+"",
+"/* IOPORT (SIO:Single-cycle IO) */",
+"#define SIO_BASE                0xD0000000",
+"",
+"#define CPUID			(SIO_BASE+0x0)",
+"#define	GPIO_IN			(SIO_BASE+0x004)",
+"",
+"#define	GPIO_OUT		(SIO_BASE+0x008)",
+"#define GPIO_OUT_SET		(SIO_BASE+0x014)",
+"#define GPIO_OUT_CLR		(SIO_BASE+0x018)",
+"#define GPIO_OUT_XOR		(SIO_BASE+0x01C)",
+"",
+"#define GPIO_OE			(SIO_BASE+0x020)",
+"#define GPIO_OE_SET		(SIO_BASE+0x024)",
+"#define GPIO_OE_CLR		(SIO_BASE+0x028)",
+"#define GPIO_OE_XOR		(SIO_BASE+0x02C)",
+"",
+"/* Timer */",
+"#define TIMER_BASE		0x40054000",
+"",
+"#define TIMER_TIMEHW		(TIMER_BASE+0x00)",
+"#define TIMER_TIMELW		(TIMER_BASE+0x04)",
+"#define TIMER_TIMEHR		(TIMER_BASE+0x08)",
+"#define TIMER_TIMELR		(TIMER_BASE+0x0C)",
+"",
+"#define TIMER_ALARM0		(TIMER_BASE+0x10)",
+"#define TIMER_ALARM1		(TIMER_BASE+0x14)",
+"#define TIMER_ALARM2		(TIMER_BASE+0x18)",
+"#define TIMER_ALARM3		(TIMER_BASE+0x1C)",
+"",
+"#define TIMER_ARMED		(TIMER_BASE+0x20)",
+"#define TIMER_TIMERAWH		(TIMER_BASE+0x24)",
+"#define TIMER_TIMERAWL		(TIMER_BASE+0x28)",
+"#define TIMER_DBGPAUSE		(TIMER_BASE+0x2C)",
+"#define TIMER_PAUSE		(TIMER_BASE+0x30)",
+"",
+"#define TIMER_INTR		(TIMER_BASE+0x34)",
+"#define TIMER_INTE		(TIMER_BASE+0x38)",
+"#define TIMER_INTF		(TIMER_BASE+0x3C)",
+"#define TIMER_INTS		(TIMER_BASE+0x40)",
+"",
+"/* PWM(GPIO) */",
+"#define	PWM_BASE		0x40050000",
+"",
+"#define	PWM_CH0_BASE		(PWM_BASE+(0x14*0))",
+"#define	PWM_CH1_BASE		(PWM_BASE+(0x14*1))",
+"#define	PWM_CH2_BASE		(PWM_BASE+(0x14*2))",
+"#define	PWM_CH3_BASE		(PWM_BASE+(0x14*3))",
+"#define	PWM_CH4_BASE		(PWM_BASE+(0x14*4))",
+"#define	PWM_CH5_BASE		(PWM_BASE+(0x14*5))",
+"#define	PWM_CH6_BASE		(PWM_BASE+(0x14*6))",
+"#define	PWM_CH7_BASE		(PWM_BASE+(0x14*7))",
+"",
+"#define	PWM_CHx_CSR		(0x00)",
+"#define	PWM_CHx_DIV		(0x04)",
+"#define	PWM_CHx_CTR		(0x08)",
+"#define	PWM_CHx_CC 		(0x0C)",
+"#define	PWM_CHx_TOP		(0x10)",
+"",
+"#define	PWM_EN			(PWM_BASE + 0xA0)",
+"#define	PWM_INTR		(PWM_BASE + 0xA4)",
+"#define	PWM_INTE		(PWM_BASE + 0xA8)",
+"#define	PWM_INTF		(PWM_BASE + 0xAC)",
+"#define	PWM_INTS		(PWM_BASE + 0xB0)",
+"",
+"#define	PWM_CH_CSR_EN		(1<<0)",
+"",
+"#define INTNO_PWM		4	// PWM_IRQ_WRAP",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Physical timer (for RP2040)",
+" */",
+"#define	CPU_HAS_PTMR	(1)",
+"",
+"/* Clock division (to PWM_DIV) */",
+"#define PTMR_DIV_CH0	(1<<4)",
+"#define PTMR_DIV_CH1	(1<<4)",
+"#define PTMR_DIV_CH2	(1<<4)",
+"#define PTMR_DIV_CH3	(1<<4)",
+"#define PTMR_DIV_CH4	(1<<4)",
+"#define PTMR_DIV_CH5	(1<<4)",
+"#define PTMR_DIV_CH6	(1<<4)",
+"#define PTMR_DIV_CH7	(1<<4)",
+"",
+"/* Physical timer interrupt number */",
+"#define INTNO_PTIM	INTNO_PWM",
+"",
+"/* Physical timer interrupt priority */",
+"#define INTPRI_PTIM	2",
+"",
+"/* Phycail timer Maximum count */",
+"#define PTMR_MAX_CNT	(0x0000FFFF)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Coprocessor",
+" */",
+"#define CPU_HAS_FPU			0",
+"#define CPU_HAS_DPS			0",
+"",
+"/*",
+" *  Number of coprocessors to use. ",
+" *    There is no coprocessor for this microcomputer.",
+" */",
+"#define NUM_COPROCESSOR		0",
+"",
+"#endif /* __TK_SYSDEF_DEPEND_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine_depend.h",
+" *",
+" *	Machine type definition (RX231 depended)",
+" */",
+"",
+"#ifndef __SYS_SYSDEPEND_MACHINE_CPU_H__",
+"#define __SYS_SYSDEPEND_MACHINE_CPU_H__",
+"",
+"/*",
+" **** CPU core-depeneded profile (RXv2)",
+" */",
+"",
+"#include \"../core/rxv2/machine.h\"",
+"",
+"/*",
+" **** CPU-depeneded profile (RX231)",
+" */",
+"",
+"#define	TARGET_CPU_DIR		rx231		/* Sysdepend-CPU-Directory name */",
+"",
+"",
+"#endif /* __SYS_SYSDEPEND_MACHINE_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.02",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/10/21 .",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (RX231 depended)",
+" */",
+"",
+"#ifndef __SYS_DEPEND_PROFILE_CPU_H__",
+"#define __SYS_DEPEND_PROFILE_CPU_H__",
+"",
+"/*",
+" **** CPU core-depeneded profile (RXv2)",
+" */",
+"#include \"../core/rxv2/profile.h\"",
+"",
+"/*",
+" **** CPU-depeneded profile (RX231)",
+" */",
+"",
+"/*",
+" * Device Support",
+" */",
+"#define TK_SUPPORT_IOPORT	TRUE		/* Support of I/O port access */",
+"",
+"/*",
+" * physical timer",
+" */",
+"#if USE_PTMR",
+"#define TK_SUPPORT_PTIMER	TRUE		/* Support of physical timer */",
+"#define TK_MAX_PTIMER		2		/* Maximum number of physical timers. */",
+"#else",
+"#define TK_SUPPORT_PTIMER	FALSE		/* Support of physical timer */",
+"#define TK_MAX_PTIMER		0		/* Maximum number of physical timers. */",
+"#endif",
+"",
+"",
+"",
+"#endif /* __SYS_DEPEND_PROFILE_CPU_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06A",
+" *",
+" *    Copyright (C) 2006-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition (RX231 CPU depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __TK_SYSDEF_DEPEND_CPU_H__",
+"#define __TK_SYSDEF_DEPEND_CPU_H__",
+"",
+"",
+"/* CPU Core-dependent definition */",
+"#include \"../core/rxv2/sysdef.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Internal Memorie (Main RAM)  0x00000000 - 0x0000FFFF (or 0x00007FFF)",
+" *	RX231 has two types of memory size, 32KB and 64KB.",
+" */",
+"#define INTERNAL_RAM_SIZE	0x0000FFFF",
+"//#define INTERNAL_RAM_SIZE	0x00007FFF",
+"",
+"#define INTERNAL_RAM_START	0x00000000",
+"#define INTERNAL_RAM_END	(INTERNAL_RAM_START+INTERNAL_RAM_SIZE)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Initial Stack pointer (Used in initialization process)",
+" */",
+"#define	INTSTACK_TOP		INTERNAL_RAM_END+1",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Module Stop Control ",
+" */",
+"",
+"/* Module Stop Control register */",
+"#define	MSTPCRA		(0x00080010)",
+"#define	MSTPCRB		(0x00080014)",
+"#define	MSTPCRC		(0x00080018)",
+"#define	MSTPCRD		(0x0008001C)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System Clock Control ",
+" *     Use CMT0: Compare match timer ch.0",
+" */",
+"",
+"/* CMT0 Registers */",
+"#define CMT_BASE	0x00088000",
+"#define CMT_STR0	(CMT_BASE + 0x0000)",
+"#define CMT0_CR		(CMT_BASE + 0x0002)",
+"#define CMT0_CNT	(CMT_BASE + 0x0004)",
+"#define CMT0_COR	(CMT_BASE + 0x0006)",
+"",
+"#define CMT_STR0_STR0	(0x0001)",
+"#define CMT0_CR_CKS	(0x0003)",
+"#define CMT0_CR_CMIE	(0x0040)",
+"",
+"#define	MHz		(UW)(1000000UL)",
+"#define EXTAL_CLOCK	(UW)(54*MHz)",
+"",
+"#define PCLK_DIV	(2)		/* PCLK Devistion = PCLKB of SCKCR */",
+"#define CMCR_DIV	(8)		/* CMT Clock = PCLK/CMCR_DIV */",
+"#define CMCR_CKS_PLCK	(0x0000)	/* CMCR.CKS = PCLK/8 */",
+"",
+"#define	SYSCLK_ICLK	(UW)(54*MHz)",
+"#define	SYSCLK_PCLKA	(UW)(54*MHz)",
+"#define	SYSCLK_PCLKB	(UW)(27*MHz)",
+"#define	SYSCLK_PCLKD	(UW)(54*MHz)",
+"",
+"/*",
+" * Settable interval range (milli second)",
+" */",
+"#define MIN_TIMER_PERIOD	1",
+"#define MAX_TIMER_PERIOD	50",
+"",
+"",
+"/*----------------------------------------------------------*/",
+"/*",
+" * Interrupt Control",
+" */",
+"",
+"/* ",
+" * RX231 does not have software configurable interrupt and group interrupt functions.",
+" * Both values ​​must be FALSE.",
+" */",
+"#define USE_SFTCNF_INT		(FALSE)		/* Software Configurable Interrupt */",
+"#define USE_GROUP_INT		(FALSE)		/* Group Interrupt */",
+"",
+"/*",
+" * ICU (Interrupt Controller) register",
+" */",
+"#define ICU_IR_BASE	0x00087000UL		/* Interrupt request reg. */",
+"#define ICU_IR(x)	(ICU_IR_BASE + (x))",
+"#define	ICU_IR_IR	(0x01)",
+"",
+"#define ICU_IER_BASE	0x00087200UL		/* Interrupt enable reg. */",
+"#define ICU_IER(x)	(ICU_IER_BASE + ((x) >> 3))",
+"#define ICU_IER_IEN(x)	(0x01 << ((x) & 7))",
+"",
+"#define ICU_IPR_BASE	0x00087300UL		/* Interrupt priority reg. */",
+"#define ICU_IPR(x)	(ICU_IPR_BASE + (x))",
+"",
+"#define ICU_IRQCR_BASE	0x00087500UL		/* Interrupt request control reg. */",
+"#define ICU_IRQCR(x)	(ICU_IRQCR_BASE + (x))",
+"",
+"/*",
+" * Number of Interrupt vectors",
+" */",
+"",
+"#define	N_INTVEC0	256		/* INTVEC0 is the number of interrupts other than group interrupts */",
+"#define N_INTVEC	(N_INTVEC0)	/* RX231 has no group interrupt, INTVEC and INTVEC0 are always equal. */",
+"",
+"/*",
+" * Interrupt Priority Levels",
+" */",
+"#define INTPRI_MIN_INT_PRI	1	/* Lowest interrupt level */",
+"#define INTPRI_MAX_INT_PRI	15	/* Highest Interrupt level */",
+"",
+"/*",
+" * Interrupt used by micro T-Kernel",
+" */",
+"#define INTNO_SYS_DISPATCH	1	/* Dispatch (reserved)*/	",
+"#define INTNO_SYS_SVC		2	/* System call (reserved) */",
+"#define INTNO_SYS_RET_INT	3	/* System call : tk_ret_int (reserved) */",
+"#define INTNO_SYS_DGSPT		4	/* Debugger support (reserved) */",
+"#define INTNO_USER_MIN		5	/* Minimum number of user-defined interrupt */",
+"",
+"#define INTNO_SYS_TICK		28	/* Systten timer tick */",
+"",
+"/*",
+" * System timer interrupt level",
+" */",
+"#define INTLEVEL_SYS_TICK	15",
+"",
+"/*",
+" * Time-event handler interrupt level",
+" */",
+"#define TIMER_INTLEVEL		0",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Pin function control",
+" */",
+"",
+"#define MPC_PWPR		(0x0008C11F)",
+"#define	MPC_PWMR_PFSWE		(1<<6)",
+"#define	MPC_PWMR_B0WI		(1<<7)",
+"",
+"#define MPC_P0nPFS(n)		(0x0008C140+n)",
+"#define MPC_P1nPFS(n)		(0x0008C148+n)",
+"#define MPC_P2nPFS(n)		(0x0008C150+n)",
+"#define MPC_P3nPFS(n)		(0x0008C158+n)",
+"#define MPC_P4nPFS(n)		(0x0008C160+n)",
+"#define MPC_P5nPFS(n)		(0x0008C168+n)",
+"#define MPC_PAnPFS(n)		(0x0008C190+n)",
+"#define MPC_PBnPFS(n)		(0x0008C198+n)",
+"#define MPC_PCnPFS(n)		(0x0008C1A0+n)",
+"#define MPC_PDnPFS(n)		(0x0008C1A8+n)",
+"#define MPC_PEnPFS(n)		(0x0008C1B0+n)",
+"#define MPC_PHnPFS(n)		(0x0008C1C8+n)",
+"",
+"#define	MPC_PFS_ASEL		(1<<7)",
+"#define	MPC_PFS_PSEL		(0x1F)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * I/O Port",
+" */",
+"/* Port direction register */",
+"#define	PORT0_PDR		(0x0008C000)",
+"#define	PORT1_PDR		(0x0008C001)",
+"#define	PORT2_PDR		(0x0008C002)",
+"#define	PORT3_PDR		(0x0008C003)",
+"#define	PORT4_PDR		(0x0008C004)",
+"#define	PORT5_PDR		(0x0008C005)",
+"#define	PORTA_PDR		(0x0008C00A)",
+"#define	PORTB_PDR		(0x0008C00B)",
+"#define	PORTC_PDR		(0x0008C00C)",
+"#define	PORTD_PDR		(0x0008C00D)",
+"#define	PORTE_PDR		(0x0008C00E)",
+"#define	PORTH_PDR		(0x0008C011)",
+"#define	PORTJ_PDR		(0x0008C012)",
+"",
+"/* Port output data register */",
+"#define	PORT0_PODR		(0x0008C020)",
+"#define	PORT1_PODR		(0x0008C021)",
+"#define	PORT2_PODR		(0x0008C022)",
+"#define	PORT3_PODR		(0x0008C023)",
+"#define	PORT4_PODR		(0x0008C024)",
+"#define	PORT5_PODR		(0x0008C025)",
+"#define	PORTA_PODR		(0x0008C02A)",
+"#define	PORTB_PODR		(0x0008C02B)",
+"#define	PORTC_PODR		(0x0008C02C)",
+"#define	PORTD_PODR		(0x0008C02D)",
+"#define	PORTE_PODR		(0x0008C02E)",
+"#define	PORTH_PODR		(0x0008C031)",
+"#define	PORTJ_PODR		(0x0008C032)",
+"",
+"/* Port input data register */",
+"#define	PORT0_PIDR		(0x0008C040)",
+"#define	PORT1_PIDR		(0x0008C041)",
+"#define	PORT2_PIDR		(0x0008C042)",
+"#define	PORT3_PIDR		(0x0008C043)",
+"#define	PORT4_PIDR		(0x0008C044)",
+"#define	PORT5_PIDR		(0x0008C045)",
+"#define	PORTA_PIDR		(0x0008C04A)",
+"#define	PORTB_PIDR		(0x0008C04B)",
+"#define	PORTC_PIDR		(0x0008C04C)",
+"#define	PORTD_PIDR		(0x0008C04D)",
+"#define	PORTE_PIDR		(0x0008C04E)",
+"#define	PORTH_PIDR		(0x0008C051)",
+"#define	PORTJ_PIDR		(0x0008C052)",
+"",
+"/* Port mode register */",
+"#define	PORT0_PMR		(0x0008C060)",
+"#define	PORT1_PMR		(0x0008C061)",
+"#define	PORT2_PMR		(0x0008C062)",
+"#define	PORT3_PMR		(0x0008C063)",
+"#define	PORT4_PMR		(0x0008C064)",
+"#define	PORT5_PMR		(0x0008C065)",
+"#define	PORTA_PMR		(0x0008C06A)",
+"#define	PORTB_PMR		(0x0008C06B)",
+"#define	PORTC_PMR		(0x0008C06C)",
+"#define	PORTD_PMR		(0x0008C06D)",
+"#define	PORTE_PMR		(0x0008C06E)",
+"#define	PORTH_PMR		(0x0008C071)",
+"#define	PORTJ_PMR		(0x0008C072)",
+"",
+"/* Open drain control register 0 */",
+"#define	PORT1_ODR0		(0x0008C082)",
+"#define	PORT2_ODR0		(0x0008C084)",
+"#define	PORT3_ODR0		(0x0008C086)",
+"#define	PORT5_ODR0		(0x0008C08A)",
+"#define	PORTA_ODR0		(0x0008C094)",
+"#define	PORTB_ODR0		(0x0008C096)",
+"#define	PORTC_ODR0		(0x0008C098)",
+"#define	PORTE_ODR0		(0x0008C09C)",
+"#define	PORTJ_ODR0		(0x0008C0A4)",
+"",
+"/* Open drain control register 1 */",
+"#define	PORT1_ODR1		(0x0008C083)",
+"#define	PORT2_ODR1		(0x0008C085)",
+"#define	PORT3_ODR1		(0x0008C087)",
+"#define	PORT5_ODR1		(0x0008C08B)",
+"#define	PORTA_ODR1		(0x0008C095)",
+"#define	PORTB_ODR1		(0x0008C097)",
+"#define	PORTC_ODR1		(0x0008C099)",
+"#define	PORTE_ODR1		(0x0008C09D)",
+"",
+"/* Pull-up control register */",
+"#define	PORT0_PCR		(0x0008C0C0)",
+"#define	PORT1_PCR		(0x0008C0C1)",
+"#define	PORT2_PCR		(0x0008C0C2)",
+"#define	PORT3_PCR		(0x0008C0C3)",
+"#define	PORT4_PCR		(0x0008C0C4)",
+"#define	PORT5_PCR		(0x0008C0C5)",
+"#define	PORTA_PCR		(0x0008C0CA)",
+"#define	PORTB_PCR		(0x0008C0CB)",
+"#define	PORTC_PCR		(0x0008C0CC)",
+"#define	PORTD_PCR		(0x0008C0CD)",
+"#define	PORTE_PCR		(0x0008C0CE)",
+"#define	PORTH_PCR		(0x0008C0D1)",
+"#define	PORTJ_PCR		(0x0008C0D2)",
+"",
+"/* Port switching register */",
+"#define	PORT_PSRA		(0x0008C121)",
+"#define	PORT_PSRB		(0x0008C120)",
+"",
+"/* Drive capacity control register */",
+"#define	PORT1_DSCR		(0x0008C0E1)",
+"#define	PORT2_DSCR		(0x0008C0E2)",
+"#define	PORT3_DSCR		(0x0008C0E3)",
+"#define	PORT5_DSCR		(0x0008C0E5)",
+"#define	PORTA_DSCR		(0x0008C0EA)",
+"#define	PORTB_DSCR		(0x0008C0EB)",
+"#define	PORTC_DSCR		(0x0008C0EC)",
+"#define	PORTD_DSCR		(0x0008C0ED)",
+"#define	PORTE_DSCR		(0x0008C0EE)",
+"#define	PORTH_DSCR		(0x0008C0F1)",
+"#define	PORTJ_DSCR		(0x0008C0F2)",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Physical timer",
+" */",
+"#define	CPU_HAS_PTMR	(1)",
+"",
+"/* TMR Register definition */",
+"#define	TMR01_BASE		0x00088200",
+"#define	TMR23_BASE		0x00088210",
+"",
+"#define TCR			0x0000",
+"#define TCSR			0x0002",
+"#define	TCORA			0x0004",
+"#define	TCORB			0x0006",
+"#define	TCNT			0x0008",
+"#define	TCCR			0x000A",
+"#define TCSTR			0x000C",
+"",
+"#define	TCR_CCLR_CMA		(1<<3)		// Cleared by compare match A",
+"#define	TCR_OVIE		(1<<5)		// Enable OVIn",
+"#define	TCR_CMIEA		(1<<6)		// Enable CMIAn",
+"#define	TCR_CMIEB		(1<<7)		// Enable CMIBn",
+"",
+"#define TCCR_CSS_16BIT		(0x18)",
+"",
+"/* Physical timer clock */",
+"#define TMR01_CLOCK		(0x08)		// Count PCLK",
+"#define TMR23_CLOCK		(0x08)		// Count PCLK",
+"",
+"/* Physical timer interrupt number */",
+"#define INTNO_CMIA0		174",
+"#define INTNO_CMIB0		175",
+"#define INTNO_OVI0		176",
+"#define INTNO_CMIA1		177",
+"#define INTNO_CMIB1		178",
+"#define INTNO_OVI1		179",
+"#define INTNO_CMIA2		180",
+"#define INTNO_CMIB2		181",
+"#define INTNO_OVI2		182",
+"#define INTNO_CMIA3		183",
+"#define INTNO_CMIB3		184",
+"#define INTNO_OVI3		185",
+"",
+"/* Physical timer interrupt priority */",
+"#define INTPRI_TMR01		5",
+"#define INTPRI_TMR23		5",
+"",
+"/* Phycail timer Maximum count */",
+"#define PTMR_MAX_CNT    (0x0000FFFF)",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Coprocessor",
+" */",
+"#define CPU_HAS_FPU			1",
+"#define CPU_HAS_DSP			1",
+"",
+"/*",
+" *  Number of coprocessors to use. Depends on user configuration",
+" */",
+"#if USE_FPU && USE_DSP",
+"#define NUM_COPROCESSOR		2",
+"#elif USE_FPU",
+"#define NUM_COPROCESSOR		1",
+"#elif USE_DSP",
+"#define NUM_COPROCESSOR		1",
+"#else",
+"#define NUM_COPROCESSOR		0",
+"#endif",
+"",
+"",
+"#endif /* __TK_SYSDEF_DEPEND_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine_depend.h",
+" *",
+" *	Machine type definition (RX65N depended)",
+" */",
+"",
+"#ifndef __SYS_SYSDEPEND_MACHINE_CPU_H__",
+"#define __SYS_SYSDEPEND_MACHINE_CPU_H__",
+"",
+"/*",
+" **** CPU core-depeneded profile (RXv2)",
+" */",
+"",
+"#include \"../core/rxv2/machine.h\"",
+"",
+"/*",
+" **** CPU-depeneded profile (RX65N)",
+" */",
+"",
+"#define	TARGET_CPU_DIR		rx65n		/* Sysdepend-CPU-Directory name */",
+"",
+"",
+"#endif /* __SYS_SYSDEPEND_MACHINE_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (RX65N depended)",
+" */",
+"",
+"#ifndef __SYS_DEPEND_PROFILE_CPU_H__",
+"#define __SYS_DEPEND_PROFILE_CPU_H__",
+"",
+"/*",
+" **** CPU core-depeneded profile (RXv2)",
+" */",
+"#include \"../core/rxv2/profile.h\"",
+"",
+"/*",
+" **** CPU-depeneded profile (RX65N)",
+" */",
+"",
+"/*",
+" * Device Support",
+" */",
+"#define TK_SUPPORT_IOPORT	TRUE		/* Support of I/O port access */",
+"",
+"/*",
+" * physical timer",
+" */",
+"#if USE_PTMR",
+"#define TK_SUPPORT_PTIMER	TRUE		/* Support of physical timer */",
+"#define TK_MAX_PTIMER		2		/* Maximum number of physical timers. */",
+"#else",
+"#define TK_SUPPORT_PTIMER	FALSE		/* Support of physical timer */",
+"#define TK_MAX_PTIMER		0		/* Maximum number of physical timers. */",
+"#endif",
+"",
+"#endif /* __SYS_DEPEND_PROFILE_CPU_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06A",
+" *",
+" *    Copyright (C) 2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition (RX65N CPU depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __TK_SYSDEF_DEPEND_CPU_H__",
+"#define __TK_SYSDEF_DEPEND_CPU_H__",
+"",
+"",
+"/* CPU Core-dependent definition */",
+"#include \"../core/rxv2/sysdef.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Internal Memorie (Main RAM)  0x00000000 - 0x003FFFF (256KB)",
+" *",
+" */",
+"#define INTERNAL_RAM_SIZE	0x0003FFFF",
+"",
+"#define INTERNAL_RAM_START	0x00000000",
+"#define INTERNAL_RAM_END	(INTERNAL_RAM_START+INTERNAL_RAM_SIZE)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Initial Stack pointer (Used in initialization process)",
+" */",
+"#define	INTSTACK_TOP		INTERNAL_RAM_END+1",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Module Stop Control ",
+" */",
+"",
+"/* Module Stop Control register */",
+"#define	MSTPCRA		(0x00080010)",
+"#define	MSTPCRB		(0x00080014)",
+"#define	MSTPCRC		(0x00080018)",
+"#define	MSTPCRD		(0x0008001C)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * RTC control ",
+" *",
+" */",
+"",
+"#define	RTC_RCR1	(0x0008C422)",
+"#define	RTC_RCR2	(0x0008C424)",
+"#define	RTC_RCR3	(0x0008C426)",
+"#define	RTC_RCR4	(0x0008C428)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System Timer clock",
+" *	Use CMT0: Compare match timer ch.0",
+" */",
+"",
+"/* CMT0 Registers */",
+"#define CMT_BASE	0x00088000",
+"#define CMT_STR0	(CMT_BASE + 0x0000)",
+"#define CMT0_CR		(CMT_BASE + 0x0002)",
+"#define CMT0_CNT	(CMT_BASE + 0x0004)",
+"#define CMT0_COR	(CMT_BASE + 0x0006)",
+"",
+"#define CMT_STR0_STR0	(0x0001)",
+"#define CMT0_CR_CKS	(0x0003)",
+"#define CMT0_CR_CMIE	(0x0040)",
+"",
+"/*",
+" * Settable interval range (milli second)",
+" */",
+"#define MIN_TIMER_PERIOD	1",
+"#define MAX_TIMER_PERIOD	50",
+"",
+"",
+"/*----------------------------------------------------------*/",
+"/*",
+" * Interrupt Control",
+" */",
+"",
+"/* ",
+" * Choosing to enable software configurable interrupt processing",
+" *	If \"FALSE\" is selected, the OS does not process software configurable interrupts.",
+" */",
+"#define USE_SFTCNF_INT		(TRUE)",
+"",
+"/*",
+" * Choosing to enable group interrupt processing",
+" *	If \"FALSE\" is selected, the OS does not process group interrupts.",
+" */",
+"#define USE_GROUP_INT		(TRUE)",
+"",
+"/*",
+" * ICU (Interrupt Controller) register",
+" */",
+"#define ICU_IR_BASE		0x00087000UL		/* Interrupt request reg. */",
+"#define ICU_IR(x)		(ICU_IR_BASE + (x))",
+"#define	ICU_IR_IR		(0x01)",
+"",
+"#define ICU_IER_BASE		0x00087200UL		/* Interrupt enable reg. */",
+"#define ICU_IER(x)		(ICU_IER_BASE + ((x) >> 3))",
+"#define ICU_IER_IEN(x)		(0x01 << ((x) & 7))",
+"",
+"#define ICU_IPR_BASE		0x00087300UL		/* Interrupt priority reg. */",
+"#define ICU_IPR(x)		(ICU_IPR_BASE + (x))",
+"",
+"#define ICU_IRQCR_BASE		0x00087500UL		/* Interrupt request control reg. */",
+"#define ICU_IRQCR(x)		(ICU_IRQCR_BASE + (x))",
+"",
+"/* Software Configurable Interrupt factor reg. */",
+"#define	ICU_SLIBXR_BASE		(0x00087780UL)		/* n = 128 ~ 143 */",
+"#define	ICU_SLIBR_BASE		(0x00087790UL)		/* n = 144 ~ 207 */",
+"#define	ICU_SLIAR_BASE		(0x000879D0UL)		/* n = 208 ~ 255 */",
+"",
+"#define ICU_SLIBXR(n)		(ICU_SLIBXR_BASE + (n-128))",
+"#define ICU_SLIBR(n)		(ICU_SLIBR_BASE + (n-144))",
+"#define ICU_SLIAR(n)		(ICU_SLIAR_BASE + (n-208))",
+"",
+"#define	ICU_SLIPRCR		(0x00087A00UL)",
+"",
+"/* Group interrupts reg. */",
+"#define	ICU_GRPBE0		(0x00087600UL)",
+"#define	ICU_GRPBL0		(0x00087630UL)",
+"#define	ICU_GRPBL1		(0x00087634UL)",
+"#define	ICU_GRPBL2		(0x00087638UL)",
+"#define	ICU_GRPAL0		(0x00087830UL)",
+"#define	ICU_GRPAL1		(0x00087834UL)",
+"",
+"#define ICU_GENBE0		(0x00087640UL)",
+"#define ICU_GENBL0		(0x00087670UL)",
+"#define ICU_GENBL1		(0x00087674UL)",
+"#define ICU_GENBL2		(0x00087678UL)",
+"#define ICU_GENAL0		(0x00087870UL)",
+"#define ICU_GENAL1		(0x00087874UL)",
+"",
+"#define	ICU_GCRBE0		(0x00087680UL)",
+"",
+"#define INTNO_GROUPBE0		106",
+"#define INTNO_GROUPBL0		110",
+"#define INTNO_GROUPBL1		111",
+"#define INTNO_GROUPBL2		117",
+"#define INTNO_GROUPAL0		112",
+"#define INTNO_GROUPAL1		113",
+"",
+"#define INTPRI_GROUPBE0		5",
+"#define INTPRI_GROUPBL0		5",
+"#define INTPRI_GROUPBL1		5",
+"#define INTPRI_GROUPBL2		5",
+"#define INTPRI_GROUPAL0		5",
+"#define INTPRI_GROUPAL1		5",
+"",
+"/*",
+" * Number of Interrupt vectors",
+" */",
+"",
+"#define	N_INTVEC0	256	/* INTVEC0 is the number of interrupts other than group interrupts */",
+"",
+"#if USE_GROUP_INT",
+"",
+"	#define N_GROUP_INT		(32*6)	/* Number of factors for group interrupts */",
+"	#define N_INTVEC		(N_INTVEC0 + N_GROUP_INT)",
+"	",
+"	#define INTNO_GROUP_TOP		(N_INTVEC0)",
+"	#define	INTNO_GROUP_BE0		(INTNO_GROUP_TOP)",
+"	#define	INTNO_GROUP_BL0		(INTNO_GROUP_TOP + 32)",
+"	#define	INTNO_GROUP_BL1		(INTNO_GROUP_TOP + 64)",
+"	#define	INTNO_GROUP_BL2		(INTNO_GROUP_TOP + 96)",
+"	#define	INTNO_GROUP_AL0		(INTNO_GROUP_TOP + 128)",
+"	#define	INTNO_GROUP_AL1		(INTNO_GROUP_TOP + 160)",
+"#else",
+"	#define	N_INTVEC		(N_INTVEC0)",
+"",
+"#endif /* USE_GROUP_INT */",
+"",
+"/*",
+" * Interrupt Priority Levels",
+" */",
+"#define INTPRI_MIN_INT_PRI	1	/* Lowest interrupt level */",
+"#define INTPRI_MAX_INT_PRI	15	/* Highest Interrupt level */",
+"",
+"/*",
+" * Interrupt used by micro T-Kernel",
+" */",
+"#define INTNO_SYS_DISPATCH	1	/* Dispatch (reserved)*/	",
+"#define INTNO_SYS_SVC		2	/* System call (reserved) */",
+"#define INTNO_SYS_RET_INT	3	/* System call : tk_ret_int (reserved) */",
+"#define INTNO_SYS_DGSPT		4	/* Debugger support (reserved) */",
+"#define INTNO_USER_MIN		5	/* Minimum number of user-defined interrupt */",
+"",
+"#define INTNO_SYS_TICK		28	/* Systten timer tick */",
+"",
+"/*",
+" * System timer interrupt level",
+" */",
+"#define INTLEVEL_SYS_TICK	15",
+"",
+"/*",
+" * Time-event handler interrupt level",
+" */",
+"#define TIMER_INTLEVEL		0",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Pin function control",
+" */",
+"",
+"#define MPC_PWPR		(0x0008C11F)",
+"#define	MPC_PWMR_PFSWE		(1<<6)",
+"#define	MPC_PWMR_B0WI		(1<<7)",
+"",
+"#define MPC_P0nPFS(n)		(0x0008C140+n)",
+"#define MPC_P1nPFS(n)		(0x0008C148+n)",
+"#define MPC_P2nPFS(n)		(0x0008C150+n)",
+"#define MPC_P3nPFS(n)		(0x0008C158+n)",
+"#define MPC_P4nPFS(n)		(0x0008C160+n)",
+"#define MPC_P5nPFS(n)		(0x0008C168+n)",
+"#define MPC_P6nPFS(n)		(0x0008C170+n)",
+"#define MPC_P7nPFS(n)		(0x0008C178+n)",
+"#define MPC_P8nPFS(n)		(0x0008C180+n)",
+"#define MPC_P9nPFS(n)		(0x0008C188+n)",
+"#define MPC_PAnPFS(n)		(0x0008C190+n)",
+"#define MPC_PBnPFS(n)		(0x0008C198+n)",
+"#define MPC_PCnPFS(n)		(0x0008C1A0+n)",
+"#define MPC_PDnPFS(n)		(0x0008C1A8+n)",
+"#define MPC_PEnPFS(n)		(0x0008C1B0+n)",
+"#define MPC_PFnPFS(n)		(0x0008C1B8+n)",
+"#define MPC_PJnPFS(n)		(0x0008C1D0+n)",
+"",
+"#define	MPC_PFS_ASEL		(1<<7)",
+"#define	MPC_PFS_ISEL		(1<<6)",
+"#define	MPC_PFS_PSEL		(0x1F)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * I/O Port",
+" */",
+"/* Port direction register */",
+"#define	PORT0_PDR		(0x0008C000)",
+"#define	PORT1_PDR		(0x0008C001)",
+"#define	PORT2_PDR		(0x0008C002)",
+"#define	PORT3_PDR		(0x0008C003)",
+"#define	PORT4_PDR		(0x0008C004)",
+"#define	PORT5_PDR		(0x0008C005)",
+"#define	PORT6_PDR		(0x0008C006)",
+"#define	PORT7_PDR		(0x0008C007)",
+"#define	PORT8_PDR		(0x0008C008)",
+"#define	PORT9_PDR		(0x0008C009)",
+"#define	PORTA_PDR		(0x0008C00A)",
+"#define	PORTB_PDR		(0x0008C00B)",
+"#define	PORTC_PDR		(0x0008C00C)",
+"#define	PORTD_PDR		(0x0008C00D)",
+"#define	PORTE_PDR		(0x0008C00E)",
+"#define	PORTF_PDR		(0x0008C00F)",
+"#define	PORTG_PDR		(0x0008C010)",
+"#define	PORTJ_PDR		(0x0008C012)",
+"",
+"/* Port output data register */",
+"#define	PORT0_PODR		(0x0008C020)",
+"#define	PORT1_PODR		(0x0008C021)",
+"#define	PORT2_PODR		(0x0008C022)",
+"#define	PORT3_PODR		(0x0008C023)",
+"#define	PORT4_PODR		(0x0008C024)",
+"#define	PORT5_PODR		(0x0008C025)",
+"#define	PORT6_PODR		(0x0008C026)",
+"#define	PORT7_PODR		(0x0008C027)",
+"#define	PORT8_PODR		(0x0008C028)",
+"#define	PORT9_PODR		(0x0008C029)",
+"#define	PORTA_PODR		(0x0008C02A)",
+"#define	PORTB_PODR		(0x0008C02B)",
+"#define	PORTC_PODR		(0x0008C02C)",
+"#define	PORTD_PODR		(0x0008C02D)",
+"#define	PORTE_PODR		(0x0008C02E)",
+"#define	PORTF_PODR		(0x0008C02F)",
+"#define	PORTG_PODR		(0x0008C030)",
+"#define	PORTJ_PODR		(0x0008C032)",
+"",
+"/* Port input data register */",
+"#define	PORT0_PIDR		(0x0008C040)",
+"#define	PORT1_PIDR		(0x0008C041)",
+"#define	PORT2_PIDR		(0x0008C042)",
+"#define	PORT3_PIDR		(0x0008C043)",
+"#define	PORT4_PIDR		(0x0008C044)",
+"#define	PORT5_PIDR		(0x0008C045)",
+"#define	PORT6_PIDR		(0x0008C046)",
+"#define	PORT7_PIDR		(0x0008C047)",
+"#define	PORT8_PIDR		(0x0008C048)",
+"#define	PORT9_PIDR		(0x0008C049)",
+"#define	PORTA_PIDR		(0x0008C04A)",
+"#define	PORTB_PIDR		(0x0008C04B)",
+"#define	PORTC_PIDR		(0x0008C04C)",
+"#define	PORTD_PIDR		(0x0008C04D)",
+"#define	PORTE_PIDR		(0x0008C04E)",
+"#define	PORTF_PIDR		(0x0008C04F)",
+"#define	PORTG_PIDR		(0x0008C050)",
+"#define	PORTJ_PIDR		(0x0008C052)",
+"",
+"/* Port mode register */",
+"#define	PORT0_PMR		(0x0008C060)",
+"#define	PORT1_PMR		(0x0008C061)",
+"#define	PORT2_PMR		(0x0008C062)",
+"#define	PORT3_PMR		(0x0008C063)",
+"#define	PORT4_PMR		(0x0008C064)",
+"#define	PORT5_PMR		(0x0008C065)",
+"#define	PORT6_PMR		(0x0008C066)",
+"#define	PORT7_PMR		(0x0008C067)",
+"#define	PORT8_PMR		(0x0008C068)",
+"#define	PORT9_PMR		(0x0008C069)",
+"#define	PORTA_PMR		(0x0008C06A)",
+"#define	PORTB_PMR		(0x0008C06B)",
+"#define	PORTC_PMR		(0x0008C06C)",
+"#define	PORTD_PMR		(0x0008C06D)",
+"#define	PORTE_PMR		(0x0008C06E)",
+"#define	PORTF_PMR		(0x0008C06F)",
+"#define	PORTG_PMR		(0x0008C070)",
+"#define	PORTJ_PMR		(0x0008C072)",
+"",
+"/* Open drain control register 0 */",
+"#define	PORT0_ODR0		(0x0008C080)",
+"#define	PORT1_ODR0		(0x0008C082)",
+"#define	PORT2_ODR0		(0x0008C084)",
+"#define	PORT3_ODR0		(0x0008C086)",
+"#define	PORT4_ODR0		(0x0008C088)",
+"#define	PORT5_ODR0		(0x0008C08A)",
+"#define	PORT6_ODR0		(0x0008C08C)",
+"#define	PORT7_ODR0		(0x0008C08E)",
+"#define	PORT8_ODR0		(0x0008C090)",
+"#define	PORT9_ODR0		(0x0008C092)",
+"#define	PORTA_ODR0		(0x0008C094)",
+"#define	PORTB_ODR0		(0x0008C096)",
+"#define	PORTC_ODR0		(0x0008C098)",
+"#define	PORTD_ODR0		(0x0008C09A)",
+"#define	PORTE_ODR0		(0x0008C09C)",
+"#define	PORTF_ODR0		(0x0008C09E)",
+"#define	PORTG_ODR0		(0x0008C0A0)",
+"#define	PORTJ_ODR0		(0x0008C0A4)",
+"",
+"/* Open drain control register 1 */",
+"#define	PORT0_ODR1		(0x0008C081)",
+"#define	PORT1_ODR1		(0x0008C083)",
+"#define	PORT2_ODR1		(0x0008C085)",
+"#define	PORT3_ODR1		(0x0008C087)",
+"#define	PORT4_ODR1		(0x0008C089)",
+"#define	PORT5_ODR1		(0x0008C08B)",
+"#define	PORT6_ODR1		(0x0008C08D)",
+"#define	PORT7_ODR1		(0x0008C08F)",
+"#define	PORT8_ODR1		(0x0008C091)",
+"#define	PORT9_ODR1		(0x0008C093)",
+"#define	PORTA_ODR1		(0x0008C095)",
+"#define	PORTB_ODR1		(0x0008C097)",
+"#define	PORTC_ODR1		(0x0008C099)",
+"#define	PORTD_ODR1		(0x0008C09B)",
+"#define	PORTE_ODR1		(0x0008C09D)",
+"#define	PORTF_ODR1		(0x0008C09F)",
+"#define	PORTG_ODR1		(0x0008C0A1)",
+"#define	PORTJ_ODR1		(0x0008C0A5)",
+"",
+"/* Pull-up control register */",
+"#define	PORT0_PCR		(0x0008C0C0)",
+"#define	PORT1_PCR		(0x0008C0C1)",
+"#define	PORT2_PCR		(0x0008C0C2)",
+"#define	PORT3_PCR		(0x0008C0C3)",
+"#define	PORT4_PCR		(0x0008C0C4)",
+"#define	PORT5_PCR		(0x0008C0C5)",
+"#define	PORT6_PCR		(0x0008C0C6)",
+"#define	PORT7_PCR		(0x0008C0C7)",
+"#define	PORT8_PCR		(0x0008C0C8)",
+"#define	PORT9_PCR		(0x0008C0C9)",
+"#define	PORTA_PCR		(0x0008C0CA)",
+"#define	PORTB_PCR		(0x0008C0CB)",
+"#define	PORTC_PCR		(0x0008C0CC)",
+"#define	PORTD_PCR		(0x0008C0CD)",
+"#define	PORTE_PCR		(0x0008C0CE)",
+"#define	PORTF_PCR		(0x0008C0CF)",
+"#define	PORTG_PCR		(0x0008C0D0)",
+"#define	PORTJ_PCR		(0x0008C0D2)",
+"",
+"/* Port switching register */",
+"#define	PORT_PSRA		(0x0008C121)",
+"#define	PORT_PSRB		(0x0008C120)",
+"",
+"/* Drive capacity control register */",
+"#define	PORT1_DSCR		(0x0008C0E0)",
+"#define	PORT0_DSCR		(0x0008C0E1)",
+"#define	PORT2_DSCR		(0x0008C0E2)",
+"#define	PORT5_DSCR		(0x0008C0E5)",
+"#define	PORT7_DSCR		(0x0008C0E7)",
+"#define	PORT8_DSCR		(0x0008C0E8)",
+"#define	PORT9_DSCR		(0x0008C0E9)",
+"#define	PORTA_DSCR		(0x0008C0EA)",
+"#define	PORTB_DSCR		(0x0008C0EB)",
+"#define	PORTC_DSCR		(0x0008C0EC)",
+"#define	PORTD_DSCR		(0x0008C0ED)",
+"#define	PORTE_DSCR		(0x0008C0EE)",
+"#define	PORTG_DSCR		(0x0008C0F0)",
+"#define	PORTJ_DSCR		(0x0008C0F2)",
+"",
+"/* Drive capacity control register 2 */",
+"#define	PORT0_DSCR2		(0x0008C128)",
+"#define	PORT1_DSCR2		(0x0008C129)",
+"#define	PORT2_DSCR2		(0x0008C12A)",
+"#define	PORT3_DSCR2		(0x0008C12B)",
+"#define	PORT5_DSCR2		(0x0008C12D)",
+"#define	PORT7_DSCR2		(0x0008C12F)",
+"#define	PORT8_DSCR2		(0x0008C130)",
+"#define	PORT9_DSCR2		(0x0008C131)",
+"#define	PORTA_DSCR2		(0x0008C132)",
+"#define	PORTB_DSCR2		(0x0008C133)",
+"#define	PORTC_DSCR2		(0x0008C134)",
+"#define	PORTD_DSCR2		(0x0008C135)",
+"#define	PORTE_DSCR2		(0x0008C136)",
+"#define	PORTG_DSCR2		(0x0008C138)",
+"#define	PORTJ_DSCR2		(0x0008C13A)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Physical timer",
+" */",
+"#define	CPU_HAS_PTMR	(1)",
+"",
+"/* TMR Register definition */",
+"#define	TMR01_BASE		0x00088200",
+"#define	TMR23_BASE		0x00088210",
+"",
+"#define TCR			0x0000",
+"#define TCSR			0x0002",
+"#define	TCORA			0x0004",
+"#define	TCORB			0x0006",
+"#define	TCNT			0x0008",
+"#define	TCCR			0x000A",
+"#define TCSTR			0x000C",
+"",
+"#define	TCR_CCLR_CMA		(1<<3)		// Cleared by compare match A",
+"#define	TCR_OVIE		(1<<5)		// Enable OVIn",
+"#define	TCR_CMIEA		(1<<6)		// Enable CMIAn",
+"#define	TCR_CMIEB		(1<<7)		// Enable CMIBn",
+"",
+"#define TCCR_CSS_16BIT		(0x18)",
+"",
+"/* TMR interrupt factor number */",
+"#define INTFN_CMIA0		3",
+"#define INTFN_CMIB0		4",
+"#define INTFN_OVI0		5",
+"#define INTFN_CMIA1		6",
+"#define INTFN_CMIB1		7",
+"#define INTFN_OVI1		8",
+"#define INTFN_CMIA2		9",
+"#define INTFN_CMIB2		10",
+"#define INTFN_OVI2		11",
+"#define INTFN_CMIA3		12",
+"#define INTFN_CMIB3		13",
+"#define INTFN_OVI3		14",
+"",
+"/* Physical timer clock */",
+"#define TMR01_CLOCK		(0x08)		// Count PCLK",
+"#define TMR23_CLOCK		(0x08)		// Count PCLK",
+"",
+"/* Physical timer interrupt factor number",
+" *	Can be set between INTB128 and INTB207",
+" */",
+"#define INTNO_PTMR1		128		// INTB128",
+"#define INTNO_PTMR2		129		// INTB129",
+"",
+"/* Physical timer interrupt priority */",
+"#define INTPRI_PTMR1		5",
+"#define INTPRI_PTMR2		5",
+"",
+"/* Phycail timer Maximum count */",
+"#define PTMR_MAX_CNT    (0x0000FFFF)",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Coprocessor",
+" */",
+"#define CPU_HAS_FPU			1",
+"#define CPU_HAS_DSP			1",
+"",
+"/*",
+" *  Number of coprocessors to use. Depends on user configuration",
+" */",
+"#if USE_FPU && USE_DSP",
+"#define NUM_COPROCESSOR		2",
+"#elif USE_FPU",
+"#define NUM_COPROCESSOR		1",
+"#elif USE_DSP",
+"#define NUM_COPROCESSOR		1",
+"#else",
+"#define NUM_COPROCESSOR		0",
+"#endif",
+"",
+"#endif /* __TK_SYSDEF_DEPEND_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine_depend.h",
+" *",
+" *	Machine type definition (RZ/A2M depended)",
+" */",
+"",
+"#ifndef __SYS_SYSDEPEND_MACHINE_CPU_H__",
+"#define __SYS_SYSDEPEND_MACHINE_CPU_H__",
+"",
+"/*",
+" **** CPU core-depeneded profile (ARM Cortex-A9)",
+" */",
+"",
+"#include \"../core/armv7a/machine.h\"",
+"",
+"/*",
+" **** CPU-depeneded profile (RZ/A2M)",
+" */",
+"",
+"#define	TARGET_CPU_DIR		rza2m		/* Sysdepend-CPU-Directory name */",
+"",
+"",
+"#endif /* __SYS_SYSDEPEND_MACHINE_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05.B0",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (RZ/A2M depended)",
+" */",
+"",
+"#ifndef __SYS_DEPEND_PROFILE_CPU_H__",
+"#define __SYS_DEPEND_PROFILE_CPU_H__",
+"",
+"/*",
+" **** CPU core-depeneded profile (ARM Cortex-A9)",
+" */",
+"#include \"../core/armv7a/profile.h\"",
+"",
+"/*",
+" **** CPU-depeneded profile (RZ/A9M)",
+" */",
+"",
+"/*",
+" * Device Support",
+" */",
+"#define TK_SUPPORT_IOPORT	TRUE		/* Support of I/O port access */",
+"",
+"/*",
+" * physical timer",
+" */",
+"#define TK_SUPPORT_PTIMER	TRUE		/* Support of physical timer */",
+"#define TK_MAX_PTIMER		2		/* Maximum number of physical timers. */",
+"",
+"",
+"",
+"#endif /* __SYS_DEPEND_PROFILE_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06A",
+" *",
+" *    Copyright (C) 2006-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition (RZ/A2M depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __TK_SYSDEF_DEPEND_CPU_H__",
+"#define __TK_SYSDEF_DEPEND_CPU_H__",
+"",
+"",
+"/* CPU Core-dependent definition */",
+"#include \"../core/armv7a/sysdef.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * RAM Map (Internal Memorie 0x80020000 - 0x803FFFFF)",
+" *       Backup RAM     0x80000000 - 0x8001FFFF",
+" *       Cached RAM     0x80020000 - 0x802FFFFF",
+" *       Uncached RAM   0x80300000 - 0x803FBFFF",
+" *       TTB RAM        0x803FC000 - 0c803FFFFF",
+" */",
+"",
+"#define	IRAM_START_ADDR			0x80000000",
+"#define	IRAM_SIZE			0x00400000",
+"#define	IRAM_UNCACHED_SIZE		0x00200000",
+"",
+"#define	IRAM_CACHED_START_ADDR		IRAM_START_ADDR",
+"#define	IRAM_CACHED_SIZE		(IRAM_SIZE - IRAM_UNCACHED_SIZE)",
+"#define	IRAM_CACHED_END_ADDR		(IRAM_CACHED_START_ADDR + IRAM_CACHED_SIZE)",
+"#define	IRAM_UNCACHED_START_ADDR	IRAM_CACHED_END_ADDR",
+"",
+"/*",
+" * mT-Kernel RAM area (OS uses cached RAM area.)",
+"*/",
+"#define INTERNAL_RAM_SIZE	0x002E0000",
+"#define INTERNAL_RAM_START	0x80020000",
+"#define INTERNAL_RAM_END	(INTERNAL_RAM_START+INTERNAL_RAM_SIZE)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Initial Stack pointer (Used in initialization process)",
+" */",
+"#define	INITIAL_SP		INTERNAL_RAM_END",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * TTB(translation table base) Attribute",
+" */",
+"#define TTB_ATR_STRGLY				0x00DF2	/* 0000_0000_0000_0000_0000_1101_1111_0010    Secure Strongly-ordered memory */",
+"#define TTB_ATR_STRGLY_NS			0x80DF2	/* 0000_0000_0000_1000_0000_1101_1111_0010    Non-secure Strongly-ordered memory */",
+"#define TTB_ATR_DEVICE				0x00DF6	/* 0000_0000_0000_0000_0000_1101_1111_0110    Secure Device memory */",
+"#define TTB_ATR_DEVICE_NS			0x80DF6	/* 0000_0000_0000_1000_0000_1101_1111_0110    Non-secure Device memory */",
+"#define TTB_ATR_NORMAL_NOT_CACHE		0x04DE2	/* 0000_0000_0000_0000_0100_1101_1110_0010    Outer and inner Non-cacheable, and Secure Normal memory */",
+"#define TTB_ATR_NORMAL_NOT_CACHE_NS		0x84DE2	/* 0000_0000_0000_1000_0100_1101_1110_0010    Outer and inner Non-cacheable, and Non-secure Normal memory */",
+"#define TTB_ATR_NORMAL_CACHE			0x01DEE	/* 0000_0000_0000_0000_0001_1101_1110_1110    Outer and inner Write-Back Write-Allocate Cacheable, and Secure Normal memory */",
+"#define TTB_ATR_NORMAL_CACHE_NS			0x81DEE	/* 0000_0000_0000_1000_0001_1101_1110_1110    Outer and inner Write-Back Write-Allocate Cacheable, and Non-secure Normal memory */",
+"#define TTB_ATR_NORMAL_L1_CACHE_L2_NOT_CACHE	0x04DE6	/* 0000_0000_0000_0000_0100_1101_1110_0110    Outer Non-cacheable, Inner Write-Back Write-Allocate Cacheable, and Secure Normal memory */",
+"#define TTB_ATR_NORMAL_L1_CACHE_L2_NOT_CACHE_NS	0x84DE6	/* 0000_0000_0000_1000_0100_1101_1110_0110    Outer Non-cacheable, Inner Write-Back Write-Allocate Cacheable, and Non-secure Normal memory */",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Power & Clock Control",
+" */",
+"",
+"/*",
+" * CPG registers",
+"*/",
+"#define CPG_FRQCR		0xFCFE0010",
+"",
+"/* CPG initial value */",
+"/*	PLL(x88), I:G:B:P1:P0 = 22:11:5.5:2.75:1.375 ",
+" *	CKIO:Output at time usually,",
+" *	Output when bus right is opened,",
+" *	output at standby\"L\"",
+" */",
+"#define	CPG_FRQCR_INIVAL	0x1012",
+"#define CLOCK_in	24	/* Clockin  = 24MH */",
+"#define CLOCK_I		528	/* I  Clock = 528MHz */",
+"#define CLOCK_G		264	/* G  Clock = 264MHz */",
+"#define CLOCK_B		132	/* B  Clock = 132MHz */",
+"#define	CLOCK_P1	66	/* P1 Clock = 66MHz */",
+"#define	CLOCK_P0	33	/* P0 Clock = 33MHz */",
+"",
+"#define	CPG_CKIOSEL		0xFCFE0100",
+"#define CPG_SCLKSEL		0xFCFE0104",
+"",
+"/*",
+" * Low power consumption mode registers",
+"*/",
+"#define	CPG_SYSCR1		0xFCFE0400",
+"#define	CPG_SYSCR2		0xFCFE0404",
+"#define	CPG_SYSCR3		0xFCFE0408",
+"",
+"/*",
+" * Stanby control registers",
+" */",
+"#define CPG_STBCR1		0xFCFE0020",
+"#define CPG_STBCR2		0xFCFE0024",
+"#define CPG_STBCR3		0xFCFE0420",
+"#define CPG_STBCR4		0xFCFE0424",
+"#define CPG_STBCR5		0xFCFE0428",
+"#define CPG_STBCR6		0xFCFE042C",
+"#define CPG_STBCR7		0xFCFE0430",
+"#define CPG_STBCR8		0xFCFE0434",
+"#define CPG_STBCR9		0xFCFE0438",
+"#define CPG_STBCR10		0xFCFE043C",
+"#define CPG_STBCR11		0xFCFE0440",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Level2 cache controller (PL310) registers",
+" */",
+"#define PL310_BASE		0x1F003000",
+"#define PL310_POWER_CTL		(PL310_BASE + 0x0F80)		/* Power Control Register */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System Timer Clock",
+" */",
+"",
+"/* OSTM0 : OS timer ch.0 */",
+"#define OSTM0_BASE	0xE803B000",
+"#define OSTM0_CMP	(OSTM0_BASE + 0x0000)",
+"#define OSTM0_CNT	(OSTM0_BASE + 0x0004)",
+"#define OSTM0_TE	(OSTM0_BASE + 0x0010)",
+"#define OSTM0_TS	(OSTM0_BASE + 0x0014)",
+"#define OSTM0_TT	(OSTM0_BASE + 0x0018)",
+"#define OSTM0_CTL	(OSTM0_BASE + 0x0020)",
+"",
+"",
+"/* P1 clock 66.666MHz */",
+"#define TMCLK			66		/* Timer clock input (MHz) */",
+"#define TMCLK_KHz		66666		/* Timer clock input (KHz) */",
+"#define	COUNT_PER_SEC		66666666LL	/* count/sec */",
+"#define	NSEC_PER_COUNT		15		/* nsec/count */",
+"",
+"",
+"/* Settable interval range (millisecond) */",
+"#define MIN_TIMER_PERIOD	1",
+"#define MAX_TIMER_PERIOD	50",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * GIC(Generic Interrupt Controller) -400",
+" */",
+"#define GICD_BASE	0xE8221000UL		/* Distributor register base address */",
+"#define GICC_BASE	0xE8222000UL		/* CPU interface register base address */",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Number of Interrupt vectors",
+" */",
+"#define N_INTVEC		(512)		/* Number of Interrupt vectors */",
+"",
+"/*",
+" * The number of the implemented bit width for priority value fields.",
+" */",
+"#define INTPRI_BITWIDTH		5	/* bitwidth of interrupt priority */",
+"",
+"/*",
+" * Interrupt Priority Levels",
+" */",
+"#define INTPRI_SHIFT		(8 - INTPRI_BITWIDTH)",
+"#define INTPRI_HIGHEST		0	/* Highest interrupt level */",
+"#define INTPRI_LOWEST		31	/* Lowest  interrupt level  */",
+"#define INTPRI_SYSTICK		1	/* interrupt priority for SysTick */",
+"",
+"/*",
+" * Interrupt used by micro T-Kernel",
+" */",
+"#define INTNO_SW0		0	/* GIC software interrupt 0 (min.) */",
+"#define INTNO_SW15		15	/* GIC software interrupt 15 (max.) */",
+"",
+"#define INTNO_SYSTICK		88	/* System Timer interrupt (OSTIM0) */",
+"",
+"/*",
+" * Time-event handler interrupt level",
+" */",
+"#define TIMER_INTLEVEL		0",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * General purpose I / O port",
+" */",
+"#define PORT_BASE	0xFCFFE000",
+"",
+"/* Port direction register */",
+"#define PORT0_PDR	(PORT_BASE + 0x0000)",
+"#define PORT1_PDR	(PORT_BASE + 0x0002)",
+"#define PORT2_PDR	(PORT_BASE + 0x0004)",
+"#define PORT3_PDR	(PORT_BASE + 0x0006)",
+"#define PORT4_PDR	(PORT_BASE + 0x0008)",
+"#define PORT5_PDR	(PORT_BASE + 0x000A)",
+"#define PORT6_PDR	(PORT_BASE + 0x000C)",
+"#define PORT7_PDR	(PORT_BASE + 0x000E)",
+"#define PORT8_PDR	(PORT_BASE + 0x0010)",
+"#define PORT9_PDR	(PORT_BASE + 0x0012)",
+"#define PORTA_PDR	(PORT_BASE + 0x0014)",
+"#define PORTB_PDR	(PORT_BASE + 0x0016)",
+"#define PORTC_PDR	(PORT_BASE + 0x0018)",
+"#define PORTD_PDR	(PORT_BASE + 0x001A)",
+"#define PORTE_PDR	(PORT_BASE + 0x001C)",
+"#define PORTF_PDR	(PORT_BASE + 0x001E)",
+"#define PORTG_PDR	(PORT_BASE + 0x0020)",
+"#define PORTH_PDR	(PORT_BASE + 0x0022)",
+"#define PORTJ_PDR	(PORT_BASE + 0x0024)",
+"#define PORTK_PDR	(PORT_BASE + 0x0026)",
+"#define PORTL_PDR	(PORT_BASE + 0x0028)",
+"#define PORTM_PDR	(PORT_BASE + 0x002A)",
+"",
+"/* Port output data register */",
+"#define PORT0_PODR	(PORT_BASE + 0x0040)",
+"#define PORT1_PODR	(PORT_BASE + 0x0041)",
+"#define PORT2_PODR	(PORT_BASE + 0x0042)",
+"#define PORT3_PODR	(PORT_BASE + 0x0043)",
+"#define PORT4_PODR	(PORT_BASE + 0x0044)",
+"#define PORT5_PODR	(PORT_BASE + 0x0045)",
+"#define PORT6_PODR	(PORT_BASE + 0x0046)",
+"#define PORT7_PODR	(PORT_BASE + 0x0047)",
+"#define PORT8_PODR	(PORT_BASE + 0x0048)",
+"#define PORT9_PODR	(PORT_BASE + 0x0049)",
+"#define PORTA_PODR	(PORT_BASE + 0x004A)",
+"#define PORTB_PODR	(PORT_BASE + 0x004B)",
+"#define PORTC_PODR	(PORT_BASE + 0x004C)",
+"#define PORTD_PODR	(PORT_BASE + 0x004D)",
+"#define PORTE_PODR	(PORT_BASE + 0x004E)",
+"#define PORTF_PODR	(PORT_BASE + 0x004F)",
+"#define PORTG_PODR	(PORT_BASE + 0x0050)",
+"#define PORTH_PODR	(PORT_BASE + 0x0051)",
+"#define PORTJ_PODR	(PORT_BASE + 0x0052)",
+"#define PORTK_PODR	(PORT_BASE + 0x0053)",
+"#define PORTL_PODR	(PORT_BASE + 0x0054)",
+"#define PORTM_PODR	(PORT_BASE + 0x0055)",
+"",
+"/* Port input data register */",
+"#define PORT0_PIDR	(PORT_BASE + 0x0060)",
+"#define PORT1_PIDR	(PORT_BASE + 0x0061)",
+"#define PORT2_PIDR	(PORT_BASE + 0x0062)",
+"#define PORT3_PIDR	(PORT_BASE + 0x0063)",
+"#define PORT4_PIDR	(PORT_BASE + 0x0064)",
+"#define PORT5_PIDR	(PORT_BASE + 0x0065)",
+"#define PORT6_PIDR	(PORT_BASE + 0x0066)",
+"#define PORT7_PIDR	(PORT_BASE + 0x0067)",
+"#define PORT8_PIDR	(PORT_BASE + 0x0068)",
+"#define PORT9_PIDR	(PORT_BASE + 0x0069)",
+"#define PORTA_PIDR	(PORT_BASE + 0x006A)",
+"#define PORTB_PIDR	(PORT_BASE + 0x006B)",
+"#define PORTC_PIDR	(PORT_BASE + 0x006C)",
+"#define PORTD_PIDR	(PORT_BASE + 0x006D)",
+"#define PORTE_PIDR	(PORT_BASE + 0x006E)",
+"#define PORTF_PIDR	(PORT_BASE + 0x006F)",
+"#define PORTG_PIDR	(PORT_BASE + 0x0070)",
+"#define PORTH_PIDR	(PORT_BASE + 0x0071)",
+"#define PORTJ_PIDR	(PORT_BASE + 0x0072)",
+"#define PORTK_PIDR	(PORT_BASE + 0x0073)",
+"#define PORTL_PIDR	(PORT_BASE + 0x0074)",
+"#define PORTM_PIDR	(PORT_BASE + 0x0075)",
+"",
+"/* Port mode register */",
+"#define PORT0_PMR	(PORT_BASE + 0x0080)",
+"#define PORT1_PMR	(PORT_BASE + 0x0081)",
+"#define PORT2_PMR	(PORT_BASE + 0x0082)",
+"#define PORT3_PMR	(PORT_BASE + 0x0083)",
+"#define PORT4_PMR	(PORT_BASE + 0x0084)",
+"#define PORT5_PMR	(PORT_BASE + 0x0085)",
+"#define PORT6_PMR	(PORT_BASE + 0x0086)",
+"#define PORT7_PMR	(PORT_BASE + 0x0087)",
+"#define PORT8_PMR	(PORT_BASE + 0x0088)",
+"#define PORT9_PMR	(PORT_BASE + 0x0089)",
+"#define PORTA_PMR	(PORT_BASE + 0x008A)",
+"#define PORTB_PMR	(PORT_BASE + 0x008B)",
+"#define PORTC_PMR	(PORT_BASE + 0x008C)",
+"#define PORTD_PMR	(PORT_BASE + 0x008D)",
+"#define PORTE_PMR	(PORT_BASE + 0x008E)",
+"#define PORTF_PMR	(PORT_BASE + 0x008F)",
+"#define PORTG_PMR	(PORT_BASE + 0x0090)",
+"#define PORTH_PMR	(PORT_BASE + 0x0091)",
+"#define PORTJ_PMR	(PORT_BASE + 0x0092)",
+"#define PORTK_PMR	(PORT_BASE + 0x0093)",
+"#define PORTL_PMR	(PORT_BASE + 0x0094)",
+"#define PORTM_PMR	(PORT_BASE + 0x0095)",
+"",
+"/* Drive capacity control register */",
+"#define PORT0_DSCR	(PORT_BASE + 0x0140)",
+"#define PORT1_DSCR	(PORT_BASE + 0x0142)",
+"#define PORT2_DSCR	(PORT_BASE + 0x0144)",
+"#define PORT3_DSCR	(PORT_BASE + 0x0146)",
+"#define PORT4_DSCR	(PORT_BASE + 0x0148)",
+"#define PORT5_DSCR	(PORT_BASE + 0x014A)",
+"#define PORT6_DSCR	(PORT_BASE + 0x014C)",
+"#define PORT7_DSCR	(PORT_BASE + 0x014E)",
+"#define PORT8_DSCR	(PORT_BASE + 0x0150)",
+"#define PORT9_DSCR	(PORT_BASE + 0x0152)",
+"#define PORTA_DSCR	(PORT_BASE + 0x0154)",
+"#define PORTB_DSCR	(PORT_BASE + 0x0156)",
+"#define PORTC_DSCR	(PORT_BASE + 0x0158)",
+"#define PORTD_DSCR	(PORT_BASE + 0x015A)",
+"#define PORTE_DSCR	(PORT_BASE + 0x015C)",
+"#define PORTF_DSCR	(PORT_BASE + 0x015E)",
+"#define PORTG_DSCR	(PORT_BASE + 0x0160)",
+"#define PORTH_DSCR	(PORT_BASE + 0x0162)",
+"#define PORTJ_DSCR	(PORT_BASE + 0x0164)",
+"#define PORTK_DSCR	(PORT_BASE + 0x0166)",
+"#define PORTL_DSCR	(PORT_BASE + 0x0168)",
+"#define PORTM_DSCR	(PORT_BASE + 0x016A)",
+"",
+"/* Pin function selection register */",
+"#define PORT0n_PFS(n)	(PORT_BASE + 0x0200 + (n))",
+"#define PORT1n_PFS(n)	(PORT_BASE + 0x0208 + (n))",
+"#define PORT2n_PFS(n)	(PORT_BASE + 0x0210 + (n))",
+"#define PORT3n_PFS(n)	(PORT_BASE + 0x0218 + (n))",
+"#define PORT4n_PFS(n)	(PORT_BASE + 0x0220 + (n))",
+"#define PORT5n_PFS(n)	(PORT_BASE + 0x0228 + (n))",
+"#define PORT6n_PFS(n)	(PORT_BASE + 0x0230 + (n))",
+"#define PORT7n_PFS(n)	(PORT_BASE + 0x0238 + (n))",
+"#define PORT8n_PFS(n)	(PORT_BASE + 0x0240 + (n))",
+"#define PORT9n_PFS(n)	(PORT_BASE + 0x0248 + (n))",
+"#define PORTAn_PFS(n)	(PORT_BASE + 0x0250 + (n))",
+"#define PORTBn_PFS(n)	(PORT_BASE + 0x0258 + (n))",
+"#define PORTCn_PFS(n)	(PORT_BASE + 0x0260 + (n))",
+"#define PORTDn_PFS(n)	(PORT_BASE + 0x0268 + (n))",
+"#define PORTEn_PFS(n)	(PORT_BASE + 0x0270 + (n))",
+"#define PORTFn_PFS(n)	(PORT_BASE + 0x0278 + (n))",
+"#define PORTGn_PFS(n)	(PORT_BASE + 0x0280 + (n))",
+"#define PORTHn_PFS(n)	(PORT_BASE + 0x0288 + (n))",
+"#define PORTJn_PFS(n)	(PORT_BASE + 0x0290 + (n))",
+"#define PORTKn_PFS(n)	(PORT_BASE + 0x0298 + (n))",
+"#define PORTLn_PFS(n)	(PORT_BASE + 0x02A0 + (n))",
+"#define PORTMn_PFS(n)	(PORT_BASE + 0x02A8 + (n))",
+"",
+"#define PORT_PFS_ISEL		(0x40)",
+"#define PORT_PFS_PSEL(n)	(0x07 & n)",
+"",
+"#define	PORT_PWPR	(PORT_BASE + 0x02FF)		/* Write protect register */",
+"#define PORT_PWPR_B0WI	0b10000000			/* PFSWE write permission bit */",
+"#define PORT_PWPR_PFSWE	0b01000000			/* PFS write permission bit */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Physical timer (for RZ/A2M)",
+" */",
+"#define	CPU_HAS_PTMR	(1)",
+"",
+"/* Timer register definition */",
+"#define OSTM1_BASE	0xE803C000",
+"#define OSTM2_BASE	0xE803D000",
+"",
+"#define OSTMnCMP	0x00",
+"#define OSTMnCNT	0x04",
+"#define OSTMnTE		0x10",
+"#define OSTMnTS		0x14",
+"#define OSTMnTT		0x18",
+"#define OSTMnCTL	0x20",
+"",
+"#define	OSTMnCTL_MD1	0x02",
+"#define	OSTMnCTL_MD0	0x01",
+"",
+"/* Physical timer interrupt number */",
+"#define INTNO_OSTM1	89",
+"#define INTNO_OSTM2	90",
+"",
+"/* Physical timer interrupt priority */",
+"#define INTPRI_OSTM1	5",
+"#define INTPRI_OSTM2	5",
+"",
+"/* OS Timer clock 33.333MHz */",
+"#define	PTMCLK		33",
+"",
+"/* Phycail timer Maximum count */",
+"#define PTMR_MAX_CNT	(0xFFFFFFFF)",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Coprocessor",
+" */",
+"#define CPU_HAS_FPU			1",
+"#define CPU_HAS_DSP			0",
+"",
+"/*",
+" *  Number of coprocessors to use. ",
+" *    There is no coprocessor for this microcomputer.",
+" */",
+"#if USE_FPU",
+"#define NUM_COPROCESSOR		1",
+"#else",
+"#define NUM_COPROCESSOR		0",
+"#endif",
+"",
+"#endif /* __TK_SYSDEF_DEPEND_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine_depend.h",
+" *",
+" *	Machine type definition (STM32H7 depended)",
+" */",
+"",
+"#ifndef __SYS_SYSDEPEND_MACHINE_CPU_H__",
+"#define __SYS_SYSDEPEND_MACHINE_CPU_H__",
+"",
+"/*",
+" **** CPU core-depeneded profile (ARMv7M(ARM Cortex-M7))",
+" */",
+"",
+"#include \"../core/armv7m/machine.h\"",
+"",
+"/*",
+" **** CPU-depeneded profile (STM32H7)",
+" */",
+"",
+"#define	TARGET_CPU_DIR		stm32h7		/* Sysdepend-CPU-Directory name */",
+"",
+"",
+"#endif /* __SYS_SYSDEPEND_MACHINE_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (STM32H7 depended)",
+" */",
+"",
+"#ifndef __SYS_DEPEND_PROFILE_CPU_H__",
+"#define __SYS_DEPEND_PROFILE_CPU_H__",
+"",
+"/*",
+" **** CPU core-depeneded profile (ARMv7M(ARM Cortex-M7))",
+" */",
+"#include \"../core/armv7m/profile.h\"",
+"",
+"/*",
+" **** CPU-depeneded profile (STM32H7)",
+" */",
+"",
+"/*",
+" * Device Support",
+" */",
+"#define TK_SUPPORT_IOPORT	TRUE		/* Support of I/O port access */",
+"",
+"/*",
+" * Physical timer",
+" */",
+"#if USE_PTMR",
+"#define TK_SUPPORT_PTIMER	TRUE		/* Support of physical timer */",
+"#define TK_MAX_PTIMER		4		/* Maximum number of physical timers. */",
+"#else",
+"#define TK_SUPPORT_PTIMER	FALSE		/* Support of physical timer */",
+"#define TK_MAX_PTIMER		0		/* Maximum number of physical timers. */",
+"#endif",
+"",
+"",
+"#endif /* __SYS_DEPEND_PROFILE_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06A",
+" *",
+" *    Copyright (C) 2006-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition (STM32H7 depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __TK_SYSDEF_DEPEND_CPU_H__",
+"#define __TK_SYSDEF_DEPEND_CPU_H__",
+"",
+"#include \"../../../machine.h\"",
+"",
+"/* CPU Core-dependent definition */",
+"#include \"../core/armv7m/sysdef.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Internal Memorie (Main RAM)",
+" */",
+"",
+"/* STM32H723 Internal SRAM-D1   0x24000000 - 0x2404FFFF  (Size 320KB) */",
+"#if CPU_STM32H723",
+"#define INTERNAL_RAM_SIZE       0x00050000",
+"#define INTERNAL_RAM_START      0x24000000",
+"#endif",
+"",
+"#define INTERNAL_RAM_END        (INTERNAL_RAM_START+INTERNAL_RAM_SIZE)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Initial Stack pointer (Used in initialization process)",
+" */",
+"#define	INITIAL_SP		INTERNAL_RAM_END",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System configuration controler (SYSCFG)",
+" */",
+"",
+"#define SYSCFG_BASE	0x58000400",
+"",
+"#define SYSCFG_PMCR	(SYSCFG_BASE+0x0004)",
+"#define SYSCFG_EXTICR1	(SYSCFG_BASE+0x0008)",
+"#define SYSCFG_EXTICR2	(SYSCFG_BASE+0x000C)",
+"#define SYSCFG_EXTICR3	(SYSCFG_BASE+0x0010)",
+"#define SYSCFG_EXTICR4	(SYSCFG_BASE+0x0014)",
+"#define SYSCFG_CFGR	(SYSCFG_BASE+0x0018)",
+"#define SYSCFG_CCCSR	(SYSCFG_BASE+0x0020)",
+"#define SYSCFG_CCVR	(SYSCFG_BASE+0x0024)",
+"#define SYSCFG_CCCR	(SYSCFG_BASE+0x0028)",
+"#define SYSCFG_ADC2ALT	(SYSCFG_BASE+0x0030)",
+"#define SYSCFG_PKGR	(SYSCFG_BASE+0x0124)",
+"",
+"#define SYSCFG_UR0	(SYSCFG_BASE+0x0300)",
+"#define SYSCFG_UR2	(SYSCFG_BASE+0x0308)",
+"#define SYSCFG_UR3	(SYSCFG_BASE+0x030C)",
+"#define SYSCFG_UR4	(SYSCFG_BASE+0x0310)",
+"#define SYSCFG_UR5	(SYSCFG_BASE+0x0314)",
+"#define SYSCFG_UR6	(SYSCFG_BASE+0x0318)",
+"#define SYSCFG_UR7	(SYSCFG_BASE+0x031C)",
+"#define SYSCFG_UR11	(SYSCFG_BASE+0x032C)",
+"#define SYSCFG_UR12	(SYSCFG_BASE+0x0330)",
+"#define SYSCFG_UR13	(SYSCFG_BASE+0x0334)",
+"#define SYSCFG_UR14	(SYSCFG_BASE+0x0338)",
+"#define SYSCFG_UR15	(SYSCFG_BASE+0x033C)",
+"#define SYSCFG_UR16	(SYSCFG_BASE+0x0340)",
+"#define SYSCFG_UR17	(SYSCFG_BASE+0x0344)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Internal flash memory controls",
+" */",
+"",
+"#define FLASH_BASE	0x52002000",
+"",
+"#define FLASH_ACR		(FLASH_BASE+0x0000)	/* Flash access control register */",
+"#define FLASH_KEYR		(FLASH_BASE+0x0004)	/* Flash key register */",
+"#define FLASH_OPTKEYR		(FLASH_BASE+0x0008)	/* Flash option key register */",
+"#define FLASH_CR		(FLASH_BASE+0x000C)	/* Flash control register */",
+"#define FLASH_SR		(FLASH_BASE+0x0010)	/* Flash status register */",
+"#define FLASH_CCR		(FLASH_BASE+0x0014)	/* Flash clear control register */",
+"#define FLASH_OPTCR		(FLASH_BASE+0x0018)	/* Flash option control register */",
+"#define FLASH_OPTSR_CUR		(FLASH_BASE+0x001C)	/* Flash option status register */",
+"#define FLASH_OPTSR_PRG		(FLASH_BASE+0x0020)",
+"#define FLASH_OPTCCR		(FLASH_BASE+0x0024)	/* Flash option clear control register */",
+"#define	FLASH_PRAR_CUR		(FLASH_BASE+0x0028)	/* FLASH protection address */",
+"#define	FLASH_PRAR_PRG		(FLASH_BASE+0x002C)",
+"#define	FLASH_SCAR_CUR		(FLASH_BASE+0x0030)	/* FLASH secure address */",
+"#define	FLASH_SCAR_PRG		(FLASH_BASE+0x0034)",
+"#define	FLASH_WPSN_CUR		(FLASH_BASE+0x0038)	/* FLASH write sector protection */",
+"#define	FLASH_WPSN_PRG		(FLASH_BASE+0x003C)",
+"#define	FLASH_BOOT_CUR		(FLASH_BASE+0x0040)	/* FLASH register boot address for Arm® Cortex®-M7 core */",
+"#define	FLASH_BOOT_PRG		(FLASH_BASE+0x0044)",
+"#define	FLASH_CRCCR		(FLASH_BASE+0x0050)	/* FLASH CRC control register */",
+"#define	FLASH_CRCSADDR		(FLASH_BASE+0x0054)	/* FLASH CRC start address register */",
+"#define	FLASH_CRCEADDR		(FLASH_BASE+0x0058)	/* FLASH CRC end address register */",
+"#define	FLASH_CRCDATAR		(FLASH_BASE+0x005C)	/* FLASH CRC data register */",
+"#define	FLASH_ECC_FAR		(FLASH_BASE+0x0060)	/* FLASH ECC fail address */",
+"#define	FLASH_OPTSR2_CUR	(FLASH_BASE+0x0070)	/* FLASH option status register 2 */",
+"#define	FLASH_OPTSR2_PRG	(FLASH_BASE+0x0074)",
+"",
+"/* FLASH_ACR bit definition */",
+"#define FLASH_ACR_WRHIGHFREQ_MASK	0x00000030	/* Flash signal delay */",
+"#define FLASH_ACR_LATENCY_MASK		0x0000000F	/* Read latency */",
+"#define FLASH_ACR_LATENCY(n)		(((_UW)(n)<<0) & FLASH_ACR_LATENCY_MASK)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Power & Clock Control",
+" */",
+"/*",
+" * PWR (Power Control) registers",
+"*/",
+"#define PWR_BASE	0x58024800",
+"",
+"#define PWR_CR1		(PWR_BASE+0x0000)	/* PWR control register 1 */",
+"#define PWR_CSR1	(PWR_BASE+0x0004)	/* PWR control status register 1 */",
+"#define PWR_CR2		(PWR_BASE+0x0008)	/* PWR control register 2 */",
+"#define PWR_CR3		(PWR_BASE+0x000C)	/* PWR control register 3 */",
+"#define	PWR_CPUCR	(PWR_BASE+0x0010)	/* PWR CPU control register */",
+"#define	PWR_D3CR	(PWR_BASE+0x0018)	/* PWR D3 domain control register */",
+"#define	PWR_WKUPCR	(PWR_BASE+0x0020)	/* PWR wakeup clear register */",
+"#define	PWR_WKUPFR	(PWR_BASE+0x0024)	/* PWR wakeup flag register */",
+"#define	PWR_WKUPEPR	(PWR_BASE+0x0028)	/* PWR wakeup enable and polarity register */",
+"",
+"/* PWR_CSR1 bit definition */",
+"#define	PWR_CSR1_ACTVOSRDY	(1<<13)		/* Voltage levels ready bit */",
+"",
+"/* PWR_CR3 bit definition */",
+"#define	PWR_CR3_LDOEN		(1<<1)		/* Low drop-out regulator enable bit */",
+"",
+"/* PWR_D3CR bit definition */",
+"#define	PWR_D3CR_VOSRDY		(1<<13)		/* VOS Ready bit */",
+"",
+"/*",
+" * RCC (Reset & Clock control) registers",
+" */",
+"#define RCC_BASE	0x58024400",
+"",
+"#define RCC_CR		(RCC_BASE + 0x0000)	/* RCC Clock control register */",
+"#define RCC_HSICFGR	(RCC_BASE + 0x0004)	/* RCC HSI configuration register */",
+"#define RCC_CRRCR	(RCC_BASE + 0x0008)	/* RCC Clock recovery RC register */",
+"#define RCC_CSICFGR	(RCC_BASE + 0x000C)	/* RCC CSI configuration register */",
+"#define RCC_CFGR	(RCC_BASE + 0x0010)	/* RCC Clock configuration register */",
+"#define RCC_D1CFGR	(RCC_BASE + 0x0018)	/* RCC domain 1 clock configuration register */",
+"#define RCC_D2CFGR	(RCC_BASE + 0x001C)	/* RCC domain 2 clock configuration register */",
+"#define RCC_D3CFGR	(RCC_BASE + 0x0020)	/* RCC domain 3 clock configuration register */",
+"#define RCC_PLLCKSELR	(RCC_BASE + 0x0028)	/* RCC PLLs clock source selection register */",
+"#define RCC_PLLCFGR	(RCC_BASE + 0x002C)	/* RCC PLL configuration register */",
+"#define RCC_PLL1DIVR	(RCC_BASE + 0x0030)	/* RCC PLL1 dividers configuration register */",
+"#define RCC_PLL1FRACR	(RCC_BASE + 0x0034)	/* RCC PLL1 fractional divider register */",
+"#define RCC_PLL2DIVR	(RCC_BASE + 0x0038)	/* RCC PLL2 dividers configuration register */",
+"#define RCC_PLL2FRACR	(RCC_BASE + 0x003C)	/* RCC PLL2 fractional divider register */",
+"#define RCC_PLL3DIVR	(RCC_BASE + 0x0040)	/* RCC PLL3 dividers configuration register */",
+"#define RCC_PLL3FRACR	(RCC_BASE + 0x0044)	/* RCC PLL3 fractional divider register */",
+"#define RCC_D1CCIPR	(RCC_BASE + 0x004C)	/* RCC domain 1 kernel clock configuration register */",
+"#define RCC_D2CCIP1R	(RCC_BASE + 0x0050)	/* RCC domain 2 kernel clock configuration register */",
+"#define RCC_D2CCIP2R	(RCC_BASE + 0x0054)	/* RCC domain 2 kernel clock configuration register */",
+"#define RCC_D3CCIPR	(RCC_BASE + 0x0058)	/* RCC domain 3 kernel clock configuration register */",
+"#define RCC_CIER	(RCC_BASE + 0x0060)	/* RCC Clock interrupt enable register */",
+"#define RCC_CIFR	(RCC_BASE + 0x0064)	/* RCC Clock interrupt flag register */",
+"#define RCC_CICR	(RCC_BASE + 0x0068)	/* RCC Clock interrupt clear register */",
+"#define RCC_BDCR	(RCC_BASE + 0x0070)	/* RCC　Backup domain control register */",
+"#define RCC_CSR		(RCC_BASE + 0x0074)	/* RCC Control/status register */",
+"#define RCC_AHB3RSTR	(RCC_BASE + 0x007C)	/* RCC AHB3 peripheral reset register */",
+"#define RCC_AHB1RSTR	(RCC_BASE + 0x0080)	/* RCC AHB1 peripheral reset register */",
+"#define RCC_AHB2RSTR	(RCC_BASE + 0x0084)	/* RCC AHB2 peripheral reset register */",
+"#define RCC_AHB4RSTR	(RCC_BASE + 0x0088)	/* RCC AHB4 peripheral reset register */",
+"#define RCC_APB3RSTR	(RCC_BASE + 0x008C)	/* RCC APB3 peripheral reset register */",
+"#define RCC_APB1LRSTR	(RCC_BASE + 0x0090)	/* RCC APB1 peripheral reset register */",
+"#define RCC_APB1HRSTR	(RCC_BASE + 0x0094)	/* RCC APB1 peripheral reset register */",
+"#define RCC_APB2RSTR	(RCC_BASE + 0x0098)	/* RCC APB2 peripheral reset register */",
+"#define RCC_APB4RSTR	(RCC_BASE + 0x009C)	/* RCC APB4 peripheral reset register */",
+"#define RCC_GCR		(RCC_BASE + 0x00A0)	/* RCC global control register */",
+"#define RCC_D3AMR	(RCC_BASE + 0x00A8)	/* RCC D3 Autonomous mode register */",
+"#define RCC_RSR		(RCC_BASE + 0x00A8)	/* RCC reset status register */",
+"",
+"#define RCC_AHB3ENR	(RCC_BASE + 0x00D4)	/* RCC AHB3 clock register */",
+"#define RCC_AHB1ENR	(RCC_BASE + 0x00D8)	/* RCC AHB1 clock register */",
+"#define RCC_AHB2ENR	(RCC_BASE + 0x00DC)	/* RCC AHB2 clock register */",
+"#define RCC_AHB4ENR	(RCC_BASE + 0x00E0)	/* RCC AHB4 clock register */",
+"#define RCC_APB3ENR	(RCC_BASE + 0x00E4)	/* RCC APB3 clock register */",
+"#define RCC_APB1LENR	(RCC_BASE + 0x00E8)	/* RCC APB1 clock register */",
+"#define RCC_APB1HENR	(RCC_BASE + 0x00EC)	/* RCC APB1 clock register */",
+"#define RCC_APB2ENR	(RCC_BASE + 0x00F0)	/* RCC APB2 clock register */",
+"#define RCC_APB4ENR	(RCC_BASE + 0x00F4)	/* RCC APB4 clock register */",
+"#define	RCC_AHB3LPENR	(RCC_BASE + 0x00FC)	/* RCC AHB3 Sleep clock register */",
+"#define	RCC_AHB1LPENR	(RCC_BASE + 0x0100)	/* RCC AHB1 Sleep clock register */",
+"#define	RCC_AHB2LPENR	(RCC_BASE + 0x0104)	/* RCC AHB2 Sleep clock register */",
+"#define	RCC_AHB4LPENR	(RCC_BASE + 0x0108)	/* RCC AHB4 Sleep clock register */",
+"#define	RCC_APB3LPENR	(RCC_BASE + 0x010C)	/* RCC APB3 Sleep clock register */",
+"#define	RCC_APB1LLPENR	(RCC_BASE + 0x0110)	/* RCC APB1 Low Sleep clock register */",
+"#define	RCC_APB1HLPENR	(RCC_BASE + 0x0114)	/* RCC APB1 High Sleep clock register */",
+"#define	RCC_APB2LPENR	(RCC_BASE + 0x0118)	/* RRC APB2 Sleep clock register */",
+"#define	RCC_APB4LPENR	(RCC_BASE + 0x011C)	/* RRC APB2 Sleep clock register */",
+"",
+"/* RCC_CR bit definition */",
+"#define RCC_CR_PLL3RDY		0x20000000	// PLL3 clock ready flag	",
+"#define RCC_CR_PLL3ON		0x10000000	// PLL3 enable",
+"#define RCC_CR_PLL2RDY		0x08000000	// PLL2 clock ready flag	",
+"#define RCC_CR_PLL2ON		0x04000000	// PLL2 enable",
+"#define RCC_CR_PLL1RDY		0x02000000	// PLL1 clock ready flag	",
+"#define RCC_CR_PLL1ON		0x01000000	// PLL1 enable",
+"#define RCC_CR_HSECSSON		0x00080000	// HSE Clock Security System enable",
+"#define RCC_CR_HSEBYP		0x00040000	// HSE clock bypass",
+"#define RCC_CR_HSERDY		0x00020000	// HSE clock ready flag",
+"#define RCC_CR_HSEON		0x00010000	// HSE clock enable",
+"#define RCC_CR_D2CKRDY		0x00008000	// D2 domain clocks ready flag",
+"#define RCC_CR_D1CKRDY		0x00004000	// D1 domain clocks ready flag",
+"#define RCC_CR_HSI48RDY		0x00002000	// HSI48 clock ready flag",
+"#define RCC_CR_HSI48ON		0x00001000	// HSI48 clock enable",
+"#define RCC_CR_CSIKERON		0x00000200	// CSI clock enable in Stop mode",
+"#define RCC_CR_CSIRDY		0x00000100	// CSI clock ready flag",
+"#define RCC_CR_CSION		0x00000080	// CSI clock enable",
+"#define RCC_CR_HSIDIVF		0x00000020	// HSI divider flag ",
+"#define	RCC_CR_HSIDIV_MASK	0x00000018	// HSI clock divider",
+"",
+"#define RCC_CR_HSIDIV_1		0x00000000	// HSI clock divider (/1)",
+"#define RCC_CR_HSIDIV_2		0x00000008	// HSI clock divider (/2)",
+"#define RCC_CR_HSIDIV_4		0x00000010	// HSI clock divider (/4)",
+"#define RCC_CR_HSIDIV_8		0x00000018	// HSI clock divider (/8)",
+"",
+"#define RCC_CR_HSIRDY		0x00000004	// HSI clock ready flag",
+"#define RCC_CR_HSIKERON		0x00000002	// HSI clock enable in Stop mode",
+"#define RCC_CR_HSION		0x00000001	// HSl clock enable",
+"",
+"/* RCC_PLLCKSELR bit definition */",
+"#define	RCC_PLLCKSELR_DIVM3	0x03F00000	// Prescaler for PLL3",
+"#define	RCC_PLLCKSELR_DIVM2	0x0003F000	// Prescaler for PLL2",
+"#define	RCC_PLLCKSELR_DIVM1	0x000003F0	// Prescaler for PLL1",
+"#define	RCC_PLLCKSELR_PLLSRC	0x00000003	// DIVMx and PLLs clock source",
+"",
+"/* RCC_CFGR bit definition */",
+"#define	RCC_CFGR_SWS		0x00000038	// System clock switch status",
+"#define	RCC_CFGR_SW		0x00000007	// System clock switch",
+"",
+"/* RCC_PLLCFGR bit definition */",
+"#define	RCC_PLLCFGR_DIVR3EN	0x01000000	// PLL3 DIVR divider output enable",
+"#define	RCC_PLLCFGR_DIVQ3EN	0x00800000	// PLL3 DIVQ divider output enable",
+"#define	RCC_PLLCFGR_DIVP3EN	0x00400000	// PLL3 DIVP divider output enable",
+"#define	RCC_PLLCFGR_DIVR2EN	0x00200000	// PLL2 DIVR divider output enable",
+"#define	RCC_PLLCFGR_DIVQ2EN	0x00100000	// PLL2 DIVQ divider output enable",
+"#define	RCC_PLLCFGR_DIVP2EN	0x00080000	// PLL2 DIVP divider output enable",
+"#define	RCC_PLLCFGR_DIVR1EN	0x00040000	// PLL1 DIVR divider output enable",
+"#define	RCC_PLLCFGR_DIVQ1EN	0x00020000	// PLL1 DIVQ divider output enable",
+"#define	RCC_PLLCFGR_DIVP1EN	0x00010000	// PLL1 DIVP divider output enable",
+"#define RCC_PLLCFGR_PLL3RGE	0x00000C00	// PLL3 input frequency range",
+"#define RCC_PLLCFGR_PLL3VCOSEL	0x00000200	// PLL3 VCO selection",
+"#define RCC_PLLCFGR_PLL3FRACEN	0x00000100	// PLL3 fractional latch enable",
+"#define RCC_PLLCFGR_PLL2RGE	0x000000C0	// PLL2 input frequency range",
+"#define RCC_PLLCFGR_PLL2VCOSEL	0x00000020	// PLL2 VCO selection",
+"#define RCC_PLLCFGR_PLL2FRACEN	0x00000010	// PLL2 fractional latch enable",
+"#define RCC_PLLCFGR_PLL1RGE	0x0000000C	// PLL1 input frequency range",
+"#define RCC_PLLCFGR_PLL1VCOSEL	0x00000002	// PLL1 VCO selection",
+"#define RCC_PLLCFGR_PLL1FRACEN	0x00000001	// PLL1 fractional latch enable",
+"",
+"/* RCC_PLL2FRACR bit definition */",
+"#define RCC_PLL2FRACR_FRACN2	0x0000FFF8	// Fractional part of the multiplication factor for PLL2 VCO",
+"",
+"/* RCC_D2CCIP2R bit definition */",
+"#define	RCC_D2CCIP2R_USARTxSEL	0x0000003F	// USARTx/UARTx clock select",
+"#define RCC_D2CCIP2R_I2C1235SEL	0x00003000	// I2C1/2/3/5 clock select",
+"",
+"/* RCC_D3CCIPR bit definition */",
+"#define RCC_D3CCIPR_ADCSEL	0x00030000	// ADC clock select",
+"#define RCC_D3CCIPR_I2C4SEL	0x00000300	// I2C4 clock select",
+"",
+"/* RCC_AHB1ENR bit definition */",
+"#define	RCC_AHB1ENR_ADC12EN	0x00000020	// ADC1/2 clock enable",
+"",
+"/* RCC_AHB4ENR bit definition */",
+"#define	RCC_AHB4ENR_ADC3EN	0x01000000	// ADC3 clock enable",
+"",
+"/* RCC_APB1LENR bit definition */",
+"#define RCC_APB1LENR_UART8EN	0x80000000	// UART8 clock enable",
+"#define RCC_APB1LENR_UART7EN	0x40000000	// UART7 clock enable",
+"#define	RCC_APB1LENR_I2C5EN	0x02000000	// I2C5 clock enable",
+"#define	RCC_APB1LENR_I2C3EN	0x00800000	// I2C3 clock enable",
+"#define	RCC_APB1LENR_I2C2EN	0x00400000	// I2C2 clock enable",
+"#define	RCC_APB1LENR_I2C1EN	0x00200000	// I2C1 clock enable",
+"#define RCC_APB1LENR_UART5EN	0x00100000	// UART5 clock enable",
+"#define RCC_APB1LENR_UART4EN	0x00080000	// UART4 clock enable",
+"#define RCC_APB1LENR_USART3EN	0x00040000	// USART3 clock enable",
+"#define RCC_APB1LENR_USART2EN	0x00020000	// USART2 clock enable",
+"",
+"/* RCC_APB2ENR bit definition */",
+"#define RCC_APB2ENR_USART10EN	0x00000080	// USART10 clock enable",
+"#define RCC_APB2ENR_UART9EN	0x00000040	// UART9 clock enable",
+"#define RCC_APB2ENR_USART6EN	0x00000020	// USART6 clock enable",
+"#define RCC_APB2ENR_USART1EN	0x00000010	// USART1 clock enable",
+"",
+"/* RCC_APB4ENR bit definition */",
+"#define	RCC_APB4ENR_I2C4EN	0x00000080	// I2C4 clock enable",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System Timer clock",
+" */",
+"",
+"/* Settable interval range (millisecond) */",
+"#define MIN_TIMER_PERIOD	1",
+"#define MAX_TIMER_PERIOD	50",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Number of Interrupt vectors",
+" */",
+"#define N_INTVEC		190	/* Number of Interrupt vectors */",
+"#define	N_SYSVEC		16	/* Number of System Exceptions */",
+"",
+"/*",
+" * The number of the implemented bit width for priority value fields.",
+" */",
+"#define INTPRI_BITWIDTH		4",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt Priority Levels",
+" */",
+"#define INTPRI_MAX_EXTINT_PRI	1	/* Highest Ext. interrupt level */",
+"#define INTPRI_SVC		0	/* SVCall */",
+"#define INTPRI_SYSTICK		1	/* SysTick */",
+"#define INTPRI_PENDSV		15	/* PendSV */",
+"",
+"/*",
+" * Time-event handler interrupt level",
+" */",
+"#define TIMER_INTLEVEL		0",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * EXTI (Extended interrupt controller)",
+" */",
+"#define	N_EXTIEVT			92	/*  Number of EXTI event input */",
+"",
+"#define EXTI_BASE	0x58000000",
+"",
+"#define	EXTI_RTSR1	(EXTI_BASE + 0x00)",
+"#define	EXTI_FTSR1	(EXTI_BASE + 0x04)",
+"#define	EXTI_SWIER1	(EXTI_BASE + 0x08)",
+"#define	EXTI_D3PMR1	(EXTI_BASE + 0x0C)",
+"#define	EXTI_D3PCR1L	(EXTI_BASE + 0x10)",
+"#define	EXTI_D3PCR1H	(EXTI_BASE + 0x14)",
+"",
+"#define	EXTI_RTSR2	(EXTI_BASE + 0x20)",
+"#define	EXTI_FTSR2	(EXTI_BASE + 0x24)",
+"#define	EXTI_SWIER2	(EXTI_BASE + 0x28)",
+"#define	EXTI_D3PMR2	(EXTI_BASE + 0x2C)",
+"#define	EXTI_D3PCR2L	(EXTI_BASE + 0x30)",
+"#define	EXTI_D3PCR2H	(EXTI_BASE + 0x34)",
+"",
+"#define	EXTI_RTSR3	(EXTI_BASE + 0x40)",
+"#define	EXTI_FTSR3	(EXTI_BASE + 0x44)",
+"#define	EXTI_SWIER3	(EXTI_BASE + 0x48)",
+"#define	EXTI_D3PMR3	(EXTI_BASE + 0x4C)",
+"#define	EXTI_D3PCR3L	(EXTI_BASE + 0x50)",
+"#define	EXTI_D3PCR3H	(EXTI_BASE + 0x54)",
+"",
+"#define	EXTI_CPUIMR1	(EXTI_BASE + 0x80)",
+"#define	EXTI_CPUEMR1	(EXTI_BASE + 0x84)",
+"#define	EXTI_CPUPR1	(EXTI_BASE + 0x88)",
+"",
+"#define	EXTI_CPUIMR2	(EXTI_BASE + 0x90)",
+"#define	EXTI_CPUEMR2	(EXTI_BASE + 0x94)",
+"#define	EXTI_CPUPR2	(EXTI_BASE + 0x98)",
+"",
+"#define	EXTI_CPUIMR3	(EXTI_BASE + 0xA0)",
+"#define	EXTI_CPUEMR3	(EXTI_BASE + 0xA4)",
+"#define	EXTI_CPUPR3	(EXTI_BASE + 0xA8)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Watchdog Timer",
+" */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * GPIO",
+" */",
+"#define	GPIOA_BASE	0x58020000",
+"#define	GPIOB_BASE	0x58020400",
+"#define	GPIOC_BASE	0x58020800",
+"#define	GPIOD_BASE	0x58020C00",
+"#define	GPIOE_BASE	0x58021000",
+"#define	GPIOF_BASE	0x58021400",
+"#define	GPIOG_BASE	0x58021800",
+"#define	GPIOH_BASE	0x58021C00",
+"#define	GPIOJ_BASE	0x58022400",
+"#define	GPIOK_BASE	0x58022800",
+"",
+"#define GPIO_MODER(n)	(GPIO##n##_BASE + 0x00)		/* GPIO port mode register */",
+"#define GPIO_OTYPER(n)	(GPIO##n##_BASE + 0x04)		/* GPIO port output type register */",
+"#define GPIO_OSPEEDR(n)	(GPIO##n##_BASE + 0x08)		/* GPIO port output speed register */",
+"#define GPIO_PUPDR(n)	(GPIO##n##_BASE + 0x0C)		/* GPIO port pull-up/pull-down register */",
+"#define GPIO_IDR(n)	(GPIO##n##_BASE + 0x10)		/* GPIO port input data register */",
+"#define GPIO_ODR(n)	(GPIO##n##_BASE + 0x14)		/* GPIO port output data register */",
+"#define GPIO_BSRR(n)	(GPIO##n##_BASE + 0x18)		/* GPIO port bit set/reset register */",
+"#define GPIO_LCKR(n)	(GPIO##n##_BASE + 0x1C)		/* GPIO port configuration lock register */",
+"#define GPIO_AFRL(n)	(GPIO##n##_BASE + 0x20)		/* GPIO alternate function low register */",
+"#define GPIO_AFRH(n)	(GPIO##n##_BASE + 0x24)		/* GPIO alternate function high register */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Physical timer (for STM32H7)",
+" */",
+"#define	CPU_HAS_PTMR	(1)",
+"",
+"/* Timer register definition */",
+"#define	TIM2_BASE	0x40000000",
+"#define	TIM3_BASE	0x40000400",
+"#define	TIM4_BASE	0x40000800",
+"#define	TIM5_BASE	0x40000C00",
+"",
+"#define	TIMxCR1		0x00",
+"#define TIMxCR2		0x04",
+"#define TIMxSMCR	0x08",
+"#define TIMxDIER	0x0C",
+"#define TIMxSR		0x10",
+"#define TIMxEGR		0x14",
+"#define TIMxCCMR1	0x18",
+"#define TIMxCCMR2	0x1C",
+"#define TIMxCCER	0x20",
+"#define TIMxCNT		0x24",
+"#define TIMxPSC		0x28",
+"#define TIMxARR		0x2C",
+"#define TIMxCCR1	0x34",
+"#define TIMxCCR2	0x38",
+"#define TIMxCCR3	0x3C",
+"#define TIMxCCR4	0x40",
+"#define TIMxDCR		0x48",
+"#define TIMxDMAR	0x4C",
+"#define TIMxAF1		0x60",
+"#define TIMxTISEL	0x68",
+"",
+"#define	TIMxCR1_CEN	(1<<0)",
+"#define	TIMxCR1_OPM	(1<<3)",
+"#define	TIMxCR1_DIR	(1<<4)",
+"#define	TIMxDIER_UIE	(1<<0)",
+"#define TIMxSR_UIF	(1<<0)",
+"#define TIMxEGR_UG	(1<<0)",
+"",
+"/* Prescaler value */",
+"#define TIM2PSC_PSC_INIT	0",
+"#define TIM3PSC_PSC_INIT	0",
+"#define TIM4PSC_PSC_INIT	0",
+"#define TIM5PSC_PSC_INIT	0",
+"",
+"/* Physical timer interrupt number */",
+"#define INTNO_TIM2	28",
+"#define INTNO_TIM3	29",
+"#define INTNO_TIM4	30",
+"#define INTNO_TIM5	50",
+"",
+"/* Physical timer interrupt priority */",
+"#define INTPRI_TIM2	5",
+"#define INTPRI_TIM3	5",
+"#define INTPRI_TIM4	5",
+"#define INTPRI_TIM5	5",
+"",
+"/* Phycail timer Maximum count */",
+"#define PTMR_MAX_CNT16    (0x0000FFFF)",
+"#define PTMR_MAX_CNT32    (0xFFFFFFFF)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Coprocessor",
+" */",
+"#define CPU_HAS_FPU		1",
+"#define CPU_HAS_DSP		0",
+"",
+"/*",
+" *  Number of coprocessors to use. Depends on user configuration",
+" */",
+"#if USE_FPU",
+"#define NUM_COPROCESSOR		1",
+"#else",
+"#define NUM_COPROCESSOR		0",
+"#endif",
+"",
+"#endif /* __TK_SYSDEF_DEPEND_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine_depend.h",
+" *",
+" *	Machine type definition (STM32L4 depended)",
+" */",
+"",
+"#ifndef __SYS_SYSDEPEND_MACHINE_CPU_H__",
+"#define __SYS_SYSDEPEND_MACHINE_CPU_H__",
+"",
+"/*",
+" **** CPU core-depeneded profile (ARMv7M(ARM Cortex-M4))",
+" */",
+"",
+"#include \"../core/armv7m/machine.h\"",
+"",
+"/*",
+" **** CPU-depeneded profile (STM32L4)",
+" */",
+"",
+"#define	TARGET_CPU_DIR		stm32l4		/* Sysdepend-CPU-Directory name */",
+"",
+"",
+"#endif /* __SYS_SYSDEPEND_MACHINE_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (STM32L4 depended)",
+" */",
+"",
+"#ifndef __SYS_DEPEND_PROFILE_CPU_H__",
+"#define __SYS_DEPEND_PROFILE_CPU_H__",
+"",
+"/*",
+" **** CPU core-depeneded profile (ARM Cortex-M4)",
+" */",
+"#include \"../core/armv7m/profile.h\"",
+"",
+"/*",
+" **** CPU-depeneded profile (STM32L4)",
+" */",
+"",
+"/*",
+" * Device Support",
+" */",
+"#define TK_SUPPORT_IOPORT	TRUE		/* Support of I/O port access */",
+"",
+"/*",
+" * Physical timer",
+" */",
+"#if USE_PTMR",
+"#define TK_SUPPORT_PTIMER	TRUE		/* Support of physical timer */",
+"#define TK_MAX_PTIMER		4		/* Maximum number of physical timers. */",
+"#else",
+"#define TK_SUPPORT_PTIMER	FALSE		/* Support of physical timer */",
+"#define TK_MAX_PTIMER		0		/* Maximum number of physical timers. */",
+"#endif",
+"",
+"",
+"#endif /* __SYS_DEPEND_PROFILE_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06A",
+" *",
+" *    Copyright (C) 2006-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition (STM32L4 depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __TK_SYSDEF_DEPEND_CPU_H__",
+"#define __TK_SYSDEF_DEPEND_CPU_H__",
+"",
+"#include \"../../../machine.h\"",
+"",
+"/* CPU Core-dependent definition */",
+"#include \"../core/armv7m/sysdef.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Internal Memorie (Main RAM)",
+" */",
+"",
+"/* STM32L478, STM32L486 Internal SRAM1   0x20000000 - 0x20017FFF  (Size 96KB) */",
+"#if CPU_STM32L476 | CPU_STM32L486",
+"#define INTERNAL_RAM_SIZE       0x00018000",
+"#define INTERNAL_RAM_START      0x20000000",
+"#endif",
+"",
+"#define INTERNAL_RAM_END        (INTERNAL_RAM_START+INTERNAL_RAM_SIZE)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Initial Stack pointer (Used in initialization process)",
+" */",
+"#define	INITIAL_SP		INTERNAL_RAM_END",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System configuration controler (SYSCFG)",
+" */",
+"",
+"#define SYSCFG_BASE	0x40010000",
+"",
+"#define SYSCFG_MEMRMP	(SYSCFG_BASE+0x0000)",
+"#define SYSCFG_CFGR1	(SYSCFG_BASE+0x0004)",
+"#define SYSCFG_EXTICR1	(SYSCFG_BASE+0x0008)",
+"#define SYSCFG_EXTICR2	(SYSCFG_BASE+0x000C)",
+"#define SYSCFG_EXTICR3	(SYSCFG_BASE+0x0010)",
+"#define SYSCFG_EXTICR4	(SYSCFG_BASE+0x0014)",
+"#define SYSCFG_SCSR	(SYSCFG_BASE+0x0018)",
+"#define SYSCFG_CFGR2	(SYSCFG_BASE+0x001C)",
+"#define SYSCFG_SWPR	(SYSCFG_BASE+0x0020)",
+"#define SYSCFG_SKR	(SYSCFG_BASE+0x0024)",
+"#define SYSCFG_SWPR2	(SYSCFG_BASE+0x0028)",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Internal flash memory controls",
+" */",
+"",
+"#define FLASH_BASE	0x40022000",
+"",
+"#define FLASH_ACR	(FLASH_BASE+0x0000)	/* Flash access control register */",
+"#define FLASH_PDKEYR	(FLASH_BASE+0x0004)	/* Flash Power-down key register */",
+"#define FLASH_KEYR	(FLASH_BASE+0x0008)	/* Flash key register */",
+"#define FLASH_OPTKEYR	(FLASH_BASE+0x000C)	/* Flash option key register */",
+"#define FLASH_SR	(FLASH_BASE+0x0010)	/* Flash status register */",
+"#define FLASH_CR	(FLASH_BASE+0x0014)	/* Flash control register */",
+"#define FLASH_ECCR	(FLASH_BASE+0x0018)	/* Flash ECC register */",
+"#define FLASH_OPTR	(FLASH_BASE+0x0020)	/* Flash option register */",
+"#define FLASH_PCROP1SR	(FLASH_BASE+0x0024)	/* Flash PCROP1 Start address register */",
+"#define FLASH_PCROP1ER	(FLASH_BASE+0x0028)	/* Flash PCROP1 End address register */",
+"#define FLASH_WRP1AR	(FLASH_BASE+0x002C)	/* Flash WRP1 area A address register */",
+"#define FLASH_WRP1BR	(FLASH_BASE+0x0030)	/* Flash WRP1 area B address register */",
+"#define FLASH_PCROP2SR	(FLASH_BASE+0x0044)	/* Flash PCROP2 Start address register */",
+"#define FLASH_PCROP2ER	(FLASH_BASE+0x0048)	/* Flash PCROP2 End address register */",
+"#define FLASH_WRP2AR	(FLASH_BASE+0x004C)	/* Flash WRP2 area A address register */",
+"#define FLASH_WRP2BR	(FLASH_BASE+0x0050)	/* Flash WRP2 area B address register */",
+"#define FLASH_CFGR	(FLASH_BASE+0x0130)	/* Flash configuration register */",
+"",
+"",
+"/* FLASH_ACR bit definition */",
+"#define FLASH_ACR_SLEEP_PD	0x00004000	// Flash Power-down mode during Sleep or Low-power sleep mode",
+"#define FLASH_ACR_RUN_PD	0x00002000	// Flash Power-down mode during Run or Low-power run mode",
+"#define FLASH_ACR_DCRST		0x00001000	// Data cache reset",
+"#define FLASH_ACR_ICRST		0x00000800	// Instruction cache reset",
+"#define FLASH_ACR_DCEN		0x00000400	// Data cache enable",
+"#define FLASH_ACR_ICEN		0x00000200	// Instruction cache enable",
+"#define FLASH_ACR_PRFTEN	0x00000100	// Prefetch enable",
+"#define FLASH_ACR_LATENCY_MASK	0x00000007	// Latency",
+"#define FLASH_ACR_LATENCY(n)	(((_UW)(n)<<0) & FLASH_ACR_LATENCY_MASK)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Power & Clock Control",
+" */",
+"/*",
+" * PWR (Power Control) registers",
+"*/",
+"#define PWR_BASE	0x40007000",
+"#define PWR_CR1		(PWR_BASE+0x0000)	/* Power control register 1 */",
+"#define PWR_CR2		(PWR_BASE+0x0004)	/* Power control register 2 */",
+"#define PWR_CR3		(PWR_BASE+0x0008)	/* Power control register 3 */",
+"#define PWR_CR4		(PWR_BASE+0x000C)	/* Power control register 4 */",
+"#define PWR_SR1		(PWR_BASE+0x0010)	/* Power status register 1 */",
+"#define PWR_SR2		(PWR_BASE+0x0014)	/* Power status register 2 */",
+"#define PWR_SCR		(PWR_BASE+0x0018)	/* Power status clear register */",
+"#define PWR_PUCRA	(PWR_BASE+0x0020)	/* Power Port A pull-up   control register */",
+"#define PWR_PDCRA	(PWR_BASE+0x0024)	/* Power Port A pull-down control register */",
+"#define PWR_PUCRB	(PWR_BASE+0x0028)	/* Power Port B pull-up   control register */",
+"#define PWR_PDCRB	(PWR_BASE+0x002C)	/* Power Port B pull-down control register */",
+"#define PWR_PUCRC	(PWR_BASE+0x0030)	/* Power Port C pull-up   control register */",
+"#define PWR_PDCRC	(PWR_BASE+0x0034)	/* Power Port C pull-down control register */",
+"#define PWR_PUCRD	(PWR_BASE+0x0038)	/* Power Port D pull-up   control register */",
+"#define PWR_PDCRD	(PWR_BASE+0x003C)	/* Power Port D pull-down control register */",
+"#define PWR_PUCRE	(PWR_BASE+0x0040)	/* Power Port E pull-up   control register */",
+"#define PWR_PDCRE	(PWR_BASE+0x0044)	/* Power Port E pull-down control register */",
+"#define PWR_PUCRF	(PWR_BASE+0x0048)	/* Power Port F pull-up   control register */",
+"#define PWR_PDCRF	(PWR_BASE+0x004C)	/* Power Port F pull-down control register */",
+"#define PWR_PUCRG	(PWR_BASE+0x0050)	/* Power Port G pull-up   control register */",
+"#define PWR_PDCRG	(PWR_BASE+0x0054)	/* Power Port G pull-down control register */",
+"#define PWR_PUCRH	(PWR_BASE+0x0058)	/* Power Port H pull-up   control register */",
+"#define PWR_PDCRH	(PWR_BASE+0x005C)	/* Power Port H pull-down control register */",
+"#define PWR_PUCRI	(PWR_BASE+0x0060)	/* Power Port I pull-up   control register */",
+"#define PWR_PDCRI	(PWR_BASE+0x0064)	/* Power Port I pull-down control register */",
+"",
+"/* PWR_CR1 bit definition */",
+"#define PWR_CR1_LPR		0x00004000	/* Low-power mode */",
+"",
+"#define PWR_CR1_VOS		0x00000600	/* Voltage scaling range selection */",
+"#define PWR_CR1_VOS_RANGE1	0x00000200	/*	 Range 1 */",
+"#define PWR_CR1_VOS_RANGE2	0x00000400	/*	 Range 2 */",
+"",
+"#define PWR_CR1_DBP		0x00000100	/* Disable backup domain write protection */",
+"#define PWR_CR1_LPMS		0x00000007	/* Low-power mode selection */",
+"#define PWR_CR1_LPMS_STOP0	0x00000000	/*	000 : Stop 0 mode */",
+"#define PWR_CR1_LPMS_STOP1	0x00000001	/*	001 : Stop 1 mode */",
+"#define PWR_CR1_LPMS_STOP2	0x00000002	/*	010 : Stop 2 mode */",
+"#define PWR_CR1_LPMS_STANDBY	0x00000003	/*	011 : Sandby mode */",
+"#define PWR_CR1_LPMS_SHUTDOWN	0x00000004	/*	1xx : Shutdown mo */",
+"",
+"/* PWR register initial value */",
+"/* PWR_CR1 */",
+"#define	PWR_CR1_INIT		(PWR_CR1_VOS_RANGE1) /* set High Performance Range (Range1) */",
+"",
+"/*",
+" * RCC (Reset & Clock control) registers",
+" */",
+"#define RCC_BASE	0x40021000",
+"#define RCC_CR		(RCC_BASE + 0x0000)	/* Clock control register */",
+"#define RCC_ICSCR	(RCC_BASE + 0x0004)	/* Internal clock sources calibration register */",
+"#define RCC_CFGR	(RCC_BASE + 0x0008)	/* Clock configuration register */",
+"#define RCC_PLLCFGR	(RCC_BASE + 0x000C)	/* PLL configuration register */",
+"#define RCC_PLLSAI1CFGR	(RCC_BASE + 0x0010)	/* PLLSAI1 configuration register */",
+"#define RCC_PLLSAI2CFGR	(RCC_BASE + 0x0014)	/* PLLSAI2 configuration register */",
+"#define RCC_CIER	(RCC_BASE + 0x0018)	/* Clock interrupt enable register */",
+"#define RCC_CIFR	(RCC_BASE + 0x001C)	/* Clock interrupt flag register */",
+"#define RCC_CICR	(RCC_BASE + 0x0020)	/* Clock interrupt clear register */",
+"#define RCC_AHB1RSTR	(RCC_BASE + 0x0028)	/* AHB1 peripheral reset register */",
+"#define RCC_AHB2RSTR	(RCC_BASE + 0x002C)	/* AHB2 peripheral reset register */",
+"#define RCC_AHB3RSTR	(RCC_BASE + 0x0030)	/* AHB3 peripheral reset register */",
+"#define RCC_APB1RSTR1	(RCC_BASE + 0x0038)	/* APB1 peripheral reset register 1 */",
+"#define RCC_APB1RSTR2	(RCC_BASE + 0x003C)	/* APB1 peripheral reset register 2 */",
+"#define RCC_APB2RSTR	(RCC_BASE + 0x0040)	/* APB2 peripheral reset register */",
+"#define RCC_AHB1ENR	(RCC_BASE + 0x0048)	/* AHB1 peripheral clock enable register */",
+"#define RCC_AHB2ENR	(RCC_BASE + 0x004C)	/* AHB2 peripheral clock enable register */",
+"#define RCC_AHB3ENR	(RCC_BASE + 0x0050)	/* AHB3 peripheral clock enable register */",
+"#define RCC_APB1ENR1	(RCC_BASE + 0x0058)	/* APB1 peripheral clock enable register 1 */",
+"#define RCC_APB1ENR2	(RCC_BASE + 0x005C)	/* APB1 peripheral clock enable register 2 */",
+"#define RCC_APB2ENR	(RCC_BASE + 0x0060)	/* APB2 peripheral clock enable register */",
+"#define RCC_AHB1SMENR	(RCC_BASE + 0x0068)	/* AHB1 peripheral clocks enable in Sleep and Stop modes register */",
+"#define RCC_AHB2SMENR	(RCC_BASE + 0x006C)	/* AHB2 peripheral clocks enable in Sleep and Stop modes register */",
+"#define RCC_AHB3SMENR	(RCC_BASE + 0x0070)	/* AHB3 peripheral clocks enable in Sleep and Stop modes register */",
+"#define RCC_APB1SMENR1	(RCC_BASE + 0x0078)	/* APB1 peripheral clocks enable in Sleep and Stop modes register 1 */",
+"#define RCC_APB1SMENR2	(RCC_BASE + 0x007C)	/* APB1 peripheral clocks enable in Sleep and Stop modes register 2 */",
+"#define RCC_APB2SMENR	(RCC_BASE + 0x0080)	/* APB2 peripheral clocks enable in Sleep and Stop modes register */",
+"#define RCC_CCIPR	(RCC_BASE + 0x0088)	/* Peripherals independent clock configuration register */",
+"#define RCC_BDCR	(RCC_BASE + 0x0090)	/* Backup domain control register */",
+"#define RCC_CSR		(RCC_BASE + 0x0094)	/* Control/status register */",
+"#define RCC_CRRCR	(RCC_BASE + 0x0098)	/* Clock recovery RC register */",
+"#define RCC_CCIPR2	(RCC_BASE + 0x009C)	/* Peripherals independent clock configuration register */",
+"",
+"/* RCC_CR bit definition */",
+"#define RCC_CR_PLLSAI2RDY	0x20000000	// SAI2 PLL clock ready flag",
+"#define RCC_CR_PLLSAI2ON	0x10000000	// SAI2 PLL enable",
+"#define RCC_CR_PLLSAI1RDY	0x08000000	// SAI1 PLL clock ready flag",
+"#define RCC_CR_PLLSAI1ON	0x04000000	// SAI1 PLL enable",
+"#define RCC_CR_PLLRDY		0x02000000	// Main PLL clock ready flag",
+"#define RCC_CR_PLLON		0x01000000	// Main PLL enable",
+"#define RCC_CR_CSSON		0x00080000	// Clock security system enable",
+"#define RCC_CR_HSEBYP		0x00040000	// HSE crystal oscillator bypass",
+"#define RCC_CR_HSERDY		0x00020000	// HSE clock ready flag",
+"#define RCC_CR_HSEON		0x00010000	// HSE clock enable",
+"#define RCC_CR_HSIASFS		0x00000800	// HSI16 automatic start from Stop",
+"#define RCC_CR_HSIRDY		0x00000400	// HSI16 clock ready flag",
+"#define RCC_CR_HSIKERON		0x00000200	// HSI16 always enable for peripheral kernels.",
+"#define RCC_CR_HSION		0x00000100	// HSI16 clock enable",
+"#define RCC_CR_MSIRANGE		0x000000F0	// MSI clock ranges",
+"#define RCC_CR_MSIRGSEL		0x00000008	// MSI clock range selection",
+"#define RCC_CR_MSIPLLEN		0x00000004	// MSI clock PLL enable",
+"#define RCC_CR_MSIRDY		0x00000002	// MSI clock ready flag",
+"#define RCC_CR_MSION		0x00000001	// MSI clock enable",
+"",
+"/* MSI clock range value (RCC_CR_MSIRANGE) */",
+"#define RCC_CR_MSIRANGE_100K	0x00000000	//	around 100 KHz",
+"#define RCC_CR_MSIRANGE_200K	0x00000010	//	around 200 KHz",
+"#define RCC_CR_MSIRANGE_400K	0x00000020	//	around 400 KHz",
+"#define RCC_CR_MSIRANGE_800K	0x00000030	//	around 800 KHz",
+"#define RCC_CR_MSIRANGE_1M	0x00000040	//	around   1 MHz",
+"#define RCC_CR_MSIRANGE_2M	0x00000050	//	around   2 MHz",
+"#define RCC_CR_MSIRANGE_4M	0x00000060	//	around   4 MHz",
+"#define RCC_CR_MSIRANGE_8M	0x00000070	//	around   8 MHz",
+"#define RCC_CR_MSIRANGE_16M	0x00000080	//	around  16 MHz",
+"#define RCC_CR_MSIRANGE_24M	0x00000090	//	around  24 MHz",
+"#define RCC_CR_MSIRANGE_32M	0x000000A0	//	around  32 MHz",
+"#define RCC_CR_MSIRANGE_48M	0x000000B0	//	around  48 MHz",
+"",
+"/* RCC_CFGR bit definition */",
+"#define RCC_CFGR_MCOPRE		0x70000000	// Microcontroller clock output prescaler",
+"#define RCC_CFGR_MCOSEL		0x0F000000	// Microcontroller clock output",
+"#define RCC_CFGR_STOPWUCK	0x00008000	// Wakeup from Stop and CSS backup clock selection",
+"#define RCC_CFGR_PPRE2		0x00003800	// APB high-speed prescaler (APB2)",
+"#define RCC_CFGR_PPRE1		0x00000700	// APB low-speed prescaler (APB1)",
+"#define RCC_CFGR_HPRE		0x000000F0	// AHB prescaler",
+"#define RCC_CFGR_SWS		0x0000000C	// System clock switch status",
+"#define RCC_CFGR_SW		0x00000003	// System clock switch",
+"",
+"#define RCC_CFGR_SWS_MSI	0x00000000	// MSI used for system clock",
+"#define RCC_CFGR_SWS_HSI16	0x00000004	// HSI16 used for system clock ",
+"#define RCC_CFGR_SWS_HSE	0x00000008	// HSE used for system clock",
+"#define RCC_CFGR_SWS_PLL	0x0000000C	// PLL used for system clock",
+"",
+"#define RCC_CFGR_SW_MSI		0x00000000	// Use MSI for system clock",
+"#define RCC_CFGR_SW_HSI16	0x00000001	// Use HSI16 for system clock",
+"#define RCC_CFGR_SW_HSE		0x00000002	// Use HSE for system clock",
+"#define RCC_CFGR_SW_PLL		0x00000003	// Use PLL for system clock",
+"",
+"/* RCC_PLLCFGR bit definition */",
+"#define RCC_PLLCFGR_PLLR	0x06000000	// Main PLL division factor for PLLCLK (system clock)",
+"#define RCC_PLLCFGR_PLLREN	0x01000000	// Main PLL PLLCLK output enable",
+"#define RCC_PLLCFGR_PLLQ	0x00600000	// Main PLL division factor for PLL48M1CLK (48 MHz clock).",
+"#define RCC_PLLCFGR_PLLQEN	0x00100000	// Main PLL PLL48M1CLK output enable",
+"#define RCC_PLLCFGR_PLLP	0x00020000	// Main PLL division factor for PLLSAI3CLK (SAI1 and SAI2 clock).",
+"#define RCC_PLLCFGR_PLLPEN	0x00010000	// Main PLL PLLSAI3CLK output enable",
+"#define RCC_PLLCFGR_PLLN	0x00007F00	// Main PLL multiplication factor for VCO",
+"#define RCC_PLLCFGR_PLLM	0x000000F0	// Division factor for the main PLLinput clock",
+"#define RCC_PLLCFGR_PLLSRC	0x00000003	// Main PLL entry clock source",
+"",
+"#define RCC_PLLCFGR_PLLSRC_NON	0x00000000	// No clock",
+"#define RCC_PLLCFGR_PLLSRC_MSI	0x00000001	// Use MSI for system clock",
+"#define RCC_PLLCFGR_PLLSRC_HSI	0x00000002	// Use HSI16 for system clock",
+"#define RCC_PLLCFGR_PLLSRC_HSE	0x00000003	// Use HSE for system clock",
+"",
+"/* RCC_APB1ENR1 bit definition */",
+"#define RCC_APB1ENR1_LPTIM1EN	0x80000000	// Low power timer 1 clock enable",
+"#define RCC_APB1ENR1_OPAMPEN	0x40000000	// OPAMP interface clock enable",
+"#define RCC_APB1ENR1_DAC1EN	0x20000000	// DAC1 interface clock enable",
+"#define RCC_APB1ENR1_PWREN	0x10000000	// Power interface clock enable",
+"#define RCC_APB1ENR1_CAN1EN	0x02000000	// CAN1 clock enable",
+"#define RCC_APB1ENR1_CRSEN	0x01000000	// Clock Recovery System clock enable",
+"#define RCC_APB1ENR1_I2C3EN	0x00800000	// I2C3 clock enable",
+"#define RCC_APB1ENR1_I2C2EN	0x00400000	// I2C2 clock enable",
+"#define RCC_APB1ENR1_I2C1EN	0x00200000	// I2C1 clock enable",
+"#define RCC_APB1ENR1_UART5EN	0x00100000	// UART5 clock enable",
+"#define RCC_APB1ENR1_UART4EN	0x00080000	// UART4 clock enable",
+"#define RCC_APB1ENR1_USART3EN	0x00040000	// USART3 clock enable",
+"#define RCC_APB1ENR1_USART2EN	0x00020000	// USART2 clock enable",
+"#define RCC_APB1ENR1_SPI3EN	0x00008000	// SPI3 clock enable",
+"#define RCC_APB1ENR1_SPI2EN	0x00004000	// SPI2 clock enable",
+"#define RCC_APB1ENR1_WWDGEN	0x00000800	// Window watchdog clock enable",
+"#define RCC_APB1ENR1_RTCAPBEN	0x00000400	// RTC APB clock enable",
+"#define RCC_APB1ENR1_TIM7EN	0x00000020	// TIM7 timer clock enable",
+"#define RCC_APB1ENR1_TIM6EN	0x00000010	// TIM6 timer clock enable",
+"#define RCC_APB1ENR1_TIM5EN	0x00000008	// TIM5 timer clock enable",
+"#define RCC_APB1ENR1_TIM4EN	0x00000004	// TIM4 timer clock enable",
+"#define RCC_APB1ENR1_TIM3EN	0x00000002	// TIM3 timer clock enable",
+"#define RCC_APB1ENR1_TIM2EN	0x00000001	// TIM2 timer clock enable",
+"",
+"/* RCC_APB1ENR2 bit definition */",
+"#define RCC_APB1ENR2_LPTIM2EN	0x00000020	// Low power timer 2 clock enable",
+"#define	RCC_APB1ENR2_SWPMI1EN	0x00000004	// Single wire protocol clock enable",
+"#define RCC_APB1ENR2_I2C4EN	0x00000002	// I2C4 clock enable",
+"#define RCC_APB1ENR2_LPUART1EN	0x00000001	// Low power UART 1 clock enable",
+"",
+"/* RCC_APB2ENR bit definition */",
+"#define RCC_APB2ENR_DFSDM1EN	0x01000000	// DFSDM 1 Timer clock enable",
+"#define RCC_APB2ENR_SAI2EN	0x00400000	// SAI 2 clock enable",
+"#define RCC_APB2ENR_SAI1EN	0x00200000	// SAI1 clock enable",
+"#define RCC_APB2ENR_TIM17EN	0x00040000	// TIM 17 Enable timer clock",
+"#define RCC_APB2ENR_TIM16EN	0x00020000	// TIM16 Enable timer clock",
+"#define RCC_APB2ENR_TIM15EN	0x00010000	// TIM 15 Enable timer clock",
+"#define RCC_APB2ENR_USART1EN	0x00004000	// USART1 clock enable",
+"#define RCC_APB2ENR_TIM8EN	0x00002000	// TIM 8 Timer clock enable",
+"#define RCC_APB2ENR_SPI1EN	0x00001000	// SPI 1 clock enable",
+"#define RCC_APB2ENR_TIM1EN	0x00000800	// TIM1 Enable timer clock",
+"#define RCC_APB2ENR_SDMMC1EN	0x00000400	// Enable SDMMC clock",
+"#define RCC_APB2ENR_FWEN	0x00000080	// Enable Firewall Clock",
+"#define RCC_APB2ENR_SYSCFGEN	0x00000001	// SYSCFG + COMP + VREFBUF clock enable",
+"",
+"/* RCC_AHB2ENR bit definition */",
+"#define	RCC_AHB2ENR_GPIOAEN	0x00000001	// GPIOA clock enable",
+"#define	RCC_AHB2ENR_GPIOBEN	0x00000002	// GPIOB clock enable",
+"#define	RCC_AHB2ENR_GPIOCEN	0x00000004	// GPIOC clock enable",
+"#define	RCC_AHB2ENR_GPIODEN	0x00000008	// GPIOD clock enable",
+"#define	RCC_AHB2ENR_GPIOEEN	0x00000010	// GPIOE clock enable",
+"#define	RCC_AHB2ENR_GPIOFEN	0x00000020	// GPIOF clock enable",
+"#define	RCC_AHB2ENR_GPIOGEN	0x00000040	// GPIOG clock enable",
+"#define	RCC_AHB2ENR_GPIOHEN	0x00000080	// GPIOH clock enable",
+"#define	RCC_AHB2ENR_GPIOIEN	0x00000100	// GPIOI clock enable",
+"#define	RCC_AHB2ENR_ADCEN	0x00002000	// ADC clock enable",
+"",
+"/* RCC_CCIPR bit definition */",
+"#define	RCC_CCIPR_USARTxSEL	0x000003FF	// USART clock select",
+"#define	RCC_CCIPR_LPUART1SEL	0x00000C00	// LPUART1 clock select",
+"#define	RCC_CCIPR_I2CxSEL	0x0003F000	// I2Cx clock select",
+"#define	RCC_CCIPR_LPTIMxSEL	0x003C0000	// LPTIMx clock select",
+"#define	RCC_CCIPR_SAIxSEL	0x03C00000	// SAIx clock select",
+"#define	RCC_CCIPR_CLK48SEL	0x0C000000	// CLK48 clock select",
+"#define	RCC_CCIPR_ADCSEL	0x30000000	// ADC clock select",
+"#define	RCC_CCIPR_SWPMI1SEL	0x40000000	// SWPMI1 clock select",
+"#define	RCC_CCIPR_DFSDM1SEL	0x80000000	// DFSDM1 clock select",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System Timer clock",
+" */",
+"",
+"/* Settable interval range (millisecond) */",
+"#define MIN_TIMER_PERIOD	1",
+"#define MAX_TIMER_PERIOD	50",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Number of Interrupt vectors",
+" */",
+"#define N_INTVEC		82	/* Number of Interrupt vectors */",
+"#define	N_SYSVEC		16	/* Number of System Exceptions */",
+"",
+"/*",
+" * The number of the implemented bit width for priority value fields.",
+" */",
+"#define INTPRI_BITWIDTH		4",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt Priority Levels",
+" */",
+"#define INTPRI_MAX_EXTINT_PRI	1	/* Highest Ext. interrupt level */",
+"#define INTPRI_SVC		0	/* SVCall */",
+"#define INTPRI_SYSTICK		1	/* SysTick */",
+"#define INTPRI_PENDSV		15	/* PendSV */",
+"",
+"/*",
+" * Time-event handler interrupt level",
+" */",
+"#define TIMER_INTLEVEL		0",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * EXTI (Extended interrupt controller)",
+" */",
+"#define EXTI_BASE	0x40010400",
+"",
+"#define	EXTI_IMR1	(EXTI_BASE + 0x00)",
+"#define	EXTI_EMR1	(EXTI_BASE + 0x04)",
+"#define	EXTI_RTSR1	(EXTI_BASE + 0x08)",
+"#define	EXTI_FTSR1	(EXTI_BASE + 0x0C)",
+"#define	EXTI_SWIER1	(EXTI_BASE + 0x10)",
+"#define	EXTI_PR1	(EXTI_BASE + 0x14)",
+"#define	EXTI_IMR2	(EXTI_BASE + 0x20)",
+"#define	EXTI_EMR2	(EXTI_BASE + 0x24)",
+"#define	EXTI_RTSR2	(EXTI_BASE + 0x28)",
+"#define	EXTI_FTSR2	(EXTI_BASE + 0x2C)",
+"#define	EXTI_SWIER2	(EXTI_BASE + 0x30)",
+"#define	EXTI_PR2	(EXTI_BASE + 0x34)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Watchdog Timer",
+" */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * GPIO",
+" */",
+"#define	GPIOA_BASE	0x48000000",
+"#define	GPIOB_BASE	0x48000400",
+"#define	GPIOC_BASE	0x48000800",
+"#define	GPIOD_BASE	0x48000C00",
+"#define	GPIOE_BASE	0x48001000",
+"#define	GPIOF_BASE	0x48000400",
+"#define	GPIOG_BASE	0x48000800",
+"#define	GPIOH_BASE	0x48000C00",
+"#define	GPIOI_BASE	0x48002000",
+"",
+"#define GPIO_MODER(n)	(GPIO##n##_BASE + 0x00)		/* GPIO port mode register */",
+"#define GPIO_OTYPER(n)	(GPIO##n##_BASE + 0x04)		/* GPIO port output type register */",
+"#define GPIO_OSPEEDR(n)	(GPIO##n##_BASE + 0x08)		/* GPIO port output speed register */",
+"#define GPIO_PUPDR(n)	(GPIO##n##_BASE + 0x0C)		/* GPIO port pull-up/pull-down register */",
+"#define GPIO_IDR(n)	(GPIO##n##_BASE + 0x10)		/* GPIO port input data register */",
+"#define GPIO_ODR(n)	(GPIO##n##_BASE + 0x14)		/* GPIO port output data register */",
+"#define GPIO_BSRR(n)	(GPIO##n##_BASE + 0x18)		/* GPIO port bit set/reset register */",
+"#define GPIO_LCKR(n)	(GPIO##n##_BASE + 0x1C)		/* GPIO port configuration lock register */",
+"#define GPIO_AFRL(n)	(GPIO##n##_BASE + 0x20)		/* GPIO alternate function low register */",
+"#define GPIO_AFRH(n)	(GPIO##n##_BASE + 0x24)		/* GPIO alternate function high register */",
+"#define GPIO_BRR(n)	(GPIO##n##_BASE + 0x28)		/* GPIO port bit reset register */",
+"#define	GPIO_ASCR(n)	(GPIO##n##_BASE + 0x2C)		/* GPIO port analog switch control register */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Physical timer (for STM32L4)",
+" */",
+"#define	CPU_HAS_PTMR	(1)",
+"",
+"/* Timer register definition */",
+"#define	TIM2_BASE	0x40000000",
+"#define	TIM3_BASE	0x40000400",
+"#define	TIM4_BASE	0x40000800",
+"#define	TIM5_BASE	0x40000C00",
+"#define	TIM6_BASE	0x40001000",
+"#define	TIM7_BASE	0x40001400",
+"",
+"#define	TIMxCR1		0x00",
+"#define TIMxCR2		0x04",
+"#define TIMxSMCR	0x08",
+"#define TIMxDIER	0x0C",
+"#define TIMxSR		0x10",
+"#define TIMxEGR		0x14",
+"#define TIMxCCMR1	0x18",
+"#define TIMxCCMR2	0x1C",
+"#define TIMxCCER	0x20",
+"#define TIMxCNT		0x24",
+"#define TIMxPSC		0x28",
+"#define TIMxARR		0x2C",
+"#define TIMxCCR1	0x34",
+"#define TIMxCCR2	0x38",
+"#define TIMxCCR3	0x3C",
+"#define TIMxCCR4	0x40",
+"#define TIMxDCR		0x48",
+"#define TIMxDMAR	0x4C",
+"#define TIMxOR1		0x50",
+"#define TIMxOR2		0x60",
+"",
+"#define	TIMxCR1_CEN	(1<<0)",
+"#define	TIMxCR1_OPM	(1<<3)",
+"#define	TIMxCR1_DIR	(1<<4)",
+"#define	TIMxDIER_UIE	(1<<0)",
+"#define TIMxSR_UIF	(1<<0)",
+"#define TIMxEGR_UG	(1<<0)",
+"",
+"/* Prescaler value */",
+"#define TIM2PSC_PSC_INIT	0",
+"#define TIM3PSC_PSC_INIT	0",
+"#define TIM4PSC_PSC_INIT	0",
+"#define TIM5PSC_PSC_INIT	0",
+"",
+"/* Physical timer interrupt number */",
+"#define INTNO_TIM2	28",
+"#define INTNO_TIM3	29",
+"#define INTNO_TIM4	30",
+"#define INTNO_TIM5	50",
+"",
+"/* Physical timer interrupt priority */",
+"#define INTPRI_TIM2	5",
+"#define INTPRI_TIM3	5",
+"#define INTPRI_TIM4	5",
+"#define INTPRI_TIM5	5",
+"",
+"/* Phycail timer Maximum count */",
+"#define PTMR_MAX_CNT16    (0x0000FFFF)",
+"#define PTMR_MAX_CNT32    (0xFFFFFFFF)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Coprocessor",
+" */",
+"#define CPU_HAS_FPU		1",
+"#define CPU_HAS_DSP		0",
+"",
+"/*",
+" *  Number of coprocessors to use. Depends on user configuration",
+" */",
+"#if USE_FPU",
+"#define NUM_COPROCESSOR		1",
+"#else",
+"#define NUM_COPROCESSOR		0",
+"#endif",
+"",
+"#endif /* __TK_SYSDEF_DEPEND_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine_depend.h",
+" *",
+" *	Machine type definition (TX03M367 depended)",
+" */",
+"",
+"#ifndef __SYS_SYSDEPEND_MACHINE_CPU_H__",
+"#define __SYS_SYSDEPEND_MACHINE_CPU_H__",
+"",
+"/*",
+" **** CPU core-depeneded profile (ARMv7M(ARM Cortex-M3))",
+" */",
+"",
+"#include \"../core/armv7m/machine.h\"",
+"",
+"/*",
+" **** CPU-depeneded profile (TX03-M367)",
+" */",
+"",
+"#define	TARGET_CPU_DIR		tx03_m367		/* Sysdepend-CPU-Directory name */",
+"",
+"",
+"#endif /* __SYS_SYSDEPEND_MACHINE_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (TX03M367 depended)",
+" */",
+"",
+"#ifndef __SYS_DEPEND_PROFILE_CPU_H__",
+"#define __SYS_DEPEND_PROFILE_CPU_H__",
+"",
+"/*",
+" **** CPU core-depeneded profile (ARMv7M(ARM Cortex-M3))",
+" */",
+"#include \"../core/armv7m/profile.h\"",
+"",
+"/*",
+" **** CPU-depeneded profile (TX03-M367)",
+" */",
+"",
+"/*",
+" * Device Support",
+" */",
+"#define TK_SUPPORT_IOPORT	TRUE		/* Support of I/O port access */",
+"",
+"/*",
+" * Physical timer",
+" */",
+"#if USE_PTMR",
+"#define TK_SUPPORT_PTIMER	TRUE		/* Support of physical timer */",
+"#define TK_MAX_PTIMER		8		/* Maximum number of physical timers. */",
+"#else",
+"#define TK_SUPPORT_PTIMER	FALSE		/* Support of physical timer */",
+"#define TK_MAX_PTIMER		0		/* Maximum number of physical timers. */",
+"#endif",
+"",
+"",
+"#endif /* __SYS_DEPEND_PROFILE_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06A",
+" *",
+" *    Copyright (C) 2006-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition (TX03M367 depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __TK_SYSDEF_DEPEND_CPU_H__",
+"#define __TK_SYSDEF_DEPEND_CPU_H__",
+"",
+"/*",
+" **** CPU core-depeneded profile (ARMv7M(ARM Cortex-M3))",
+" */",
+"",
+"#include \"../core/armv7m/sysdef.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Internal Memorie (Main RAM)  0x20000800 - 0x2001FFFF",
+" */",
+"#define INTERNAL_RAM_SIZE       0x0001F800",
+"#define INTERNAL_RAM_START      0x20000800",
+"#define INTERNAL_RAM_END        (INTERNAL_RAM_START+INTERNAL_RAM_SIZE)",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Initial Stack pointer (Used in initialization process)",
+" */",
+"#define	INITIAL_SP		INTERNAL_RAM_END",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Clock Control",
+" */",
+"",
+"/* Clock Generator Registers */",
+"#define CLKCTRL_BASE		0x400F3000",
+"#define CLKCTRL_CGSYSCR		(CLKCTRL_BASE + 0x0000)",
+"#define CLKCTRL_CGOSCCR		(CLKCTRL_BASE + 0x0004)",
+"#define CLKCTRL_CGSTBYCR	(CLKCTRL_BASE + 0x0008)",
+"#define CLKCTRL_CGPLLSEL	(CLKCTRL_BASE + 0x000C)",
+"#define CLKCTRL_CGCKSTP		(CLKCTRL_BASE + 0x0018)",
+"#define CLKCTRL_CGPROTECT	(CLKCTRL_BASE + 0x003C)",
+"",
+"#define CLKCTRL_CGIMCG		(CLKCTRL_BASE + 0x0040)",
+"#define CLKCTRL_CGIMCGA		(CLKCTRL_BASE + 0x0040)",
+"#define CLKCTRL_CGIMCGB		(CLKCTRL_BASE + 0x0044)",
+"#define CLKCTRL_CGIMCGC		(CLKCTRL_BASE + 0x0048)",
+"#define CLKCTRL_CGIMCGD		(CLKCTRL_BASE + 0x004C)",
+"#define CLKCTRL_CGICRCG		(CLKCTRL_BASE + 0x0060)",
+"",
+"/* PLL Selection */",
+"#define	CLKCTRL_CGPLLSEL_4X		0x00005A0F",
+"#define	CLKCTRL_CGPLLSEL_6X		0x00006296",
+"",
+"#define CLKCTRL_CGPLLSEL_PLLSEL		0x00000001",
+"",
+"/* Oscillation control */",
+"#define CLKCTRL_CGOSCCR_ALWAYSWRITE	0x00000030",
+"",
+"#define CLKCTRL_CGOSCCR_WUEON		0x00000001",
+"#define CLKCTRL_CGOSCCR_WUEF		0x00000002",
+"#define CLKCTRL_CGOSCCR_PLLON		0x00000004",
+"#define CLKCTRL_CGOSCCR_WUPSEL_XT1	0x00000008",
+"",
+"#define CLKCTRL_CGOSCCR_WUPT(usec,freq)	( (usec * freq) >> 4 ) << 20",
+"",
+"#define	MHz			(UW)(1000000UL)",
+"#define HISPEED_CLOCK_MHz	12",
+"",
+"#define PLL_MODE_4X		4",
+"#define PLL_MODE_6X		6",
+"",
+"#define	CLOCK_fPLL		(HISPEED_CLOCK_MHz * PLL_MODE_6X * MHz)",
+"#define	CLOCK_fc		(CLOCK_fPLL)",
+"#define	CLOCK_fgear		(CLOCK_fc / 2)",
+"#define	CLOCK_fsys		(CLOCK_fgear)",
+"#define	CLOCK_fperiph		(CLOCK_fgear)",
+"#define	CLOCK_T0		(CLOCK_fperiph)",
+"",
+"#define TMCLK			(CLOCK_fsys / MHz)	/* Timer clock input (MHz) */",
+"#define TMCLK_KHz		(CLOCK_fsys / 1000)	/* Timer clock input (kHz) */",
+"",
+"/*",
+" * Settable interval range (millisecond)",
+" */",
+"#define MIN_TIMER_PERIOD	1",
+"#define MAX_TIMER_PERIOD	50",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Number of Interrupt vectors",
+" */",
+"#define N_INTVEC		128	/* Number of Interrupt vectors */",
+"#define	N_SYSVEC		16	/* Number of System Exceptions */",
+"",
+"/*",
+" * The number of the implemented bit width for priority value fields.",
+" */",
+"#define INTPRI_BITWIDTH		3",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt Priority Levels",
+" */",
+"#define INTPRI_MAX_EXTINT_PRI	1	/* Highest Ext. interrupt level */",
+"#define INTPRI_SVC		0	/* SVCall */",
+"#define INTPRI_SYSTICK		1	/* SysTick */",
+"#define INTPRI_PENDSV		7	/* PendSV */",
+"",
+"/*",
+" * Time-event handler interrupt level",
+" */",
+"#define TIMER_INTLEVEL		0",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Watchdog Timer",
+" */",
+"#define WDOG_BASE		0x400F2000",
+"",
+"#define	WDOG_WDMOD		(WDOG_BASE + 0x0000)	/* Mode Reg. */",
+"#define	WDOG_WDCR		(WDOG_BASE + 0x0004)	/* Control Reg. */",
+"",
+"#define	WDOG_WDMOD_WDTE		0x00000080	/* Enable */",
+"#define	WDOG_WDCR_DISABLE	0x000000B1	/* Disable Code */",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * GPIO",
+" */",
+"#define	PORTA_BASE	0x400C0000",
+"#define	PORTB_BASE	0x400C0100",
+"#define	PORTE_BASE	0x400C0400",
+"#define	PORTF_BASE	0x400C0500",
+"#define	PORTG_BASE	0x400C0600",
+"#define	PORTH_BASE	0x400C0700",
+"#define	PORTI_BASE	0x400C0800",
+"#define	PORTK_BASE	0x400C0A00",
+"#define	PORTL_BASE	0x400C0B00",
+"",
+"#define	PORT_DATA(n)	(PORT##n##_BASE + 0x00)	// data",
+"#define	PORT_CR(n)	(PORT##n##_BASE + 0x04)	// Output Control",
+"#define	PORT_FR1(n)	(PORT##n##_BASE + 0x08)	// Function 1",
+"#define	PORT_FR2(n)	(PORT##n##_BASE + 0x0C)	// Function 2",
+"#define	PORT_FR3(n)	(PORT##n##_BASE + 0x10)	// Function 3",
+"#define	PORT_FR4(n)	(PORT##n##_BASE + 0x14)	// Function 4",
+"#define	PORT_FR5(n)	(PORT##n##_BASE + 0x18)	// Function 5",
+"#define	PORT_FR6(n)	(PORT##n##_BASE + 0x1C)	// Function 6",
+"#define	PORT_OD(n)	(PORT##n##_BASE + 0x28)	// Open Drain Control",
+"#define	PORT_PUP(n)	(PORT##n##_BASE + 0x2C)	// Pull-up Control",
+"#define	PORT_PDN(n)	(PORT##n##_BASE + 0x30)	// Pull-down Control",
+"#define	PORT_IE(n)	(PORT##n##_BASE + 0x38)	// Input Control",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Physical timer (for TX03M67 TMRB)",
+" */",
+"#define	CPU_HAS_PTMR	(1)",
+"",
+"/* TMRB Register definition */",
+"#define TMRB0_BASE	0x400C4000",
+"#define TMRB1_BASE	0x400C4100",
+"#define TMRB2_BASE	0x400C4200",
+"#define TMRB3_BASE	0x400C4300",
+"#define TMRB4_BASE	0x400C4400",
+"#define TMRB5_BASE	0x400C4500",
+"#define TMRB6_BASE	0x400C4600",
+"#define TMRB7_BASE	0x400C4700",
+"",
+"#define TBxEN		0x0000",
+"#define TBxRUN		0x0004",
+"#define	TBxCR		0x0008",
+"#define	TBxMOD		0x000C",
+"#define TBxFFCR		0x0010",
+"#define TBxST		0x0014",
+"#define TBxIM		0x0018",
+"#define TBxUC		0x001C",
+"#define TBxRG0		0x0020",
+"#define TBxRG1		0x0024",
+"#define TBxCP0		0x0028",
+"#define TBxCP1		0x002C",
+"",
+"#define TBxEN_TBEN	(1<<7)",
+"#define TBxRUN_TBRUN	(1<<0)",
+"#define TBxRUN_TBPRUN	(1<<2)",
+"#define	TBxFFCR_TDE	(0x000000C3)",
+"#define TBxMOD_TBCLE	(1<<3)",
+"#define TBxIM_TBIMOF	(1<<2)",
+"#define TBxIM_TBIM1	(1<<1)",
+"#define TBxIM_TBIM0	(1<<0)",
+"",
+"/* Physical timer clock */",
+"#define	TB0MOD_TBCLK	(0x00000001)    // Source clock = T1",
+"#define	TB1MOD_TBCLK	(0x00000001)    // Source clock = T1",
+"#define	TB2MOD_TBCLK	(0x00000001)    // Source clock = T1",
+"#define	TB3MOD_TBCLK	(0x00000001)    // Source clock = T1",
+"#define	TB4MOD_TBCLK	(0x00000001)    // Source clock = T1",
+"#define	TB5MOD_TBCLK	(0x00000001)    // Source clock = T1",
+"#define	TB6MOD_TBCLK	(0x00000001)    // Source clock = T1",
+"#define	TB7MOD_TBCLK	(0x00000001)    // Source clock = T1",
+"",
+"/* Physical timer interrupt number */",
+"#define INTNO_TMRB0	75",
+"#define INTNO_TMRB1	78",
+"#define INTNO_TMRB2	81",
+"#define INTNO_TMRB3	84",
+"#define INTNO_TMRB4	87",
+"#define INTNO_TMRB5	90",
+"#define INTNO_TMRB6	93",
+"#define INTNO_TMRB7	96",
+"",
+"/* Physical timer interrupt priority */",
+"#define INTPRI_TMRB0	5",
+"#define INTPRI_TMRB1	5",
+"#define INTPRI_TMRB2	5",
+"#define INTPRI_TMRB3	5",
+"#define INTPRI_TMRB4	5",
+"#define INTPRI_TMRB5	5",
+"#define INTPRI_TMRB6	5",
+"#define INTPRI_TMRB7	5",
+"",
+"/* Phycail timer Maximum count */",
+"#define PTMR_MAX_CNT    (0x0000FFFF)",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Coprocessor",
+" */",
+"#define CPU_HAS_FPU			0",
+"#define CPU_HAS_DSP			0",
+"",
+"/*",
+" *  Number of coprocessors to use. ",
+" *    There is no coprocessor for this microcomputer.",
+" */",
+"#define NUM_COPROCESSOR		0",
+"",
+"#endif /* __TK_SYSDEF_DEPEND_CPU_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine.h",
+" *",
+" *	Machine type definition (M367 IoT-Engine depended)",
+" */",
+"",
+"#ifndef __SYS_SYSDEPEND_MACHINE_H__",
+"#define __SYS_SYSDEPEND_MACHINE_H__",
+"",
+"/*",
+" * [TYPE]_[CPU]		TARGET SYSTEM",
+" * CPU_xxxx		CPU type",
+" * CPU_CORE_xxx		CPU core type",
+" */",
+"",
+"/* ----- TX03-M367 IoT-Engine (CPU: TMPM367FDFG) definition ----- */",
+"",
+"#define IOTE_M367		1				/* Target system : M367 IoT-Engine */",
+"#define CPU_TMPM367FDFG		1				/* Target CPU : Toshiba TMPM367FDFG */",
+"#define CPU_CORE_ARMV7M		1				/* Target CPU-Core type : ARMv7-M */",
+"#define CPU_CORE_ACM3		1				/* Target CPU-Core : ARM Cortex-M3 */",
+"",
+"#define TARGET_DIR		iote_m367			/* Sysdepend-Directory name */",
+"",
+"/*",
+" **** CPU-depeneded profile (TX03M367)",
+" */",
+"#include \"../cpu/tx03_m367/machine.h\"",
+"",
+"",
+"#endif /* __SYS_SYSDEPEND_MACHINE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (M367 IoT-Engine depended)",
+" */",
+"",
+"#ifndef __SYS_DEPEND_PROFILE_H__",
+"#define __SYS_DEPEND_PROFILE_H__",
+"",
+"/*",
+" **** CPU-depeneded profile (TX03M367)",
+" */",
+"#include \"../cpu/tx03_m367/profile.h\"",
+"",
+"/*",
+" **** Target-depeneded profile (M367 IoT-Engine)",
+" */",
+"",
+"/*",
+" * Power management",
+" */",
+"#define TK_SUPPORT_LOWPOWER	FALSE		/* Support of power management */",
+"",
+"",
+"",
+"#endif /* __SYS_DEPEND_PROFILE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.02",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/10/21 .",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition (M367 IoT-Engine depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __SYS_SYSDEF_DEPEND_H__",
+"#define __SYS_SYSDEF_DEPEND_H__",
+"",
+"",
+"/* CPU-dependent definition */",
+"#include \"../cpu/tx03_m367/sysdef.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Maximum value of Power-saving mode switching prohibition request.",
+" * Use in tk_set_pow API.",
+" */",
+"#define LOWPOW_LIMIT	0x7fff		/* Maximum number for disabling */",
+"",
+"#endif /* __TK_SYSDEF_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	machine.h",
+" *",
+" *	Machine type definition (RX231 IoT-Engine depended)",
+" */",
+"",
+"#ifndef __SYS_SYSDEPEND_MACHINE_H__",
+"#define __SYS_SYSDEPEND_MACHINE_H__",
+"",
+"/*",
+" * [TYPE]_[CPU]		TARGET SYSTEM",
+" * CPU_xxxx		CPU type",
+" * CPU_CORE_xxx		CPU core type",
+" */",
+"",
+"/* ----- RX231 IoT-Engine (CPU: RX231) definition ----- */",
+"",
+"#define IOTE_RX231		1				/* Target system : RX231 IoT-Engine */",
+"#define CPU_RX231		1				/* Target CPU : Renesas RX231 */",
+"#define CPU_CORE_RXV2		1				/* Target CPU-Core : RX200 series*/",
+"",
+"#define TARGET_DIR		iote_rx231			/* Sysdepend-Directory name */",
+"",
+"/*",
+" **** CPU-depeneded profile (RX231)",
+" */",
+"#include \"../cpu/rx231/machine.h\"",
+"",
+"",
+"#endif /* __SYS_SYSDEPEND_MACHINE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (RX231 IoT-Engine depended)",
+" */",
+"",
+"#ifndef __SYS_DEPEND_PROFILE_H__",
+"#define __SYS_DEPEND_PROFILE_H__",
+"",
+"/*",
+" **** CPU-depeneded profile (RX231)",
+" */",
+"#include \"../cpu/rx231/profile.h\"",
+"",
+"/*",
+" **** Target-depeneded profile (RX231 IoT-Engine)",
+" */",
+"",
+"/*",
+" * Power management",
+" */",
+"#define TK_SUPPORT_LOWPOWER	FALSE		/* Support of power management */",
+"",
+"",
+"",
+"#endif /* __SYS_DEPEND_PROFILE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition (RX231 IoT-Engine depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __SYS_SYSDEF_DEPEND_H__",
+"#define __SYS_SYSDEF_DEPEND_H__",
+"",
+"",
+"/* CPU-dependent definition */",
+"#include \"../cpu/rx231/sysdef.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Maximum value of Power-saving mode switching prohibition request.",
+" * Use in tk_set_pow API.",
+" */",
+"#define LOWPOW_LIMIT	0x7fff		/* Maximum number for disabling */",
+"",
+"#endif /* __TK_SYSDEF_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	machine.h",
+" *",
+" *	Machine type definition (RZ/A2M IoT-Engine depended)",
+" */",
+"",
+"#ifndef __SYS_SYSDEPEND_MACHINE_H__",
+"#define __SYS_SYSDEPEND_MACHINE_H__",
+"",
+"/*",
+" * [TYPE]_[CPU]		TARGET SYSTEM",
+" * CPU_xxxx		CPU type",
+" * CPU_CORE_xxx		CPU core type",
+" */",
+"",
+"/* ----- RZ/A2M IoT-Engine (CPU: RZ/A2M) definition ----- */",
+"",
+"#define IOTE_RZA2M		1				/* Target system : RZ/A2M IoT-Engine */",
+"#define CPU_RZA2M		1				/* Target CPU : Renesas RZ/A2M */",
+"#define	CPU_CORE_ARMV7A		1				/* Target CPU-Core type : ARMv7-A */",
+"#define CPU_CORE_ACA9		1				/* Target CPU-Core : ARM Cortex-A9 */",
+"",
+"#define TARGET_DIR		iote_rza2m			/* Sysdepend-Directory name */",
+"",
+"/*",
+" **** CPU-depeneded profile (RZA2M)",
+" */",
+"#include \"../cpu/rza2m/machine.h\"",
+"",
+"",
+"#endif /* __SYS_SYSDEPEND_MACHINE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (RZ/A2M IoT-Engine depended)",
+" */",
+"",
+"#ifndef __SYS_DEPEND_PROFILE_H__",
+"#define __SYS_DEPEND_PROFILE_H__",
+"",
+"/*",
+" **** CPU-depeneded profile (RZ/A2M)",
+" */",
+"#include \"../cpu/rza2m/profile.h\"",
+"",
+"/*",
+" **** Target-depeneded profile (RZ/A2M IoT-Engine)",
+" */",
+"",
+"/*",
+" * Power management",
+" */",
+"#define TK_SUPPORT_LOWPOWER	FALSE		/* Support of power management */",
+"",
+"",
+"",
+"#endif /* __SYS_DEPEND_PROFILE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition (RZ/A2M IoT-Engine depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __SYS_SYSDEF_DEPEND_H__",
+"#define __SYS_SYSDEF_DEPEND_H__",
+"",
+"",
+"/* CPU-dependent definition */",
+"#include \"../cpu/rza2m/sysdef.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Maximum value of Power-saving mode switching prohibition request.",
+" * Use in tk_set_pow API.",
+" */",
+"#define LOWPOW_LIMIT	0x7fff		/* Maximum number for disabling */",
+"",
+"#endif /* __TK_SYSDEF_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine.h",
+" *",
+" *	Machine type definition (STM32L4 IoT-Engine depended)",
+" */",
+"",
+"#ifndef __SYS_SYSDEPEND_MACHINE_H__",
+"#define __SYS_SYSDEPEND_MACHINE_H__",
+"",
+"/*",
+" * [TYPE]_[CPU]		TARGET SYSTEM",
+" * CPU_xxxx		CPU type",
+" * CPU_CORE_xxx		CPU core type",
+" */",
+"",
+"/* ----- STM32L4 IoT-Engine (CPU: STM32L486VGT6) definition ----- */",
+"",
+"#define IOTE_STM32L4		1		/* Target system   : STM32L4 IoT-Engine */",
+"#define CPU_STM32L4		1		/* Target CPU type : STM32L4 series */",
+"#define CPU_STM32L486		1		/* Target CPU      : STM32L486 */",
+"#define CPU_CORE_ARMV7M		1		/* Target CPU-Core type : ARMv7-M */",
+"#define CPU_CORE_ACM4F		1		/* Target CPU-Core      : ARM Cortex-M4F */",
+"",
+"#define TARGET_DIR		iote_stm32l4	/* Sysdepend-Directory name */",
+"",
+"/*",
+" **** CPU-depeneded profile (STM32L4)",
+" */",
+"#include \"../cpu/stm32l4/machine.h\"",
+"",
+"",
+"#endif /* __SYS_SYSDEPEND_MACHINE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (STM32L4 IoT-Engine depended)",
+" */",
+"",
+"#ifndef __SYS_DEPEND_PROFILE_H__",
+"#define __SYS_DEPEND_PROFILE_H__",
+"",
+"/*",
+" **** CPU-depeneded profile (STM32L4)",
+" */",
+"#include \"../cpu/stm32l4/profile.h\"",
+"",
+"/*",
+" **** Target-depeneded profile (STM32L4 IoT-Engine)",
+" */",
+"",
+"/*",
+" * Power management",
+" */",
+"#define TK_SUPPORT_LOWPOWER	FALSE		/* Support of power management */",
+"",
+"",
+"",
+"#endif /* __SYS_DEPEND_PROFILE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition (STM32L4 IoT-Engine depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __SYS_SYSDEF_DEPEND_H__",
+"#define __SYS_SYSDEF_DEPEND_H__",
+"",
+"",
+"/* CPU-dependent definition */",
+"#include \"../cpu/stm32l4/sysdef.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Clock control definition",
+" */",
+"",
+"/* RCC register initial value */",
+"#define	RCC_CFGR_INIT		(0x00000000)	// SYSCLK = PLL ,SYSCLK,HCLK not divided. ",
+"#define	RCC_PLLCFGR_INIT	(0x00002810)	// M = 2, N = 40, P = 7, Q = 2, R =2",
+"#define	RCC_PLLSAI1CFGR_INIT	(0x00002000)	// N = 32, P = 7, Q = 2, R =2",
+"#define	RCC_PLLSAI2CFGR_INIT	(0x00001000)	// N = 16, P = 7, Q = 2, R =2",
+"",
+"#define RCC_CFGR_SW_INIT	(RCC_CFGR_SW_PLL)",
+"#define	RCC_PLLCFGR_PLLSRC_INIT	(RCC_PLLCFGR_PLLSRC_HSE)",
+"",
+"/* Clock frequency 　*/",
+"#define	SYSCLK			(80)		/* System clock */",
+"#define	HCLK			(SYSCLK)	/* Peripheral clock (AHB) */",
+"#define	PCLK1			(HCLK)		/* Peripheral clock (APB1) */",
+"#define	PCLK2			(HCLK)		/* Peripheral clock (APB2) */",
+"#define TMCLK			(HCLK)		/* System timer clock input (MHz) */",
+"#define TMCLK_KHz		(TMCLK * 1000)	/* System timer clock input (kHz) */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Maximum value of Power-saving mode switching prohibition request.",
+" * Used in tk_set_pow API.",
+" */",
+"#define LOWPOW_LIMIT	0x7fff		/* Maximum number for disabling */",
+"",
+"",
+"#endif /* __TK_SYSDEF_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine.h",
+" *",
+" *	Machine type definition (Nucleo-144 STM32H723 depended)",
+" */",
+"",
+"#ifndef __SYS_SYSDEPEND_MACHINE_H__",
+"#define __SYS_SYSDEPEND_MACHINE_H__",
+"",
+"/*",
+" * [TYPE]_[CPU]		TARGET SYSTEM",
+" * CPU_xxxx		CPU type",
+" * CPU_CORE_xxx		CPU core type",
+" */",
+"",
+"/* ----- Nucleo-144 STM32H723 (CPU: STM32H723) definition ----- */",
+"",
+"#define NUCLEO_H723		1		/* Target system : Nucleo-144 STM32H723 */",
+"#define CPU_STM32H7		1		/* Target CPU : STM32H7 series */",
+"#define CPU_STM32H723		1		/* Target CPU : STM32H723 */",
+"#define CPU_CORE_ARMV7M		1		/* Target CPU-Core type : ARMv7-M */",
+"#define CPU_CORE_ACM7		1		/* Target CPU-Core : ARM Cortex-M7 */",
+"",
+"#define TARGET_DIR		nucleo_h723	/* Sysdepend-Directory name */",
+"#define	TARGET_CPU_DIR		stm32h7		/* Sysdepend-CPU-Directory name */",
+"",
+"/*",
+" **** CPU-depeneded profile (STM32H7)",
+" */",
+"#include <sys/sysdepend/cpu/stm32h7/machine.h>",
+"",
+"",
+"#endif /* __SYS_SYSDEPEND_MACHINE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (Nucleo-144 STM32H723 depended)",
+" */",
+"",
+"#ifndef __SYS_DEPEND_PROFILE_H__",
+"#define __SYS_DEPEND_PROFILE_H__",
+"",
+"/*",
+" **** CPU-depeneded profile (STM32H7)",
+" */",
+"#include <sys/sysdepend/cpu/stm32h7/profile.h>",
+"",
+"/*",
+" **** Target-depeneded profile (Nucleo-144 STM32H723)",
+" */",
+"",
+"/*",
+" * Power management",
+" */",
+"#define TK_SUPPORT_LOWPOWER	FALSE		/* Support of power management */",
+"",
+"",
+"",
+"#endif /* __SYS_DEPEND_PROFILE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition (Nucleo-144 STM32H723 depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __SYS_SYSDEF_DEPEND_H__",
+"#define __SYS_SYSDEF_DEPEND_H__",
+"",
+"",
+"/* CPU-dependent definition */",
+"#include <sys/sysdepend/cpu/stm32h7/sysdef.h>",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Power & Clock control definition",
+" */",
+"",
+"/* PWR register initial value */",
+"#define	PWR_D3CR_INIT		(0x00)		// VOS Scale 0",
+"",
+"/* RCC register initial value */",
+"#define	RCC_CFGR_SW_INIT	(0x3)		// System clock switch  3 = pll1_p_ck",
+"",
+"#define RCC_PLLCKSELR_INIT	(0x02020042)	// PLL SRC = hse_ck, M = 4",
+"#define	RCC_PLL1DIVR_INIT	(0x01030112)	// N = 275, P = 1, Q = 4, R = 2",
+"#define	RCC_PLL1FRACR_INIT	(0x00000000)	// FRACN = 0",
+"#define	RCC_PLLCFGR_INIT	(0x01FF0004)	// PLL1RGE = 1, PLL1VCOSEL = 0",
+"",
+"#define RCC_PLL2DIVR_INIT	(0x01010117)	// PLL2 N = 24, P = 2, Q = 2, R = 2",
+"#define	RCC_PLL2FRACR_INIT	(0x00000000)	// FRACN = 0",
+"",
+"#define RCC_PLLCKSELR_DIVM2_INIT	(1)	// Prescaler for PLL2",
+"#define RCC_PLLCFGR_PLL2RGE_INIT	(3)	// 8 ~ 16 MHz",
+"#define RCC_PLLCFGR_PLL2VCOSEL_INIT	(0)	// Wide VCO range",
+"",
+"#define RCC_PLL3DIVR_INIT	(0x01010280)	// PLL3 N = 129, P = 2, Q = 2, R = 2",
+"#define	RCC_PLL3FRACR_INIT	(0x00000000)	// FRACN = 0",
+"",
+"#define RCC_PLLCKSELR_DIVM3_INIT	(32)	// Prescaler for PLL3",
+"#define RCC_PLLCFGR_PLL3RGE_INIT	(0)	// PLL3 input frequency range",
+"#define RCC_PLLCFGR_PLL3VCOSEL_INIT	(0)	// Wide VCO range",
+"",
+"#define	RCC_D1CFGR_INIT		(0x00000048)	// HPRE = div2, D1PPRE = div2, D1CPRE = div1",
+"#define	RCC_D1CFGR_PPRE		(0x00000040)	// D1PPRE = div2",
+"#define	RCC_D1CFGR_HPRE		(0x00000008)	// HPRE = div2",
+"",
+"#define	RCC_D2CFGR_INIT		(0x00000440)	// D2PPRE1 = div2, D2PPRE2 = div2",
+"#define	RCC_D3CFGR_INIT		(0x00000040)	// D3PPRE = div2",
+"",
+"#define	FLASH_ACR_INIT		(0x00000033)	// WRHIGHFREQ = 3, LATENCY = 3",
+"",
+"/* Clock frequency 　*/",
+"/* D1 Comain */",
+"#define	SYSCLK			(550)		/* System clock (CPU Clock) */",
+"#define TMCLK			(SYSCLK)	/* System timer clock input (MHz) */",
+"#define TMCLK_KHz		(TMCLK * 1000)	/* System timer clock input (kHz) */",
+"#define	HCLK			(SYSCLK/2)	/* Peripheral clock (AHB3) */",
+"#define	D1PCLK1			(SYSCLK/4)	/* Peripheral clock (APB3) */",
+"",
+"/* D2 Domain */",
+"#define	HCLK12			(SYSCLK/2)	/* Peripheral clock (AHB1&2) */",
+"#define	PCLK1			(SYSCLK/4)	/* Peripheral clock (APB1) */",
+"#define	PCLK2			(SYSCLK/4)	/* Peripheral clock (APB2) */",
+"",
+"/* D3 Domain */",
+"#define	HCLK4			(SYSCLK/2)	/* Peripheral clock (AHB4) */",
+"#define	D3PCLK1			(SYSCLK/4)	/* Peripheral clock (APB4) */",
+"",
+"/*",
+" * Maximum value of Power-saving mode switching prohibition request.",
+" * Use in tk_set_pow API.",
+" */",
+"#define LOWPOW_LIMIT	0x7fff		/* Maximum number for disabling */",
+"",
+"#endif /* __TK_SYSDEF_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine.h",
+" *",
+" *	Machine type definition (Nucleo-64 STM32L476 depended)",
+" */",
+"",
+"#ifndef __SYS_SYSDEPEND_MACHINE_H__",
+"#define __SYS_SYSDEPEND_MACHINE_H__",
+"",
+"/*",
+" * [TYPE]_[CPU]		TARGET SYSTEM",
+" * CPU_xxxx		CPU type",
+" * CPU_CORE_xxx		CPU core type",
+" */",
+"",
+"/* ----- Nucleo-64 STM32L467 (CPU: STM32L476) definition ----- */",
+"",
+"#define NUCLEO_L476		1		/* Target system : Nucleo-64 STM32L467 */",
+"#define CPU_STM32L4		1		/* Target CPU : STM32L4 series */",
+"#define CPU_STM32L476		1		/* Target CPU : STM32L476 */",
+"#define CPU_CORE_ARMV7M		1		/* Target CPU-Core type : ARMv7-M */",
+"#define CPU_CORE_ACM4F		1		/* Target CPU-Core : ARM Cortex-M4 */",
+"",
+"#define TARGET_DIR		nucleo_l476	/* Sysdepend-Directory name */",
+"#define	TARGET_CPU_DIR		stm32l4		/* Sysdepend-CPU-Directory name */",
+"",
+"/*",
+" **** CPU-depeneded profile (STM32L4)",
+" */",
+"#include <sys/sysdepend/cpu/stm32l4/machine.h>",
+"",
+"",
+"#endif /* __SYS_SYSDEPEND_MACHINE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (Nucleo-64 STM32L467 depended)",
+" */",
+"",
+"#ifndef __SYS_DEPEND_PROFILE_H__",
+"#define __SYS_DEPEND_PROFILE_H__",
+"",
+"/*",
+" **** CPU-depeneded profile (STM32L4)",
+" */",
+"#include <sys/sysdepend/cpu/stm32l4/profile.h>",
+"",
+"/*",
+" **** Target-depeneded profile (Nucleo-64 STM32L467)",
+" */",
+"",
+"/*",
+" * Power management",
+" */",
+"#define TK_SUPPORT_LOWPOWER	FALSE		/* Support of power management */",
+"",
+"",
+"",
+"#endif /* __SYS_DEPEND_PROFILE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition (Nucleo-64 STM32L467 depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __SYS_SYSDEF_DEPEND_H__",
+"#define __SYS_SYSDEF_DEPEND_H__",
+"",
+"",
+"/* CPU-dependent definition */",
+"#include <sys/sysdepend/cpu/stm32l4/sysdef.h>",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Clock control definition",
+" */",
+"",
+"/* RCC register initial value */",
+"#define	RCC_CFGR_INIT		(0x00000000)	// SYSCLK = HCLK = PCLK1 = PCLK2",
+"#define	RCC_PLLCFGR_INIT	(0x00000A00)	// M = 1, N = 10, P = 7, Q = 2, R =2",
+"#define	RCC_PLLSAI1CFGR_INIT	(0x00000800)	// N = 8, P = 7, Q = 2, R =2",
+"#define	RCC_PLLSAI2CFGR_INIT	(0x00000800)	// N = 8, P = 7, R =2",
+"",
+"#define RCC_CFGR_SW_INIT	(RCC_CFGR_SW_PLL)",
+"#define	RCC_PLLCFGR_PLLSRC_INIT	(RCC_PLLCFGR_PLLSRC_HSI)",
+"",
+"/* Clock frequency 　*/",
+"#define	SYSCLK			(80)		/* System clock */",
+"#define	HCLK			(SYSCLK)	/* Peripheral clock (AHB) */",
+"#define	PCLK1			(HCLK)		/* Peripheral clock (APB1) */",
+"#define	PCLK2			(HCLK)		/* Peripheral clock (APB2) */",
+"#define TMCLK			(HCLK)		/* System timer clock input (MHz) */",
+"#define TMCLK_KHz		(TMCLK * 1000)	/* System timer clock input (kHz) */",
+"",
+"/*",
+" * Maximum value of Power-saving mode switching prohibition request.",
+" * Use in tk_set_pow API.",
+" */",
+"#define LOWPOW_LIMIT	0x7fff		/* Maximum number for disabling */",
+"",
+"#endif /* __TK_SYSDEF_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine.h",
+" *",
+" *	Machine type definition (RaspberryPi Pico depended)",
+" */",
+"",
+"#ifndef __SYS_SYSDEPEND_MACHINE_H__",
+"#define __SYS_SYSDEPEND_MACHINE_H__",
+"",
+"/*",
+" * [TYPE]_[CPU]		TARGET SYSTEM",
+" * CPU_xxxx		CPU type",
+" * CPU_CORE_xxx		CPU core type",
+" */",
+"",
+"/* ----- Nucleo-64 STM32L467 (CPU: STM32L476) definition ----- */",
+"",
+"#define PICO_RP2040		1		/* Target system : RaspberryPi Pico */",
+"#define CPU_RP2040		1		/* Target CPU : RP2040 */",
+"#define CPU_CORE_ARMV6M		1		/* Target CPU-Core type : ARMv6-M */",
+"#define CPU_CORE_ACM0P		1		/* Target CPU-Core : ARM Cortex-M0+ */",
+"",
+"#define TARGET_DIR		pico_rp2040	/* Sysdepend-Directory name */",
+"#define	TARGET_CPU_DIR		rp2040		/* Sysdepend-CPU-Directory name */",
+"",
+"/*",
+" **** CPU-depeneded profile (RP2040)",
+" */",
+"#include <sys/sysdepend/cpu/rp2040/machine.h>",
+"",
+"",
+"#endif /* __SYS_SYSDEPEND_MACHINE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (RaspberryPi Pico depended)",
+" */",
+"",
+"#ifndef __SYS_DEPEND_PROFILE_H__",
+"#define __SYS_DEPEND_PROFILE_H__",
+"",
+"/*",
+" **** CPU-depeneded profile (RP2040)",
+" */",
+"#include <sys/sysdepend/cpu/rp2040/profile.h>",
+"",
+"/*",
+" **** Target-depeneded profile (RaspberryPi Pico)",
+" */",
+"",
+"/*",
+" * Power management",
+" */",
+"#define TK_SUPPORT_LOWPOWER	FALSE		/* Support of power management */",
+"",
+"",
+"",
+"#endif /* __SYS_DEPEND_PROFILE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition (RaspberryPi Pico depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __SYS_SYSDEF_DEPEND_H__",
+"#define __SYS_SYSDEF_DEPEND_H__",
+"",
+"",
+"/* CPU-dependent definition */",
+"#include <sys/sysdepend/cpu/rp2040/sysdef.h>",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Clock control definition",
+" */",
+"",
+"/* RCC register initial value */",
+"",
+"/* Clock frequency 　*/",
+"#define	KHz			(1000)",
+"#define	MHz			(KHz*1000)",
+"",
+"#define	SYSCLK			(125)		/* System clock */",
+"#define	TMCLK_MHz		(125)",
+"#define	TMCLK_KHz		(TMCLK_MHz*1000)",
+"",
+"#define	XOSC_MHz		(12)",
+"#define	XOSC_KHz		(XOSC_MHz*1000)",
+"#define XOSC_STARTUP_DELAY	((XOSC_KHz + 128) / 256)",
+"",
+"#define	CLK_PLL_SYS_FREQ	(TMCLK_MHz*MHz)",
+"#define	CLK_PLL_USB_FREQ	(48*MHz)",
+"",
+"#define	CLK_USB_FREQ		(48*MHz)",
+"#define	CLK_ADC_FREQ		(48*MHz)",
+"#define	CLK_RTC_FREQ		(46875)",
+"#define	CLK_PERI_FREQ		(125*MHz)",
+"",
+"#define	CLK_USB_SRC		0	// clksrc_pll_usb",
+"#define	CLK_ADC_SRC		0	// clksrc_pll_usb",
+"#define	CLK_RTC_SRC		0	// clksrc_pll_usb",
+"#define	CLK_PERI_SRC		0	// clk_sys",
+"",
+"",
+"/*",
+" * Maximum value of Power-saving mode switching prohibition request.",
+" * Use in tk_set_pow API.",
+" */",
+"#define LOWPOW_LIMIT	0x7fff		/* Maximum number for disabling */",
+"",
+"#endif /* __TK_SYSDEF_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine.h",
+" *",
+" *	Machine type definition (Renesas Starter Kit+ for RX65N depended)",
+" */",
+"",
+"#ifndef __SYS_SYSDEPEND_MACHINE_H__",
+"#define __SYS_SYSDEPEND_MACHINE_H__",
+"",
+"/*",
+" * [TYPE]_[CPU]		TARGET SYSTEM",
+" * CPU_xxxx		CPU type",
+" * CPU_CORE_xxx		CPU core type",
+" */",
+"",
+"/* ----- RX65N IoT-Engine (CPU: RX65N) definition ----- */",
+"",
+"#define RSK_RX65N		1		/* Target system : Renesas Starter Kit+ */",
+"#define CPU_RX65N		1		/* Target CPU : Renesas RX65N */",
+"#define CPU_CORE_RXV2		1		/* Target CPU-Core : RX200 series*/",
+"",
+"#define TARGET_DIR		rsk_rx65n	/* Sysdepend-Directory name */",
+"",
+"/*",
+" **** CPU-depeneded profile (RX65N)",
+" */",
+"#include \"../cpu/rx65n/machine.h\"",
+"",
+"",
+"#endif /* __SYS_SYSDEPEND_MACHINE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (Renesas Starter Kit+ for RX65N depended)",
+" */",
+"",
+"#ifndef __SYS_DEPEND_PROFILE_H__",
+"#define __SYS_DEPEND_PROFILE_H__",
+"",
+"/*",
+" **** CPU-depeneded profile (RX65N)",
+" */",
+"#include \"../cpu/rx65n/profile.h\"",
+"",
+"/*",
+" **** Target-depeneded profile (Renesas Starter Kit+ for RX65N)",
+" */",
+"",
+"/*",
+" * Power management",
+" */",
+"#define TK_SUPPORT_LOWPOWER	FALSE		/* Support of power management */",
+"",
+"",
+"",
+"#endif /* __SYS_DEPEND_PROFILE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition (Renesas Starter Kit+ for RX65N depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __SYS_SYSDEF_DEPEND_H__",
+"#define __SYS_SYSDEF_DEPEND_H__",
+"",
+"",
+"/* CPU-dependent definition */",
+"#include \"../cpu/rx65n/sysdef.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System Clock Setting",
+" *",
+" */",
+"#define	MHz		(UW)(1000000UL)",
+"",
+"#define	SYSCLK_ICLK	(UW)(120*MHz)",
+"#define	SYSCLK_PCLKA	(UW)(120*MHz)",
+"#define	SYSCLK_PCLKB	(UW)(60*MHz)",
+"#define	SYSCLK_PCLKC	(UW)(60*MHz)",
+"#define	SYSCLK_PCLKD	(UW)(60*MHz)",
+"",
+"/* System timer related definition */",
+"#define PCLK_DIV	(2)		/* PCLK Devistion = PCLKB of SCKCR */",
+"#define CMCR_DIV	(32)		/* CMT Clock = PCLK/CMCR_DIV */",
+"#define CMCR_CKS_PLCK	(0x0001)	/* CMCR.CKS = PCLK/32 */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Maximum value of Power-saving mode switching prohibition request.",
+" * Use in tk_set_pow API.",
+" */",
+"#define LOWPOW_LIMIT	0x7fff		/* Maximum number for disabling */",
+"",
+"#endif /* __TK_SYSDEF_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	machine.h",
+" *",
+" *	Machine type definition (Renesas Target Board for RX65N depended)",
+" */",
+"",
+"#ifndef __SYS_SYSDEPEND_MACHINE_H__",
+"#define __SYS_SYSDEPEND_MACHINE_H__",
+"",
+"/*",
+" * [TYPE]_[CPU]		TARGET SYSTEM",
+" * CPU_xxxx		CPU type",
+" * CPU_CORE_xxx		CPU core type",
+" */",
+"",
+"/* ----- Renesas Target Board for RX65N (CPU: RX65N) definition ----- */",
+"",
+"#define RTB_RX65N		1		/* Target system : Target Board */",
+"#define CPU_RX65N		1		/* Target CPU : Renesas RX65N */",
+"#define CPU_CORE_RXV2		1		/* Target CPU-Core : RX200 series*/",
+"",
+"#define TARGET_DIR		rtb_rx65n	/* Sysdepend-Directory name */",
+"",
+"/*",
+" **** CPU-depeneded profile (RX65N)",
+" */",
+"#include \"../cpu/rx65n/machine.h\"",
+"",
+"",
+"#endif /* __SYS_SYSDEPEND_MACHINE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	profile.h",
+" *",
+" *	Service Profile (Renesas Target Board for RX65N depended)",
+" */",
+"",
+"#ifndef __SYS_DEPEND_PROFILE_H__",
+"#define __SYS_DEPEND_PROFILE_H__",
+"",
+"/*",
+" **** CPU-depeneded profile (RX65N)",
+" */",
+"#include \"../cpu/rx65n/profile.h\"",
+"",
+"/*",
+" **** Target-depeneded profile (Renesas Target Board for RX65N)",
+" */",
+"",
+"/*",
+" * Power management",
+" */",
+"#define TK_SUPPORT_LOWPOWER	FALSE		/* Support of power management */",
+"",
+"#endif /* __SYS_DEPEND_PROFILE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdef.h",
+" *",
+" *	System dependencies definition (Renesas Target Board for RX65N depended)",
+" *	Included also from assembler program.",
+" */",
+"",
+"#ifndef __SYS_SYSDEF_DEPEND_H__",
+"#define __SYS_SYSDEF_DEPEND_H__",
+"",
+"",
+"/* CPU-dependent definition */",
+"#include \"../cpu/rx65n/sysdef.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System Clock Setting ",
+" *",
+" */",
+"#define	MHz		(UW)(1000000UL)",
+"",
+"#define	SYSCLK_ICLK	(UW)(120*MHz)",
+"#define	SYSCLK_PCLKA	(UW)(120*MHz)",
+"#define	SYSCLK_PCLKB	(UW)(60*MHz)",
+"#define	SYSCLK_PCLKC	(UW)(60*MHz)",
+"#define	SYSCLK_PCLKD	(UW)(60*MHz)",
+"",
+"/* System timer related definition */",
+"#define PCLK_DIV	(2)		/* PCLK Devistion = PCLKB of SCKCR */",
+"#define CMCR_DIV	(32)		/* CMT Clock = PCLK/CMCR_DIV */",
+"#define CMCR_CKS_PLCK	(0x0001)	/* CMCR.CKS = PCLK/32 */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Maximum value of Power-saving mode switching prohibition request.",
+" * Use in tk_set_pow API.",
+" */",
+"#define LOWPOW_LIMIT	0x7fff		/* Maximum number for disabling */",
+"",
+"#endif /* __TK_SYSDEF_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dbgspt.h",
+" *",
+" *	micro T-Kernel Debugger Support",
+" */",
+"",
+"#ifndef __TK_DBGSPT_H__",
+"#define __TK_DBGSPT_H__",
+"",
+"#include \"tkernel.h\"",
+"",
+"#ifdef __cplusplus",
+"extern \"C\" {",
+"#endif",
+"",
+"/* System dependencies */",
+"#define DBGSPT_PATH_(a)		#a",
+"#define DBGSPT_PATH(a)		DBGSPT_PATH_(a)",
+"#define DBGSPT_SYSDEP()		DBGSPT_PATH(sysdepend/TARGET_DIR/dbgspt.h)",
+"#include DBGSPT_SYSDEP()",
+"",
+"/*",
+" * Object name information		td_ref_dsname, td_set_dsname",
+" */",
+"#define TN_TSK 0x01",
+"#define TN_SEM 0x02",
+"#define TN_FLG 0x03",
+"#define TN_MBX 0x04",
+"#define TN_MBF 0x05",
+"#define TN_POR 0x06",
+"#define TN_MTX 0x07",
+"#define TN_MPL 0x08",
+"#define TN_MPF 0x09",
+"#define TN_CYC 0x0a",
+"#define TN_ALM 0x0b",
+"",
+"/*",
+" * Semaphore state information		td_ref_sem",
+" */",
+"typedef	struct td_rsem {",
+"	void	*exinf;		/* Extended information */",
+"	ID	wtsk;		/* Wait task ID */",
+"	INT	semcnt;		/* Current semaphore value */",
+"} TD_RSEM;",
+"",
+"/*",
+" * Event flag state information		td_ref_flg",
+" */",
+"typedef	struct td_rflg {",
+"	void	*exinf;		/* Extended information */",
+"	ID	wtsk;		/* Wait task ID */",
+"	UINT	flgptn;		/* Current event flag pattern */",
+"} TD_RFLG;",
+"",
+"/*",
+" * Mail box state information		td_ref_mbx",
+" */",
+"typedef	struct td_rmbx {",
+"	void	*exinf;		/* Extended information */",
+"	ID	wtsk;		/* Wait task ID */",
+"	T_MSG	*pk_msg;	/* Next received message */",
+"} TD_RMBX;",
+"",
+"/*",
+" * Mutex state information		td_ref_mtx",
+" */",
+"typedef struct td_rmtx {",
+"	void	*exinf;		/* Extended information */",
+"	ID	htsk;		/* Locking task ID */",
+"	ID	wtsk;		/* Lock wait task ID */",
+"} TD_RMTX;",
+"",
+"/*",
+" * Message buffer state information 	td_ref_mbf",
+" */",
+"typedef struct td_rmbf {",
+"	void	*exinf;		/* Extended information */",
+"	ID	wtsk;		/* Receive wait task ID */",
+"	ID	stsk;		/* Send wait task ID */",
+"	INT	msgsz;		/* Next received message size (byte) */",
+"	W	frbufsz;	/* Free buffer size (byte) */",
+"	INT	maxmsz;		/* Maximum length of message (byte) */",
+"} TD_RMBF;",
+"",
+"/*",
+" * Rendezvous port state information	td_ref_por",
+" */",
+"typedef struct td_rpor {",
+"	void	*exinf;		/* Extended information */",
+"	ID	wtsk;		/* Call wait task ID */",
+"	ID	atsk;		/* Receive wait task ID */",
+"	INT	maxcmsz;	/* Maximum length of call message (byte) */",
+"	INT	maxrmsz;	/* Maximum length of replay message (byte) */",
+"} TD_RPOR;",
+"",
+"/*",
+" * Fixed size memory pool state information	td_ref_mpf",
+" */",
+"typedef struct td_rmpf {",
+"	void	*exinf;		/* Extended information */",
+"	ID	wtsk;		/* Wait task ID */",
+"	W	frbcnt;		/* Number of free blocks */",
+"} TD_RMPF;",
+"",
+"/*",
+" * Variable size memory pool state information	td_ref_mpl",
+" */",
+"typedef struct td_rmpl {",
+"	void	*exinf;		/* Extended information */",
+"	ID	wtsk;		/* Wait task ID */",
+"	W	frsz;		/* Total size of free area (byte) */",
+"	W	maxsz;		/* Size of maximum continuous",
+"				   free area (byte) */",
+"} TD_RMPL;",
+"",
+"/*",
+" * Cycle handler state information	td_ref_cyc",
+" */",
+"typedef struct td_rcyc {",
+"	void	*exinf;		/* Extended information */",
+"	RELTIM	lfttim;		/* Remaining time until next handler startup */",
+"	UINT	cycstat;	/* Cycle handler status */",
+"} TD_RCYC;",
+"",
+"/*",
+" * Alarm handler state information	td_ref_alm",
+" */",
+"typedef struct td_ralm {",
+"	void	*exinf;		/* Extended information */",
+"	RELTIM	lfttim;		/* Remaining time until handler startup */",
+"	UINT	almstat;	/* Alarm handler status */",
+"} TD_RALM;",
+"",
+"/*",
+" * Subsystem state information		td_ref_ssy",
+" */",
+"typedef struct td_rssy {",
+"	PRI	ssypri;		/* Subsystem priority */",
+"	W	resblksz;	/* Resource management block size (byte) */",
+"} TD_RSSY;",
+"",
+"/*",
+" * Task state information		td_ref_tsk",
+" */",
+"typedef	struct td_rtsk {",
+"	void	*exinf;		/* Extended information */",
+"	PRI	tskpri;		/* Current priority */",
+"	PRI	tskbpri;	/* Base priority */",
+"	UINT	tskstat;	/* Task state */",
+"	UW	tskwait;	/* Wait factor */",
+"	ID	wid;		/* Wait object ID */",
+"	INT	wupcnt;		/* Number of wakeup requests queuing */",
+"	INT	suscnt;		/* Number of SUSPEND request nests */",
+"	FP	task;		/* Task startup address */",
+"	W	stksz;		/* stack size (byte) */",
+"	void	*istack;		/* stack pointer initial value */",
+"} TD_RTSK;",
+"",
+"/*",
+" * Task statistics information		td_inf_tsk",
+" */",
+"typedef struct td_itsk {",
+"	RELTIM	stime;		/* Cumulative system execution time",
+"				   (milliseconds) */",
+"	RELTIM	utime;		/* Cumulative user execution time",
+"				   (milliseconds) */",
+"} TD_ITSK;",
+"",
+"/*",
+" * System state information		td_ref_sys",
+" */",
+"typedef struct td_rsys {",
+"	UINT	sysstat;	/* System state */",
+"	ID	runtskid;	/* ID of task in execution state */",
+"	ID	schedtskid;	/* ID of task that should be in",
+"				   execution state */",
+"} TD_RSYS;",
+"",
+"/*",
+" * System call/extended SVC trace definition 	td_hok_svc",
+" */",
+"typedef struct td_hsvc {",
+"	FP	enter;		/* Hook routine before calling */",
+"	FP	leave;		/* Hook routine after calling */",
+"} TD_HSVC;",
+"",
+"/*",
+" * Task dispatch trace definition		td_hok_dsp",
+" */",
+"typedef struct td_hdsp {",
+"	FP	exec;		/* Hook routine when starting execution */",
+"	FP	stop;		/* Hook routine when stopping execution */",
+"} TD_HDSP;",
+"",
+"/*",
+" * Exception/Interrupt trace definition			td_hok_int",
+" */",
+"typedef struct td_hint {",
+"	FP	enter;		/* Hook routine before calling handler */",
+"	FP	leave;		/* Hook routine after calling handler */",
+"} TD_HINT;",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Definition for interface library automatic generation (mktdsvc)",
+" */",
+"/*** DEFINE_TDSVC ***/",
+"",
+"/* [BEGIN SYSCALLS] */",
+"",
+"/* Refer each object usage state */",
+"IMPORT INT td_lst_tsk( ID list[], INT nent );",
+"IMPORT INT td_lst_sem( ID list[], INT nent );",
+"IMPORT INT td_lst_flg( ID list[], INT nent );",
+"IMPORT INT td_lst_mbx( ID list[], INT nent );",
+"IMPORT INT td_lst_mtx( ID list[], INT nent );",
+"IMPORT INT td_lst_mbf( ID list[], INT nent );",
+"IMPORT INT td_lst_por( ID list[], INT nent );",
+"IMPORT INT td_lst_mpf( ID list[], INT nent );",
+"IMPORT INT td_lst_mpl( ID list[], INT nent );",
+"IMPORT INT td_lst_cyc( ID list[], INT nent );",
+"IMPORT INT td_lst_alm( ID list[], INT nent );",
+"IMPORT INT td_lst_ssy( ID list[], INT nent );",
+"",
+"/* Refer each object state */",
+"IMPORT ER td_ref_sem( ID semid, TD_RSEM *rsem );",
+"IMPORT ER td_ref_flg( ID flgid, TD_RFLG *rflg );",
+"IMPORT ER td_ref_mbx( ID mbxid, TD_RMBX *rmbx );",
+"IMPORT ER td_ref_mtx( ID mtxid, TD_RMTX *rmtx );",
+"IMPORT ER td_ref_mbf( ID mbfid, TD_RMBF *rmbf );",
+"IMPORT ER td_ref_por( ID porid, TD_RPOR *rpor );",
+"IMPORT ER td_ref_mpf( ID mpfid, TD_RMPF *rmpf );",
+"IMPORT ER td_ref_mpl( ID mplid, TD_RMPL *rmpl );",
+"IMPORT ER td_ref_cyc( ID cycid, TD_RCYC *rcyc );",
+"IMPORT ER td_ref_alm( ID almid, TD_RALM *ralm );",
+"IMPORT ER td_ref_ssy( ID ssid, TD_RSSY *rssy );",
+"",
+"/* Refer task state */",
+"IMPORT ER td_ref_tsk( ID tskid, TD_RTSK *rtsk );",
+"IMPORT ER td_inf_tsk( ID tskid, TD_ITSK *itsk, BOOL clr );",
+"",
+"#if TK_SUPPORT_REGOPS",
+"IMPORT ER td_get_reg( ID tskid, T_REGS *regs, T_EIT *eit, T_CREGS *cregs );",
+"IMPORT ER td_set_reg( ID tskid, CONST T_REGS *regs, CONST T_EIT *eit, CONST T_CREGS *cregs );",
+"#endif  /* TK_SUPPORT_REGOPS */",
+"",
+"/* Refer system state */",
+"IMPORT ER td_ref_sys( TD_RSYS *rsys );",
+"IMPORT ER td_get_tim( SYSTIM *tim, UW *ofs );",
+"IMPORT ER td_get_otm( SYSTIM *tim, UW *ofs );",
+"",
+"/* Refer ready queue */",
+"IMPORT INT td_rdy_que( PRI pri, ID list[], INT nent );",
+"",
+"/* Refer wait queue */",
+"IMPORT INT td_sem_que( ID semid, ID list[], INT nent );",
+"IMPORT INT td_flg_que( ID flgid, ID list[], INT nent );",
+"IMPORT INT td_mbx_que( ID mbxid, ID list[], INT nent );",
+"IMPORT INT td_mtx_que( ID mtxid, ID list[], INT nent );",
+"IMPORT INT td_smbf_que( ID mbfid, ID list[], INT nent );",
+"IMPORT INT td_rmbf_que( ID mbfid, ID list[], INT nent );",
+"IMPORT INT td_cal_que( ID porid, ID list[], INT nent );",
+"IMPORT INT td_acp_que( ID porid, ID list[], INT nent );",
+"IMPORT INT td_mpf_que( ID mpfid, ID list[], INT nent );",
+"IMPORT INT td_mpl_que( ID mplid, ID list[], INT nent );",
+"",
+"/* Execution trace */",
+"IMPORT ER td_hok_svc( CONST TD_HSVC *hsvc );",
+"IMPORT ER td_hok_dsp( CONST TD_HDSP *hdsp );",
+"IMPORT ER td_hok_int( CONST TD_HINT *hint );",
+"",
+"/* Object name */",
+"IMPORT ER td_ref_dsname( UINT type, ID id, UB *dsname );",
+"IMPORT ER td_set_dsname( UINT type, ID id, CONST UB *dsname );",
+"",
+"/* [END SYSCALLS] */",
+"",
+"#ifdef __cplusplus",
+"}",
+"#endif",
+"#endif /* __TK_DBGSPT_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	device.h",
+" *",
+" *	Device driver definition",
+" */",
+"",
+"#ifndef __TK_DEVICE_H__",
+"#define __TK_DEVICE_H__",
+"",
+"",
+"#if USE_SDEV_DRV	/* Use the sample driver */",
+"#include \"../../device/include/device.h\"",
+"#endif /* USE_SDEV_DRV */",
+"",
+"#endif /* __TK_DEVICE_H__ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	errno.h",
+" *",
+" *	micro T-Kernel Error Code",
+" */",
+"",
+"#ifndef __TK_ERRNO_H__",
+"#define __TK_ERRNO_H__",
+"",
+"#if	TK_SUPPORT_SERCD == TRUE",
+"/*",
+" * To port a program using macros concerning error codes from T-Kernel",
+" * into micro T-Kernel, you may modify and use following macros (ERCD, ",
+" * MERCD, SERCD).",
+" */",
+"#ifndef _in_asm_source_",
+"#include \"typedef.h\"",
+"",
+"#define MERCD(er)	( (ER)(er) >> 16 )	/* Main error code */",
+"#define SERCD(er)	( (H)(er) )		/* Sub-error code */",
+"#define ERCD(mer, ser)	( (ER)(((UW)(mer) << 16) | ((UW)(ser) & 0x0000FFFF)) )",
+"#else",
+"#define ERCD(mer, ser)	( ((mer) << 16) | ((ser) & 0xffff) )",
+"#endif /* _in_asm_source_ */",
+"",
+"#define E_OK		(0)	/* Completed successfully */",
+"",
+"#define E_SYS		ERCD(-5, 0)	/* System error */",
+"#define E_NOCOP		ERCD(-6, 0)	/* Coprocessor disable */",
+"#define E_NOSPT		ERCD(-9, 0)	/* Unsupported function */",
+"#define E_RSFN		ERCD(-10, 0)	/* Reserved function code number */",
+"#define E_RSATR		ERCD(-11, 0)	/* Reserved attribute */",
+"#define E_PAR		ERCD(-17, 0)	/* Parameter error */",
+"#define E_ID		ERCD(-18, 0)	/* Incorrect ID number */",
+"#define E_CTX		ERCD(-25, 0)	/* Context error */",
+"#define E_MACV		ERCD(-26, 0)	/* Inaccessible memory/access violation */",
+"#define E_OACV		ERCD(-27, 0)	/* Object access violation */",
+"#define E_ILUSE		ERCD(-28, 0)	/* Incorrect system call use */",
+"#define E_NOMEM		ERCD(-33, 0)	/* Insufficient memory */",
+"#define E_LIMIT		ERCD(-34, 0)	/* Exceed system limits */",
+"#define E_OBJ		ERCD(-41, 0)	/* Incorrect object state */",
+"#define E_NOEXS		ERCD(-42, 0)	/* Object does not exist */",
+"#define E_QOVR		ERCD(-43, 0)	/* Queuing overflow */",
+"#define E_RLWAI		ERCD(-49, 0)	/* Forcibly release wait state */",
+"#define E_TMOUT		ERCD(-50, 0)	/* Polling fail/time out */",
+"#define E_DLT		ERCD(-51, 0)	/* Waited object was deleted */",
+"#define E_DISWAI	ERCD(-52, 0)	/* Release wait caused by wait disable */",
+"",
+"#define E_IO		ERCD(-57, 0)	/* Output/input error */",
+"#define E_NOMDA		ERCD(-58, 0)	/* No media */",
+"#define E_BUSY		ERCD(-65, 0)	/* Busy state */",
+"#define E_ABORT		ERCD(-66, 0)	/* Aborted */",
+"#define E_RONLY		ERCD(-67, 0)	/* Write protected */",
+"",
+"#else	/* TK_SUPPORT_SERCD */",
+"",
+"#ifndef _in_asm_source_",
+"#include \"tk/typedef.h\"",
+"",
+"#define MERCD(er)	( (ER)(er) )	/* Main error code */",
+"#endif /* _in_asm_source_ */",
+"",
+"#define E_OK		(0)	/* Completed successfully */",
+"",
+"#define E_SYS		(-5)	/* System error */",
+"#define E_NOCOP		(-6)	/* Coprocessor disable */",
+"#define E_NOSPT		(-9)	/* Unsupported function */",
+"#define E_RSFN		(-10)	/* Reserved function code number */",
+"#define E_RSATR		(-11)	/* Reserved attribute */",
+"#define E_PAR		(-17)	/* Parameter error */",
+"#define E_ID		(-18)	/* Incorrect ID number */",
+"#define E_CTX		(-25)	/* Context error */",
+"#define E_MACV		(-26)	/* Inaccessible memory/access violation */",
+"#define E_OACV		(-27)	/* Object access violation */",
+"#define E_ILUSE		(-28)	/* Incorrect system call use */",
+"#define E_NOMEM		(-33)	/* Insufficient memory */",
+"#define E_LIMIT		(-34)	/* Exceed system limits */",
+"#define E_OBJ		(-41)	/* Incorrect object state */",
+"#define E_NOEXS		(-42)	/* Object does not exist */",
+"#define E_QOVR		(-43)	/* Queuing overflow */",
+"#define E_RLWAI		(-49)	/* Forcibly release wait state */",
+"#define E_TMOUT		(-50)	/* Polling fail/time out */",
+"#define E_DLT		(-51)	/* Waited object was deleted */",
+"#define E_DISWAI	(-52)	/* Release wait caused by wait disable */",
+"",
+"#define E_IO		(-57)	/* Output/input error */",
+"#define E_NOMDA		(-58)	/* No media */",
+"#define E_BUSY		(-65)	/* Busy state */",
+"#define E_ABORT		(-66)	/* Aborted */",
+"#define E_RONLY		(-67)	/* Write protected */",
+"",
+"#endif	/* TK_SUPPORT_SERCD */",
+"",
+"",
+"#endif /* __TK_ERRNO_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syscall.h",
+" *",
+" *	micro T-Kernel System Calls",
+" */",
+"",
+"#ifndef __TK_SYSCALL_H__",
+"#define __TK_SYSCALL_H__",
+"",
+"/* Task creation */",
+"#define TSK_SELF	0		/* Its own task specify */",
+"#define TPRI_INI	0		/* Specify priority at task startup */",
+"#define TPRI_RUN	0		/* Specify highest priority during running */",
+"",
+"#define TA_ASM		0x00000000UL	/* Program by assembler */",
+"#define TA_HLNG		0x00000001UL	/* Program by high level programming language */",
+"#define TA_USERBUF	0x00000020UL	/* Specify user buffer */",
+"#define TA_DSNAME	0x00000040UL	/* Use object name */",
+"",
+"#define TA_RNG0		0x00000000UL	/* Execute by protection level 0 */",
+"#define TA_RNG1		0x00000100UL	/* Execute by protection level 1 */",
+"#define TA_RNG2		0x00000200UL	/* Execute by protection level 2 */",
+"#define TA_RNG3		0x00000300UL	/* Execute by protection level 3 */",
+"",
+"#define TA_COP0		0x00001000U	/* Use coprocessor (ID=0) */",
+"#define TA_COP1		0x00002000U	/* Use coprocessor (ID=1) */",
+"#define TA_COP2		0x00004000U	/* Use coprocessor (ID=2) */",
+"#define TA_COP3		0x00008000U	/* Use coprocessor (ID=3) */",
+"",
+"/* Task state tskstat */",
+"#define TTS_RUN		0x00000001U	/* RUN */",
+"#define TTS_RDY		0x00000002U	/* READY */",
+"#define TTS_WAI		0x00000004U	/* WAIT */",
+"#define TTS_SUS		0x00000008U	/* SUSPEND */",
+"#define TTS_WAS		0x0000000cU	/* WAIT-SUSPEND */",
+"#define TTS_DMT		0x00000010U	/* DORMANT */",
+"#define TTS_NODISWAI	0x00000080U	/* Wait disable rejection state */",
+"",
+"/* Wait factor tskwait */",
+"#define TTW_SLP		0x00000001UL	/* Wait caused by wakeup wait */",
+"#define TTW_DLY		0x00000002UL	/* Wait caused by task delay */",
+"#define TTW_SEM		0x00000004UL	/* Semaphore wait */",
+"#define TTW_FLG		0x00000008UL	/* Event flag wait */",
+"#define TTW_MBX		0x00000040UL	/* Mail box wait */",
+"#define TTW_MTX		0x00000080UL	/* Mutex wait */",
+"#define TTW_SMBF	0x00000100UL	/* Message buffer send wait */",
+"#define TTW_RMBF	0x00000200UL	/* Message buffer receive wait */",
+"#define TTW_CAL		0x00000400UL	/* Rendezvous call wait */",
+"#define TTW_ACP		0x00000800UL	/* Rendezvous accept wait */",
+"#define TTW_RDV		0x00001000UL	/* Rendezvous end wait */",
+"#define TTW_MPF		0x00002000UL	/* Fixed size memory pool wait */",
+"#define TTW_MPL		0x00004000UL	/* Variable size memory pool wait */",
+"",
+"/* Semaphore generation */",
+"#define TA_TFIFO	0x00000000UL	/* Manage wait task by FIFO */",
+"#define TA_TPRI		0x00000001UL	/* Manage wait task by priority order */",
+"#define TA_FIRST	0x00000000UL	/* Give priority to task at head of wait queue */",
+"#define TA_CNT		0x00000002UL	/* Give priority to task whose request counts is less */",
+"#define TA_DSNAME	0x00000040UL	/* Use object name */",
+"",
+"/* Mutex */",
+"#define TA_TFIFO	0x00000000UL	/* Manage wait task by FIFO */",
+"#define TA_TPRI		0x00000001UL	/* Manage wait task by priority order */",
+"#define TA_INHERIT	0x00000002UL	/* Priority inherited protocol */",
+"#define TA_CEILING	0x00000003UL	/* Upper limit priority protocol */",
+"#define TA_DSNAME	0x00000040UL	/* Use object name */",
+"",
+"/* Event flag */",
+"#define TA_TFIFO	0x00000000UL	/* Manage wait task by FIFO */",
+"#define TA_TPRI		0x00000001UL	/* Manage wait task by priority order */",
+"#define TA_WSGL		0x00000000UL	/* Disable multiple tasks wait */",
+"#define TA_WMUL		0x00000008UL	/* Enable multiple tasks wait */",
+"#define TA_DSNAME	0x00000040UL	/* Use object name */",
+"",
+"/* Event flag wait mode */",
+"#define TWF_ANDW	0x00000000U	/* AND wait */",
+"#define TWF_ORW		0x00000001U	/* OR wait */",
+"#define TWF_CLR		0x00000010U	/* All clear specify */",
+"#define TWF_BITCLR	0x00000020U	/* Only condition bit clear specify */",
+"",
+"/* Mail box */",
+"#define TA_TFIFO	0x00000000UL	/* Manage wait task by FIFO */",
+"#define TA_TPRI		0x00000001UL	/* Manage wait task by priority order */",
+"#define TA_MFIFO	0x00000000UL	/* Manage messages by FIFO */",
+"#define TA_MPRI		0x00000002UL	/* Manage messages by priority order */",
+"#define TA_DSNAME	0x00000040UL	/* Use object name */",
+"",
+"/* Message buffer */",
+"#define TA_TFIFO	0x00000000UL	/* Manage wait task by FIFO */",
+"#define TA_TPRI		0x00000001UL	/* Manage wait task by priority order */",
+"#define TA_USERBUF	0x00000020UL	/* Specify user buffer */",
+"#define TA_DSNAME	0x00000040UL	/* Use object name */",
+"",
+"/* Rendezvous */",
+"#define TA_TFIFO	0x00000000UL	/* Manage wait task by FIFO */",
+"#define TA_TPRI		0x00000001UL	/* Manage wait task by priority order */",
+"#define TA_DSNAME	0x00000040UL	/* Use object name */",
+"",
+"/* Handler */",
+"#define TA_ASM		0x00000000UL	/* Program by assembler */",
+"#define TA_HLNG		0x00000001UL	/* Program by high level programming language */",
+"",
+"/* Variable size memory pool */",
+"#define TA_TFIFO	0x00000000UL	/* Manage wait task by FIFO */",
+"#define TA_TPRI		0x00000001UL	/* Manage wait task by priority order */",
+"#define TA_USERBUF	0x00000020UL	/* Specify user buffer */",
+"#define TA_DSNAME	0x00000040UL	/* Use object name */",
+"#define TA_RNG0		0x00000000UL	/* Protection level 0 */",
+"#define TA_RNG1		0x00000100UL	/* Protection level 1 */",
+"#define TA_RNG2		0x00000200UL	/* Protection level 2 */",
+"#define TA_RNG3		0x00000300UL	/* Protection level 3 */",
+"",
+"/* Fixed size memory pool */",
+"#define TA_TFIFO	0x00000000UL	/* Manage wait task by FIFO */",
+"#define TA_TPRI		0x00000001UL	/* Manage wait task by priority order */",
+"#define TA_USERBUF	0x00000020UL	/* Specify user buffer */",
+"#define TA_DSNAME	0x00000040UL	/* Use object name */",
+"#define TA_RNG0		0x00000000UL	/* Protection level 0 */",
+"#define TA_RNG1		0x00000100UL	/* Protection level 1 */",
+"#define TA_RNG2		0x00000200UL	/* Protection level 2 */",
+"#define TA_RNG3		0x00000300UL	/* Protection level 3 */",
+"",
+"/* Cycle handler */",
+"#define TA_ASM		0x00000000UL	/* Program by assembler */",
+"#define TA_HLNG		0x00000001UL	/* Program by high level programming language */",
+"#define TA_STA		0x00000002UL	/* Cycle handler startup */",
+"#define TA_PHS		0x00000004UL	/* Save cycle handler phase */",
+"#define TA_DSNAME	0x00000040UL	/* Use object name */",
+"",
+"#define TCYC_STP	0x00U		/* Cycle handler is not operating */",
+"#define TCYC_STA	0x01U		/* Cycle handler is operating */",
+"",
+"/* Alarm handler address */",
+"#define TA_ASM		0x00000000UL	/* Program by assembler */",
+"#define TA_HLNG		0x00000001UL	/* Program by high level programming language */",
+"#define TA_DSNAME	0x00000040UL	/* Use object name */",
+"",
+"#define TALM_STP	0x00U		/* Alarm handler is not operating */",
+"#define TALM_STA	0x01U		/* Alarm handler is operating */",
+"",
+"/* System state */",
+"#define TSS_TSK		0x00U	/* During execution of task part(context) */",
+"#define TSS_DDSP	0x01U	/* During dispatch disable */",
+"#define TSS_DINT	0x02U	/* During Interrupt disable */",
+"#define TSS_INDP	0x04U	/* During execution of task independent part */",
+"#define TSS_QTSK	0x08U	/* During execution of semi-task part */",
+"",
+"/* Power-saving mode */",
+"#define TPW_DOSUSPEND	1	/* Transit to suspend state */",
+"#define TPW_DISLOWPOW	2	/* Power-saving mode switch disable */",
+"#define TPW_ENALOWPOW	3	/* Power-saving mode switch enable */",
+"",
+"",
+"/* CPU dependent definition */",
+"#define CPUDEF_PATH_(a)		#a",
+"#define CPUDEF_PATH(a)		CPUDEF_PATH_(a)",
+"#define CPUDEF_SYSDEP()		CPUDEF_PATH(sysdepend/TARGET_DIR/cpudef.h)",
+"",
+"#include CPUDEF_SYSDEP()",
+"",
+"/*",
+" * Task creation information 		tk_cre_tsk",
+" */",
+"typedef struct t_ctsk {",
+"	void	*exinf;		/* Extended information */",
+"	ATR	tskatr;		/* Task attribute */",
+"	FP	task;		/* Task startup address */",
+"	PRI	itskpri;	/* Priority at task startup */",
+"	SZ	stksz;		/* User stack size (byte) */",
+"#if USE_OBJECT_NAME",
+"	UB	dsname[OBJECT_NAME_LENGTH];	/* Object name */",
+"#endif",
+"	void	*bufptr;	/* User buffer */",
+"} T_CTSK;",
+"",
+"/*",
+" * Task state information 		tk_ref_tsk",
+" */",
+"typedef	struct t_rtsk {",
+"	void	*exinf;		/* Extended information */",
+"	PRI	tskpri;		/* Current priority */",
+"	PRI	tskbpri;	/* Base priority */",
+"	UINT	tskstat;	/* Task state */",
+"	UW	tskwait;	/* Wait factor */",
+"	ID	wid;		/* Wait object ID */",
+"	INT	wupcnt;		/* Number of wakeup requests queuing */",
+"	INT	suscnt;		/* Number of SUSPEND request nests */",
+"} T_RTSK;",
+"",
+"/*",
+" * Semaphore creation information		tk_cre_sem",
+" */",
+"typedef	struct t_csem {",
+"	void	*exinf;		/* Extended information */",
+"	ATR	sematr;		/* Semaphore attribute */",
+"	INT	isemcnt;	/* Semaphore initial count value */",
+"	INT	maxsem;		/* Semaphore maximum count value */",
+"#if USE_OBJECT_NAME",
+"	UB	dsname[OBJECT_NAME_LENGTH];	/* Object name */",
+"#endif",
+"} T_CSEM;",
+"",
+"/*",
+" * Semaphore state information		tk_ref_sem",
+" */",
+"typedef	struct t_rsem {",
+"	void	*exinf;		/* Extended information */",
+"	ID	wtsk;		/* Wait task ID */",
+"	INT	semcnt;		/* Current semaphore value */",
+"} T_RSEM;",
+"",
+"/*",
+" * Mutex creation information		tk_cre_mtx",
+" */",
+"typedef struct t_cmtx {",
+"	void	*exinf;		/* Extended information */",
+"	ATR	mtxatr;		/* Mutex attribute */",
+"	PRI	ceilpri;	/* Upper limit priority of mutex */",
+"#if USE_OBJECT_NAME",
+"	UB	dsname[OBJECT_NAME_LENGTH];	/* Object name */",
+"#endif",
+"} T_CMTX;",
+"",
+"/*",
+" * Mutex state information		tk_ref_mtx",
+" */",
+"typedef struct t_rmtx {",
+"	void	*exinf;		/* Extended information */",
+"	ID	htsk;		/* Locking task ID */",
+"	ID	wtsk;		/* Lock wait task ID */",
+"} T_RMTX;",
+"",
+"/*",
+" * Event flag creation information	tk_cre_flg",
+" */",
+"typedef	struct t_cflg {",
+"	void	*exinf;		/* Extended information */",
+"	ATR	flgatr;		/* Event flag attribute */",
+"	UINT	iflgptn;	/* Event flag initial value */",
+"#if USE_OBJECT_NAME",
+"	UB	dsname[OBJECT_NAME_LENGTH];	/* Object name */",
+"#endif",
+"} T_CFLG;",
+"",
+"/*",
+" * Event flag state information		tk_ref_flg",
+" */",
+"typedef	struct t_rflg {",
+"	void	*exinf;		/* Extended information */",
+"	ID	wtsk;		/* Wait task ID */",
+"	UINT	flgptn;		/* Current event flag pattern */",
+"} T_RFLG;",
+"",
+"/*",
+" * Mail box creation information	tk_cre_mbx",
+" */",
+"typedef	struct t_cmbx {",
+"	void	*exinf;		/* Extended information */",
+"	ATR	mbxatr;		/* Mail box attribute */",
+"#if USE_OBJECT_NAME",
+"	UB	dsname[OBJECT_NAME_LENGTH];	/* Object name */",
+"#endif",
+"} T_CMBX;",
+"",
+"/*",
+" * Mail box message header",
+" */",
+"typedef struct t_msg {",
+"	void	*msgque[1];	/* Area for message queue */",
+"} T_MSG;",
+"",
+"typedef struct t_msg_pri {",
+"	T_MSG	msgque;		/* Area for message queue */",
+"	PRI	msgpri;		/* Message priority */",
+"} T_MSG_PRI;",
+"",
+"/*",
+" * Mail box state information		tk_ref_mbx",
+" */",
+"typedef	struct t_rmbx {",
+"	void	*exinf;		/* Extended information */",
+"	ID	wtsk;		/* Wait task ID */",
+"	T_MSG	*pk_msg;	/* Next received message */",
+"} T_RMBX;",
+"",
+"/*",
+" * Message buffer creation information	tk_cre_mbf",
+" */",
+"typedef	struct t_cmbf {",
+"	void	*exinf;		/* Extended information */",
+"	ATR	mbfatr;		/* Message buffer attribute */",
+"	SZ	bufsz;		/* Message buffer size (byte) */",
+"	INT	maxmsz;		/* Maximum length of message (byte) */",
+"#if USE_OBJECT_NAME",
+"	UB	dsname[OBJECT_NAME_LENGTH];	/* Object name */",
+"#endif",
+"	void	*bufptr;		/* User buffer */",
+"} T_CMBF;",
+"",
+"/*",
+" * Message buffer state information 	tk_ref_mbf",
+" */",
+"typedef struct t_rmbf {",
+"	void	*exinf;		/* Extended information */",
+"	ID	wtsk;		/* Receive wait task ID */",
+"	ID	stsk;		/* Send wait task ID */",
+"	INT	msgsz;		/* Next received message size (byte) */",
+"	SZ	frbufsz;	/* Free buffer size (byte) */",
+"	INT	maxmsz;		/* Maximum length of message (byte) */",
+"} T_RMBF;",
+"",
+"/*",
+" * Rendezvous port creation information	tk_cre_por",
+" */",
+"typedef	struct t_cpor {",
+"	void	*exinf;		/* Extended information */",
+"	ATR	poratr;		/* Port attribute */",
+"	INT	maxcmsz;	/* Maximum length of call message (byte) */",
+"	INT	maxrmsz;	/* Maximum length of replay message (byte) */",
+"#if USE_OBJECT_NAME",
+"	UB	dsname[OBJECT_NAME_LENGTH];	/* Object name */",
+"#endif",
+"} T_CPOR;",
+"",
+"/*",
+" * Rendezvous port state information	tk_ref_por",
+" */",
+"typedef struct t_rpor {",
+"	void	*exinf;		/* Extended information */",
+"	ID	wtsk;		/* Call wait task ID */",
+"	ID	atsk;		/* Receive wait task ID */",
+"	INT	maxcmsz;	/* Maximum length of call message (byte) */",
+"	INT	maxrmsz;	/* Maximum length of replay message (byte) */",
+"} T_RPOR;",
+"",
+"/*",
+" * Interrupt handler definition information	tk_def_int",
+" */",
+"typedef struct t_dint {",
+"	ATR	intatr;		/* Interrupt handler attribute */",
+"	FP	inthdr;		/* Interrupt handler address */",
+"} T_DINT;",
+"",
+"/*",
+" * Variable size memory pool creation information	tk_cre_mpl",
+" */",
+"typedef	struct t_cmpl {",
+"	void	*exinf;		/* Extended information */",
+"	ATR	mplatr;		/* Memory pool attribute */",
+"	SZ	mplsz;		/* Size of whole memory pool (byte) */",
+"#if USE_OBJECT_NAME",
+"	UB	dsname[OBJECT_NAME_LENGTH];	/* Object name */",
+"#endif",
+"	void	*bufptr;		/* User buffer */",
+"} T_CMPL;",
+"",
+"/*",
+" * Variable size memory pool state information	tk_ref_mpl",
+" */",
+"typedef struct t_rmpl {",
+"	void	*exinf;		/* Extended information */",
+"	ID	wtsk;		/* Wait task ID */",
+"	SZ	frsz;		/* Total size of free area (byte) */",
+"	SZ	maxsz;		/* Size of maximum continuous free area",
+"				   (byte) */",
+"} T_RMPL;",
+"",
+"/*",
+" * Fixed size memory pool state information	tk_cre_mpf",
+" */",
+"typedef	struct t_cmpf {",
+"	void	*exinf;		/* Extended information */",
+"	ATR	mpfatr;		/* Memory pool attribute */",
+"	SZ	mpfcnt;		/* Number of blocks in whole memory pool */",
+"	SZ	blfsz;		/* Fixed size memory block size (byte) */",
+"#if USE_OBJECT_NAME",
+"	UB	dsname[OBJECT_NAME_LENGTH];	/* Object name */",
+"#endif",
+"	void	*bufptr;		/* User buffer */",
+"} T_CMPF;",
+"",
+"/*",
+" * Fixed size memory pool state information	tk_ref_mpf",
+" */",
+"typedef struct t_rmpf {",
+"	void	*exinf;		/* Extended information */",
+"	ID	wtsk;		/* Wait task ID */",
+"	SZ	frbcnt;		/* Number of free area blocks */",
+"} T_RMPF;",
+"",
+"/*",
+" * Cycle handler creation information 	tk_cre_cyc",
+" */",
+"typedef struct t_ccyc {",
+"	void	*exinf;		/* Extended information */",
+"	ATR	cycatr;		/* Cycle handler attribute */",
+"	FP	cychdr;		/* Cycle handler address */",
+"	RELTIM	cyctim;		/* Cycle interval */",
+"	RELTIM	cycphs;		/* Cycle phase */",
+"#if USE_OBJECT_NAME",
+"	UB	dsname[OBJECT_NAME_LENGTH];	/* Object name */",
+"#endif",
+"} T_CCYC;",
+"",
+"/*",
+" * Cycle handler state information	tk_ref_cyc",
+" */",
+"typedef struct t_rcyc {",
+"	void	*exinf;		/* Extended information */",
+"	RELTIM	lfttim;		/* Remaining time until next handler startup */",
+"	UINT	cycstat;	/* Cycle handler status */",
+"} T_RCYC;",
+"",
+"/*",
+" * Alarm handler creation information		tk_cre_alm",
+" */",
+"typedef struct t_calm {",
+"	void	*exinf;		/* Extended information */",
+"	ATR	almatr;		/* Alarm handler attribute */",
+"	FP	almhdr;		/* Alarm handler address */",
+"#if USE_OBJECT_NAME",
+"	UB	dsname[OBJECT_NAME_LENGTH];	/* Object name */",
+"#endif",
+"} T_CALM;",
+"",
+"/*",
+" * Alarm handler state information	tk_ref_alm",
+" */",
+"typedef struct t_ralm {",
+"	void	*exinf;		/* Extended information */",
+"	RELTIM	lfttim;		/* Remaining time until handler startup */",
+"	UINT	almstat;	/* Alarm handler state */",
+"} T_RALM;",
+"",
+"/*",
+" * Version information		tk_ref_ver",
+" */",
+"typedef struct t_rver {",
+"	UH	maker;		/* OS manufacturer */",
+"	UH	prid;		/* OS identification number */",
+"	UH	spver;		/* Specification version */",
+"	UH	prver;		/* OS product version */",
+"	UH	prno[4];	/* Product number, Product management",
+"				   information */",
+"} T_RVER;",
+"",
+"/*",
+" * System state information		tk_ref_sys",
+" */",
+"typedef struct t_rsys {",
+"	UINT	sysstat;	/* System state */",
+"	ID	runtskid;	/* ID of task in execution state */",
+"	ID	schedtskid;	/* ID of the task that should be the",
+"				   execution state */",
+"} T_RSYS;",
+"",
+"/*",
+" * Subsystem definition information 		tk_def_ssy",
+" */",
+"typedef struct t_dssy {",
+"	ATR	ssyatr;		/* Subsystem attribute */",
+"	PRI	ssypri;		/* Subsystem priority */",
+"	FP	svchdr;		/* Extended SVC handler address */",
+"	FP	breakfn;	/* Break function address */",
+"	FP	eventfn;	/* Event function address */",
+"} T_DSSY;",
+"",
+"/*",
+" * Subsystem state information		tk_ref_ssy",
+" */",
+"typedef struct t_rssy {",
+"	PRI	ssypri;		/* Subsystem priority */",
+"} T_RSSY;",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Device manager",
+" */",
+"",
+"#define L_DEVNM		8	/* Device name length */",
+"",
+"/*",
+" * Device attribute (ATR)",
+" *",
+" *	IIII IIII IIII IIII PRxx xxxx KKKK KKKK",
+" *",
+" *	The first 16-bit is the device-dependent attribute and",
+" *	defined by each device.",
+" *	The last 16-bit is the standard attribute and defined",
+" *	like as followings.",
+" */",
+"#define TD_PROTECT	0x8000U		/* P: Write protected */",
+"#define TD_REMOVABLE	0x4000U		/* R: Media remove enabled */",
+"",
+"#define TD_DEVKIND	0x00ffU		/* K: Device/media type */",
+"#define TD_DEVTYPE	0x00f0U		/*    Device type */",
+"",
+"/* Device type */",
+"#define TDK_UNDEF	0x0000U		/* Undefined/Unknown */",
+"#define TDK_DISK	0x0010U		/* Disk device */",
+"",
+"/* Disk type */",
+"#define TDK_DISK_UNDEF	0x0010U		/* Other disks */",
+"#define TDK_DISK_RAM	0x0011U		/* RAM disk (Use main memory) */",
+"#define TDK_DISK_ROM	0x0012U		/* ROM disk (Use main memory) */",
+"#define TDK_DISK_FLA	0x0013U		/* Flash ROM, other silicon disks */",
+"#define TDK_DISK_FD	0x0014U		/* Floppy disk */",
+"#define TDK_DISK_HD	0x0015U		/* Hard disk */",
+"#define TDK_DISK_CDROM	0x0016U		/* CD-ROM */",
+"",
+"/*",
+" * Device open mode",
+" */",
+"#define TD_READ		0x0001U		/* Read only */",
+"#define TD_WRITE	0x0002U		/* Write only */",
+"#define TD_UPDATE	0x0003U		/* Read and write */",
+"#define TD_EXCL		0x0100U		/* Exclusive */",
+"#define TD_WEXCL	0x0200U		/* Exclusive write */",
+"#define TD_REXCL	0x0400U		/* Exclusive read */",
+"",
+"/*",
+" * Device close option",
+" */",
+"#define TD_EJECT	0x0001U		/* Media eject */",
+"",
+"/*",
+" * Suspend mode",
+" */",
+"#define TD_SUSPEND	0x0001U		/* Suspend */",
+"#define TD_DISSUS	0x0002U		/* Disable suspend */",
+"#define TD_ENASUS	0x0003U		/* Enable suspend */",
+"#define TD_CHECK	0x0004U		/* Get suspend disable request count */",
+"#define TD_FORCE	0x8000U		/* Specify forced suspend */",
+"",
+"/*",
+" * Device information",
+" */",
+"typedef struct t_rdev {",
+"	ATR	devatr;		/* Device attribute */",
+"	W	blksz;		/* Specific data block size (-1: Unknown) */",
+"	INT	nsub;		/* Number of subunits */",
+"	INT	subno;		/* 0: Physical device,",
+"				   1 - nsub: Subunit number +1 */",
+"} T_RDEV;",
+"",
+"/*",
+" * Registration device information",
+" */",
+"typedef struct t_ldev {",
+"	ATR	devatr;		/* Device attribute */",
+"	W	blksz;		/* Specific data block size (-1: Unknown) */",
+"	INT	nsub;		/* Number of subunits */",
+"	UB	devnm[L_DEVNM];	/* Physical device name */",
+"} T_LDEV;",
+"",
+"/*",
+" * Common attribute data number",
+" *	RW: Readable (tk_rea_dev)/writable (tk_wri_dev)",
+" *	R-: Readable (tk_rea_dev) only",
+" */",
+"#define TDN_EVENT	(-1)	/* RW:Message buffer ID",
+"				      for event notification */",
+"#define TDN_DISKINFO	(-2)	/* R-:Disk information */",
+"#define TDN_DISPSPEC	(-3)	/* R-:Display device specification */",
+"#define TDN_PCMCIAINFO	(-4)	/* R-:PC card information */",
+"",
+"/*",
+" * Device event type",
+" */",
+"typedef	enum tdevttyp {",
+"	TDE_unknown	= 0,		/* Undefined */",
+"	TDE_MOUNT	= 0x01,		/* Media insert */",
+"	TDE_EJECT	= 0x02,		/* Media eject */",
+"	TDE_ILLMOUNT	= 0x03,		/* Media incorrect insert */",
+"	TDE_ILLEJECT	= 0x04,		/* Media incorrect eject */",
+"	TDE_REMOUNT	= 0x05,		/* Media re-insert */",
+"	TDE_CARDBATLOW	= 0x06,		/* Card battery low */",
+"	TDE_CARDBATFAIL	= 0x07,		/* Card battery abnormal */",
+"	TDE_REQEJECT	= 0x08,		/* Media eject request */",
+"	TDE_PDBUT	= 0x11,		/* PD button state change */",
+"	TDE_PDMOVE	= 0x12,		/* PD position move */",
+"	TDE_PDSTATE	= 0x13,		/* PD state change */",
+"	TDE_PDEXT	= 0x14,		/* PD extended event */",
+"	TDE_KEYDOWN	= 0x21,		/* Key down */",
+"	TDE_KEYUP	= 0x22,		/* Key up */",
+"	TDE_KEYMETA	= 0x23,		/* Meta key state change */",
+"	TDE_POWEROFF	= 0x31,		/* Power switch off */",
+"	TDE_POWERLOW	= 0x32,		/* Power low */",
+"	TDE_POWERFAIL	= 0x33,		/* Power abnormal */",
+"	TDE_POWERSUS	= 0x34,		/* Automatic suspend */",
+"	TDE_POWERUPTM	= 0x35,		/* Clock update */",
+"	TDE_CKPWON	= 0x41		/* Automatic power on notification */",
+"} TDEvtTyp;",
+"",
+"/*",
+" * Device event message format",
+" */",
+"typedef struct t_devevt {",
+"	TDEvtTyp	evttyp;		/* Event type */",
+"	/* Information by each event type is added below */",
+"} T_DEVEVT;",
+"",
+"/*",
+" * Device event message format with device ID",
+" */",
+"typedef struct t_devevt_id {",
+"	TDEvtTyp	evttyp;		/* Event type */",
+"	ID		devid;		/* Device ID */",
+"	/* Information by each event type is added below */",
+"} T_DEVEVT_ID;",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Device registration information",
+" */",
+"typedef struct t_ddev {",
+"	void	*exinf;		/* Extended information */",
+"	ATR	drvatr;		/* Driver attribute */",
+"	ATR	devatr;		/* Device attribute */",
+"	INT	nsub;		/* Number of subunits */",
+"	W	blksz;		/* Specific data block size (-1: Unknown) */",
+"	FP	openfn;		/* Open function */",
+"	FP	closefn;	/* Close function */",
+"	FP	execfn;		/* Execute function */",
+"	FP	waitfn;		/* Completion wait function */",
+"	FP	abortfn;	/* Abort function */",
+"	FP	eventfn;	/* Event function */",
+"} T_DDEV;",
+"",
+"/*",
+" * Open function:",
+" *	ER  openfn( ID devid, UINT omode, void *exinf )",
+" * Close function:",
+" *	ER  closefn( ID devid, UINT option, void *exinf )",
+" * Execute function:",
+" *	ER  execfn( T_DEVREQ *devreq, TMO tmout, void *exinf )",
+" * Completion wait function:",
+" *	INT waitfn( T_DEVREQ *devreq, INT nreq, TMO tmout, void *exinf )",
+" * Abort function:",
+" *	ER  abortfn( ID tskid, T_DEVREQ *devreq, INT nreq, void *exinf) ",
+" * Event function:",
+" *	INT eventfn( INT evttyp, void *evtinf, void *exinf )",
+" */",
+"",
+"/*",
+" * Driver attribute",
+" */",
+"#define TDA_OPENREQ	0x0001U	/* Every time open/close */",
+"",
+"/*",
+" * Device initial setting information",
+" */",
+"typedef struct t_idev {",
+"	ID	evtmbfid;	/* Message buffer ID for event notification */",
+"} T_IDEV;",
+"",
+"/*",
+" * Device request packet",
+" *	 I: Input parameter",
+" *	 O: Output parameter",
+" */",
+"typedef struct t_devreq {",
+"	struct t_devreq	*next;	/* I:Link to request packet (NULL:End) */",
+"	void	*exinf;		/* X:Extended information */",
+"	ID	devid;		/* I:Target device ID */",
+"	INT	cmd:4;		/* I:Request command */",
+"	BOOL	abort:1;	/* I:When executing abort request, TRUE */",
+"	W	start;		/* I:Start data number */",
+"	W	size;		/* I:Request size */",
+"	void	*buf;		/* I:Input/output buffer address */",
+"	W	asize;		/* O:Result size */",
+"	ER	error;		/* O:Result error */",
+"} T_DEVREQ;",
+"",
+"/*",
+" * Request command",
+" */",
+"#define TDC_READ	1	/* Read request */",
+"#define TDC_WRITE	2	/* Write request */",
+"",
+"/*",
+" * Driver request event",
+" */",
+"#define TDV_SUSPEND	(-1)	/* Suspend */",
+"#define TDV_RESUME	(-2)	/* Resume */",
+"#define TDV_CARDEVT	1	/* PC card event (Refer card manager) */",
+"#define TDV_USBEVT	2	/* USB event     (Refer USB manager) */",
+"",
+"/*",
+" * System call prototype declaration",
+" */",
+"IMPORT ID tk_cre_tsk( CONST T_CTSK *pk_ctsk );",
+"IMPORT ER tk_del_tsk( ID tskid );",
+"IMPORT ER tk_sta_tsk( ID tskid, INT stacd );",
+"IMPORT void tk_ext_tsk( void );",
+"IMPORT void tk_exd_tsk( void );",
+"IMPORT ER tk_ter_tsk( ID tskid );",
+"IMPORT ER tk_dis_dsp( void );",
+"IMPORT ER tk_ena_dsp( void );",
+"IMPORT ER tk_chg_pri( ID tskid, PRI tskpri );",
+"IMPORT ER tk_rot_rdq( PRI tskpri );",
+"IMPORT ER tk_rel_wai( ID tskid );",
+"IMPORT ID tk_get_tid( void );",
+"IMPORT ER tk_ref_tsk( ID tskid, T_RTSK *pk_rtsk );",
+"IMPORT ER tk_sus_tsk( ID tskid );",
+"IMPORT ER tk_rsm_tsk( ID tskid );",
+"IMPORT ER tk_frsm_tsk( ID tskid );",
+"IMPORT ER tk_slp_tsk( TMO tmout );",
+"IMPORT ER tk_wup_tsk( ID tskid );",
+"IMPORT INT tk_can_wup( ID tskid );",
+"IMPORT ER tk_dly_tsk( RELTIM dlytim );",
+"",
+"#if TK_SUPPORT_REGOPS",
+"IMPORT ER tk_get_reg( ID tskid, T_REGS *pk_regs, T_EIT *pk_eit, T_CREGS *pk_cregs );",
+"IMPORT ER tk_set_reg( ID tskid, CONST T_REGS *pk_regs, CONST T_EIT *pk_eit, CONST T_CREGS *pk_cregs );",
+"#endif /* TK_SUPPORT_REGOPS */",
+"",
+"#if NUM_COPROCESSOR > 0",
+"IMPORT ER tk_get_cpr( ID tskid, INT copno, T_COPREGS *pk_copregs);",
+"IMPORT ER tk_set_cpr(ID tskid, INT copno, CONST T_COPREGS *pk_copregs);",
+"#endif",
+"",
+"IMPORT ID tk_cre_sem( CONST T_CSEM *pk_csem );",
+"IMPORT ER tk_del_sem( ID semid );",
+"IMPORT ER tk_sig_sem( ID semid, INT cnt );",
+"IMPORT ER tk_wai_sem( ID semid, INT cnt, TMO tmout );",
+"IMPORT ER tk_ref_sem( ID semid, T_RSEM *pk_rsem );",
+"",
+"IMPORT ID tk_cre_mtx( CONST T_CMTX *pk_cmtx );",
+"IMPORT ER tk_del_mtx( ID mtxid );",
+"IMPORT ER tk_loc_mtx( ID mtxid, TMO tmout );",
+"IMPORT ER tk_unl_mtx( ID mtxid );",
+"IMPORT ER tk_ref_mtx( ID mtxid, T_RMTX *pk_rmtx );",
+"",
+"IMPORT ID tk_cre_flg( CONST T_CFLG *pk_cflg );",
+"IMPORT ER tk_del_flg( ID flgid );",
+"IMPORT ER tk_set_flg( ID flgid, UINT setptn );",
+"IMPORT ER tk_clr_flg( ID flgid, UINT clrptn );",
+"IMPORT ER tk_wai_flg( ID flgid, UINT waiptn, UINT wfmode, UINT *p_flgptn, TMO tmout );",
+"IMPORT ER tk_ref_flg( ID flgid, T_RFLG *pk_rflg );",
+"",
+"IMPORT ID tk_cre_mbx( CONST T_CMBX* pk_cmbx );",
+"IMPORT ER tk_del_mbx( ID mbxid );",
+"IMPORT ER tk_snd_mbx( ID mbxid, T_MSG *pk_msg );",
+"IMPORT ER tk_rcv_mbx( ID mbxid, T_MSG **ppk_msg, TMO tmout );",
+"IMPORT ER tk_ref_mbx( ID mbxid, T_RMBX *pk_rmbx );",
+"IMPORT ID tk_cre_mbf( CONST T_CMBF *pk_cmbf );",
+"IMPORT ER tk_del_mbf( ID mbfid );",
+"IMPORT ER tk_snd_mbf( ID mbfid, CONST void *msg, INT msgsz, TMO tmout );",
+"IMPORT INT tk_rcv_mbf( ID mbfid, void *msg, TMO tmout );",
+"IMPORT ER tk_ref_mbf( ID mbfid, T_RMBF *pk_rmbf );",
+"",
+"IMPORT ID tk_cre_por( CONST T_CPOR *pk_cpor );",
+"IMPORT ER tk_del_por( ID porid );",
+"IMPORT INT tk_cal_por( ID porid, UINT calptn, void *msg, INT cmsgsz, TMO tmout );",
+"IMPORT INT tk_acp_por( ID porid, UINT acpptn, RNO *p_rdvno, void *msg, TMO tmout );",
+"IMPORT ER tk_fwd_por( ID porid, UINT calptn, RNO rdvno, CONST void *msg, INT cmsgsz );",
+"IMPORT ER tk_rpl_rdv( RNO rdvno, CONST void *msg, INT rmsgsz );",
+"IMPORT ER tk_ref_por( ID porid, T_RPOR *pk_rpor );",
+"",
+"IMPORT ER tk_def_int( UINT intno, CONST T_DINT *pk_dint );",
+"IMPORT void tk_ret_int( void );",
+"",
+"IMPORT ID tk_cre_mpl( CONST T_CMPL *pk_cmpl );",
+"IMPORT ER tk_del_mpl( ID mplid );",
+"IMPORT ER tk_get_mpl( ID mplid, SZ blksz, void **p_blk, TMO tmout );",
+"IMPORT ER tk_rel_mpl( ID mplid, void *blk );",
+"IMPORT ER tk_ref_mpl( ID mplid, T_RMPL *pk_rmpl );",
+"",
+"IMPORT ID tk_cre_mpf( CONST T_CMPF *pk_cmpf );",
+"IMPORT ER tk_del_mpf( ID mpfid );",
+"IMPORT ER tk_get_mpf( ID mpfid, void **p_blf, TMO tmout );",
+"IMPORT ER tk_rel_mpf( ID mpfid, void *blf );",
+"IMPORT ER tk_ref_mpf( ID mpfid, T_RMPF *pk_rmpf );",
+"",
+"IMPORT ER tk_set_utc( CONST SYSTIM *pk_tim );",
+"IMPORT ER tk_get_utc( SYSTIM *pk_tim );",
+"IMPORT ER tk_set_tim( CONST SYSTIM *pk_tim );",
+"IMPORT ER tk_get_tim( SYSTIM *pk_tim );",
+"IMPORT ER tk_get_otm( SYSTIM *pk_tim );",
+"",
+"IMPORT ID tk_cre_cyc( CONST T_CCYC *pk_ccyc );",
+"IMPORT ER tk_del_cyc( ID cycid );",
+"IMPORT ER tk_sta_cyc( ID cycid );",
+"IMPORT ER tk_stp_cyc( ID cycid );",
+"IMPORT ER tk_ref_cyc( ID cycid, T_RCYC *pk_rcyc );",
+"",
+"IMPORT ID tk_cre_alm( CONST T_CALM *pk_calm );",
+"IMPORT ER tk_del_alm( ID almid );",
+"IMPORT ER tk_sta_alm( ID almid, RELTIM almtim );",
+"IMPORT ER tk_stp_alm( ID almid );",
+"IMPORT ER tk_ref_alm( ID almid, T_RALM *pk_ralm );",
+"",
+"IMPORT ER tk_ref_sys( T_RSYS *pk_rsys );",
+"IMPORT ER tk_set_pow( UINT powmode);",
+"IMPORT ER tk_ref_ver( T_RVER *pk_rver );",
+"",
+"IMPORT ER tk_def_ssy( ID ssid, CONST T_DSSY *pk_dssy );",
+"IMPORT ER tk_ref_ssy( ID ssid, T_RSSY *pk_rssy );",
+"",
+"IMPORT ID tk_opn_dev( CONST UB *devnm, UINT omode );",
+"IMPORT ER tk_cls_dev( ID dd, UINT option );",
+"IMPORT ID tk_rea_dev( ID dd, W start, void *buf, SZ size, TMO tmout );",
+"IMPORT ER tk_srea_dev( ID dd, W start, void *buf, SZ size, SZ *asize );",
+"IMPORT ID tk_wri_dev( ID dd, W start, CONST void *buf, SZ size, TMO tmout );",
+"IMPORT ER tk_swri_dev( ID dd, W start, CONST void *buf, SZ size, SZ *asize );",
+"IMPORT ID tk_wai_dev( ID dd, ID reqid, SZ *asize, ER *ioer, TMO tmout );",
+"IMPORT INT tk_sus_dev( UINT mode );",
+"IMPORT ID tk_get_dev( ID devid, UB *devnm );",
+"IMPORT ID tk_ref_dev( CONST UB *devnm, T_RDEV *pk_rdev );",
+"IMPORT ID tk_oref_dev( ID dd, T_RDEV *pk_rdev );",
+"IMPORT INT tk_lst_dev( T_LDEV *pk_ldev, INT start, INT ndev );",
+"IMPORT INT tk_evt_dev( ID devid, INT evttyp, void *evtinf );",
+"IMPORT ID tk_def_dev( CONST UB *devnm, CONST T_DDEV *pk_ddev, T_IDEV *pk_idev );",
+"IMPORT ER tk_ref_idv( T_IDEV *pk_idev );",
+"",
+"#endif /* __TK_SYSCALL_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/08.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpudef.h",
+" *",
+" *	CPU dependent definition  (ARMv6-M core depended)",
+" */",
+"",
+"#ifndef __TK_CPUDEF_CORE_H__",
+"#define __TK_CPUDEF_CORE_H__",
+"",
+"#include <config.h>",
+"",
+"#define	TA_COPS		0",
+"#define TA_FPU		TA_COP0		/* dummy. An error occurs when checking API calls. */",
+"",
+"/*",
+" * General purpose register		tk_get_reg tk_set_reg",
+" */",
+"typedef struct t_regs {",
+"	VW	r[13];		/* General purpose register R0-R12 */",
+"	void	*lr;		/* Link register R14 */",
+"} T_REGS;",
+"",
+"/*",
+" * Exception-related register		tk_get_reg tk_set_reg",
+" */",
+"typedef struct t_eit {",
+"	void	*pc;		/* Program counter R15 */",
+"	UW	xpsr;		/* Program status register */",
+"	UW	taskmode;	/* Task mode flag */",
+"} T_EIT;",
+"",
+"/*",
+" * Control register			tk_get_reg tk_set_reg",
+" */",
+"typedef struct t_cregs {",
+"	void	*ssp;		/* System stack pointer R13_svc */",
+"} T_CREGS;",
+"",
+"#endif /* __TK_CPUDEF_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/08.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dbgspt_depend.h",
+" *",
+" *	micro T-Kernel Debugger Support  Definition (ARMv6-M core depended)",
+" */",
+"",
+"#ifndef __TK_DBGSPT_DEPEND_CORE_H__",
+"#define __TK_DBGSPT_DEPEND_CORE_H__",
+"",
+"/*",
+" * System call/extension SVC caller information ",
+" */",
+"typedef struct td_calinf {",
+"	void	*ssp;		/* System stack pointer */",
+"	void	*r11;		/* Frame pointer when calling */",
+"} TD_CALINF;",
+"",
+"#endif /* __TK_DBGSPT_DEPEND_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/08.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  (ARMv6-M core depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_DEPEND_CORE_H__",
+"#define __TK_SYSLIB_DEPEND_CORE_H__",
+"",
+"#include <tk/errno.h>",
+"#include <sys/sysdef.h>",
+"",
+"/*----------------------------------------------------------------------*/",
+"/*",
+" * CPU interrupt control for ARMv6-M.",
+" */",
+"",
+"inline static void set_primask( UW pm )",
+"{",
+"	Asm(\"msr primask, %0\":: \"r\"(pm));",
+"}",
+"",
+"inline static UW get_primask(void)",
+"{",
+"	UW	pm;",
+"	Asm(\"mrs %0, primask\": \"=r\"(pm));",
+"	return pm;",
+"}",
+"",
+"IMPORT UW disint(void);			/* Disable interrupt */",
+"",
+"#define	DI(intsts)	(intsts=disint())",
+"#define	EI(intsts)	(set_primask(intsts))",
+"#define isDI(intsts)	( (intsts) == 1 )",
+"",
+"#define INTLEVEL_DI		(0)",
+"#define INTLEVEL_EI		(1)",
+"",
+"/*",
+" * Interrupt priority grouping",
+" */",
+"#define INTPRI_GROUP(pri, subpri)	(((pri) << (8-INTPRI_BITWIDTH)) | (subpri))",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Convert to interrupt definition number",
+" *",
+" * For backward compatibility.",
+" * 	INTVEC has been obsoleted since micro T-Kernel 2.0.",
+" */",
+"#define DINTNO(intvec)	(intvec)",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	cpudef.h",
+" *",
+" *	CPU dependent definition  (ARMv7-A core depended)",
+" */",
+"",
+"#ifndef __TK_CPUDEF_CORE_H__",
+"#define __TK_CPUDEF_CORE_H__",
+"",
+"#include <config.h>",
+"",
+"/*",
+" * Using FPU (depend on CPU)",
+" *   TA_COP0		FPU ( = TA_FPU)",
+" */",
+"",
+"#if USE_FPU",
+"#define	TA_COPS		TA_COP0",
+"#else",
+"#define	TA_COPS		0",
+"#endif",
+"",
+"#define TA_FPU		TA_COP0		/* dummy. An error occurs when checking API calls. */",
+"",
+"/*",
+" * General purpose register		tk_get_reg tk_set_reg",
+" */",
+"typedef struct t_regs {",
+"	VW	r[13];		/* General purpose register R0-R12 */",
+"	void	*lr;		/* Link register R14 */",
+"} T_REGS;",
+"",
+"/*",
+" * Exception-related register		tk_get_reg tk_set_reg",
+" */",
+"typedef struct t_eit {",
+"	void	*pc;		/* Program counter R15 */",
+"	UW	cpsr;		/* Program status register */",
+"	UW	taskmode;	/* Task mode flag */",
+"} T_EIT;",
+"",
+"/*",
+" * Control register			tk_get_reg tk_set_reg",
+" */",
+"typedef struct t_cregs {",
+"	void	*ssp;		/* System stack pointer R13_svc */",
+"} T_CREGS;",
+"",
+"#if NUM_COPROCESSOR > 0",
+"/*",
+" * Coprocessor registers",
+" */",
+"typedef struct t_copregs {",
+"	UD	d[32];		/* FPU General purpose register d0-d31 */",
+"	UW	fpscr;		/* Floating-point Status and Control Register */",
+"} T_COPREGS;",
+"#endif  /* NUM_COPROCESSOR  */",
+"",
+"#endif /* __TK_CPUDEF_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dbgspt_depend.h",
+" *",
+" *	micro T-Kernel Debugger Support  Definition (ARMv7-A core depended)",
+" */",
+"",
+"#ifndef __TK_DBGSPT_DEPEND_CORE_H__",
+"#define __TK_DBGSPT_DEPEND_CORE_H__",
+"",
+"/*",
+" * System call/extension SVC caller information ",
+" */",
+"typedef struct td_calinf {",
+"	void	*sp;		/* stack pointer when calling */",
+"	void	*pc;		/* program counter when calling */",
+"} TD_CALINF;",
+"",
+"#endif /* __TK_DBGSPT_DEPEND_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  (ARMv7-A core depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_DEPEND_CORE_H__",
+"#define __TK_SYSLIB_DEPEND_CORE_H__",
+"",
+"#include <tk/errno.h>",
+"#include <sys/sysdef.h>",
+"",
+"/*----------------------------------------------------------------------*/",
+"/*",
+" * CPU interrupt control for ARMv7-A.",
+" *	'intsts' is the value of CPSR.I.",
+" *	disint()  Disable interrupt (IRQ).",
+" *	enaint()  Enable interrupt (IRQ).",
+" */",
+"",
+"IMPORT UW disint( void );",
+"IMPORT void enaint( UW intsts );",
+"",
+"#define DI(intsts)	( (intsts) = (UINT)disint() )",
+"#define EI(intsts)	( enaint((UW)intsts) )",
+"#define isDI(intsts)	( (intsts) != 0 )",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	cpudef.h",
+" *",
+" *	CPU dependent definition  (ARMv7-M core depended)",
+" */",
+"",
+"#ifndef __TK_CPUDEF_CORE_H__",
+"#define __TK_CPUDEF_CORE_H__",
+"",
+"#include <config.h>",
+"",
+"/*",
+" * Using FPU (depend on CPU)",
+" *   TA_COP0		FPU ( = TA_FPU)",
+" */",
+"",
+"#if USE_FPU",
+"#define	TA_COPS		TA_COP0",
+"#else",
+"#define	TA_COPS		0",
+"#endif",
+"",
+"#define TA_FPU		TA_COP0		/* dummy. An error occurs when checking API calls. */",
+"",
+"/*",
+" * General purpose register		tk_get_reg tk_set_reg",
+" */",
+"typedef struct t_regs {",
+"	VW	r[13];		/* General purpose register R0-R12 */",
+"	void	*lr;		/* Link register R14 */",
+"} T_REGS;",
+"",
+"/*",
+" * Exception-related register		tk_get_reg tk_set_reg",
+" */",
+"typedef struct t_eit {",
+"	void	*pc;		/* Program counter R15 */",
+"	UW	xpsr;		/* Program status register */",
+"	UW	taskmode;	/* Task mode flag */",
+"} T_EIT;",
+"",
+"/*",
+" * Control register			tk_get_reg tk_set_reg",
+" */",
+"typedef struct t_cregs {",
+"	void	*ssp;		/* System stack pointer R13_svc */",
+"} T_CREGS;",
+"",
+"#if NUM_COPROCESSOR > 0",
+"/*",
+" * Co-processor register",
+" */",
+"typedef struct t_copregs {",
+"	VW	s[32];		/* FPU General purpose register S0-S31 */",
+"	UW	fpscr;		/* Floating-point Status and Control Register */",
+"} T_COPREGS;",
+"#endif  /* NUM_COPROCESSOR  */",
+"",
+"#endif /* __TK_CPUDEF_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dbgspt_depend.h",
+" *",
+" *	micro T-Kernel Debugger Support  Definition (ARMv7-M core depended)",
+" */",
+"",
+"#ifndef __TK_DBGSPT_DEPEND_CORE_H__",
+"#define __TK_DBGSPT_DEPEND_CORE_H__",
+"",
+"/*",
+" * System call/extension SVC caller information ",
+" */",
+"typedef struct td_calinf {",
+"	void	*ssp;		/* System stack pointer */",
+"	void	*r11;		/* Frame pointer when calling */",
+"} TD_CALINF;",
+"",
+"#endif /* __TK_DBGSPT_DEPEND_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  (ARMv7-M core depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_DEPEND_CORE_H__",
+"#define __TK_SYSLIB_DEPEND_CORE_H__",
+"",
+"#include <tk/errno.h>",
+"#include <sys/sysdef.h>",
+"",
+"/*----------------------------------------------------------------------*/",
+"/*",
+" * CPU interrupt control for ARMv7-M.",
+" *	As armv7-m architecture does not support disable interrupt in",
+" *	xpsr register, we have to raise the excution priority to ",
+" *	that the interrupt group have. Write the BASEPRI to implement ",
+" *	disint.",
+" */",
+"",
+"IMPORT void set_basepri(UW intsts);	/* Set Base Priority register */",
+"IMPORT UW get_basepri(void);		/* Get Base Priority register */",
+"IMPORT UW disint(void);			/* Disable interrupt */",
+"",
+"",
+"#define DI(intsts)		( (intsts) = disint() )",
+"#define EI(intsts)		( set_basepri(intsts) )",
+"#define isDI(intsts)		( (intsts) != 0 )",
+"",
+"#define INTLEVEL_DI		(0)",
+"#define INTLEVEL_EI		(255)",
+"",
+"/*",
+" * Interrupt priority grouping",
+" *",
+" *	PRIGROUP in the AIRCR register determins the split of group",
+" *	priority from subpriority. PRIGROUP is initialized to 3",
+" *	(pri:subpri = 4:4)) in the boot sequence.",
+" */",
+"#define INTPRI_GROUP(pri, subpri)	(((pri) << (8-INTPRI_BITWIDTH)) | (subpri))",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Convert to interrupt definition number",
+" *",
+" * For backward compatibility.",
+" * 	INTVEC has been obsoleted since micro T-Kernel 2.0.",
+" */",
+"#define DINTNO(intvec)	(intvec)",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpudef.h",
+" *",
+" *	CPU dependent definition  (RXv2 core depended)",
+" */",
+"",
+"#ifndef __TK_CPUDEF_CORE_H__",
+"#define __TK_CPUDEF_CORE_H__",
+"",
+"#include <config.h>",
+"",
+"/*",
+" * Using Coprocessor",
+" *   TA_COP0		FPU ( = TA_FPU)",
+" *   TA_COP1		DSP",
+" *   TA_COP2 & 3	unused",
+" */",
+"",
+"#if USE_FPU && USE_DSP",
+"#define	TA_COPS		(TA_COP0|TA_COP1)",
+"#elif USE_FPU",
+"#define	TA_COPS		TA_COP0",
+"#elif USE_DSP",
+"#define	TA_COPS		TA_COP1",
+"#else",
+"#define	TA_COPS		0",
+"#endif",
+"",
+"#define TA_FPU		TA_COP0",
+"",
+"/*",
+" * Coprocessor number (depend on CPU)",
+" */",
+"#define COPNO_0		0		/* FPU */",
+"#define COPNO_1		1		/* DSP */",
+"",
+"",
+"/*---------------------------------------------------------------------- */",
+"/*",
+" * General purpose register		tk_get_reg tk_set_reg",
+" */",
+"typedef struct t_regs {",
+"	VW	r[15];	/* General purpose register R1-R15 */",
+"} T_REGS;",
+"",
+"/*",
+" * Exception-related register		tk_get_reg tk_set_reg",
+" */",
+"typedef struct t_eit {",
+"	void	*pc;	/* Program counter */",
+"	VW	psw;	/* Status register */",
+"} T_EIT;",
+"",
+"/*",
+" * Control register			tk_get_reg tk_set_reg",
+" */",
+"typedef struct t_cregs {",
+"	void	*ssp;	/* System stack pointer R0 */",
+"} T_CREGS;",
+"",
+"/*",
+" * Coprocessor registers",
+" */",
+"",
+"typedef struct t_cop0reg {",
+"	VW	fpsw;		/* Floating Point Status register */",
+"} T_COP0REG;",
+"",
+"typedef struct t_cop1reg {",
+"	UW	acc0lo;",
+"	UW	acc0hi;",
+"	VW	acc0gu;		/* Accumulator 0 */",
+"	UW	acc1lo;",
+"	UW	acc1hi;",
+"	VW	acc1gu;		/* Accumulator 1 */",
+"} T_COP1REG;",
+"",
+"typedef struct t_copregs {",
+"	T_COP0REG	cop0;	/* COP0: FPU */",
+"	T_COP1REG	cop1;	/* COP1: DSP */",
+"} T_COPREGS;",
+"",
+"",
+"#endif /* __TK_CPUDEF_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dbgspt_depend.h",
+" *",
+" *	micro T-Kernel Debugger Support  Definition (RTv2 core depended)",
+" */",
+"",
+"#ifndef __TK_DBGSPT_DEPEND_CORE_H__",
+"#define __TK_DBGSPT_DEPEND_CORE_H__",
+"",
+"/*",
+" * System call/extension SVC caller information ",
+" */",
+"typedef struct td_calinf {",
+"	void	*ssp;		/* System stack pointer */",
+"} TD_CALINF;",
+"",
+"#endif /* __TK_DBGSPT_DEPEND_CORE_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  (RXv2 core depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_DEPEND_CORE_H__",
+"#define __TK_SYSLIB_DEPEND_CORE_H__",
+"",
+"#include <tk/errno.h>",
+"#include <sys/sysdef.h>",
+"",
+"/*----------------------------------------------------------------------*/",
+"/*",
+" * CPU interrupt control for RXv2",
+" *	'intsts' is the value of PSW register in CPU",
+" *	disint()  Set PSW.IPL value to 15. And return the original PSW.IPL value.",
+" *	setint()  Set PSW.IPL value to ipl.",
+" */",
+"IMPORT UW disint( void );",
+"IMPORT void setint( UW intsts );",
+"",
+"#define INTLEVEL_DI		(15)",
+"#define INTLEVEL_EI		(0)",
+"",
+"#define DI(intsts)		( (intsts) = disint() )",
+"#define EI(intsts)		( setint(intsts) )",
+"#define isDI(intsts)		( (intsts) == INTLEVEL_DI )",
+"",
+"/*",
+" * Convert to interrupt definition number",
+" *",
+" * For backward compatibility.",
+" * 	INTVEC has been obsoleted since micro T-Kernel 2.0.",
+" */",
+"#define DINTNO(intvec)	(intvec)",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_CORE_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/08.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  (RP2040 depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_CPU_DEPEND_H__",
+"#define __TK_SYSLIB_CPU_DEPEND_H__",
+"",
+"#include \"../core/armv6m/syslib.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt Control",
+" */",
+"",
+"/*",
+" * Interrupt number",
+" */",
+"#define MIN_NVIC_INTNO	0		/* Minimum value of NVIC interrupt number */",
+"#define MAX_NVIC_INTNO	(N_INTVEC-1)	/* Maximum value of NVIC interrupt number */",
+"",
+"/*",
+" * Interrupt mode ( Use SetIntMode )",
+" */",
+"#define IM_EDGE		0x0000		/* Edge trigger */",
+"#define IM_HI		0x0002		/* Interrupt at rising edge */",
+"#define IM_LOW		0x0001		/* Interrupt at falling edge */",
+"#define IM_BOTH		0x0003		/* Interrupt at both edge */",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * I/O port access",
+" *	for memory mapped I/O",
+" */",
+"Inline void out_w( UW port, UW data )",
+"{",
+"	*(_UW*)port = data;",
+"}",
+"Inline void out_h( UW port, UH data )",
+"{",
+"	*(_UH*)port = data;",
+"}",
+"Inline void out_b( UW port, UB data )",
+"{",
+"	*(_UB*)port = data;",
+"}",
+"",
+"Inline UW in_w( UW port )",
+"{",
+"	return *(_UW*)port;",
+"}",
+"Inline UH in_h( UW port )",
+"{",
+"	return *(_UH*)port;",
+"}",
+"Inline UB in_b( UW port )",
+"{",
+"	return *(_UB*)port;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * I / O register logical operation",
+" *	RP2040 specific function",
+" */",
+"#define OP_CLR	0x3000",
+"Inline void clr_w(UW adr, UW data)",
+"{",
+"	*(_UW*)(adr + OP_CLR) = data;",
+"}",
+"",
+"#define OP_SET	0x2000",
+"Inline void set_w(UW adr, UW data)",
+"{",
+"    *(_UW*)(adr + OP_SET) = data;",
+"}",
+"",
+"#define OP_XOR	0x1000",
+"Inline void xor_w(UW adr, UW data)",
+"{",
+"    *(_UW*)(adr + OP_XOR) = data;",
+"}",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  (RX231 depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_CPU_DEPEND_H__",
+"#define __TK_SYSLIB_CPU_DEPEND_H__",
+"",
+"#include \"../core/rxv2/syslib.h\"",
+"",
+"/*----------------------------------------------------------------------*/",
+"/*",
+" * Interrupt controller Control",
+" *",
+" */",
+"#define IM_LEVEL	0x0004		/* Level trigger */",
+"#define IM_EDGE		0x0000		/* Edge trigger */",
+"",
+"#define IM_HI		0x0000		/* H level/Interrupt at rising edge */",
+"#define IM_LOW		0x0001		/* L level/Interrupt at falling edge */",
+"#define IM_BOTH		0x0003		/* L level/Interrupt at both edge */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * I/O port access",
+" *	for memory mapped I/O",
+" */",
+"Inline void out_w( UW port, UW data )",
+"{",
+"	*(_UW*)port = data;",
+"}",
+"Inline void out_h( UW port, UH data )",
+"{",
+"	*(_UH*)port = data;",
+"}",
+"Inline void out_b( UW port, UB data )",
+"{",
+"	*(_UB*)port = data;",
+"}",
+"",
+"Inline UW in_w( UW port )",
+"{",
+"	return *(_UW*)port;",
+"}",
+"Inline UH in_h( UW port )",
+"{",
+"	return *(_UH*)port;",
+"}",
+"Inline UB in_b( UW port )",
+"{",
+"	return *(_UB*)port;",
+"}",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  (RX65N depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_CPU_DEPEND_H__",
+"#define __TK_SYSLIB_CPU_DEPEND_H__",
+"",
+"#include \"../core/rxv2/syslib.h\"",
+"",
+"/*----------------------------------------------------------------------*/",
+"/*",
+" * Interrupt controller Control",
+" *",
+" */",
+"#define IM_LEVEL	0x0004		/* Level trigger */",
+"#define IM_EDGE		0x0000		/* Edge trigger */",
+"",
+"#define IM_HI		0x0000		/* H level/Interrupt at rising edge */",
+"#define IM_LOW		0x0001		/* L level/Interrupt at falling edge */",
+"#define IM_BOTH		0x0003		/* L level/Interrupt at both edge */",
+"",
+"/* ",
+" * Software Configurable Interrupt (PERIA & PERIB) Control",
+" */",
+"#if USE_SFTCNF_INT",
+"",
+"IMPORT ER SetPERI(UINT intno, UINT fctno);	/* Set Software Configurable Interrupt */",
+"",
+"#endif /* USE_SFTCNF_INT */",
+"",
+"/* ",
+" * Group Interrupt Control (Internal API. Do not call from the user program!)",
+" */",
+"#if USE_GROUP_INT",
+"",
+"IMPORT void knl_enable_gint( UINT intno);",
+"IMPORT void knl_disable_gint( UINT intno);",
+"IMPORT void knl_clear_gint( UINT intno);",
+"IMPORT BOOL knl_check_gint( UINT intno);",
+"",
+"#endif /* USE_GROUP_INT */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * I/O port access",
+" *	for memory mapped I/O",
+" */",
+"Inline void out_w( UW port, UW data )",
+"{",
+"	*(_UW*)port = data;",
+"}",
+"Inline void out_h( UW port, UH data )",
+"{",
+"	*(_UH*)port = data;",
+"}",
+"Inline void out_b( UW port, UB data )",
+"{",
+"	*(_UB*)port = data;",
+"}",
+"",
+"Inline UW in_w( UW port )",
+"{",
+"	return *(_UW*)port;",
+"}",
+"Inline UH in_h( UW port )",
+"{",
+"	return *(_UH*)port;",
+"}",
+"Inline UB in_b( UW port )",
+"{",
+"	return *(_UB*)port;",
+"}",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  (RZ/A2M depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_CPU_DEPEND_H__",
+"#define __TK_SYSLIB_CPU_DEPEND_H__",
+"",
+"#include \"../core/armv7a/syslib.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt Control",
+" */",
+"",
+"/*",
+" * Interrupt number",
+" */",
+"",
+"/*",
+" * Interrupt mode ( Use SetIntMode )",
+" */",
+"#define	IM_LEVEL	0x00	/* high level detection */",
+"#define	IM_EDGE		0x01	/* Rising edge detection */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * I/O port access",
+" *	for memory mapped I/O",
+" */",
+"Inline void out_w( UW port, UW data )",
+"{",
+"	*(_UW*)port = data;",
+"}",
+"Inline void out_h( UW port, UH data )",
+"{",
+"	*(_UH*)port = data;",
+"}",
+"Inline void out_b( UW port, UB data )",
+"{",
+"	*(_UB*)port = data;",
+"}",
+"",
+"Inline UW in_w( UW port )",
+"{",
+"	return *(_UW*)port;",
+"}",
+"Inline UH in_h( UW port )",
+"{",
+"	return *(_UH*)port;",
+"}",
+"Inline UB in_b( UW port )",
+"{",
+"	return *(_UB*)port;",
+"}",
+"",
+"Inline void and_w( UW port, UW data)",
+"{",
+"	*(_UW*)port &= data;",
+"}",
+"Inline void and_h( UW port, UH data)",
+"{",
+"	*(_UH*)port &= data;",
+"}",
+"Inline void and_b( UW port, UB data)",
+"{",
+"	*(_UB*)port &= data;",
+"}",
+"",
+"Inline void or_w( UW port, UW data)",
+"{",
+"	*(_UW*)port |= data;",
+"}",
+"Inline void or_h( UW port, UH data)",
+"{",
+"	*(_UH*)port |= data;",
+"}",
+"Inline void or_b( UW port, UB data)",
+"{",
+"	*(_UB*)port |= data;",
+"}",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  (STM32H7 depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_CPU_DEPEND_H__",
+"#define __TK_SYSLIB_CPU_DEPEND_H__",
+"",
+"#include \"../core/armv7m/syslib.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt Control",
+" */",
+"",
+"/*",
+" * Interrupt number",
+" */",
+"#define MIN_NVIC_INTNO	0		/* Minimum value of NVIC interrupt number */",
+"#define MAX_NVIC_INTNO	(N_INTVEC-1)	/* Maximum value of NVIC interrupt number */",
+"#define MIN_EXTI_INTNO	200		/* Minimum value of EXTI interrupt number */",
+"#define MAX_EXTI_INTNO	(N_EXTIEVT+199)	/* Maximum value of EXTI interrupt number */",
+"",
+"/*",
+" * Interrupt mode ( Use SetIntMode )",
+" */",
+"#define IM_EDGE		0x0000		/* Edge trigger */",
+"#define IM_HI		0x0002		/* Interrupt at rising edge */",
+"#define IM_LOW		0x0001		/* Interrupt at falling edge */",
+"#define IM_BOTH		0x0003		/* Interrupt at both edge */",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * I/O port access",
+" *	for memory mapped I/O",
+" */",
+"Inline void out_w( UW port, UW data )",
+"{",
+"	*(_UW*)port = data;",
+"}",
+"Inline void out_h( UW port, UH data )",
+"{",
+"	*(_UH*)port = data;",
+"}",
+"Inline void out_b( UW port, UB data )",
+"{",
+"	*(_UB*)port = data;",
+"}",
+"",
+"Inline UW in_w( UW port )",
+"{",
+"	return *(_UW*)port;",
+"}",
+"Inline UH in_h( UW port )",
+"{",
+"	return *(_UH*)port;",
+"}",
+"Inline UB in_b( UW port )",
+"{",
+"	return *(_UB*)port;",
+"}",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  (STM32L4 depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_CPU_DEPEND_H__",
+"#define __TK_SYSLIB_CPU_DEPEND_H__",
+"",
+"#include \"../core/armv7m/syslib.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt Control",
+" */",
+"",
+"/*",
+" * Interrupt number",
+" */",
+"#define MIN_NVIC_INTNO	0		/* Minimum value of NVIC interrupt number */",
+"#define MAX_NVIC_INTNO	(N_INTVEC-1)	/* Maximum value of NVIC interrupt number */",
+"#define MIN_EXTI_INTNO	200		/* Minimum value of EXTI interrupt number */",
+"#define MAX_EXTI_INTNO	239		/* Maximum value of EXTO interrupt number */",
+"",
+"/*",
+" * Interrupt mode ( Use SetIntMode )",
+" */",
+"#define IM_EDGE		0x0000		/* Edge trigger */",
+"#define IM_HI		0x0002		/* Interrupt at rising edge */",
+"#define IM_LOW		0x0001		/* Interrupt at falling edge */",
+"#define IM_BOTH		0x0003		/* Interrupt at both edge */",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * I/O port access",
+" *	for memory mapped I/O",
+" */",
+"Inline void out_w( UW port, UW data )",
+"{",
+"	*(_UW*)port = data;",
+"}",
+"Inline void out_h( UW port, UH data )",
+"{",
+"	*(_UH*)port = data;",
+"}",
+"Inline void out_b( UW port, UB data )",
+"{",
+"	*(_UB*)port = data;",
+"}",
+"",
+"Inline UW in_w( UW port )",
+"{",
+"	return *(_UW*)port;",
+"}",
+"Inline UH in_h( UW port )",
+"{",
+"	return *(_UH*)port;",
+"}",
+"Inline UB in_b( UW port )",
+"{",
+"	return *(_UB*)port;",
+"}",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  (TX03M367 depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_CPU_DEPEND_H__",
+"#define __TK_SYSLIB_CPU_DEPEND_H__",
+"",
+"#include \"../core/armv7m/syslib.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt number",
+" */",
+"#define	M367_INT0		0",
+"#define	M367_INT1		1",
+"#define	M367_INT2		2",
+"#define	M367_INT3		3",
+"#define	M367_INT4		4",
+"#define	M367_INT5		5",
+"#define	M367_INT6		6",
+"#define	M367_INT7		7",
+"#define	M367_INT8		8",
+"#define	M367_INT9		9",
+"#define	M367_INTA		10",
+"#define	M367_INTB		11",
+"#define	M367_INTC		12",
+"#define M367_INTD		13",
+"#define	M367_INTUSBWKUP		34",
+"#define M367_INTRMCRX		74",
+"#define	M367_INTRTC		99",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt mode ( SetIntMode )",
+" */",
+"#define IM_LEVEL	0x0002		/* Level trigger */",
+"#define IM_EDGE		0x0000		/* Edge trigger */",
+"#define IM_HI		0x0000		/* H level/Interrupt at rising edge */",
+"#define IM_LOW		0x0001		/* L level/Interrupt at falling edge */",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * I/O port access",
+" *	for memory mapped I/O",
+" */",
+"Inline void out_w( UW port, UW data )",
+"{",
+"	*(_UW*)port = data;",
+"}",
+"Inline void out_h( UW port, UH data )",
+"{",
+"	*(_UH*)port = data;",
+"}",
+"Inline void out_b( UW port, UB data )",
+"{",
+"	*(_UB*)port = data;",
+"}",
+"",
+"Inline UW in_w( UW port )",
+"{",
+"	return *(_UW*)port;",
+"}",
+"Inline UH in_h( UW port )",
+"{",
+"	return *(_UH*)port;",
+"}",
+"Inline UB in_b( UW port )",
+"{",
+"	return *(_UB*)port;",
+"}",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpudef.h",
+" *",
+" *	CPU dependent definition (M367 IoT-Engine depended)",
+" *	include in syscall.h",
+" */",
+"",
+"#ifndef __TK_CPUDEF_H__",
+"#define __TK_CPUDEF_H__",
+"",
+"#include \"../cpu/core/armv7m/cpudef.h\"",
+"",
+"#endif /* __TK_CPUDEF_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dbgspt.h",
+" *",
+" *	micro T-Kernel Debugger Support Definition (M367 IoT-Engine depended)",
+" */",
+"",
+"#ifndef __TK_DBGSPT_DEPEND_H__",
+"#define __TK_DBGSPT_DEPEND_H__",
+"",
+"#include \"../cpu/core/armv7m/dbgspt.h\"",
+"",
+"#endif /* __TK_DBGSPT_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  (M367 IoT-Engine depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_DEPEND_H__",
+"#define __TK_SYSLIB_DEPEND_H__",
+"",
+"#include \"../cpu/tx03_m367/syslib.h\"",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpudef.h",
+" *",
+" *	CPU dependent definition (RX231 IoT-Engine depended)",
+" *	include in syscall.h",
+" */",
+"",
+"#ifndef __TK_CPUDEF_H__",
+"#define __TK_CPUDEF_H__",
+"",
+"#include \"../cpu/core/rxv2/cpudef.h\"",
+"",
+"#endif /* __TK_CPUDEF_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dbgspt.h",
+" *",
+" *	micro T-Kernel Debugger Support Definition (RX231 IoT-Engine depended)",
+" */",
+"",
+"#ifndef __TK_DBGSPT_DEPEND_H__",
+"#define __TK_DBGSPT_DEPEND_H__",
+"",
+"#include \"../cpu/core/rxv2/dbgspt.h\"",
+"",
+"#endif /* __TK_DBGSPT_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  (RX231 IoT-Engine depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_DEPEND_H__",
+"#define __TK_SYSLIB_DEPEND_H__",
+"",
+"#include \"../cpu/rx231/syslib.h\"",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpudef.h",
+" *",
+" *	CPU dependent definition (RZ/A2M IoT-Engine depended)",
+" *	include in syscall.h",
+" */",
+"",
+"#ifndef __TK_CPUDEF_H__",
+"#define __TK_CPUDEF_H__",
+"",
+"#include \"../cpu/core/armv7a/cpudef.h\"",
+"",
+"#endif /* __TK_CPUDEF_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dbgspt.h",
+" *",
+" *	micro T-Kernel Debugger Support Definition (RZ/A2M IoT-Engine depended)",
+" */",
+"",
+"#ifndef __TK_DBGSPT_DEPEND_H__",
+"#define __TK_DBGSPT_DEPEND_H__",
+"",
+"#include \"../cpu/core/armv7a/dbgspt.h\"",
+"",
+"#endif /* __TK_DBGSPT_DEPEND_H__ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  (RZ/A2M IoT-Engine depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_DEPEND_H__",
+"#define __TK_SYSLIB_DEPEND_H__",
+"",
+"#include \"../cpu/rza2m/syslib.h\"",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpudef.h",
+" *",
+" *	CPU dependent definition (STM32L4 IoT-Engine depended)",
+" *	include in syscall.h",
+" */",
+"",
+"#ifndef __TK_CPUDEF_H__",
+"#define __TK_CPUDEF_H__",
+"",
+"#include \"../cpu/core/armv7m/cpudef.h\"",
+"",
+"#endif /* __TK_CPUDEF_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dbgspt.h",
+" *",
+" *	micro T-Kernel Debugger Support Definition (STM32L4 IoT-Engine depended)",
+" */",
+"",
+"#ifndef __TK_DBGSPT_DEPEND_H__",
+"#define __TK_DBGSPT_DEPEND_H__",
+"",
+"#include \"../cpu/core/armv7m/dbgspt.h\"",
+"",
+"#endif /* __TK_DBGSPT_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  (STM32L4 IoT-Engine depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_DEPEND_H__",
+"#define __TK_SYSLIB_DEPEND_H__",
+"",
+"#include \"../cpu/stm32l4/syslib.h\"",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpudef.h",
+" *",
+" *	CPU dependent definition ( Nucleo-144 STM32H723 depended)",
+" *	include in syscall.h",
+" */",
+"",
+"#ifndef __TK_CPUDEF_H__",
+"#define __TK_CPUDEF_H__",
+"",
+"#include <tk/sysdepend/cpu/core/armv7m/cpudef.h>",
+"",
+"#endif /* __TK_CPUDEF_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dbgspt.h",
+" *",
+" *	micro T-Kernel Debugger Support Definition ( Nucleo-144 STM32H723 depended)",
+" */",
+"",
+"#ifndef __TK_DBGSPT_DEPEND_H__",
+"#define __TK_DBGSPT_DEPEND_H__",
+"",
+"#include <tk/sysdepend/cpu/core/armv7m/dbgspt.h>",
+"",
+"#endif /* __TK_DBGSPT_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  ( Nucleo-144 STM32H723 depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_DEPEND_H__",
+"#define __TK_SYSLIB_DEPEND_H__",
+"",
+"#include <tk/sysdepend/cpu/stm32h7/syslib.h>",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpudef.h",
+" *",
+" *	CPU dependent definition ( Nucleo-64 STM32L476 depended)",
+" *	include in syscall.h",
+" */",
+"",
+"#ifndef __TK_CPUDEF_H__",
+"#define __TK_CPUDEF_H__",
+"",
+"#include <tk/sysdepend/cpu/core/armv7m/cpudef.h>",
+"",
+"#endif /* __TK_CPUDEF_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dbgspt.h",
+" *",
+" *	micro T-Kernel Debugger Support Definition ( Nucleo-64 STM32L476 depended)",
+" */",
+"",
+"#ifndef __TK_DBGSPT_DEPEND_H__",
+"#define __TK_DBGSPT_DEPEND_H__",
+"",
+"#include <tk/sysdepend/cpu/core/armv7m/dbgspt.h>",
+"",
+"#endif /* __TK_DBGSPT_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  ( Nucleo-64 STM32L476 depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_DEPEND_H__",
+"#define __TK_SYSLIB_DEPEND_H__",
+"",
+"#include <tk/sysdepend/cpu/stm32l4/syslib.h>",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/08.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpudef.h",
+" *",
+" *	CPU dependent definition ( RaspberryPi Pico depended)",
+" *	include in syscall.h",
+" */",
+"",
+"#ifndef __TK_CPUDEF_H__",
+"#define __TK_CPUDEF_H__",
+"",
+"#include <tk/sysdepend/cpu/core/armv6m/cpudef.h>",
+"",
+"#endif /* __TK_CPUDEF_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/08.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dbgspt.h",
+" *",
+" *	micro T-Kernel Debugger Support Definition ( RaspberryPi Pico depended)",
+" */",
+"",
+"#ifndef __TK_DBGSPT_DEPEND_H__",
+"#define __TK_DBGSPT_DEPEND_H__",
+"",
+"#include <tk/sysdepend/cpu/core/armv6m/dbgspt.h>",
+"",
+"#endif /* __TK_DBGSPT_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/08.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library  ( RaspberryPi Pico depended)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_DEPEND_H__",
+"#define __TK_SYSLIB_DEPEND_H__",
+"",
+"#include <tk/sysdepend/cpu/rp2040/syslib.h>",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpudef.h",
+" *",
+" *	CPU dependent definition (Renesas Starter Kit+ for RX65N)",
+" *	include in syscall.h",
+" */",
+"",
+"#ifndef __TK_CPUDEF_H__",
+"#define __TK_CPUDEF_H__",
+"",
+"#include \"../cpu/core/rxv2/cpudef.h\"",
+"",
+"#endif /* __TK_CPUDEF_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dbgspt.h",
+" *",
+" *	micro T-Kernel Debugger Support Definition (Renesas Starter Kit+ for RX65N)",
+" */",
+"",
+"#ifndef __TK_DBGSPT_DEPEND_H__",
+"#define __TK_DBGSPT_DEPEND_H__",
+"",
+"#include \"../cpu/core/rxv2/dbgspt.h\"",
+"",
+"#endif /* __TK_DBGSPT_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library (Renesas Starter Kit+ for RX65N)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_DEPEND_H__",
+"#define __TK_SYSLIB_DEPEND_H__",
+"",
+"#include \"../cpu/rx65n/syslib.h\"",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpudef.h",
+" *",
+" *	CPU dependent definition (Renesas Target Board for RX65N)",
+" *	include in syscall.h",
+" */",
+"",
+"#ifndef __TK_CPUDEF_H__",
+"#define __TK_CPUDEF_H__",
+"",
+"#include \"../cpu/core/rxv2/cpudef.h\"",
+"",
+"#endif /* __TK_CPUDEF_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	dbgspt.h",
+" *",
+" *	micro T-Kernel Debugger Support Definition (Renesas Target Board for RX65N)",
+" */",
+"",
+"#ifndef __TK_DBGSPT_DEPEND_H__",
+"#define __TK_DBGSPT_DEPEND_H__",
+"",
+"#include \"../cpu/core/rxv2/dbgspt.h\"",
+"",
+"#endif /* __TK_DBGSPT_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library (Renesas Target Board for RX65N)",
+" */",
+"",
+"#ifndef __TK_SYSLIB_DEPEND_H__",
+"#define __TK_SYSLIB_DEPEND_H__",
+"",
+"#include \"../cpu/rx65n/syslib.h\"",
+"",
+"#endif /* __TK_SYSLIB_DEPEND_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"",
+"/*",
+" *	syslib.h",
+" *",
+" *	micro T-Kernel System Library",
+" */",
+"",
+"",
+"#ifndef __TK_SYSLIB_H__",
+"#define __TK_SYSLIB_H__",
+"",
+"#include \"typedef.h\"",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System dependencies  (CPU Intrrupt contrl , I/O port access)",
+" */",
+"#define SYSLIB_PATH_(a)		#a",
+"#define SYSLIB_PATH(a)		SYSLIB_PATH_(a)",
+"#define SYSLIB_SYSDEP()		SYSLIB_PATH(sysdepend/TARGET_DIR/syslib.h)",
+"#include SYSLIB_SYSDEP()",
+"",
+"",
+"/*----------------------------------------------------------------------*/",
+"/*",
+" * Interrupt controller Control",
+" *",
+" */",
+"#if TK_SUPPORT_INTCTRL",
+"#if TK_HAS_ENAINTLEVEL",
+"IMPORT void EnableInt( UINT intno, INT level );	/* Enable the interrupt specified by 'intno.' */",
+"#else",
+"IMPORT void EnableInt( UINT intno );		/* Enable the interrupt specified by 'intno.' */",
+"#endif /* TK_HAS_ENAINTLEVEL */",
+"",
+"IMPORT void DisableInt( UINT intno );	/* Disable the interrupt specified by 'intno.' */",
+"IMPORT void ClearInt(UINT intno);	/* Clear the state that the specified interrupt has been asserted. */",
+"IMPORT void EndOfInt(UINT intno);	/* Issue EOI to Interrupt Controller. */",
+"IMPORT BOOL CheckInt( UINT intno );	/* Check active state for the associated interrupt */",
+"",
+"#endif /* TK_SUPPORT_INTCTRL */",
+"",
+"#if TK_SUPPORT_INTMODE",
+"IMPORT void SetIntMode(UINT intno, UINT mode);	/* Set interrupt mode */",
+"#endif /* TK_SUPPORT_INTMODE */",
+"",
+"#if TK_SUPPORT_CPUINTLEVEL",
+"IMPORT void SetCpuIntLevel( INT level );",
+"IMPORT INT GetCpuIntLevel( void );",
+"#endif /* TK_SUPPORT_CPUINTLEVEL */",
+"",
+"#if TK_SUPPORT_CTRLINTLEVEL",
+"IMPORT void SetCtrlIntLevel(INT level);	/* Set interrupt mask level in interrupt controller */",
+"IMPORT INT  GetCtrlIntLevel(void);	/* Get interrupt mask level in interrupt controller */",
+"#endif /* TK_SUPPORT_CTRLINTLEVEL */",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Micro Wait",
+" */",
+"",
+"IMPORT void WaitUsec( UW usec );	/* micro second wait */",
+"IMPORT void WaitNsec( UW nsec );	/* nano second wait */",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Fast Lock",
+" */",
+"typedef struct {",
+"	INT		cnt;",
+"	ID		id;",
+"	CONST UB	*name;",
+"} FastLock;",
+"",
+"IMPORT ER CreateLock( FastLock *lock, CONST UB *name );",
+"IMPORT void DeleteLock( FastLock *lock );",
+"IMPORT void Lock( FastLock *lock );",
+"IMPORT void Unlock( FastLock *lock );",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Multi Lock",
+" *	Can use the maximum of 16 or 32 independent locks with a single FastMLock.",
+" *	Divided by the lock number (no). Can specify 0-15 or 0-31 for 'no.'",
+" *	(Slightly less efficient than FastLock)",
+" */",
+"typedef struct {",
+"	UINT		flg;",
+"	INT		wai;",
+"	ID		id;",
+"	CONST UB	*name;",
+"} FastMLock;",
+"",
+"IMPORT ER CreateMLock( FastMLock *lock, CONST UB *name );",
+"IMPORT ER DeleteMLock( FastMLock *lock );",
+"IMPORT ER MLockTmo( FastMLock *lock, INT no, TMO tmout );",
+"IMPORT ER MLock( FastMLock *lock, INT no );",
+"IMPORT ER MUnlock( FastMLock *lock, INT no );",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Memory allocation",
+" */",
+"#if TK_SUPPORT_MEMLIB",
+"",
+"#ifndef PROHIBIT_DEF_SIZE_T",
+"typedef SZ		size_t;",
+"#endif",
+"",
+"IMPORT void *Kmalloc( size_t size );",
+"IMPORT void *Kcalloc( size_t nmemb, size_t size );",
+"IMPORT void *Krealloc( void *ptr, size_t size);",
+"IMPORT void Kfree( void *ptr );",
+"",
+"#endif /* TK_SUPPORT_MEMLIB */",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Physical timer",
+" */",
+"#if TK_SUPPORT_PTIMER",
+"",
+"#define TA_ALM_PTMR	0",
+"#define TA_CYC_PTMR	1",
+"",
+"typedef struct {",
+"	void	*exinf;		/* Extended Information */",
+"	ATR	ptmratr;	/* Physical Timer Attribute */",
+"	FP	ptmrhdr;	/* Physical Timer Handler Address */",
+"} T_DPTMR;",
+"",
+"typedef struct {",
+"	UW	ptmrclk;	/* Physical Timer Clock Frequency */",
+"	UW	maxcount;	/* Maximum Count */",
+"	BOOL	defhdr;		/* Handler Support */",
+"} T_RPTMR;",
+"",
+"IMPORT ER StartPhysicalTimer( UINT ptmrno, UW limit, UINT mode);",
+"IMPORT ER StopPhysicalTimer( UINT ptmrno );",
+"IMPORT ER GetPhysicalTimerCount( UINT ptmrno, UW *p_count );",
+"IMPORT ER DefinePhysicalTimerHandler( UINT ptmrno, CONST T_DPTMR *pk_dptmr );",
+"IMPORT ER GetPhysicalTimerConfig(UINT ptmrno, T_RPTMR *pk_rptmr);",
+"",
+"#endif /* TK_SUPPORT_PTIMER */",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * 4-character object name",
+" *	(Example)",
+" *	T_CTSK	ctsk;",
+" *	SetOBJNAME(ctsk.exinf, \"TEST\");",
+" */",
+"union objname {",
+"	char	s[4];",
+"	void	*i;",
+"};",
+"",
+"#define SetOBJNAME(exinf, name)					\\",
+"	{							\\",
+"		UB *d, *s; INT i;				\\",
+"		d = (UB*)&(exinf);				\\",
+"		s = (UB*)name;					\\",
+"		for(i=0; i<4; i++) *d++ = *s++;			\\",
+"	}",
+"",
+"#endif /* __TK_SYSLIB_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	tkernel.h",
+" *",
+" *	T-Kernel Definition",
+" */",
+"",
+"#ifndef __TK_TKERNEL_H__",
+"#define __TK_TKERNEL_H__",
+"",
+"#include <sys/machine.h>",
+"",
+"#ifdef __cplusplus",
+"extern \"C\" {",
+"#endif",
+"",
+"#include \"typedef.h\"",
+"#include \"errno.h\"",
+"",
+"#include <sys/sysdef.h>",
+"#include <sys/profile.h>",
+"",
+"#include \"syscall.h\"",
+"#include \"syslib.h\"",
+"",
+"#ifndef offsetof",
+"#define offsetof(type, member) ((SZ)(&((type *)0)->member))",
+"#endif",
+"",
+"#ifdef __cplusplus",
+"}",
+"#endif",
+"",
+"#endif /* __TK_TKERNEL_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	typedef.h",
+" *",
+" *	T-Kernel Standard Data Type Definition",
+" */",
+"",
+"#ifndef	__TK_TYPEDEF_H__",
+"#define __TK_TYPEDEF_H__",
+"",
+"#include <sys/machine.h>",
+"",
+"#ifdef CHK_TKERNEL_CONST",
+"#define CONST	const",
+"#else",
+"#define CONST",
+"#endif",
+"",
+"/*",
+" * General-purpose data type  ",
+" */",
+"typedef signed char		B;		/* Signed 8 bit integer */",
+"typedef signed short		H;		/* Signed 16 bit integer */",
+"typedef signed long		W;		/* Signed 32 bit integer */",
+"typedef signed long long	D;		/* Signed 64 bit integer */",
+"typedef unsigned char		UB;		/* Unsigned 8 bit integer */",
+"typedef unsigned short  	UH;		/* Unsigned 16 bit integer */",
+"typedef unsigned long		UW;		/* Unsigned 32 bit integer */",
+"typedef unsigned long long	UD;		/* Unsigned 64 bit integer */",
+"",
+"typedef signed char		VB;		/* Nonuniform type 8 bit data */",
+"typedef signed short		VH;		/* Nonuniform type 16 bit data */",
+"typedef signed long		VW;		/* Nonuniform type 32 bit data */",
+"typedef signed long long	VD;		/* Nonuniform type 64 bit data */",
+"",
+"typedef volatile B		_B;		/* Volatile statement attached */",
+"typedef volatile H		_H;",
+"typedef volatile W		_W;",
+"typedef volatile D		_D;",
+"typedef volatile UB		_UB;",
+"typedef volatile UH		_UH;",
+"typedef volatile UW		_UW;",
+"typedef volatile UD		_UD;",
+"",
+"typedef signed int		INT;		/* Processor bit width signed integer */",
+"typedef unsigned int		UINT;		/* Processor bit width unsigned integer */",
+"",
+"typedef W			SZ;		/* Size general */",
+"",
+"typedef INT			ID;		/* ID general */",
+"typedef	W			MSEC;		/* Time general (millisecond) */",
+"",
+"typedef void			(*FP)();	/* Function address general */",
+"typedef INT			(*FUNCP)();	/* Function address general */",
+"",
+"#define LOCAL			static		/* Local symbol definition */",
+"#define EXPORT					/* Global symbol definition */",
+"#define IMPORT			extern		/* Global symbol reference */",
+"",
+"/*",
+" * Boolean value ",
+" *	Defined as TRUE = 1, but it is always true when not 0.",
+" *	Thus, comparison such as bool = TRUE are not permitted.",
+" *	Should be as per bool !=FALSE.",
+" */",
+"typedef UINT			BOOL;",
+"#define TRUE			1		/* True */",
+"#define FALSE			0		/* False */",
+"",
+"/*",
+" * Data type in which meaning is defined in T-Kernel/OS specification ",
+" */",
+"typedef INT			FN;		/* Function code */",
+"typedef INT			RNO;		/* Rendezvous number */",
+"typedef UW			ATR;		/* Object/handler attribute */",
+"typedef INT			ER;		/* Error code */",
+"typedef INT			PRI;		/* Priority */",
+"typedef W			TMO;		/* Time out setting */",
+"typedef UW			RELTIM;		/* Relative time */",
+"",
+"typedef struct systim {				/* System time */",
+"	W			hi;		/* Upper 32 bits */",
+"	UW			lo;		/* Lower 32 bits */",
+"} SYSTIM;",
+"",
+"typedef D			SYSTIM_U;	/* System time (64bit) */",
+"",
+"/*",
+" * Common constant",
+" */",
+"#ifndef NULL",
+"#define NULL		0",
+"#endif",
+"",
+"#define TA_NULL		0U		/* No special attributes indicated */",
+"#define TMO_POL		0		/* Polling */",
+"#define TMO_FEVR	(-1)		/* Permanent wait */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"#endif /* __TK_TYPEDEF_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	tmonitor.h",
+" *",
+" *	T-Monitor compatible calls",
+" */",
+"",
+"#ifndef __TM_TMONITOR_H__",
+"#define __TM_TMONITOR_H__",
+"",
+"#include <sys/machine.h>",
+"#include <tk/typedef.h>",
+"",
+"",
+"IMPORT void libtm_init(void);",
+"",
+"/*",
+" * Monitor service function",
+" */",
+"IMPORT INT  tm_getchar( INT wait );",
+"IMPORT INT  tm_putchar( INT c );",
+"IMPORT INT  tm_getline( UB *buff );",
+"IMPORT INT  tm_putstring( const UB *buff );",
+"IMPORT INT  tm_printf( const UB *format, ... );",
+"IMPORT INT  tm_sprintf( UB *str, const UB *format, ... );",
+"",
+"#endif /* __TM_TMONITOR_H__ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.02",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/10/21.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	inittask.c",
+" *	Initial task definition",
+" */",
+"#include <tk/tkernel.h>",
+"#include <tm/tmonitor.h>",
+"#include <sys/inittask.h>",
+"",
+"#include \"kernel.h\"",
+"",
+"#if !USE_IMALLOC",
+"INT	init_task_stack[INITTASK_STKSZ/sizeof(INT)];",
+"#endif",
+"",
+"typedef INT	(*MAIN_FP)(INT, UB **);",
+"",
+"/*",
+" * Initial task creation parameter",
+" */",
+"",
+"LOCAL void init_task_main(void);",
+"",
+"EXPORT const T_CTSK knl_init_ctsk = {",
+"	(void *)INITTASK_EXINF,		/* exinf */",
+"	INITTASK_TSKATR,		/* tskatr */",
+"	(FP)&init_task_main,		/* task */",
+"	INITTASK_ITSKPRI,		/* itskpri */",
+"	INITTASK_STKSZ,			/* stksz */",
+"#if USE_OBJECT_NAME",
+"	INITTASK_DSNAME,		/* dsname */",
+"#endif",
+"	INITTASK_STACK,			/* bufptr */",
+"};",
+"",
+"/* --------------------------------------------------------------- */",
+"/*",
+" * Start System",
+" *	Start each subsystem and each device driver.",
+" *	Return from function after starting.",
+" */",
+"LOCAL ER start_system( void )",
+"{",
+"	ER	ercd;",
+"",
+"#if USE_DEVICE",
+"	/* Initialize Device manager */",
+"	ercd = knl_initialize_devmgr();",
+"	if ( ercd < E_OK ) return ercd;",
+"#endif",
+"",
+"	/* Start system dependent sequence */",
+"	ercd = knl_start_device();",
+"",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Stop System",
+" *	Never return from this function.",
+" *",
+" *	fin  =	 0 : Power off",
+" *		-1 : reset and re-start	(Reset -> Boot -> Start)",
+" *		-2 : fast re-start		(Start)",
+" *		-3 : Normal re-start		(Boot -> Start)",
+" *",
+" *	fin are not always supported.",
+" */",
+"LOCAL void shutdown_system( INT fin )",
+"{",
+"#if USE_SHUTDOWN",
+"	/* Platform dependent finalize sequence */",
+"	knl_finish_device();",
+"",
+"	/* Shutdown message output */",
+"	if ( fin >= 0 ) {",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM SHUTDOWN >>\\n\");",
+"	}",
+"",
+"	if ( fin < 0 ) {",
+"		/* Re-start sequence (platform dependent) */",
+"		knl_restart_hw(fin);",
+"	}",
+"",
+"	knl_tkernel_exit();		/* Stop system */",
+"#else",
+"	DISABLE_INTERRUPT;",
+"	for(;;) {",
+"		;",
+"	}",
+"#endif /* USE_SHUTDOWN */",
+"}",
+"",
+"",
+"/*",
+" * Initial task main",
+" */",
+"LOCAL void init_task_main(void)",
+"{",
+"	INT	fin = 1;",
+"	ER	ercd;",
+"",
+"	ercd = start_system();		/* Start Sub-system & device driver */",
+"	if(ercd  >= E_OK) {",
+"",
+"#if (USE_SYSTEM_MESSAGE && USE_TMONITOR)",
+"		tm_printf((UB*)\"\\n\\nmicroT-Kernel Version %x.%02x\\n\\n\", VER_MAJOR, VER_MINOR);",
+"#endif",
+"",
+"#if USE_USERINIT",
+"		/* Perform user defined initialization sequence */",
+"		fin = (*(MAIN_FP)RI_USERINIT)(0, NULL);",
+"#endif",
+"		if ( fin > 0 ) {",
+"			fin = usermain();	/* User Main Program */",
+"		}",
+"#if USE_USERINIT",
+"		/* Perform user defined finalization sequence */",
+"		(*(MAIN_FP)RI_USERINIT)(-1, NULL);",
+"#endif",
+"",
+"	} else {",
+"		SYSTEM_MESSAGE(\"!ERROR! Init Task start\\n\");	/* Start message */",
+"	}",
+"",
+"	shutdown_system(fin);	/* Never return */",
+"}",
+"",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	kernel.h",
+" *	micro T-Kernel Common Definition",
+" */",
+"",
+"#ifndef _KERNEL_",
+"#define _KERNEL_",
+"",
+"#include <sys/machine.h>",
+"#include <sys/queue.h>",
+"",
+"#include <tk/typedef.h>",
+"#include <tk/errno.h>",
+"#include <tk/syscall.h>",
+"#include <tk/dbgspt.h>",
+"",
+"#include \"tstdlib.h\"",
+"",
+"typedef struct task_control_block	TCB;",
+"",
+"#include \"../tkernel/timer.h\"",
+"#include \"../tkernel/winfo.h\"",
+"#include \"../tkernel/mutex.h\"",
+"",
+"#include \"../sysdepend/sys_msg.h\"",
+"#include \"../sysdepend/cpu_status.h\"",
+"",
+"#define SYSCALL		EXPORT		/* Definition of system call */",
+"",
+"/* User defined handler ( Sub-system calls, time-event handler ) */",
+"# define CallUserHandlerP1(   p1,         hdr, cb)	(*(hdr))(p1)",
+"# define CallUserHandlerP2(   p1, p2,     hdr, cb)	(*(hdr))(p1, p2)",
+"# define CallUserHandlerP3(   p1, p2, p3, hdr, cb)	(*(hdr))(p1, p2, p3)",
+"",
+"/*",
+" * Task control block (TCB)",
+" */",
+"struct task_control_block {",
+"	QUEUE	tskque;		/* Task queue */",
+"	ID	tskid;		/* Task ID */",
+"	void	*exinf;		/* Extended information */",
+"	ATR	tskatr;		/* Task attribute */",
+"	FP	task;		/* Task startup address */",
+"	CTXB	tskctxb;	/* Task context block */",
+"	W	sstksz;		/* stack size */",
+"",
+"	B	isysmode;	/* Task operation mode initial value */",
+"	H	sysmode;	/* Task operation mode, quasi task part call level */",
+"",
+"	UB	ipriority;	/* Priority at task startup */",
+"	UB	bpriority;	/* Base priority */",
+"	UB	priority;	/* Current priority */",
+"",
+"	UB /*TSTAT*/	state;	/* Task state (Int. expression) */",
+"",
+"	BOOL	klockwait:1;	/* TRUE at wait kernel lock */",
+"	BOOL	klocked:1;	/* TRUE at hold kernel lock */",
+"",
+"	CONST WSPEC *wspec;	/* Wait specification */",
+"	ID	wid;		/* Wait object ID */",
+"	INT	wupcnt;		/* Number of wakeup requests queuing */",
+"	INT	suscnt;		/* Number of SUSPEND request nests */",
+"	ER	*wercd;		/* Wait error code set area */",
+"	WINFO	winfo;		/* Wait information */",
+"	TMEB	wtmeb;		/* Wait timer event block */",
+"",
+"	void	*isstack;	/* stack pointer initial value */",
+"",
+"#if USE_LEGACY_API && USE_RENDEZVOUS",
+"	RNO	wrdvno;		/* For creating rendezvous number */",
+"#endif",
+"#if USE_MUTEX == 1",
+"	MTXCB	*mtxlist;	/* List of hold mutexes */",
+"#endif",
+"",
+"#if USE_DBGSPT && defined(USE_FUNC_TD_INF_TSK)",
+"	UW	stime;		/* System execution time (ms) */",
+"	UW	utime;		/* User execution time (ms) */",
+"#endif",
+"",
+"#if USE_OBJECT_NAME",
+"	UB	name[OBJECT_NAME_LENGTH];	/* name */",
+"#endif",
+"};",
+"",
+"",
+"/*",
+" * Task dispatch disable state",
+" *	0 = DDS_ENABLE		 : ENABLE",
+" *	1 = DDS_DISABLE_IMPLICIT : DISABLE with implicit process",
+" *	2 = DDS_DISABLE		 : DISABLE with tk_dis_dsp()",
+" *	|	|",
+" *	|	use in *.c",
+" *	use in *.S",
+" *	  --> Do NOT change these literals, because using in assembler code",
+" *",
+" *	'dispatch_disabled' records dispatch disable status set by tk_dis_dsp()",
+" *	for some CPU, that accepts delayed interrupt.",
+" *	In this case, you can NOT refer the dispatch disabled status",
+" *	only by 'dispatch_disabled'.",
+" *	Use 'in_ddsp()' to refer the task dispatch status.",
+" *	'in_ddsp()' is a macro definition in CPU-dependent definition files.",
+" */",
+"#define DDS_ENABLE		(0)",
+"#define DDS_DISABLE_IMPLICIT	(1)	/* set with implicit process */",
+"#define DDS_DISABLE		(2)	/* set by tk_dis_dsp() */",
+"IMPORT INT	knl_dispatch_disabled;",
+"",
+"/*",
+" * Task in execution",
+" *	ctxtsk is a variable that indicates TCB task in execution",
+" *	(= the task that CPU holds context). During system call processing,",
+" *	when checking information about the task that requested system call,",
+" *	use 'ctxtsk'. Only task dispatcher changes 'ctxtsk'.",
+" */",
+"IMPORT TCB	*knl_ctxtsk;",
+"",
+"/*",
+" * Task which should be executed",
+" *	'schedtsk' is a variable that indicates the task TCB to be executed.",
+" *	If a dispatch is delayed by the delayed dispatch or dispatch disable, ",
+" *	it does not match with 'ctxtsk.' ",
+" */",
+"IMPORT TCB	*knl_schedtsk;",
+"",
+"/*",
+" * Kernel-object initialization (each object)",
+" */",
+"IMPORT ER knl_task_initialize( void );",
+"IMPORT ER knl_semaphore_initialize( void );",
+"IMPORT ER knl_eventflag_initialize( void );",
+"IMPORT ER knl_mailbox_initialize( void );",
+"IMPORT ER knl_messagebuffer_initialize( void );",
+"IMPORT ER knl_rendezvous_initialize( void );",
+"IMPORT ER knl_mutex_initialize( void );",
+"IMPORT ER knl_memorypool_initialize( void );",
+"IMPORT ER knl_fix_memorypool_initialize( void );",
+"IMPORT ER knl_cyclichandler_initialize( void );",
+"IMPORT ER knl_alarmhandler_initialize( void );",
+"IMPORT ER knl_subsystem_initialize( void );",
+"",
+"/*",
+" * Kernel-object initialization (each object) (tkinit.c)",
+" */",
+"IMPORT ER knl_init_object(void);",
+"",
+"/*",
+" * Initialization of Devive management (device.c)",
+" */",
+"IMPORT ER knl_initialize_devmgr( void );",
+"",
+"/*",
+" * System timer control (timer.c)",
+" */",
+"IMPORT ER   knl_timer_startup( void );",
+"IMPORT void knl_timer_shutdown( void );",
+"IMPORT void knl_timer_handler( void );",
+"",
+"/*",
+" * Mutex control (mutex.c)",
+" */",
+"IMPORT void knl_signal_all_mutex( TCB *tcb );",
+"IMPORT INT knl_chg_pri_mutex( TCB *tcb, INT priority );",
+"",
+"/*",
+" * Internal memory allocation (Imalloc) (memory.c)",
+" */",
+"IMPORT ER knl_init_Imalloc( void );",
+"IMPORT void* knl_Imalloc( SZ size );",
+"IMPORT void* knl_Icalloc( SZ nmemb, SZ size );",
+"IMPORT void* knl_Irealloc( void *ptr, SZ size );",
+"IMPORT void  knl_Ifree( void *ptr );",
+"",
+"/*",
+" * Initial task creation parameter (inittask.c)",
+" */",
+"IMPORT const T_CTSK knl_init_ctsk;",
+"",
+"/*",
+" * User main program (usermain.c)",
+" */",
+"IMPORT INT usermain( void );",
+"",
+"/*",
+" * power-saving function (power.c)",
+" */",
+"IMPORT UINT	knl_lowpow_discnt;",
+"",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" * Target system-dependent routine (/sysdepend)",
+" */",
+"",
+"/* Low-level memory management information (reset_hdl.c) */",
+"IMPORT	void	*knl_lowmem_top, *knl_lowmem_limit;",
+"",
+"/*",
+" * Startup / Re-start / Shutdown Hardware (hw_setting.c)",
+" */",
+"IMPORT void knl_startup_hw(void);",
+"IMPORT void knl_shutdown_hw( void );",
+"IMPORT ER knl_restart_hw( W mode );",
+"",
+"/*",
+" * CPU control (cpu_cntl.c)",
+" */",
+"#if TK_SUPPORT_REGOPS",
+"IMPORT void knl_set_reg( TCB *tcb, CONST T_REGS *regs, CONST T_EIT *eit, CONST T_CREGS *cregs );",
+"IMPORT void knl_get_reg( TCB *tcb, T_REGS *regs, T_EIT *eit, T_CREGS *cregs );",
+"#endif /* TK_SUPPORT_REGOPS */",
+"",
+"#if NUM_COPROCESSOR > 0",
+"IMPORT ER knl_get_cpr( TCB *tcb, INT copno, T_COPREGS *copregs);",
+"IMPORT ER knl_set_cpr( TCB *tcb, INT copno, CONST T_COPREGS *copregs);",
+"#endif",
+"",
+"/*",
+" *	Task dispatcher (cpu_cntl.c)",
+" */",
+"IMPORT void knl_force_dispatch( void );",
+"IMPORT void knl_dispatch( void );",
+"",
+"/*",
+" * Interuupt control (interrupt.c)",
+" */",
+"IMPORT ER knl_init_interrupt( void );",
+"IMPORT ER knl_define_inthdr( INT intno, ATR intatr, FP inthdr );",
+"IMPORT void knl_return_inthdr(void);",
+"",
+"/*",
+" * Device Driver Startup / Finalization (devinit.c)",
+" */",
+"IMPORT ER knl_init_device( void );",
+"IMPORT ER knl_start_device( void );",
+"IMPORT ER knl_finish_device( void );",
+"",
+"/*",
+" * micro T-Kernel Startup / Finalization (sysinit.c)",
+" */",
+"IMPORT INT main(void);",
+"IMPORT void knl_tkernel_exit( void );",
+"",
+"/*",
+" * System Call entry",
+" */",
+"IMPORT void knl_call_entry( void );",
+"",
+"/*",
+" *	Power-Saving Function (power_save.c)",
+" */",
+"IMPORT void low_pow( void );		/* Switch to power-saving mode */",
+"IMPORT void off_pow( void );		/* Move to suspend mode */",
+"",
+"#endif /* _KERNEL_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	limits.h",
+" *",
+" *	C language: integer size ",
+" */",
+"",
+"#ifndef _LIMITS_",
+"#define _LIMITS_",
+"",
+"",
+"#define CHAR_BIT	(8)",
+"#define SCHAR_MIN	(-128)",
+"#define SCHAR_MAX	(+127)",
+"#define UCHAR_MAX	(255)",
+"#define CHAR_MIN	SCHAR_MIN",
+"#define CHAR_MAX	SCHAR_MAX",
+"#define MB_LEN_MAX	(2)",
+"",
+"#define SHRT_MIN	(-32768)",
+"#define SHRT_MAX	(+32767)",
+"#define USHRT_MAX	(65535)",
+"",
+"#define LONG_MIN	(-2147483648L)",
+"#define LONG_MAX	(+2147483647L)",
+"#define ULONG_MAX	(4294967295L)",
+"",
+"",
+"#if INT_BITWIDTH == 16",
+"",
+"#define INT_MIN		SHRT_MIN",
+"#define INT_MAX		SHRT_MAX",
+"#define UINT_MAX	USHRT_MAX",
+"",
+"#else /* 32bit */",
+"",
+"#define INT_MIN		LONG_MIN",
+"#define INT_MAX		LONG_MAX",
+"#define UINT_MAX	ULONG_MAX",
+"",
+"#endif /* INT_BITWIDTH == 16 */",
+"#endif /* _LIMITS_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	longlong.h",
+" *",
+" *	64 bit length integer ",
+" */",
+"",
+"#ifndef _LONGLONG_",
+"#define _LONGLONG_",
+"",
+"#if TK_HAS_DOUBLEWORD",
+"",
+"#define ltoll(a)	( (D)(a) )",
+"#define ultoll(a)	( (D)(a) )",
+"#define uitoll(a)	( (D)(a) )",
+"#define lltol(a)	( (long)(a) )",
+"#define lltoul(a)	( (unsigned long)(a) )",
+"#define ll_add(a,b)	( (a) + (b) )",
+"#define ll_sub(a,b)	( (a) - (b) )",
+"#define ll_mul(a,b)	( (a) * (b) )",
+"#define li_mul(a,b)	( (a) * (b) )",
+"#define lui_mul(a,b)	( (a) * (b) )",
+"#define ll_div(a,b)	( (a) / (b) )",
+"#define li_div(a,b)	( (a) / (b) )",
+"#define lui_div(a,b)	( (a) / (b) )",
+"#define ll_mod(a,b)	( (a) % (b) )",
+"#define li_mod(a,b)	( (a) % (b) )",
+"#define lui_mod(a,b)	( (a) % (b) )",
+"#define ll_cmp(a,b)	( (a) - (b) )	/* +:a>b,0:a=b,-:a<b */",
+"#define ll_sign(a)	( (a) )		/* +:a>0,0:a=0,-:a<0 */",
+"#define ll_neg(a)	( -(a) )",
+"#define ll_inc(a)	( (*(a))++ )",
+"#define ll_dec(a)	( (*(a))-- )",
+"",
+"#define hilo_ll(ll, h, l)	( (ll) = ((D)(h) << 32) | (l) )",
+"#define ll_hilo(h, l, ll)	( (h) = (W)((ll) >> 32), \\",
+"				  (l) = (UW)(ll) )",
+"",
+"#else /* TK_HAS_DOUBLEWORD */",
+"",
+"typedef struct {",
+"	long		hi;",
+"	unsigned long	lo;",
+"} longlong;",
+"",
+"extern longlong	ltoll( long a );			/* (longlong)a */",
+"extern longlong	ultoll( unsigned long a );		/* (longlong)a */",
+"extern longlong	uitoll( UINT a );			/* (longlong)a */",
+"extern long	lltol( longlong a );			/* (long)a */",
+"extern unsigned long	lltoul( longlong a );	/* (unsigned long)a */",
+"extern longlong	ll_add( longlong a, longlong b );	/* a+b */",
+"extern longlong	ll_sub( longlong a, longlong b );	/* a-b */",
+"extern longlong	ll_mul( longlong a, longlong b );	/* a*b */",
+"extern longlong	li_mul( longlong a, long b );		/* a*b */",
+"extern longlong	lui_mul( longlong a, UINT b );		/* a*b */",
+"extern longlong	ll_div( longlong a, longlong b );	/* a/b */",
+"extern longlong	li_div( longlong a, long b );		/* a/b */",
+"extern longlong	lui_div( longlong a, UINT b );		/* a/b */",
+"extern longlong	ll_mod( longlong a, longlong b );	/* a%b */",
+"extern long	li_mod( longlong a, long b );		/* a%b */",
+"extern long	lui_mod( longlong a, UINT b );		/* a%b */",
+"extern int	ll_cmp( longlong a, longlong b );	/* +:a>b,0:a=b,-:a<b */",
+"extern int	ll_sign( longlong a );			/* +:a>0,0:a=0,-:a<0 */",
+"extern longlong ll_neg( longlong a );			/* -a */",
+"extern void	ll_inc( longlong *a );			/* (*a)++ */",
+"extern void	ll_dec( longlong *a );			/* (*a)-- */",
+"",
+"#define hilo_ll(ll, h, l)	( (ll).hi = (h), (ll).lo = (l) )",
+"#define ll_hilo(h, l, ll)	( (h) = (ll).hi, (l) = (ll).lo )",
+"",
+"#endif /* TK_HAS_DOUBLEWORD */",
+"",
+"#endif /* _LONGLONG_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	tstdlib.h",
+" *",
+" *	T-Kernel standard library",
+" *",
+" */",
+"",
+"#ifndef	_TSTDLIB_",
+"#define _TSTDLIB_",
+"",
+"#include <tk/tkernel.h>",
+"",
+"",
+"IMPORT void	knl_bitclr( void *base, W offset );",
+"IMPORT void	knl_bitset( void *base, W offset );",
+"",
+"IMPORT W	knl_bitsearch1( void *base, W offset, W width );",
+"",
+"",
+"IMPORT void	*knl_memset( void *s, int c, SZ n );",
+"IMPORT void	*knl_memcpy( void *dst, const void *src, SZ n );",
+"",
+"IMPORT SZ	knl_strlen( const char *s );",
+"IMPORT char	*knl_strcpy( char *dst, const char *src );",
+"IMPORT char	*knl_strncpy( char *dst, const char *src, SZ n );",
+"IMPORT int	knl_strcmp( const char *s1, const char *s2 );",
+"IMPORT char	*knl_strcat( char *dst, const char *src );",
+"",
+"#endif /* _TSTDLIB_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_ARMV6M",
+"/*",
+" *	cpu_cntl.c (ARMv6-M)",
+" *	CPU-Dependent Control",
+" */",
+"#include \"kernel.h\"",
+"#include \"../../../sysdepend.h\"",
+"",
+"#include \"cpu_task.h\"",
+"",
+"",
+"/* Temporal stack used when 'dispatch_to_schedtsk' is called */",
+"Noinit(EXPORT UB knl_tmp_stack[TMP_STACK_SIZE]);",
+"",
+"/* Task independent status */",
+"EXPORT	W	knl_taskindp = 0;",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Set task register contents (Used in tk_set_reg())",
+" */",
+"EXPORT void knl_set_reg( TCB *tcb, CONST T_REGS *regs, CONST T_EIT *eit, CONST T_CREGS *cregs )",
+"{",
+"	SStackFrame	*ssp;",
+"	INT	i;",
+"",
+"#if USE_FPU",
+"	UW		*tmpp;",
+"",
+"	tmpp = (UW*)(( cregs != NULL )? cregs->ssp: tcb->tskctxb.ssp);",
+"	if(tcb->tskatr & TA_FPU) {",
+"		if(*tmpp & EXPRN_NO_FPU) {	/* FPU register is not saved */",
+"			ssp = (SStackFrame*)tmpp;",
+"		} else {		/* FPU register is saved */",
+"			ssp = (SStackFrame*)(((SStackFrame_wFPU*)tmpp)->r_);",
+"		}",
+"	} else {",
+"		ssp = (SStackFrame*)tmpp;",
+"	}",
+"#else",
+"	ssp = (SStackFrame*)(( cregs != NULL )? cregs->ssp: tcb->tskctxb.ssp);",
+"#endif",
+"	",
+"	if ( regs != NULL ) {",
+"		for ( i = 0; i < 4; ++i ) {",
+"			ssp->r[i] = regs->r[i];",
+"		}",
+"		for ( i = 4; i < 12; ++i){",
+"			ssp->r_[i - 4] = regs->r[i];",
+"		}",
+"	}",
+"",
+"	if ( eit != NULL ) {",
+"		ssp->pc = eit->pc;",
+"	}",
+"",
+"	if ( cregs != NULL ) {",
+"		tcb->tskctxb.ssp  = cregs->ssp;",
+"	}",
+"}",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Get task register contents (Used in tk_get_reg())",
+" */",
+"EXPORT void knl_get_reg( TCB *tcb, T_REGS *regs, T_EIT *eit, T_CREGS *cregs )",
+"{",
+"	SStackFrame	*ssp;",
+"	INT		i;",
+"",
+"#if USE_FPU",
+"	UW		*tmpp;",
+"",
+"	tmpp = (UW*)tcb->tskctxb.ssp;",
+"	if(tcb->tskatr & TA_FPU) {",
+"		if(*tmpp & EXPRN_NO_FPU) {	/* FPU register is not saved */",
+"			ssp = (SStackFrame*)tmpp;",
+"		} else {		/* FPU register is saved */",
+"			ssp = (SStackFrame*)&(((SStackFrame_wFPU*)tmpp)->exp_ret);",
+"		}",
+"	} else {",
+"		ssp = (SStackFrame*)tmpp;",
+"	}",
+"#else",
+"	ssp = (SStackFrame*)tcb->tskctxb.ssp;",
+"#endif",
+"",
+"	if ( regs != NULL ) {",
+"		for ( i = 0; i < 4; ++i ) {",
+"			regs->r[i] = ssp->r[i];",
+"		}",
+"		for ( i = 4; i < 12; ++i ){",
+"			regs->r[i] = ssp->r_[i - 4];",
+"		}",
+"		regs->r[12] = ssp->ip;",
+"		regs->lr = ssp->lr;",
+"	}",
+"",
+"	if ( eit != NULL ) {",
+"		eit->pc       = ssp->pc;",
+"		eit->taskmode = 0;",
+"	}",
+"",
+"	if ( cregs != NULL ) {",
+"		cregs->ssp   = tcb->tskctxb.ssp;",
+"	}",
+"}",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" *	Task dispatcher startup",
+" */",
+"EXPORT void knl_force_dispatch( void )",
+"{",
+"	knl_dispatch_disabled = DDS_DISABLE_IMPLICIT;",
+"	knl_ctxtsk = NULL;",
+"	*(_UW*)SCB_ICSR = ICSR_PENDSVSET;	/* pendsv exception */",
+"	set_primask(0);				/* Enable interrupt */",
+"}",
+"",
+"EXPORT void knl_dispatch( void )",
+"{",
+"	*(_UW*)SCB_ICSR = ICSR_PENDSVSET;	/* pendsv exception */",
+"}",
+"",
+"#endif /* CPU_CORE_ARMV6M */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (ARMv6-M)",
+" *	CPU-Dependent Status Definition",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_STATUS_",
+"#define _SYSDEPEND_CPU_CORE_STATUS_",
+"",
+"#include <tk/syslib.h>",
+"#include <sys/sysdef.h>",
+"",
+"#include \"sysdepend.h\"",
+"/*",
+" * Start/End critical section",
+" */",
+"#define BEGIN_CRITICAL_SECTION	{ UINT _primask_ = disint();",
+"#define END_CRITICAL_SECTION	if ( !isDI(_primask_)			\\",
+"				  && knl_ctxtsk != knl_schedtsk		\\",
+"				  && !knl_dispatch_disabled ) {		\\",
+"					knl_dispatch();			\\",
+"				}					\\",
+"				set_primask(_primask_); }",
+"",
+"/*",
+" * Start/End interrupt disable section",
+" */",
+"#define BEGIN_DISABLE_INTERRUPT	{ UINT _basepri_ = disint();",
+"#define END_DISABLE_INTERRUPT	set_primask(_basepri_); }",
+"",
+"/*",
+" * Interrupt enable/disable",
+" */",
+"#define ENABLE_INTERRUPT	{ set_primask(0); }",
+"#define DISABLE_INTERRUPT	{ disint(); }",
+"",
+"/*",
+" * Enable interrupt nesting",
+" *	Enable the interrupt that has a higher priority than 'level.'",
+" *		ARMv6M does not support CPU interrupt mask levels.",
+" */",
+"#define ENABLE_INTERRUPT_UPTO(level)",
+"",
+"/*",
+" *  Task-independent control",
+" */",
+"IMPORT	W	knl_taskindp;		/* Task independent status */",
+"",
+"/*",
+" * If it is the task-independent part, TRUE",
+" */",
+"Inline BOOL knl_isTaskIndependent( void )",
+"{",
+"	return ( knl_taskindp > 0 )? TRUE: FALSE;",
+"}",
+"/*",
+" * Move to/Restore task independent part",
+" */",
+"Inline void knl_EnterTaskIndependent( void )",
+"{",
+"	knl_taskindp++;",
+"}",
+"Inline void knl_LeaveTaskIndependent( void )",
+"{",
+"	knl_taskindp--;",
+"}",
+"",
+"/*",
+" * Move to/Restore task independent part",
+" */",
+"#define ENTER_TASK_INDEPENDENT	{ knl_EnterTaskIndependent(); }",
+"#define LEAVE_TASK_INDEPENDENT	{ knl_LeaveTaskIndependent(); }",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" *	Check system state",
+" */",
+"",
+"/*",
+" * When a system call is called from the task independent part, TRUE",
+" */",
+"#define in_indp()	( knl_isTaskIndependent() || knl_ctxtsk == NULL )",
+"",
+"/*",
+" * When a system call is called during dispatch disable, TRUE",
+" * Also include the task independent part as during dispatch disable.",
+" */",
+"#define in_ddsp()	( knl_dispatch_disabled	\\",
+"			|| in_indp()		\\",
+"			|| isDI(get_primask()) )",
+"",
+"/*",
+" * When a system call is called during CPU lock (interrupt disable), TRUE",
+" * Also include the task independent part as during CPU lock.",
+" */",
+"#define in_loc()	( isDI(get_primask())		\\",
+"			|| in_indp() )",
+"",
+"/*",
+" * When a system call is called during executing the quasi task part, TRUE",
+" * Valid only when in_indp() == FALSE because it is not discriminated from ",
+" * the task independent part. ",
+" */",
+"#define in_qtsk()	( knl_ctxtsk->sysmode > knl_ctxtsk->isysmode )",
+"",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_STATUS_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (ARMv6-M)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_CPUTASK_",
+"#define _SYSDEPEND_CPU_CORE_CPUTASK_",
+"",
+"/*",
+" * System stack configuration at task startup",
+" */",
+"typedef struct {",
+"	UW	exp_ret;	/* Exception return */",
+"	UW	r_[8];		/* R4-R11 */",
+"	// Exception entry stack",
+"	UW	r[4];		/* R0-R3 */",
+"	UW	ip;		/* R12 */",
+"	void	*lr;		/* lr */",
+"	void	*pc;		/* pc */",
+"	UW	xpsr;		/* xpsr */",
+"} SStackFrame;",
+"",
+"/*",
+" * Size of system stack area destroyed by 'make_dormant()'",
+" * In other words, the size of area required to write by 'knl_setup_context().'",
+" */",
+"#define DORMANT_STACK_SIZE	( sizeof(VW) * 7 ) /* To 'R4' position */",
+"",
+"/*",
+" * Create stack frame for task startup",
+" *	Call from 'make_dormant()'",
+" */",
+"Inline void knl_setup_context( TCB *tcb )",
+"{",
+"	SStackFrame	*ssp;",
+"",
+"	ssp = tcb->isstack;",
+"	ssp--;",
+"",
+"	/* CPU context initialization */",
+"	ssp->exp_ret	= 0xFFFFFFF9;",
+"	ssp->lr		= 0;",
+"	ssp->xpsr	= 0x01000000;		/* Initial SR */",
+"	ssp->pc = (void*)((UW)tcb->task & ~0x00000001UL);	/* Task startup address */",
+"",
+"	tcb->tskctxb.ssp = ssp;		/* System stack pointer */",
+"}",
+"",
+"/*",
+" * Set task startup code",
+" *	Called by 'tk_sta_tsk()' processing.",
+" */",
+"Inline void knl_setup_stacd( TCB *tcb, INT stacd )",
+"{",
+"	SStackFrame	*ssp;",
+"	",
+"	ssp = tcb->tskctxb.ssp;",
+"",
+"	ssp->r[0] = stacd;",
+"	ssp->r[1] = (VW)tcb->exinf;",
+"}",
+"",
+"/*",
+" * Delete task contexts",
+" */",
+"Inline void knl_cleanup_context( TCB *tcb )",
+"{",
+"}",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_CPUTASK_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_ARMV6M",
+"",
+"/*",
+" *	exc_hdr.c (ARMv6-M)",
+" *	Exception handler",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"#include <tm/tmonitor.h>",
+"#include <kernel.h>",
+"#include \"../../../sysdepend.h\"",
+"",
+"#if (USE_EXCEPTION_DBG_MSG && USE_TMONITOR)",
+"	#define EXCEPTION_DBG_MSG(a)	tm_putstring((UB*)a)",
+"#else",
+"	#define EXCEPTION_DBG_MSG(a)",
+"#endif",
+"",
+"/*",
+" * NMI handler",
+" */",
+"WEAK_FUNC EXPORT void NMI_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"NMI\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * Hard fault handler",
+" */",
+"WEAK_FUNC EXPORT void HardFault_Handler(void)",
+"{",
+"#if (USE_EXCEPTION_DBG_MSG  && USE_TMONITOR)",
+"",
+"	ID	ctskid;",
+"",
+"	if(knl_ctxtsk != NULL) {",
+"		ctskid = knl_ctxtsk->tskid;",
+"	} else {",
+"		ctskid = 0;",
+"	}",
+"	tm_printf((UB*)\"*** Hard fault ***  ctxtsk:%d\\n\", ctskid);",
+"#endif",
+"	while(1);",
+"}",
+"",
+"/*",
+" * Svcall",
+" */",
+"WEAK_FUNC EXPORT void Svcall_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"SVCall\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * Default Handler",
+" */",
+"WEAK_FUNC EXPORT void Default_Handler(void)",
+"{",
+"#if (USE_EXCEPTION_DBG_MSG  && USE_TMONITOR)",
+"	INT	i;",
+"	_UW	*icpr;",
+"",
+"	icpr = (_UW*)NVIC_ICPR_BASE;",
+"",
+"	EXCEPTION_DBG_MSG(\"Undefine Exceptio ICPR: \");",
+"	for(i=0; i < 8; i++) {",
+"		tm_printf((UB*)\"%x \", *icpr++);",
+"	}",
+"	EXCEPTION_DBG_MSG(\"\\n\");",
+"#endif",
+"	while(1);",
+"}",
+"",
+"#endif /* CPU_CORE_ARMV6M */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_ARMV6M",
+"/*",
+" *	interrupt.c (ARMv6-M)",
+" *	Interrupt control",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../../sysdepend.h\"",
+"",
+"#if !USE_STATIC_IVT",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Exception handler table (RAM)",
+" */",
+"EXPORT UW exchdr_tbl[N_SYSVEC + N_INTVEC] __attribute__ ((section (\".data_vector\")));",
+"",
+"#endif",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * HLL(High level programming language) Interrupt Handler",
+" */",
+"",
+"Noinit(LOCAL FP knl_inthdr_tbl[N_INTVEC]);	/* HLL Interrupt Handler Table */",
+"",
+"EXPORT void knl_hll_inthdr(void)",
+"{",
+"	FP	inthdr;",
+"	UW	intno;",
+"",
+"	ENTER_TASK_INDEPENDENT;",
+"",
+"	intno	= knl_get_ipsr() - 16;",
+"	inthdr	= knl_inthdr_tbl[intno];",
+"",
+"	(*inthdr)(intno);",
+"",
+"	LEAVE_TASK_INDEPENDENT;",
+"}",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System-timer Interrupt handler",
+" */",
+"EXPORT void knl_systim_inthdr(void)",
+"{",
+"	ENTER_TASK_INDEPENDENT;",
+"",
+"	knl_timer_handler();",
+"",
+"	LEAVE_TASK_INDEPENDENT;",
+"}",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" * Set interrupt handler (Used in tk_def_int())",
+" */",
+"EXPORT ER knl_define_inthdr( INT intno, ATR intatr, FP inthdr )",
+"{",
+"	volatile FP	*intvet;",
+"",
+"	if(inthdr != NULL) {",
+"		if ( (intatr & TA_HLNG) != 0 ) {",
+"			knl_inthdr_tbl[intno] = inthdr;",
+"			inthdr = knl_hll_inthdr;",
+"		}		",
+"	} else 	{	/* Clear interrupt handler */",
+"		inthdr = Default_Handler;",
+"	}",
+"	intvet = (FP*)&exchdr_tbl[N_SYSVEC];",
+"	intvet[intno] = inthdr;",
+"",
+"	return E_OK;",
+"}",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" * Return interrupt handler (Used in tk_ret_int())",
+" */",
+"EXPORT void knl_return_inthdr(void)",
+"{",
+"	/* No processing in ARM. */",
+"	return;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt initialize",
+" */",
+"EXPORT ER knl_init_interrupt( void )",
+"{",
+"	/* Register exception handler used on OS */",
+"",
+"	return E_OK;",
+"}",
+"",
+"",
+"",
+"#endif	/* CPU_CORE_ARMV6M *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	offset.h (ARMv6-M)",
+" *	TCB Offset Definition",
+" */",
+"",
+"#ifndef _OFFSET_",
+"#define _OFFSET_",
+"",
+"/*----------------------------------------------------------------------*/",
+"/*	offset data in TCB						*/",
+"/*----------------------------------------------------------------------*/",
+"",
+"#define TCB_tskid	8",
+"#define TCB_tskatr	16",
+"#define TCB_tskctxb	24",
+"#define TCB_state	39",
+"",
+"#define CTXB_ssp	0",
+"",
+"#endif /* _OFFSET_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/05.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_ARMV6M",
+"",
+"/*",
+" *	reset_hdr.c (ARMv6-M)",
+" *	Reset handler",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../../sysdepend.h\"",
+"",
+"#include <tm/tmonitor.h>",
+"",
+"",
+"/* Low level memory manager information */",
+"EXPORT	void	*knl_lowmem_top;		// Head of area (Low address)",
+"EXPORT	void	*knl_lowmem_limit;		// End of area (High address)",
+"",
+"IMPORT	const void *__data_org;",
+"IMPORT	const void *__data_start;",
+"IMPORT	const void *__data_end;",
+"IMPORT	const void *__bss_start;",
+"IMPORT	const void *__bss_end;",
+"#if USE_NOINIT",
+"IMPORT	const void *__noinit_end;",
+"#endif",
+"",
+"IMPORT const void (*vector_tbl[])();",
+"",
+"EXPORT void Reset_Handler(void)",
+"{",
+"	UW	*src, *top, *end;",
+"	INT	i;",
+"",
+"	/* Startup Hardware */",
+"	knl_startup_hw();",
+"",
+"#if !USE_STATIC_IVT",
+"	/* Load Vector Table from ROM to RAM */",
+"	src = (UW*)vector_tbl;;",
+"	top = (UW*)exchdr_tbl;",
+"",
+"	for(i=0; i < ((N_SYSVEC + N_INTVEC)); i++) {",
+"		*top++ = *src++;",
+"	}",
+"	",
+"	/* Set Vector Table offset to SRAM */",
+"	*(_UW*)SCB_VTOR = (UW)exchdr_tbl;",
+"#endif",
+"",
+"	/* Load .data to ram */",
+"	src = (UW*)&__data_org;;",
+"	top = (UW*)&__data_start;",
+"	end = (UW*)&__data_end;",
+"	while(top != end) {",
+"		*top++ = *src++;",
+"	}",
+"",
+"	/* Initialize .bss */",
+"#if USE_NOINIT",
+"	top = (UW*)&__noinit_end;",
+"#else ",
+"	top = (UW*)&__bss_start;",
+"#endif",
+"	for(i = ((INT)&__bss_end - (INT)&__bss_start)/sizeof(UW); i > 0 ; i--) {",
+"		*top++ = 0;",
+"	}",
+"",
+"#if USE_IMALLOC",
+"	/* Set System memory area */",
+"	if(INTERNAL_RAM_START > SYSTEMAREA_TOP) {",
+"		knl_lowmem_top = (UW*)INTERNAL_RAM_START;",
+"	} else {",
+"		knl_lowmem_top = (UW*)SYSTEMAREA_TOP;",
+"	}",
+"	if((UW)knl_lowmem_top < (UW)&__bss_end) {",
+"		knl_lowmem_top = (UW*)&__bss_end;",
+"	}",
+"",
+"	if((SYSTEMAREA_END != 0) && (INTERNAL_RAM_END > CNF_SYSTEMAREA_END)) {",
+"		knl_lowmem_limit = (UW*)(SYSTEMAREA_END - EXC_STACK_SIZE);",
+"	} else {",
+"		knl_lowmem_limit = (UW*)(INTERNAL_RAM_END - EXC_STACK_SIZE);",
+"	}",
+"#endif",
+"",
+"	/* Configure exception priorities */",
+"	*(_UW*)SCB_SHPR2 = SCB_SHPR2_VAL;	// SVC pri = 0",
+"	*(_UW*)SCB_SHPR3 = SCB_SHPR3_VAL;	// SysTick = 0 , PendSV = 3",
+"",
+"	/* Startup Kernel */",
+"	main();		/**** No return ****/",
+"	while(1);	/* guard - infinite loops */",
+"}",
+"",
+"#endif	/* CPU_CORE_ARMV6M *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (ARMv6-M)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_SYSDEPEND_",
+"#define _SYSDEPEND_CPU_CORE_SYSDEPEND_",
+"",
+"/*",
+" *    Reset Handler (vector_tbl.c/reset_hdl.c)",
+" */",
+"IMPORT void Reset_Handler(void);		/* Reset Handler */",
+"",
+"/*",
+" *    Exception Handler (vector_tbl.c/exc_hdr.c)",
+" */",
+"IMPORT void NMI_Handler(void);			/* NMI Handler */",
+"IMPORT void HardFault_Handler(void);		/* Hard Fault Handler */",
+"IMPORT void Svcall_Handler(void);		/* Svcall */",
+"",
+"IMPORT void Default_Handler(void);		/* Default Handler (Undefine Interrupt) */",
+"",
+"/*",
+" * Dispatcher (dispatch.S)",
+" */",
+"IMPORT void knl_dispatch_entry(void);		/* dispatch entry */",
+"IMPORT void knl_dispatch_to_schedtsk(void);	/* force dispatch */",
+"",
+"/*",
+" * Interrupt Control (interrupt.c)",
+" */",
+"IMPORT	UW exchdr_tbl[];			/* Exception handler table (RAM) */",
+"",
+"IMPORT void knl_systim_inthdr(void);		/* System-timer Interrupt handler */",
+"",
+"",
+"/*",
+" * Task context block",
+" */",
+"typedef struct {",
+"	void	*ssp;		/* System stack pointer */",
+"} CTXB;",
+"",
+"/*",
+" *	Control register operation",
+" */",
+"",
+"Inline UW knl_get_ipsr(void)",
+"{",
+"	UW	ipsr;",
+"	Asm(\"mrs %0, ipsr\": \"=r\"(ipsr));",
+"	return ipsr;",
+"}",
+"",
+"Inline UW knl_get_xpsr(void)",
+"{",
+"	UW	xpsr;",
+"	Asm(\"mrs %0, psr\": \"=r\"(xpsr));",
+"	return xpsr;",
+"}",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_SYSDEPEND_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (ARMv6-M)",
+" *	Hardware-Dependent System Timer (SysTick) Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_SYSTIMER_",
+"#define _SYSDEPEND_CPU_CORE_SYSTIMER_",
+"",
+"/*",
+" * Timer start processing",
+" *	Initialize the timer and start the periodical timer interrupt.",
+" */",
+"Inline void knl_start_hw_timer( void )",
+"{",
+"	UINT	n, imask;",
+"",
+"	DI(imask);",
+"",
+"	/* Set System timer CLK source to Core, Systick exception enable */",
+"	out_w(SYST_CSR, 0x00000006);",
+"",
+"	/* Set counter: TMCLK(MHz) */",
+"	n = (UINT)(TIMER_PERIOD * TMCLK_KHz - 1);",
+"	out_w(SYST_RVR, n);",
+"",
+"	/* Start timer count */",
+"	out_w(SYST_CSR, 0x00000007);",
+"",
+"	EI(imask);",
+"}",
+"",
+"/*",
+" * Clear timer interrupt",
+" *	Clear the timer interrupt request. Depending on the type of",
+" *	hardware, there are two timings for clearing: at the beginning",
+" *	and the end of the interrupt handler.",
+" *	'clear_hw_timer_interrupt()' is called at the beginning of the",
+" *	timer interrupt handler.",
+" *	'end_of_hw_timer_interrupt()' is called at the end of the timer",
+" *	interrupt handler.",
+" *	Use either or both according to hardware.",
+" */",
+"Inline void knl_clear_hw_timer_interrupt( void )",
+"{",
+"	(void)in_w(SYST_CSR);			/* Clear COUNTFLAG */",
+"	out_w(SCB_ICSR, ICSR_PENDSTCLR);",
+"}",
+"",
+"Inline void knl_end_of_hw_timer_interrupt( void )",
+"{",
+"	/* No processing */",
+"}",
+"",
+"/*",
+" * Timer stop processing",
+" *	Stop the timer operation.",
+" *	Called when system stops.",
+" */",
+"Inline void knl_terminate_hw_timer( void )",
+"{",
+"	/* Timer interrupt disable */",
+"	out_w(SYST_CSR, 0x00000000);",
+"}",
+"",
+"/*",
+" * Get processing time from the previous timer interrupt to the",
+" * current (nanosecond)",
+" *	Consider the possibility that the timer interrupt occurred",
+" *	during the interrupt disable and calculate the processing time",
+" *	within the following",
+" *	range: 0 <= Processing time < TIMER_PERIOD * 2",
+" */",
+"Inline UW knl_get_hw_timer_nsec( void )",
+"{",
+"	UW	ofs, max, unf;",
+"	UINT	imsk;",
+"",
+"	DI(imsk);",
+"	max = in_w(SYST_RVR);			/* Setting count */",
+"	unf = in_w(SYST_CSR) & 0x10000;		/* COUNTFLAG */",
+"	ofs = in_w(SYST_CVR) & 0x00ffffff;	/* Current Remained count */",
+"	if ( unf == 0 ) {		/* Reload not occurred */",
+"		unf = in_w(SYST_CSR) & 0x10000;	/* Check COUNTFLAG again */",
+"		if (unf != 0) {		/* Reload occurred */",
+"			ofs = in_w(SYST_CVR) & 0x00ffffff;",
+"		}",
+"	}",
+"	EI(imsk);",
+"	ofs = max - ofs;			/* Elapsed count */",
+"	if ( unf != 0 ) ofs += max + 1;	/* Reload occured, Adjust */",
+"",
+"	return  (UW) ( ( (D)ofs * 1000000 ) / TMCLK_KHz );",
+"}",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_SYSTIMER_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_ARMV7A",
+"/*",
+" *	cpu_cntl.c (ARMv7-A)",
+" *	CPU-Dependent Control",
+" */",
+"#include \"kernel.h\"",
+"#include \"../../../sysdepend.h\"",
+"",
+"#include \"cpu_task.h\"",
+"",
+"",
+"/* Temporal stack used when 'dispatch_to_schedtsk' is called */",
+"Noinit(EXPORT UB knl_tmp_stack[TMP_STACK_SIZE]);",
+"",
+"/* Task independent status */",
+"EXPORT	W	knl_taskindp = 0;",
+"",
+"#if USE_FPU",
+"EXPORT TCB	*knl_fpu_ctx;	/* Task in FPU context */",
+"#endif /* USE_FPU */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Set task register contents (Used in tk_set_reg())",
+" */",
+"EXPORT void knl_set_reg( TCB *tcb, CONST T_REGS *regs, CONST T_EIT *eit, CONST T_CREGS *cregs )",
+"{",
+"	SStackFrame	*ssp;",
+"	INT	i;",
+"",
+"	ssp = tcb->tskctxb.ssp;",
+"",
+"	if ( cregs != NULL ) {",
+"		ssp = cregs->ssp;",
+"		tcb->tskctxb.ssp  = ssp;",
+"	}",
+"",
+"	if ( regs != NULL ) {",
+"		for ( i = 0; i < 4; ++i ) {",
+"			ssp->r[i] = regs->r[i];",
+"		}",
+"		for ( i = 4; i < 12; ++i){",
+"			ssp->r_[i - 4] = regs->r[i];",
+"		}",
+"		ssp->ip = regs->r[12];",
+"		ssp->lr = regs->lr;",
+"	}",
+"",
+"	if ( eit != NULL ) {",
+"		ssp->pc       = eit->pc;",
+"		ssp->cpsr = eit->cpsr;",
+"	}",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Get task register contents (Used in tk_get_reg())",
+" */",
+"EXPORT void knl_get_reg( TCB *tcb, T_REGS *regs, T_EIT *eit, T_CREGS *cregs )",
+"{",
+"	SStackFrame	*ssp;",
+"	INT		i;",
+"",
+"	ssp = tcb->tskctxb.ssp;",
+"",
+"	if ( regs != NULL ) {",
+"		for ( i = 0; i < 4; ++i ) {",
+"			regs->r[i] = ssp->r[i];",
+"		}",
+"		for ( i = 4; i < 12; ++i ){",
+"			regs->r[i] = ssp->r_[i - 4];",
+"		}",
+"		regs->r[12] = ssp->ip;",
+"		regs->lr = ssp->lr;",
+"	}",
+"",
+"	if ( eit != NULL ) {",
+"		eit->pc       = ssp->pc;",
+"		eit->cpsr     = ssp->cpsr;",
+"		eit->taskmode = 0;",
+"	}",
+"",
+"	if ( cregs != NULL ) {",
+"		cregs->ssp   = tcb->tskctxb.ssp;",
+"	}",
+"}",
+"",
+"#if USE_FPU",
+"",
+"LOCAL void save_fpuctx(FPUContext *fpu)",
+"{",
+"	UW	bk_fpexe, bk_fpscr;",
+"",
+"	Asm(\"fmrx %0, fpexc\":\"=r\"(bk_fpexe));		// bk_fpexe = FPEXC",
+"	Asm(\"orr ip, %0, #0x40000000\"::\"r\"(bk_fpexe));	// FPEXC.EN = 1",
+"	Asm(\"fmxr fpexc, ip\");				// VFP enable",
+"",
+"	Asm(\"mov ip, %0\"::\"r\"(fpu));",
+"",
+"	// save VFP context",
+"	Asm(\"fmrx %0, fpscr\":\"=r\"(bk_fpscr));		// Floating-Point Status and Control Register",
+"	Asm(\"stmia ip!, {r0, %0}\"::\"r\"(bk_fpscr));	// (r0 is padding)",
+"	Asm(\"fstmiad ip!, {d0-d15}\");",
+"	Asm(\"fstmiad ip!, {d16-d31}\");",
+"",
+"	Asm(\"fmxr fpexc, %0\"::\"r\"(bk_fpexe));		// restore FPEXC",
+"}",
+"",
+"#ifdef USE_FUNC_TK_SET_CPR",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Set task register contents (Used in tk_set_reg())",
+" */",
+"EXPORT ER knl_set_cpr( TCB *tcb, INT copno, CONST T_COPREGS *copregs)",
+"{",
+"	FPUContext	*fpu;",
+"	INT		i;",
+"	",
+"	fpu = tcb->isstack;",
+"	fpu--;",
+"",
+"	if (tcb == knl_fpu_ctx) {",
+"		save_fpuctx(fpu);	/* save FPU context */",
+"		knl_fpu_ctx = NULL;",
+"	}",
+"",
+"	if( copregs != NULL ){",
+"		for ( i = 0; i < 32; i++ ) {",
+"			fpu->d[i] = copregs->d[i];",
+"		}",
+"		fpu->fpscr = copregs->fpscr;",
+"	}",
+"",
+"	return E_OK;",
+"}",
+"",
+"#endif /* USE_FUNC_TK_SET_CPR */",
+"",
+"#ifdef USE_FUNC_TK_GET_CPR",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Get task FPU register contents (Used in tk_get_cpr())",
+" */",
+"EXPORT ER knl_get_cpr( TCB *tcb, INT copno, T_COPREGS *copregs)",
+"{",
+"	FPUContext	*fpu;",
+"	INT		i;",
+"",
+"	fpu = tcb->isstack;",
+"	fpu--;",
+"",
+"	if (tcb == knl_fpu_ctx) {",
+"		save_fpuctx(fpu);	/* save FPU context */",
+"	}",
+"",
+"	if (copregs != NULL) {",
+"		for (i = 0; i < 32; i++) {",
+"			copregs->d[i] = fpu->d[i];",
+"		}",
+"		copregs->fpscr = fpu->fpscr;",
+"	}",
+"",
+"	return E_OK;",
+"}",
+"#endif /* USE_FUNC_TK_GET_CPR */",
+"#endif /* USE_FPU */",
+"",
+"",
+"#endif /* CPU_CORE_ARMV7A */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (ARMv7-A)",
+" *	CPU-Dependent Status Definition",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_STATUS_",
+"#define _SYSDEPEND_CPU_CORE_STATUS_",
+"",
+"#include <tk/syslib.h>",
+"#include <sys/sysdef.h>",
+"",
+"#include \"sysdepend.h\"",
+"/*",
+" * Start/End critical section",
+" */",
+"#define BEGIN_CRITICAL_SECTION	{ UINT _intsts_ = disint();",
+"#define END_CRITICAL_SECTION	if ( !isDI(_intsts_)			\\",
+"				  && knl_ctxtsk != knl_schedtsk		\\",
+"				  && !knl_isTaskIndependent()		\\",
+"				  && !knl_dispatch_disabled ) {		\\",
+"					knl_dispatch();			\\",
+"				}					\\",
+"				enaint(_intsts_); }",
+"",
+"/*",
+" * Start/End interrupt disable section",
+" */",
+"#define BEGIN_DISABLE_INTERRUPT	{ UINT _intsts_ = disint();",
+"#define END_DISABLE_INTERRUPT	enaint(_intsts_); }",
+"",
+"/*",
+" * Interrupt enable/disable",
+" */",
+"#define ENABLE_INTERRUPT	{ enaint(0); }",
+"#define DISABLE_INTERRUPT	{ disint(); }",
+"",
+"/*",
+" * Enable interrupt nesting",
+" *	Enable the interrupt that has a higher priority than 'level.'",
+" */",
+"#define ENABLE_INTERRUPT_UPTO(level)	{ enaint(0); }",
+"",
+"/*",
+" *  Task-independent control",
+" */",
+"IMPORT	W	knl_taskindp;		/* Task independent status */",
+"",
+"/*",
+" * If it is the task-independent part, TRUE",
+" */",
+"Inline BOOL knl_isTaskIndependent( void )",
+"{",
+"	return ( knl_taskindp > 0 )? TRUE: FALSE;",
+"}",
+"/*",
+" * Move to/Restore task independent part",
+" */",
+"Inline void knl_EnterTaskIndependent( void )",
+"{",
+"	knl_taskindp++;",
+"}",
+"Inline void knl_LeaveTaskIndependent( void )",
+"{",
+"	knl_taskindp--;",
+"}",
+"",
+"/*",
+" * Move to/Restore task independent part",
+" */",
+"#define ENTER_TASK_INDEPENDENT	{ knl_EnterTaskIndependent(); }",
+"#define LEAVE_TASK_INDEPENDENT	{ knl_LeaveTaskIndependent(); }",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" *	Check system state",
+" */",
+"",
+"/*",
+" * When a system call is called from the task independent part, TRUE",
+" */",
+"#define in_indp()	( knl_isTaskIndependent() || knl_ctxtsk == NULL )",
+"",
+"",
+"Inline UINT knl_getCPSR(void)",
+"{",
+"	UINT rtn;",
+"	asm(\"mrs     %0, cpsr\":\"=r\"(rtn));	/* save CPSR to ret */",
+"	return rtn;",
+"}",
+"",
+"/*",
+" * When a system call is called during dispatch disable, TRUE",
+" * Also include the task independent part as during dispatch disable.",
+" */",
+"#define in_ddsp()	( knl_dispatch_disabled		\\",
+"			|| in_indp() 			\\",
+"			|| (knl_getCPSR() & PSR_I) )",
+"",
+"/*",
+" * When a system call is called during CPU lock (interrupt disable), TRUE",
+" * Also include the task independent part as during CPU lock.",
+" */",
+"#define in_loc()	( (knl_getCPSR() & PSR_I)	\\",
+"			|| in_indp() )",
+"",
+"/*",
+" * When a system call is called during executing the quasi task part, TRUE",
+" * Valid only when in_indp() == FALSE because it is not discriminated from ",
+" * the task independent part. ",
+" */",
+"#define in_qtsk()	( knl_ctxtsk->sysmode > knl_ctxtsk->isysmode )",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" *	Task dispatcher startup",
+" */",
+"Inline void knl_force_dispatch( void )",
+"{",
+"	Asm(\"svc %0\"::\"i\"(SVC_FORCE_DISPATCH):\"lr\");",
+"}",
+"Inline void knl_dispatch( void )",
+"{",
+"	Asm(\"svc %0\"::\"i\"(SVC_DISPATCH):\"lr\");",
+"}",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_STATUS_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (ARMv7-A)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_CPUTASK_",
+"#define _SYSDEPEND_CPU_CORE_CPUTASK_",
+"",
+"/*",
+" * System stack configuration at task startup",
+" */",
+"typedef struct {",
+"	UW	r_[8];		/* R4-R11 */",
+"	// Exception entry stack",
+"	UW	r[4];		/* R0-R3 */",
+"	UW	ip;		/* R12 */",
+"	void	*lr;		/* lr */",
+"	void	*pc;		/* pc */",
+"	UW	cpsr;		/* cpsr */",
+"} SStackFrame;",
+"",
+"/*",
+" * Size of system stack area destroyed by 'make_dormant()'",
+" * In other words, the size of area required to write by 'knl_setup_context().'",
+" */",
+"#define DORMANT_STACK_SIZE	( sizeof(SStackFrame) + 0x10 )",
+"",
+"#if USE_FPU",
+"typedef struct {",
+"	UW	rsv;",
+"	UW	fpscr;",
+"	UD	d[32];",
+"} FPUContext;",
+"",
+"IMPORT TCB	*knl_fpu_ctx;	/* Task in FPU context */",
+"",
+"#endif /* USE_FPU */",
+"",
+"/*",
+" * Create stack frame for task startup",
+" *	Call from 'make_dormant()'",
+" */",
+"Inline void knl_setup_context( TCB *tcb )",
+"{",
+"	SStackFrame	*ssp;",
+"",
+"	ssp = tcb->isstack;",
+"",
+"#if USE_FPU",
+"	if ( (tcb->tskatr & TA_FPU) != 0 ) {",
+"		/* Initialize FPU context */",
+"		FPUContext *fpu	= tcb->isstack;",
+"		(--fpu)->fpscr	= FPSCR_INIT;",
+"		ssp = (SStackFrame*)fpu;",
+"	}",
+"#endif /* USE_FPU */",
+"",
+"	ssp--;",
+"",
+"	/* CPU context initialization */",
+"	ssp->lr = 0;",
+"	ssp->cpsr = PSR_SVC;		/* Initial CPSR */",
+"	ssp->pc = (void *)tcb->task;	/* Task startup address */",
+"",
+"	tcb->tskctxb.ssp = ssp;		/* System stack */",
+"}",
+"",
+"/*",
+" * Set task startup code",
+" *	Called by 'tk_sta_tsk()' processing.",
+" */",
+"Inline void knl_setup_stacd( TCB *tcb, INT stacd )",
+"{",
+"	SStackFrame	*ssp = tcb->tskctxb.ssp;",
+"",
+"	ssp->r[0] = stacd;",
+"	ssp->r[1] = (VW)tcb->exinf;",
+"}",
+"",
+"/*",
+" * Delete task contexts",
+" */",
+"Inline void knl_cleanup_context( TCB *tcb )",
+"{",
+"#if	USE_FPU",
+"	if(tcb->tskatr & TA_FPU){",
+"		if (knl_fpu_ctx == tcb) {",
+"			knl_fpu_ctx = NULL;",
+"		}",
+"	}",
+"#endif	// USE_FPU",
+"}",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_CPUTASK_ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_ARMV7A",
+"",
+"/*",
+" *	exc_hdr.c (ARMv7-A)",
+" *	Exception handler",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"#include <tm/tmonitor.h>",
+"#include <kernel.h>",
+"#include \"../../../sysdepend.h\"",
+"",
+"#if USE_EXCEPTION_DBG_MSG",
+"	#define EXCEPTION_DBG_MSG(a)	tm_printf((UB*)a)",
+"#else",
+"	#define EXCEPTION_DBG_MSG(a)",
+"#endif",
+"",
+"/*",
+" * Undefined instruction exception handler",
+" */",
+"WEAK_FUNC EXPORT void FIQ_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"FIQ\\n\");",
+"	while(1);",
+"}",
+"",
+"",
+"/*",
+" * Undefined instruction exception handler",
+" */",
+"WEAK_FUNC EXPORT void UndefinedInst_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"Undef\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * Prefetch abort exception handler",
+" */",
+"WEAK_FUNC EXPORT void PrefetchAbort_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"iabort\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * Data abort exception handler",
+" */",
+"WEAK_FUNC EXPORT void DataAbort_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"dabort\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * VFP invalid handler",
+" */",
+"WEAK_FUNC EXPORT void VFPInvalid_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"VFP invalid\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * Default Handler (Undefine Interrupt) ",
+" */",
+"WEAK_FUNC EXPORT void Default_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"Undefine Interrupt\\n\");",
+"	while(1);",
+"}",
+"",
+"",
+"/*",
+" * SVC default Handler (Undefine SVC) ",
+" */",
+"WEAK_FUNC EXPORT void SVC_default_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"Undefine SVC\\n\");",
+"	while(1);",
+"}",
+"",
+"",
+"#endif	/* CPU_CORE_ARMV7A */﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_ARMV7A",
+"",
+"/*",
+" *	interrupt.c  (ARMv7-A)",
+" *	Interrupt control",
+" */",
+"",
+"#include <kernel.h>",
+"#include \"../../../sysdepend.h\"",
+"",
+"/* Interrupt vector table */",
+"Noinit(EXPORT FP knl_intvec_tbl[N_INTVEC]);",
+"",
+"/* High level programming language interrupt handler table */",
+"Noinit(EXPORT FP knl_hll_inthdr_tbl[N_INTVEC]);",
+"",
+"/* SVC handler table */",
+"EXPORT const FP knl_svcvec_tbl[N_SVCHDR] = {",
+"	NULL, NULL, NULL, NULL, NULL, NULL,	/* 0 ~ 5 : reserved. */",
+"	NULL,					/* 6 : micro T-Kernel system call */",
+"	knl_dispatch_to_schedtsk,		/* 7 : force dispatch */",
+"	knl_dispatch_entry,			/* 8 : task dispatcher */",
+"	NULL,					/* 9 : debug support function */",
+"	NULL					/* 10: Extended SVC */",
+"};",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" * Set interrupt handler (Used in tk_def_int())",
+" */",
+"EXPORT ER knl_define_inthdr( INT intno, ATR intatr, FP inthdr )",
+"{",
+"	if((inthdr != NULL) && ((intatr & TA_HLNG) != 0 )) {",
+"		knl_hll_inthdr_tbl[intno] = inthdr;",
+"		inthdr = knl_hll_inthdr;",
+"	}",
+"	knl_intvec_tbl[intno] = inthdr;",
+"",
+"	return E_OK;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt initialize",
+" */",
+"",
+" /* GICD_ICFGR(n) Register default value */",
+"LOCAL const UW GICD_ICFGR_inival[] =",
+"{				//           Interrupt ID",
+"	0xAAAAAAAAuL,		// GICD_ICFGR0  :  15 to   0",
+"	0x55540000uL,		// GICD_ICFGR1  :  19 to  16",
+"	0xFD555555uL,		// GICD_ICFGR2  :  47 to  32",
+"	0x7FFFFFFFuL,		// GICD_ICFGR3  :  63 to  48",
+"	0x55555555uL,		// GICD_ICFGR4  :  79 to  64",
+"	0xD57F5555uL,		// GICD_ICFGR5  :  95 to  80",
+"	0xFFFFFFFFuL,		// GICD_ICFGR6  : 111 to  96",
+"	0xFFFFFFFFuL,		// GICD_ICFGR7  : 127 to 112",
+"	0xFFFFFFFFuL,		// GICD_ICFGR8  : 143 to 128",
+"	0xFFFFFFFFuL,		// GICD_ICFGR9  : 159 to 144",
+"	0xFFFFFFFFuL,		// GICD_ICFGR10 : 175 to 160",
+"	0xFFFFFFFFuL,		// GICD_ICFGR11 : 191 to 176",
+"	0xFFFFFFFFuL,		// GICD_ICFGR12 : 207 to 192",
+"	0xFFFFFFFFuL,		// GICD_ICFGR13 : 223 to 208",
+"	0xFFFFFFFFuL,		// GICD_ICFGR14 : 239 to 224",
+"	0x7D5FD57FuL,		// GICD_ICFGR15 : 255 to 240",
+"	0x557D7DDFuL,		// GICD_ICFGR16 : 271 to 256",
+"	0x557D557DuL,		// GICD_ICFGR17 : 287 to 272",
+"	0x5555557DuL,		// GICD_ICFGR18 : 303 to 288",
+"	0x55555555uL,		// GICD_ICFGR19 : 319 to 304",
+"	0xF5555555uL,		// GICD_ICFGR20 : 335 to 320",
+"	0x5555FFFFuL,		// GICD_ICFGR21 : 351 to 336",
+"	0x55555555uL,		// GICD_ICFGR22 : 367 to 352",
+"	0xFFDD5555uL,		// GICD_ICFGR23 : 383 to 368",
+"	0xFFFFFFFFuL,		// GICD_ICFGR24 : 399 to 384",
+"	0xFFFFFFFFuL,		// GICD_ICFGR25 : 415 to 400",
+"	0xFFFFFFFFuL,		// GICD_ICFGR26 : 431 to 416",
+"	0x5FFFFFDFuL,		// GICD_ICFGR27 : 447 to 432",
+"	0x55555555uL,		// GICD_ICFGR28 : 463 to 448",
+"	0x55555555uL,		// GICD_ICFGR29 : 479 to 464",
+"	0x55555555uL,		// GICD_ICFGR30 : 495 to 480",
+"	0x55555555uL,		// GICD_ICFGR31 : 511 to 496",
+"};",
+"",
+"EXPORT ER knl_init_interrupt( void )",
+"{",
+"	INT	i;",
+"	_UW	*reg;",
+"",
+"	/* Initialization of interrupt vector table */",
+"	for(i = 0; i < N_INTVEC; i++) knl_intvec_tbl[i] = (FP)NULL;",
+"",
+"	/* Register exception handler used on OS */",
+"	knl_define_inthdr(INTNO_SYSTICK, TA_HLNG, (FP)knl_timer_handler);	/* System Timer Interruput */",
+"",
+"	/* GIC initialization */",
+"	reg = (_UW*)GICD_IGROUPR(0);",
+"	for (i = 0; i < GICD_IGROUPR_N; i++) {",
+"		reg[i] = 0x00000000uL;		/* All interrupts are Group 0 */",
+"	}",
+"",
+"	reg = (_UW*)GICD_ICFGR(0);",
+"	for (i = 0; i < GICD_ICFGR_N; i++) {",
+"		reg[i] = GICD_ICFGR_inival[i];	/* Copy from the default table */",
+"	}",
+"",
+"	reg = (_UW*)GICD_IPRIORITYR(0);",
+"	for (i = 0; i < GICD_IPRIORITYR_N; i++) {",
+"		reg[i] = 0xF8F8F8F8uL;		/* All priorities are 31 */",
+"	}",
+"",
+"	reg = (_UW*)GICD_ITARGETR(0);",
+"	for (i = 8; i < GICD_ITARGETR_N; i++) {",
+"		reg[i] = 0x01010101uL;		/* Target processor is CPU-0 */",
+"	}",
+"	",
+"	reg = (_UW*)GICD_ICENABLER(0);",
+"	for (i = 0; i < GICD_ICENABLER_N; i++) {",
+"		reg[i] = 0xFFFFFFFFuL;",
+"	}",
+"",
+"	out_w(GICC_PMR, 31<<3);			/* Allow all interrupts */",
+"	out_w(GICC_BPR, 0x00000002UL);",
+"	out_w(GICC_CTLR, 0x00000003UL);",
+"	out_w(GICD_CTLR, 0x00000001uL);",
+"",
+"	return E_OK;",
+"}",
+"",
+"#endif /* CPU_CORE_ARMV7A *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	offset.h (ARMv7-A)",
+" *	TCB Offset Definition",
+" */",
+"",
+"#ifndef _OFFSET_",
+"#define _OFFSET_",
+"",
+"/*----------------------------------------------------------------------*/",
+"/*	offset data in TCB						*/",
+"/*----------------------------------------------------------------------*/",
+"",
+"#define TCB_tskid	8",
+"#define TCB_tskatr	16",
+"#define TCB_tskctxb	24",
+"#define TCB_state	39",
+"#define	TCB_isstack	100",
+"",
+"#define CTXB_ssp	0",
+"",
+"",
+"/*----------------------------------------------------------------------*/",
+"/*	The size of the FPU context on the stack			*/",
+"/*----------------------------------------------------------------------*/",
+"#define	FPU_context	264",
+"",
+"#endif /* _OFFSET_ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_ARMV7A",
+"",
+"/*",
+" *	reset_main.c  (ARMv7-A)",
+" *	Reset handler Main routine (Called from reset_hdl.S)",
+" */",
+"",
+"",
+"#include \"kernel.h\"",
+"#include \"../../../sysdepend.h\"",
+"",
+"#include <tm/tmonitor.h>",
+"",
+"/* Low level memory manager information */",
+"EXPORT	void	*knl_lowmem_top;		// Head of area (Low address)",
+"EXPORT	void	*knl_lowmem_limit;		// End of area (High address)",
+"",
+"IMPORT	const void *_data_org;",
+"IMPORT	const void *_data_start;",
+"IMPORT	const void *_data_end;",
+"IMPORT	const void *_bss_start;",
+"IMPORT	const void *_bss_end;",
+"IMPORT	const void *_HeapStart;",
+"",
+"void L1CacheInit(void);",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Reset Handler Main routine (Called from reset_hdl.S)",
+" */",
+"",
+"EXPORT void reset_main(void)",
+"{",
+"	UW	*src, *top, *end;",
+"",
+"	/* Startup Hardware */",
+"	knl_startup_hw();",
+"",
+"	/* Load .data to ram */",
+"",
+"	src = (UW*)&_data_org;",
+"	top = (UW*)&_data_start;",
+"	end = (UW*)&_data_end;",
+"	while(top < end) {",
+"		*top++ = *src++;",
+"	}",
+"",
+"	/* Initialize .bss */",
+"	top = (UW*)&_bss_start;",
+"	end = (UW*)&_bss_end;",
+"	while( top < end) {",
+"		*top++ = 0;",
+"	}",
+"",
+"#if USE_IMALLOC",
+"	/* Set System memory area */",
+"	if(INTERNAL_RAM_START > SYSTEMAREA_TOP) {",
+"		knl_lowmem_top = (UW*)INTERNAL_RAM_START;",
+"	} else {",
+"		knl_lowmem_top = (UW*)SYSTEMAREA_TOP;",
+"	}",
+"	if((UW)knl_lowmem_top < (UW)&_HeapStart) {",
+"		knl_lowmem_top = (UW*)&_HeapStart;",
+"	}",
+"",
+"	if((SYSTEMAREA_END != 0) && (INTERNAL_RAM_END > SYSTEMAREA_END)) {",
+"		knl_lowmem_limit = (UW*)(SYSTEMAREA_END);",
+"	} else {",
+"		knl_lowmem_limit = (UW*)(INTERNAL_RAM_END);",
+"	}",
+"#endif	/* USE_IMALLOC */",
+"",
+"	L1CacheInit();		/* L1 cache initialize */",
+"",
+"	/* Startup Kernel */",
+"	main();		/**** No return ****/",
+"	while(1);	/* guard - infinite loops */",
+"}",
+"",
+"",
+"#endif	/* CPU_CORE_ARMV7A */",
+"",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06A",
+" *",
+" *    Copyright (C) 2006-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (ARMv7-A)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_SYSDEPEND_",
+"#define _SYSDEPEND_CPU_CORE_SYSDEPEND_",
+"",
+"/*",
+" *    Reset Handler (reset_hdl.S)",
+" */",
+"IMPORT void Reset_Handler(void);		/* Reset Handler */",
+"",
+"/*",
+" *    Exception Handler (exc_hdr.c)",
+" */",
+"IMPORT void UndefinedInst_Handler(void);	/* Undefined instruction exception handler */",
+"IMPORT void PrefetchAbort_Handler(void);	/* Prefetch abort exception handler */",
+"IMPORT void DataAbort_Handler(void);		/* Data abort exception handler */",
+"IMPORT void VFPInvalid_Handler(void);		/* VFP invalid handler */",
+"",
+"IMPORT void Default_Handler(void);		/* Default Handler (Undefine Interrupt) */",
+"IMPORT void SVC_default_Handler(void);		/* SVC default Handler (Undefine SVC) */",
+"",
+"/*",
+" * Dispatcher (dispatch.S)",
+" */",
+"IMPORT void knl_dispatch_entry(void);		/* dispatch entry */",
+"IMPORT void knl_dispatch_to_schedtsk(void);	/* force dispatch */",
+"",
+"/*",
+" * Interrupt Control (interrupt.c)",
+" */",
+"IMPORT FP knl_intvec_tbl[N_INTVEC];		/* Interrupt vector table */",
+"IMPORT FP knl_hll_inthdr_tbl[N_INTVEC];		/* High level programming language interrupt handler table */",
+"IMPORT const FP knl_svcvec_tbl[N_SVCHDR];	/* SVC handler table */",
+"",
+"/*",
+" * Interrupt Control (int_asm.S)",
+" */",
+"IMPORT void knl_hll_inthdr(void);		/* High level programming language routine for interrupt handler */",
+"",
+"",
+"/*",
+" * Task context block",
+" */",
+"typedef struct {",
+"	void	*ssp;		/* System stack pointer */",
+"} CTXB;",
+"",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_SYSDEPEND_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (ARMv7-A)",
+" *	Hardware-Dependent System Timer (SysTick) Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_SYSTIMER_",
+"#define _SYSDEPEND_CPU_CORE_SYSTIMER_",
+"",
+"/*",
+" * Timer start processing",
+" *	Initialize the timer and start the periodical timer interrupt.",
+" */",
+"Inline void knl_start_hw_timer( void )",
+"{",
+"	UINT	imask;",
+"	UD	cnt;",
+"",
+"	DI(imask);",
+"",
+"	/* Convert microseconds to timer values */",
+"	cnt = (((TIMER_PERIOD * 1000) * COUNT_PER_SEC) / 1000000LL);",
+"",
+"	out_b(OSTM0_TT, 0x01);		/* Stop timer */",
+"	out_b(OSTM0_CTL, 0x01);		/* Set Interval timer mode & Interrupt enabled */",
+"	out_w(OSTM0_CMP, (UW)cnt);	/* Set compare register */",
+"	out_b(OSTM0_TS, 0x01);		/* Start Timer */",
+"",
+"	EnableInt(INTNO_SYSTICK, INTPRI_SYSTICK);	/* Enable interrupt(INTC level) */",
+"",
+"	EI(imask);",
+"}",
+"",
+"/*",
+" * Clear timer interrupt",
+" *	Clear the timer interrupt request. Depending on the type of",
+" *	hardware, there are two timings for clearing: at the beginning",
+" *	and the end of the interrupt handler.",
+" *	'clear_hw_timer_interrupt()' is called at the beginning of the",
+" *	timer interrupt handler.",
+" *	'end_of_hw_timer_interrupt()' is called at the end of the timer",
+" *	interrupt handler.",
+" *	Use either or both according to hardware.",
+" */",
+"Inline void knl_clear_hw_timer_interrupt( void )",
+"{",
+"}",
+"",
+"Inline void knl_end_of_hw_timer_interrupt( void )",
+"{",
+"	disint();	/* disint() in front of the EOI to prevent inadvertent interrupts. */",
+"	EndOfInt(INTNO_SYSTICK);",
+"}",
+"",
+"/*",
+" * Timer stop processing",
+" *	Stop the timer operation.",
+" *	Called when system stops.",
+" */",
+"Inline void knl_terminate_hw_timer( void )",
+"{",
+"	out_b(OSTM0_TT, 0x01);		/* Stop Timer */",
+"}",
+"",
+"/*",
+" * Get processing time from the previous timer interrupt to the",
+" * current (nanosecond)",
+" *	Consider the possibility that the timer interrupt occurred",
+" *	during the interrupt disable and calculate the processing time",
+" *	within the following",
+" *	range: 0 <= Processing time < CFN_TIMER_PERIOD",
+" */",
+"Inline UW knl_get_hw_timer_nsec( void )",
+"{",
+"	UW	            ofs, max;",
+"",
+"	max = in_w(OSTM0_CMP);		/* Timer cycle value */",
+"	ofs = in_w(OSTM0_CNT);		/* Current timer value (Down count) */",
+"",
+"	return ((max - ofs) * NSEC_PER_COUNT);",
+"}",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_SYSTIMER_ */",
+"/*",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_ARMV7A",
+"/*",
+" *	cpu_cntl.c (ARMv7-A)",
+" *	CPU-Dependent Control",
+" */",
+"#include \"kernel.h\"",
+"#include \"../../../sysdepend.h\"",
+"",
+"#include \"cpu_task.h\"",
+"",
+"",
+"/* Temporal stack used when 'dispatch_to_schedtsk' is called */",
+"Noinit(EXPORT UB knl_tmp_stack[TMP_STACK_SIZE]);",
+"",
+"/* Task independent status */",
+"EXPORT	W	knl_taskindp = 0;",
+"",
+"#if USE_FPU",
+"EXPORT TCB	*knl_fpu_ctx;	/* Task in FPU context */",
+"#endif /* USE_FPU */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Set task register contents (Used in tk_set_reg())",
+" */",
+"EXPORT void knl_set_reg( TCB *tcb, CONST T_REGS *regs, CONST T_EIT *eit, CONST T_CREGS *cregs )",
+"{",
+"	SStackFrame	*ssp;",
+"	INT	i;",
+"",
+"	ssp = tcb->tskctxb.ssp;",
+"",
+"	if ( cregs != NULL ) {",
+"		ssp = cregs->ssp;",
+"		tcb->tskctxb.ssp  = ssp;",
+"	}",
+"",
+"	if ( regs != NULL ) {",
+"		for ( i = 0; i < 4; ++i ) {",
+"			ssp->r[i] = regs->r[i];",
+"		}",
+"		for ( i = 4; i < 12; ++i){",
+"			ssp->r_[i - 4] = regs->r[i];",
+"		}",
+"		ssp->ip = regs->r[12];",
+"		ssp->lr = regs->lr;",
+"	}",
+"",
+"	if ( eit != NULL ) {",
+"		ssp->pc       = eit->pc;",
+"		ssp->cpsr = eit->cpsr;",
+"	}",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Get task register contents (Used in tk_get_reg())",
+" */",
+"EXPORT void knl_get_reg( TCB *tcb, T_REGS *regs, T_EIT *eit, T_CREGS *cregs )",
+"{",
+"	SStackFrame	*ssp;",
+"	INT		i;",
+"",
+"	ssp = tcb->tskctxb.ssp;",
+"",
+"	if ( regs != NULL ) {",
+"		for ( i = 0; i < 4; ++i ) {",
+"			regs->r[i] = ssp->r[i];",
+"		}",
+"		for ( i = 4; i < 12; ++i ){",
+"			regs->r[i] = ssp->r_[i - 4];",
+"		}",
+"		regs->r[12] = ssp->ip;",
+"		regs->lr = ssp->lr;",
+"	}",
+"",
+"	if ( eit != NULL ) {",
+"		eit->pc       = ssp->pc;",
+"		eit->cpsr     = ssp->cpsr;",
+"		eit->taskmode = 0;",
+"	}",
+"",
+"	if ( cregs != NULL ) {",
+"		cregs->ssp   = tcb->tskctxb.ssp;",
+"	}",
+"}",
+"",
+"#if USE_FPU",
+"",
+"LOCAL void save_fpuctx(FPUContext *fpu)",
+"{",
+"	UW	bk_fpexe, bk_fpscr;",
+"",
+"	Asm(\"fmrx %0, fpexc\":\"=r\"(bk_fpexe));		// bk_fpexe = FPEXC",
+"	Asm(\"orr ip, %0, #0x40000000\"::\"r\"(bk_fpexe));	// FPEXC.EN = 1",
+"	Asm(\"fmxr fpexc, ip\");				// VFP enable",
+"",
+"	Asm(\"mov ip, %0\"::\"r\"(fpu));",
+"",
+"	// save VFP context",
+"	Asm(\"fmrx %0, fpscr\":\"=r\"(bk_fpscr));		// Floating-Point Status and Control Register",
+"	Asm(\"stmia ip!, {r0, %0}\"::\"r\"(bk_fpscr));	// (r0 is padding)",
+"	Asm(\"fstmiad ip!, {d0-d15}\");",
+"	Asm(\"fstmiad ip!, {d16-d31}\");",
+"",
+"	Asm(\"fmxr fpexc, %0\"::\"r\"(bk_fpexe));		// restore FPEXC",
+"}",
+"",
+"#ifdef USE_FUNC_TK_SET_CPR",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Set task register contents (Used in tk_set_reg())",
+" */",
+"EXPORT ER knl_set_cpr( TCB *tcb, INT copno, CONST T_COPREGS *copregs)",
+"{",
+"	FPUContext	*fpu;",
+"	INT		i;",
+"	",
+"	fpu = tcb->isstack;",
+"	fpu--;",
+"",
+"	if (tcb == knl_fpu_ctx) {",
+"		save_fpuctx(fpu);	/* save FPU context */",
+"		knl_fpu_ctx = NULL;",
+"	}",
+"",
+"	if( copregs != NULL ){",
+"		for ( i = 0; i < 32; i++ ) {",
+"			fpu->d[i] = copregs->d[i];",
+"		}",
+"		fpu->fpscr = copregs->fpscr;",
+"	}",
+"",
+"	return E_OK;",
+"}",
+"",
+"#endif /* USE_FUNC_TK_SET_CPR */",
+"",
+"#ifdef USE_FUNC_TK_GET_CPR",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Get task FPU register contents (Used in tk_get_cpr())",
+" */",
+"EXPORT ER knl_get_cpr( TCB *tcb, INT copno, T_COPREGS *copregs)",
+"{",
+"	FPUContext	*fpu;",
+"	INT		i;",
+"",
+"	fpu = tcb->isstack;",
+"	fpu--;",
+"",
+"	if (tcb == knl_fpu_ctx) {",
+"		save_fpuctx(fpu);	/* save FPU context */",
+"	}",
+"",
+"	if (copregs != NULL) {",
+"		for (i = 0; i < 32; i++) {",
+"			copregs->d[i] = fpu->d[i];",
+"		}",
+"		copregs->fpscr = fpu->fpscr;",
+"	}",
+"",
+"	return E_OK;",
+"}",
+"#endif /* USE_FUNC_TK_GET_CPR */",
+"#endif /* USE_FPU */",
+"",
+"",
+"#endif /* CPU_CORE_ARMV7A */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (ARMv7-A)",
+" *	CPU-Dependent Status Definition",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_STATUS_",
+"#define _SYSDEPEND_CPU_CORE_STATUS_",
+"",
+"#include <tk/syslib.h>",
+"#include <sys/sysdef.h>",
+"",
+"#include \"sysdepend.h\"",
+"/*",
+" * Start/End critical section",
+" */",
+"#define BEGIN_CRITICAL_SECTION	{ UINT _intsts_ = disint();",
+"#define END_CRITICAL_SECTION	if ( !isDI(_intsts_)			\\",
+"				  && knl_ctxtsk != knl_schedtsk		\\",
+"				  && !knl_isTaskIndependent()		\\",
+"				  && !knl_dispatch_disabled ) {		\\",
+"					knl_dispatch();			\\",
+"				}					\\",
+"				enaint(_intsts_); }",
+"",
+"/*",
+" * Start/End interrupt disable section",
+" */",
+"#define BEGIN_DISABLE_INTERRUPT	{ UINT _intsts_ = disint();",
+"#define END_DISABLE_INTERRUPT	enaint(_intsts_); }",
+"",
+"/*",
+" * Interrupt enable/disable",
+" */",
+"#define ENABLE_INTERRUPT	{ enaint(0); }",
+"#define DISABLE_INTERRUPT	{ disint(); }",
+"",
+"/*",
+" * Enable interrupt nesting",
+" *	Enable the interrupt that has a higher priority than 'level.'",
+" */",
+"#define ENABLE_INTERRUPT_UPTO(level)	{ enaint(0); }",
+"",
+"/*",
+" *  Task-independent control",
+" */",
+"IMPORT	W	knl_taskindp;		/* Task independent status */",
+"",
+"/*",
+" * If it is the task-independent part, TRUE",
+" */",
+"Inline BOOL knl_isTaskIndependent( void )",
+"{",
+"	return ( knl_taskindp > 0 )? TRUE: FALSE;",
+"}",
+"/*",
+" * Move to/Restore task independent part",
+" */",
+"Inline void knl_EnterTaskIndependent( void )",
+"{",
+"	knl_taskindp++;",
+"}",
+"Inline void knl_LeaveTaskIndependent( void )",
+"{",
+"	knl_taskindp--;",
+"}",
+"",
+"/*",
+" * Move to/Restore task independent part",
+" */",
+"#define ENTER_TASK_INDEPENDENT	{ knl_EnterTaskIndependent(); }",
+"#define LEAVE_TASK_INDEPENDENT	{ knl_LeaveTaskIndependent(); }",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" *	Check system state",
+" */",
+"",
+"/*",
+" * When a system call is called from the task independent part, TRUE",
+" */",
+"#define in_indp()	( knl_isTaskIndependent() || knl_ctxtsk == NULL )",
+"",
+"",
+"Inline UINT knl_getCPSR(void)",
+"{",
+"	UINT rtn;",
+"	asm(\"mrs     %0, cpsr\":\"=r\"(rtn));	/* save CPSR to ret */",
+"	return rtn;",
+"}",
+"",
+"/*",
+" * When a system call is called during dispatch disable, TRUE",
+" * Also include the task independent part as during dispatch disable.",
+" */",
+"#define in_ddsp()	( knl_dispatch_disabled		\\",
+"			|| in_indp() 			\\",
+"			|| (knl_getCPSR() & PSR_I) )",
+"",
+"/*",
+" * When a system call is called during CPU lock (interrupt disable), TRUE",
+" * Also include the task independent part as during CPU lock.",
+" */",
+"#define in_loc()	( (knl_getCPSR() & PSR_I)	\\",
+"			|| in_indp() )",
+"",
+"/*",
+" * When a system call is called during executing the quasi task part, TRUE",
+" * Valid only when in_indp() == FALSE because it is not discriminated from ",
+" * the task independent part. ",
+" */",
+"#define in_qtsk()	( knl_ctxtsk->sysmode > knl_ctxtsk->isysmode )",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" *	Task dispatcher startup",
+" */",
+"Inline void knl_force_dispatch( void )",
+"{",
+"	Asm(\"svc %0\"::\"i\"(SVC_FORCE_DISPATCH):\"lr\");",
+"}",
+"Inline void knl_dispatch( void )",
+"{",
+"	Asm(\"svc %0\"::\"i\"(SVC_DISPATCH):\"lr\");",
+"}",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_STATUS_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (ARMv7-A)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_CPUTASK_",
+"#define _SYSDEPEND_CPU_CORE_CPUTASK_",
+"",
+"/*",
+" * System stack configuration at task startup",
+" */",
+"typedef struct {",
+"	UW	r_[8];		/* R4-R11 */",
+"	// Exception entry stack",
+"	UW	r[4];		/* R0-R3 */",
+"	UW	ip;		/* R12 */",
+"	void	*lr;		/* lr */",
+"	void	*pc;		/* pc */",
+"	UW	cpsr;		/* cpsr */",
+"} SStackFrame;",
+"",
+"/*",
+" * Size of system stack area destroyed by 'make_dormant()'",
+" * In other words, the size of area required to write by 'knl_setup_context().'",
+" */",
+"#define DORMANT_STACK_SIZE	( sizeof(SStackFrame) + 0x10 )",
+"",
+"#if USE_FPU",
+"typedef struct {",
+"	UW	rsv;",
+"	UW	fpscr;",
+"	UD	d[32];",
+"} FPUContext;",
+"",
+"IMPORT TCB	*knl_fpu_ctx;	/* Task in FPU context */",
+"",
+"#endif /* USE_FPU */",
+"",
+"/*",
+" * Create stack frame for task startup",
+" *	Call from 'make_dormant()'",
+" */",
+"Inline void knl_setup_context( TCB *tcb )",
+"{",
+"	SStackFrame	*ssp;",
+"",
+"	ssp = tcb->isstack;",
+"",
+"#if USE_FPU",
+"	if ( (tcb->tskatr & TA_FPU) != 0 ) {",
+"		/* Initialize FPU context */",
+"		FPUContext *fpu	= tcb->isstack;",
+"		(--fpu)->fpscr	= FPSCR_INIT;",
+"		ssp = (SStackFrame*)fpu;",
+"	}",
+"#endif /* USE_FPU */",
+"",
+"	ssp--;",
+"",
+"	/* CPU context initialization */",
+"	ssp->lr = 0;",
+"	ssp->cpsr = PSR_SVC;		/* Initial CPSR */",
+"	ssp->pc = (void *)tcb->task;	/* Task startup address */",
+"",
+"	tcb->tskctxb.ssp = ssp;		/* System stack */",
+"}",
+"",
+"/*",
+" * Set task startup code",
+" *	Called by 'tk_sta_tsk()' processing.",
+" */",
+"Inline void knl_setup_stacd( TCB *tcb, INT stacd )",
+"{",
+"	SStackFrame	*ssp = tcb->tskctxb.ssp;",
+"",
+"	ssp->r[0] = stacd;",
+"	ssp->r[1] = (VW)tcb->exinf;",
+"}",
+"",
+"/*",
+" * Delete task contexts",
+" */",
+"Inline void knl_cleanup_context( TCB *tcb )",
+"{",
+"#if	USE_FPU",
+"	if(tcb->tskatr & TA_FPU){",
+"		if (knl_fpu_ctx == tcb) {",
+"			knl_fpu_ctx = NULL;",
+"		}",
+"	}",
+"#endif	// USE_FPU",
+"}",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_CPUTASK_ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_ARMV7A",
+"",
+"/*",
+" *	exc_hdr.c (ARMv7-A)",
+" *	Exception handler",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"#include <tm/tmonitor.h>",
+"#include <kernel.h>",
+"#include \"../../../sysdepend.h\"",
+"",
+"#if USE_EXCEPTION_DBG_MSG",
+"	#define EXCEPTION_DBG_MSG(a)	tm_printf((UB*)a)",
+"#else",
+"	#define EXCEPTION_DBG_MSG(a)",
+"#endif",
+"",
+"/*",
+" * Undefined instruction exception handler",
+" */",
+"WEAK_FUNC EXPORT void FIQ_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"FIQ\\n\");",
+"	while(1);",
+"}",
+"",
+"",
+"/*",
+" * Undefined instruction exception handler",
+" */",
+"WEAK_FUNC EXPORT void UndefinedInst_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"Undef\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * Prefetch abort exception handler",
+" */",
+"WEAK_FUNC EXPORT void PrefetchAbort_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"iabort\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * Data abort exception handler",
+" */",
+"WEAK_FUNC EXPORT void DataAbort_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"dabort\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * VFP invalid handler",
+" */",
+"WEAK_FUNC EXPORT void VFPInvalid_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"VFP invalid\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * Default Handler (Undefine Interrupt) ",
+" */",
+"WEAK_FUNC EXPORT void Default_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"Undefine Interrupt\\n\");",
+"	while(1);",
+"}",
+"",
+"",
+"/*",
+" * SVC default Handler (Undefine SVC) ",
+" */",
+"WEAK_FUNC EXPORT void SVC_default_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"Undefine SVC\\n\");",
+"	while(1);",
+"}",
+"",
+"",
+"#endif	/* CPU_CORE_ARMV7A */﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_ARMV7A",
+"",
+"/*",
+" *	interrupt.c  (ARMv7-A)",
+" *	Interrupt control",
+" */",
+"",
+"#include <kernel.h>",
+"#include \"../../../sysdepend.h\"",
+"",
+"/* Interrupt vector table */",
+"Noinit(EXPORT FP knl_intvec_tbl[N_INTVEC]);",
+"",
+"/* High level programming language interrupt handler table */",
+"Noinit(EXPORT FP knl_hll_inthdr_tbl[N_INTVEC]);",
+"",
+"/* SVC handler table */",
+"EXPORT const FP knl_svcvec_tbl[N_SVCHDR] = {",
+"	NULL, NULL, NULL, NULL, NULL, NULL,	/* 0 ~ 5 : reserved. */",
+"	NULL,					/* 6 : micro T-Kernel system call */",
+"	knl_dispatch_to_schedtsk,		/* 7 : force dispatch */",
+"	knl_dispatch_entry,			/* 8 : task dispatcher */",
+"	NULL,					/* 9 : debug support function */",
+"	NULL					/* 10: Extended SVC */",
+"};",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" * Set interrupt handler (Used in tk_def_int())",
+" */",
+"EXPORT ER knl_define_inthdr( INT intno, ATR intatr, FP inthdr )",
+"{",
+"	if((inthdr != NULL) && ((intatr & TA_HLNG) != 0 )) {",
+"		knl_hll_inthdr_tbl[intno] = inthdr;",
+"		inthdr = knl_hll_inthdr;",
+"	}",
+"	knl_intvec_tbl[intno] = inthdr;",
+"",
+"	return E_OK;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt initialize",
+" */",
+"",
+" /* GICD_ICFGR(n) Register default value */",
+"LOCAL const UW GICD_ICFGR_inival[] =",
+"{				//           Interrupt ID",
+"	0xAAAAAAAAuL,		// GICD_ICFGR0  :  15 to   0",
+"	0x55540000uL,		// GICD_ICFGR1  :  19 to  16",
+"	0xFD555555uL,		// GICD_ICFGR2  :  47 to  32",
+"	0x7FFFFFFFuL,		// GICD_ICFGR3  :  63 to  48",
+"	0x55555555uL,		// GICD_ICFGR4  :  79 to  64",
+"	0xD57F5555uL,		// GICD_ICFGR5  :  95 to  80",
+"	0xFFFFFFFFuL,		// GICD_ICFGR6  : 111 to  96",
+"	0xFFFFFFFFuL,		// GICD_ICFGR7  : 127 to 112",
+"	0xFFFFFFFFuL,		// GICD_ICFGR8  : 143 to 128",
+"	0xFFFFFFFFuL,		// GICD_ICFGR9  : 159 to 144",
+"	0xFFFFFFFFuL,		// GICD_ICFGR10 : 175 to 160",
+"	0xFFFFFFFFuL,		// GICD_ICFGR11 : 191 to 176",
+"	0xFFFFFFFFuL,		// GICD_ICFGR12 : 207 to 192",
+"	0xFFFFFFFFuL,		// GICD_ICFGR13 : 223 to 208",
+"	0xFFFFFFFFuL,		// GICD_ICFGR14 : 239 to 224",
+"	0x7D5FD57FuL,		// GICD_ICFGR15 : 255 to 240",
+"	0x557D7DDFuL,		// GICD_ICFGR16 : 271 to 256",
+"	0x557D557DuL,		// GICD_ICFGR17 : 287 to 272",
+"	0x5555557DuL,		// GICD_ICFGR18 : 303 to 288",
+"	0x55555555uL,		// GICD_ICFGR19 : 319 to 304",
+"	0xF5555555uL,		// GICD_ICFGR20 : 335 to 320",
+"	0x5555FFFFuL,		// GICD_ICFGR21 : 351 to 336",
+"	0x55555555uL,		// GICD_ICFGR22 : 367 to 352",
+"	0xFFDD5555uL,		// GICD_ICFGR23 : 383 to 368",
+"	0xFFFFFFFFuL,		// GICD_ICFGR24 : 399 to 384",
+"	0xFFFFFFFFuL,		// GICD_ICFGR25 : 415 to 400",
+"	0xFFFFFFFFuL,		// GICD_ICFGR26 : 431 to 416",
+"	0x5FFFFFDFuL,		// GICD_ICFGR27 : 447 to 432",
+"	0x55555555uL,		// GICD_ICFGR28 : 463 to 448",
+"	0x55555555uL,		// GICD_ICFGR29 : 479 to 464",
+"	0x55555555uL,		// GICD_ICFGR30 : 495 to 480",
+"	0x55555555uL,		// GICD_ICFGR31 : 511 to 496",
+"};",
+"",
+"EXPORT ER knl_init_interrupt( void )",
+"{",
+"	INT	i;",
+"	_UW	*reg;",
+"",
+"	/* Initialization of interrupt vector table */",
+"	for(i = 0; i < N_INTVEC; i++) knl_intvec_tbl[i] = (FP)NULL;",
+"",
+"	/* Register exception handler used on OS */",
+"	knl_define_inthdr(INTNO_SYSTICK, TA_HLNG, (FP)knl_timer_handler);	/* System Timer Interruput */",
+"",
+"	/* GIC initialization */",
+"	reg = (_UW*)GICD_IGROUPR(0);",
+"	for (i = 0; i < GICD_IGROUPR_N; i++) {",
+"		reg[i] = 0x00000000uL;		/* All interrupts are Group 0 */",
+"	}",
+"",
+"	reg = (_UW*)GICD_ICFGR(0);",
+"	for (i = 0; i < GICD_ICFGR_N; i++) {",
+"		reg[i] = GICD_ICFGR_inival[i];	/* Copy from the default table */",
+"	}",
+"",
+"	reg = (_UW*)GICD_IPRIORITYR(0);",
+"	for (i = 0; i < GICD_IPRIORITYR_N; i++) {",
+"		reg[i] = 0xF8F8F8F8uL;		/* All priorities are 31 */",
+"	}",
+"",
+"	reg = (_UW*)GICD_ITARGETR(0);",
+"	for (i = 8; i < GICD_ITARGETR_N; i++) {",
+"		reg[i] = 0x01010101uL;		/* Target processor is CPU-0 */",
+"	}",
+"	",
+"	reg = (_UW*)GICD_ICENABLER(0);",
+"	for (i = 0; i < GICD_ICENABLER_N; i++) {",
+"		reg[i] = 0xFFFFFFFFuL;",
+"	}",
+"",
+"	out_w(GICC_PMR, 31<<3);			/* Allow all interrupts */",
+"	out_w(GICC_BPR, 0x00000002UL);",
+"	out_w(GICC_CTLR, 0x00000003UL);",
+"	out_w(GICD_CTLR, 0x00000001uL);",
+"",
+"	return E_OK;",
+"}",
+"",
+"#endif /* CPU_CORE_ARMV7A *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	offset.h (ARMv7-A)",
+" *	TCB Offset Definition",
+" */",
+"",
+"#ifndef _OFFSET_",
+"#define _OFFSET_",
+"",
+"/*----------------------------------------------------------------------*/",
+"/*	offset data in TCB						*/",
+"/*----------------------------------------------------------------------*/",
+"",
+"#define TCB_tskid	8",
+"#define TCB_tskatr	16",
+"#define TCB_tskctxb	24",
+"#define TCB_state	39",
+"#define	TCB_isstack	100",
+"",
+"#define CTXB_ssp	0",
+"",
+"",
+"/*----------------------------------------------------------------------*/",
+"/*	The size of the FPU context on the stack			*/",
+"/*----------------------------------------------------------------------*/",
+"#define	FPU_context	264",
+"",
+"#endif /* _OFFSET_ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_ARMV7A",
+"",
+"/*",
+" *	reset_main.c  (ARMv7-A)",
+" *	Reset handler Main routine (Called from reset_hdl.S)",
+" */",
+"",
+"",
+"#include \"kernel.h\"",
+"#include \"../../../sysdepend.h\"",
+"",
+"#include <tm/tmonitor.h>",
+"",
+"/* Low level memory manager information */",
+"EXPORT	void	*knl_lowmem_top;		// Head of area (Low address)",
+"EXPORT	void	*knl_lowmem_limit;		// End of area (High address)",
+"",
+"IMPORT	const void *_data_org;",
+"IMPORT	const void *_data_start;",
+"IMPORT	const void *_data_end;",
+"IMPORT	const void *_bss_start;",
+"IMPORT	const void *_bss_end;",
+"IMPORT	const void *_HeapStart;",
+"",
+"void L1CacheInit(void);",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Reset Handler Main routine (Called from reset_hdl.S)",
+" */",
+"",
+"EXPORT void reset_main(void)",
+"{",
+"	UW	*src, *top, *end;",
+"",
+"	/* Startup Hardware */",
+"	knl_startup_hw();",
+"",
+"	/* Load .data to ram */",
+"",
+"	src = (UW*)&_data_org;",
+"	top = (UW*)&_data_start;",
+"	end = (UW*)&_data_end;",
+"	while(top < end) {",
+"		*top++ = *src++;",
+"	}",
+"",
+"	/* Initialize .bss */",
+"	top = (UW*)&_bss_start;",
+"	end = (UW*)&_bss_end;",
+"	while( top < end) {",
+"		*top++ = 0;",
+"	}",
+"",
+"#if USE_IMALLOC",
+"	/* Set System memory area */",
+"	if(INTERNAL_RAM_START > SYSTEMAREA_TOP) {",
+"		knl_lowmem_top = (UW*)INTERNAL_RAM_START;",
+"	} else {",
+"		knl_lowmem_top = (UW*)SYSTEMAREA_TOP;",
+"	}",
+"	if((UW)knl_lowmem_top < (UW)&_HeapStart) {",
+"		knl_lowmem_top = (UW*)&_HeapStart;",
+"	}",
+"",
+"	if((SYSTEMAREA_END != 0) && (INTERNAL_RAM_END > SYSTEMAREA_END)) {",
+"		knl_lowmem_limit = (UW*)(SYSTEMAREA_END);",
+"	} else {",
+"		knl_lowmem_limit = (UW*)(INTERNAL_RAM_END);",
+"	}",
+"#endif	/* USE_IMALLOC */",
+"",
+"	L1CacheInit();		/* L1 cache initialize */",
+"",
+"	/* Startup Kernel */",
+"	main();		/**** No return ****/",
+"	while(1);	/* guard - infinite loops */",
+"}",
+"",
+"",
+"#endif	/* CPU_CORE_ARMV7A */",
+"",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06A",
+" *",
+" *    Copyright (C) 2006-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (ARMv7-A)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_SYSDEPEND_",
+"#define _SYSDEPEND_CPU_CORE_SYSDEPEND_",
+"",
+"/*",
+" *    Reset Handler (reset_hdl.S)",
+" */",
+"IMPORT void Reset_Handler(void);		/* Reset Handler */",
+"",
+"/*",
+" *    Exception Handler (exc_hdr.c)",
+" */",
+"IMPORT void UndefinedInst_Handler(void);	/* Undefined instruction exception handler */",
+"IMPORT void PrefetchAbort_Handler(void);	/* Prefetch abort exception handler */",
+"IMPORT void DataAbort_Handler(void);		/* Data abort exception handler */",
+"IMPORT void VFPInvalid_Handler(void);		/* VFP invalid handler */",
+"",
+"IMPORT void Default_Handler(void);		/* Default Handler (Undefine Interrupt) */",
+"IMPORT void SVC_default_Handler(void);		/* SVC default Handler (Undefine SVC) */",
+"",
+"/*",
+" * Dispatcher (dispatch.S)",
+" */",
+"IMPORT void knl_dispatch_entry(void);		/* dispatch entry */",
+"IMPORT void knl_dispatch_to_schedtsk(void);	/* force dispatch */",
+"",
+"/*",
+" * Interrupt Control (interrupt.c)",
+" */",
+"IMPORT FP knl_intvec_tbl[N_INTVEC];		/* Interrupt vector table */",
+"IMPORT FP knl_hll_inthdr_tbl[N_INTVEC];		/* High level programming language interrupt handler table */",
+"IMPORT const FP knl_svcvec_tbl[N_SVCHDR];	/* SVC handler table */",
+"",
+"/*",
+" * Interrupt Control (int_asm.S)",
+" */",
+"IMPORT void knl_hll_inthdr(void);		/* High level programming language routine for interrupt handler */",
+"",
+"",
+"/*",
+" * Task context block",
+" */",
+"typedef struct {",
+"	void	*ssp;		/* System stack pointer */",
+"} CTXB;",
+"",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_SYSDEPEND_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (ARMv7-A)",
+" *	Hardware-Dependent System Timer (SysTick) Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_SYSTIMER_",
+"#define _SYSDEPEND_CPU_CORE_SYSTIMER_",
+"",
+"/*",
+" * Timer start processing",
+" *	Initialize the timer and start the periodical timer interrupt.",
+" */",
+"Inline void knl_start_hw_timer( void )",
+"{",
+"	UINT	imask;",
+"	UD	cnt;",
+"",
+"	DI(imask);",
+"",
+"	/* Convert microseconds to timer values */",
+"	cnt = (((TIMER_PERIOD * 1000) * COUNT_PER_SEC) / 1000000LL);",
+"",
+"	out_b(OSTM0_TT, 0x01);		/* Stop timer */",
+"	out_b(OSTM0_CTL, 0x01);		/* Set Interval timer mode & Interrupt enabled */",
+"	out_w(OSTM0_CMP, (UW)cnt);	/* Set compare register */",
+"	out_b(OSTM0_TS, 0x01);		/* Start Timer */",
+"",
+"	EnableInt(INTNO_SYSTICK, INTPRI_SYSTICK);	/* Enable interrupt(INTC level) */",
+"",
+"	EI(imask);",
+"}",
+"",
+"/*",
+" * Clear timer interrupt",
+" *	Clear the timer interrupt request. Depending on the type of",
+" *	hardware, there are two timings for clearing: at the beginning",
+" *	and the end of the interrupt handler.",
+" *	'clear_hw_timer_interrupt()' is called at the beginning of the",
+" *	timer interrupt handler.",
+" *	'end_of_hw_timer_interrupt()' is called at the end of the timer",
+" *	interrupt handler.",
+" *	Use either or both according to hardware.",
+" */",
+"Inline void knl_clear_hw_timer_interrupt( void )",
+"{",
+"}",
+"",
+"Inline void knl_end_of_hw_timer_interrupt( void )",
+"{",
+"	disint();	/* disint() in front of the EOI to prevent inadvertent interrupts. */",
+"	EndOfInt(INTNO_SYSTICK);",
+"}",
+"",
+"/*",
+" * Timer stop processing",
+" *	Stop the timer operation.",
+" *	Called when system stops.",
+" */",
+"Inline void knl_terminate_hw_timer( void )",
+"{",
+"	out_b(OSTM0_TT, 0x01);		/* Stop Timer */",
+"}",
+"",
+"/*",
+" * Get processing time from the previous timer interrupt to the",
+" * current (nanosecond)",
+" *	Consider the possibility that the timer interrupt occurred",
+" *	during the interrupt disable and calculate the processing time",
+" *	within the following",
+" *	range: 0 <= Processing time < CFN_TIMER_PERIOD",
+" */",
+"Inline UW knl_get_hw_timer_nsec( void )",
+"{",
+"	UW	            ofs, max;",
+"",
+"	max = in_w(OSTM0_CMP);		/* Timer cycle value */",
+"	ofs = in_w(OSTM0_CNT);		/* Current timer value (Down count) */",
+"",
+"	return ((max - ofs) * NSEC_PER_COUNT);",
+"}",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_SYSTIMER_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_ARMV7M",
+"/*",
+" *	cpu_cntl.c (ARMv7-M)",
+" *	CPU-Dependent Control",
+" */",
+"#include \"kernel.h\"",
+"#include \"../../../sysdepend.h\"",
+"",
+"#include \"cpu_task.h\"",
+"",
+"",
+"/* Temporal stack used when 'dispatch_to_schedtsk' is called */",
+"Noinit(EXPORT UB knl_tmp_stack[TMP_STACK_SIZE]);",
+"",
+"/* Task independent status */",
+"EXPORT	W	knl_taskindp = 0;",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Set task register contents (Used in tk_set_reg())",
+" */",
+"EXPORT void knl_set_reg( TCB *tcb, CONST T_REGS *regs, CONST T_EIT *eit, CONST T_CREGS *cregs )",
+"{",
+"	SStackFrame	*ssp;",
+"	INT	i;",
+"",
+"#if USE_FPU",
+"	UW		*tmpp;",
+"",
+"	tmpp = (UW*)(( cregs != NULL )? cregs->ssp: tcb->tskctxb.ssp);",
+"	if(tcb->tskatr & TA_FPU) {",
+"		if(*tmpp & EXPRN_NO_FPU) {	/* FPU register is not saved */",
+"			ssp = (SStackFrame*)tmpp;",
+"		} else {		/* FPU register is saved */",
+"			ssp = (SStackFrame*)(((SStackFrame_wFPU*)tmpp)->r_);",
+"		}",
+"	} else {",
+"		ssp = (SStackFrame*)tmpp;",
+"	}",
+"#else",
+"	ssp = (SStackFrame*)(( cregs != NULL )? cregs->ssp: tcb->tskctxb.ssp);",
+"#endif",
+"	",
+"	if ( regs != NULL ) {",
+"		for ( i = 0; i < 4; ++i ) {",
+"			ssp->r[i] = regs->r[i];",
+"		}",
+"		for ( i = 4; i < 12; ++i){",
+"			ssp->r_[i - 4] = regs->r[i];",
+"		}",
+"	}",
+"",
+"	if ( eit != NULL ) {",
+"		ssp->pc = eit->pc;",
+"	}",
+"",
+"	if ( cregs != NULL ) {",
+"		tcb->tskctxb.ssp  = cregs->ssp;",
+"	}",
+"}",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Get task register contents (Used in tk_get_reg())",
+" */",
+"EXPORT void knl_get_reg( TCB *tcb, T_REGS *regs, T_EIT *eit, T_CREGS *cregs )",
+"{",
+"	SStackFrame	*ssp;",
+"	INT		i;",
+"",
+"#if USE_FPU",
+"	UW		*tmpp;",
+"",
+"	tmpp = (UW*)tcb->tskctxb.ssp;",
+"	if(tcb->tskatr & TA_FPU) {",
+"		if(*tmpp & EXPRN_NO_FPU) {	/* FPU register is not saved */",
+"			ssp = (SStackFrame*)tmpp;",
+"		} else {		/* FPU register is saved */",
+"			ssp = (SStackFrame*)&(((SStackFrame_wFPU*)tmpp)->exp_ret);",
+"		}",
+"	} else {",
+"		ssp = (SStackFrame*)tmpp;",
+"	}",
+"#else",
+"	ssp = (SStackFrame*)tcb->tskctxb.ssp;",
+"#endif",
+"",
+"	if ( regs != NULL ) {",
+"		for ( i = 0; i < 4; ++i ) {",
+"			regs->r[i] = ssp->r[i];",
+"		}",
+"		for ( i = 4; i < 12; ++i ){",
+"			regs->r[i] = ssp->r_[i - 4];",
+"		}",
+"		regs->r[12] = ssp->ip;",
+"		regs->lr = ssp->lr;",
+"	}",
+"",
+"	if ( eit != NULL ) {",
+"		eit->pc       = ssp->pc;",
+"		eit->taskmode = 0;",
+"	}",
+"",
+"	if ( cregs != NULL ) {",
+"		cregs->ssp   = tcb->tskctxb.ssp;",
+"	}",
+"}",
+"",
+"#if USE_FPU",
+"#ifdef USE_FUNC_TK_SET_CPR",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Set task register contents (Used in tk_set_reg())",
+" */",
+"EXPORT ER knl_set_cpr( TCB *tcb, INT copno, CONST T_COPREGS *copregs)",
+"{",
+"	SStackFrame_wFPU	*ssp;",
+"	INT	i;",
+"",
+"	ssp = (SStackFrame_wFPU*)(tcb->tskctxb.ssp);",
+"",
+"	if(ssp->ufpu & EXPRN_NO_FPU ) {	/* FPU register is not saved */",
+"		return E_CTX;",
+"	}",
+"",
+"	for ( i = 0; i < 16; ++i ) {",
+"		ssp->s[i] = copregs->s[i];",
+"		ssp->s_[i] = copregs->s[i + 16];",
+"	}",
+"	ssp->fpscr = copregs->fpscr;",
+"",
+"	return E_OK;",
+"}",
+"",
+"#endif /* USE_FUNC_TK_SET_CPR */",
+"",
+"#ifdef USE_FUNC_TK_GET_CPR",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Get task FPU register contents (Used in tk_get_cpr())",
+" */",
+"EXPORT ER knl_get_cpr( TCB *tcb, INT copno, T_COPREGS *copregs)",
+"{",
+"	SStackFrame_wFPU	*ssp;",
+"	INT	i;",
+"",
+"	ssp = (SStackFrame_wFPU*)(tcb->tskctxb.ssp);",
+"",
+"	if(ssp->ufpu & EXPRN_NO_FPU ) {	/* FPU register is not saved */",
+"		return E_CTX;",
+"	}",
+"",
+"	for ( i = 0; i < 16; ++i ) {",
+"		copregs->s[i] = ssp->s[i];",
+"		copregs->s[i + 16] = ssp->s_[i];",
+"	}",
+"	copregs->fpscr = ssp->fpscr;",
+"",
+"	return E_OK;",
+"}",
+"#endif /* USE_FUNC_TK_GET_CPR */",
+"#endif /* USE_FPU */",
+"",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" *	Task dispatcher startup",
+" */",
+"EXPORT void knl_force_dispatch( void )",
+"{",
+"	knl_dispatch_disabled = DDS_DISABLE_IMPLICIT;",
+"	knl_ctxtsk = NULL;",
+"	*(_UW*)SCB_ICSR = ICSR_PENDSVSET;	/* pendsv exception */",
+"	set_basepri(0);",
+"}",
+"",
+"EXPORT void knl_dispatch( void )",
+"{",
+"	*(_UW*)SCB_ICSR = ICSR_PENDSVSET;	/* pendsv exception */",
+"}",
+"",
+"#endif /* CPU_CORE_ARMV7M */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (ARMv7-M)",
+" *	CPU-Dependent Status Definition",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_STATUS_",
+"#define _SYSDEPEND_CPU_CORE_STATUS_",
+"",
+"#include <tk/syslib.h>",
+"#include <sys/sysdef.h>",
+"",
+"#include \"sysdepend.h\"",
+"/*",
+" * Start/End critical section",
+" */",
+"#define BEGIN_CRITICAL_SECTION	{ UINT _basepri_ = disint();",
+"#define END_CRITICAL_SECTION	if ( !isDI(_basepri_)			\\",
+"				  && knl_ctxtsk != knl_schedtsk		\\",
+"				  && !knl_dispatch_disabled ) {		\\",
+"					knl_dispatch();			\\",
+"				}					\\",
+"				set_basepri(_basepri_); }",
+"",
+"/*",
+" * Start/End interrupt disable section",
+" */",
+"#define BEGIN_DISABLE_INTERRUPT	{ UINT _basepri_ = disint();",
+"#define END_DISABLE_INTERRUPT	set_basepri(_basepri_); }",
+"",
+"/*",
+" * Interrupt enable/disable",
+" */",
+"#define ENABLE_INTERRUPT	{ set_basepri(0); }",
+"#define DISABLE_INTERRUPT	{ disint(); }",
+"",
+"/*",
+" * Enable interrupt nesting",
+" *	Enable the interrupt that has a higher priority than 'level.'",
+" */",
+"#define ENABLE_INTERRUPT_UPTO(level)	{ set_basepri(0); }",
+"",
+"/*",
+" *  Task-independent control",
+" */",
+"IMPORT	W	knl_taskindp;		/* Task independent status */",
+"",
+"/*",
+" * If it is the task-independent part, TRUE",
+" */",
+"Inline BOOL knl_isTaskIndependent( void )",
+"{",
+"	return ( knl_taskindp > 0 )? TRUE: FALSE;",
+"}",
+"/*",
+" * Move to/Restore task independent part",
+" */",
+"Inline void knl_EnterTaskIndependent( void )",
+"{",
+"	knl_taskindp++;",
+"}",
+"Inline void knl_LeaveTaskIndependent( void )",
+"{",
+"	knl_taskindp--;",
+"}",
+"",
+"/*",
+" * Move to/Restore task independent part",
+" */",
+"#define ENTER_TASK_INDEPENDENT	{ knl_EnterTaskIndependent(); }",
+"#define LEAVE_TASK_INDEPENDENT	{ knl_LeaveTaskIndependent(); }",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" *	Check system state",
+" */",
+"",
+"/*",
+" * When a system call is called from the task independent part, TRUE",
+" */",
+"#define in_indp()	( knl_isTaskIndependent() || knl_ctxtsk == NULL )",
+"",
+"/*",
+" * When a system call is called during dispatch disable, TRUE",
+" * Also include the task independent part as during dispatch disable.",
+" */",
+"#define in_ddsp()	( knl_dispatch_disabled	\\",
+"			|| in_indp()		\\",
+"			|| isDI(get_basepri()) )",
+"",
+"/*",
+" * When a system call is called during CPU lock (interrupt disable), TRUE",
+" * Also include the task independent part as during CPU lock.",
+" */",
+"#define in_loc()	( isDI(get_basepri())		\\",
+"			|| in_indp() )",
+"",
+"/*",
+" * When a system call is called during executing the quasi task part, TRUE",
+" * Valid only when in_indp() == FALSE because it is not discriminated from ",
+" * the task independent part. ",
+" */",
+"#define in_qtsk()	( knl_ctxtsk->sysmode > knl_ctxtsk->isysmode )",
+"",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_STATUS_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (ARMv7-M)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_CPUTASK_",
+"#define _SYSDEPEND_CPU_CORE_CPUTASK_",
+"",
+"/*",
+" * System stack configuration at task startup",
+" */",
+"typedef struct {",
+"	UW	exp_ret;	/* Exception return */",
+"	UW	r_[8];		/* R4-R11 */",
+"	// Exception entry stack",
+"	UW	r[4];		/* R0-R3 */",
+"	UW	ip;		/* R12 */",
+"	void	*lr;		/* lr */",
+"	void	*pc;		/* pc */",
+"	UW	xpsr;		/* xpsr */",
+"} SStackFrame;",
+"",
+"/*",
+" * Size of system stack area destroyed by 'make_dormant()'",
+" * In other words, the size of area required to write by 'knl_setup_context().'",
+" */",
+"#define DORMANT_STACK_SIZE	( sizeof(VW) * 7 ) /* To 'R4' position */",
+"",
+"#if USE_FPU",
+"typedef struct {",
+"	UW	ufpu;		/* FPU usage flag */",
+"	UW	s_[16];		/* S16-S31 */",
+"",
+"	UW	exp_ret;	/* Exception return */",
+"	UW	r_[8];		/* R4-R11 */",
+"",
+"	// Exception entry stack",
+"	UW	r[4];		/* R0-R3 */",
+"	UW	ip;		/* R12 */",
+"	void	*lr;		/* lr */",
+"	void	*pc;		/* pc */",
+"	UW	xpsr;		/* xpsr */",
+"",
+"	UW	s[16];		/* S0-S15 */",
+"	UW	fpscr;		/* fpscr */",
+"} SStackFrame_wFPU;",
+"",
+"#define	EXPRN_NO_FPU		0x00000010	/* FPU usage flag  0:use 1:no use */",
+"",
+"#endif /* USE_FPU */",
+"",
+"/*",
+" * Create stack frame for task startup",
+" *	Call from 'make_dormant()'",
+" */",
+"Inline void knl_setup_context( TCB *tcb )",
+"{",
+"	SStackFrame	*ssp;",
+"",
+"	ssp = tcb->isstack;",
+"	ssp--;",
+"",
+"	/* CPU context initialization */",
+"	ssp->exp_ret	= 0xFFFFFFF9;",
+"	ssp->lr		= 0;",
+"	ssp->xpsr	= 0x01000000;		/* Initial SR */",
+"	ssp->pc = (void*)((UW)tcb->task & ~0x00000001UL);	/* Task startup address */",
+"",
+"	tcb->tskctxb.ssp = ssp;		/* System stack pointer */",
+"}",
+"",
+"/*",
+" * Set task startup code",
+" *	Called by 'tk_sta_tsk()' processing.",
+" */",
+"Inline void knl_setup_stacd( TCB *tcb, INT stacd )",
+"{",
+"	SStackFrame	*ssp;",
+"	",
+"	ssp = tcb->tskctxb.ssp;",
+"",
+"	ssp->r[0] = stacd;",
+"	ssp->r[1] = (VW)tcb->exinf;",
+"}",
+"",
+"/*",
+" * Delete task contexts",
+" */",
+"Inline void knl_cleanup_context( TCB *tcb )",
+"{",
+"#if USE_FPU		/* Clear CONTROL.FPCA */",
+"	UW	control;",
+"",
+"	if(tcb == knl_ctxtsk) {",
+"		/* Clear CONTROL.FPCA */",
+"		Asm(\"mrs %0, control\":\"=r\"(control));",
+"		control &= (1<<2);",
+"		Asm(\"msr control, %0\"::\"r\"(control));",
+"	}",
+"#endif",
+"}",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_CPUTASK_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06A",
+" *",
+" *    Copyright (C) 2006-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_ARMV7M",
+"",
+"/*",
+" *	exc_hdr.c (ARMv7-M)",
+" *	Exception handler",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"#include <tm/tmonitor.h>",
+"#include <kernel.h>",
+"#include \"../../../sysdepend.h\"",
+"",
+"#if (USE_EXCEPTION_DBG_MSG && USE_TMONITOR)",
+"	#define EXCEPTION_DBG_MSG(a)	tm_putstring((UB*)a)",
+"#else",
+"	#define EXCEPTION_DBG_MSG(a)",
+"#endif",
+"",
+"/*",
+" * NMI handler",
+" */",
+"WEAK_FUNC EXPORT void NMI_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"NMI\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * Hard fault handler",
+" */",
+"WEAK_FUNC EXPORT void HardFault_Handler(void)",
+"{",
+"#if (USE_EXCEPTION_DBG_MSG  && USE_TMONITOR)",
+"",
+"	UW	hfsr, cfsr;",
+"	ID	ctskid;",
+"",
+"	hfsr	= *(_UW *)SCB_HFSR;",
+"	if(knl_ctxtsk != NULL) {",
+"		ctskid = knl_ctxtsk->tskid;",
+"	} else {",
+"		ctskid = 0;",
+"	}",
+"",
+"	if(hfsr & 0x40000000) {",
+"		cfsr = *(_UW*)SCB_CFSR;",
+"		tm_printf((UB*)\"*** Hard fault ***  ctxtsk:%d  HFSR:%x  CFSR:%x\\n\", ctskid, hfsr, cfsr);",
+"	} else {",
+"		tm_printf((UB*)\"*** Hard fault ***  ctxtsk:%d  HFSR:%x%x\\n\", ctskid, hfsr);",
+"	}",
+"#endif",
+"	while(1);",
+"}",
+"",
+"/*",
+" * MPU Fault Handler",
+" */",
+"WEAK_FUNC EXPORT void MemManage_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"MPU Fault\\n\");",
+"	while(1);",
+"}",
+"",
+"/* ",
+" * Bus Fault Handler",
+" */",
+"WEAK_FUNC EXPORT void BusFault_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"Bus Fault\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * Usage Fault Handler",
+" */",
+"WEAK_FUNC EXPORT void UsageFault_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"Usage Fault\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * Svcall",
+" */",
+"WEAK_FUNC EXPORT void Svcall_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"SVCall\\n\");",
+"	while(1);",
+"}",
+"",
+"/* ",
+" * Debug Monitor",
+" */",
+"WEAK_FUNC EXPORT void DebugMon_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"Debug Monitor\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * Default Handler",
+" */",
+"WEAK_FUNC EXPORT void Default_Handler(void)",
+"{",
+"#if (USE_EXCEPTION_DBG_MSG  && USE_TMONITOR)",
+"	INT	i;",
+"	_UW	*icpr;",
+"",
+"	icpr = (_UW*)NVIC_ICPR_BASE;",
+"",
+"	EXCEPTION_DBG_MSG(\"Undefine Exceptio ICPR: \");",
+"	for(i=0; i < 8; i++) {",
+"		tm_printf((UB*)\"%x \", *icpr++);",
+"	}",
+"	EXCEPTION_DBG_MSG(\"\\n\");",
+"#endif",
+"	while(1);",
+"}",
+"",
+"#endif /* CPU_CORE_ACMV7M */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_ARMV7M",
+"/*",
+" *	interrupt.c (ARMv7-M)",
+" *	Interrupt control",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../../sysdepend.h\"",
+"",
+"#if !USE_STATIC_IVT",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Exception handler table (RAM)",
+" */",
+"EXPORT UW exchdr_tbl[N_SYSVEC + N_INTVEC] __attribute__ ((section (\".data_vector\")));",
+"",
+"#endif",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * HLL(High level programming language) Interrupt Handler",
+" */",
+"",
+"Noinit(LOCAL FP knl_inthdr_tbl[N_INTVEC]);	/* HLL Interrupt Handler Table */",
+"",
+"EXPORT void knl_hll_inthdr(void)",
+"{",
+"	FP	inthdr;",
+"	UW	intno;",
+"",
+"	ENTER_TASK_INDEPENDENT;",
+"",
+"	intno	= knl_get_ipsr() - 16;",
+"	inthdr	= knl_inthdr_tbl[intno];",
+"",
+"	(*inthdr)(intno);",
+"",
+"	LEAVE_TASK_INDEPENDENT;",
+"}",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System-timer Interrupt handler",
+" */",
+"EXPORT void knl_systim_inthdr(void)",
+"{",
+"	ENTER_TASK_INDEPENDENT;",
+"",
+"	knl_timer_handler();",
+"",
+"	LEAVE_TASK_INDEPENDENT;",
+"}",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" * Set interrupt handler (Used in tk_def_int())",
+" */",
+"EXPORT ER knl_define_inthdr( INT intno, ATR intatr, FP inthdr )",
+"{",
+"	volatile FP	*intvet;",
+"",
+"	if(inthdr != NULL) {",
+"		if ( (intatr & TA_HLNG) != 0 ) {",
+"			knl_inthdr_tbl[intno] = inthdr;",
+"			inthdr = knl_hll_inthdr;",
+"		}		",
+"	} else 	{	/* Clear interrupt handler */",
+"		inthdr = Default_Handler;",
+"	}",
+"	intvet = (FP*)&exchdr_tbl[N_SYSVEC];",
+"	intvet[intno] = inthdr;",
+"",
+"	return E_OK;",
+"}",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" * Return interrupt handler (Used in tk_ret_int())",
+" */",
+"EXPORT void knl_return_inthdr(void)",
+"{",
+"	/* No processing in ARM. */",
+"	return;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt initialize",
+" */",
+"EXPORT ER knl_init_interrupt( void )",
+"{",
+"	/* Register exception handler used on OS */",
+"",
+"	return E_OK;",
+"}",
+"",
+"",
+"",
+"#endif	/* CPU_CORE_ARMV7M *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	offset.h (ARMv7-M)",
+" *	TCB Offset Definition",
+" */",
+"",
+"#ifndef _OFFSET_",
+"#define _OFFSET_",
+"",
+"/*----------------------------------------------------------------------*/",
+"/*	offset data in TCB						*/",
+"/*----------------------------------------------------------------------*/",
+"",
+"#define TCB_tskid	8",
+"#define TCB_tskatr	16",
+"#define TCB_tskctxb	24",
+"#define TCB_state	39",
+"",
+"#define CTXB_ssp	0",
+"",
+"#endif /* _OFFSET_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_ARMV7M",
+"",
+"/*",
+" *	reset_hdr.c (ARMv7-M)",
+" *	Reset handler",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../../sysdepend.h\"",
+"",
+"#include <tm/tmonitor.h>",
+"",
+"",
+"/* Low level memory manager information */",
+"EXPORT	void	*knl_lowmem_top;		// Head of area (Low address)",
+"EXPORT	void	*knl_lowmem_limit;		// End of area (High address)",
+"",
+"IMPORT	const void *__data_org;",
+"IMPORT	const void *__data_start;",
+"IMPORT	const void *__data_end;",
+"IMPORT	const void *__bss_start;",
+"IMPORT	const void *__bss_end;",
+"#if USE_NOINIT",
+"IMPORT	const void *__noinit_end;",
+"#endif",
+"",
+"IMPORT const void (*vector_tbl[])();",
+"",
+"EXPORT void Reset_Handler(void)",
+"{",
+"	UW	*src, *top, *end;",
+"	UW	reg;",
+"	INT	i;",
+"",
+"	/* Startup Hardware */",
+"	knl_startup_hw();",
+"",
+"#if !USE_STATIC_IVT",
+"	/* Load Vector Table from ROM to RAM */",
+"	src = (UW*)vector_tbl;",
+"	top = (UW*)exchdr_tbl;",
+"",
+"	for(i=0; i < ((N_SYSVEC + N_INTVEC)); i++) {",
+"		*top++ = *src++;",
+"	}",
+"	",
+"	/* Set Vector Table offset to SRAM */",
+"	*(_UW*)SCB_VTOR = (UW)exchdr_tbl;",
+"#endif",
+"",
+"	/* Load .data to ram */",
+"	src = (UW*)&__data_org;",
+"	top = (UW*)&__data_start;",
+"	end = (UW*)&__data_end;",
+"	while(top != end) {",
+"		*top++ = *src++;",
+"	}",
+"",
+"	/* Initialize .bss */",
+"#if USE_NOINIT",
+"	top = (UW*)&__noinit_end;",
+"#else ",
+"	top = (UW*)&__bss_start;",
+"#endif",
+"	for(i = ((INT)&__bss_end - (INT)top)/sizeof(UW); i > 0 ; i--) {",
+"		*top++ = 0;",
+"	}",
+"",
+"#if USE_IMALLOC",
+"	/* Set System memory area */",
+"	if(INTERNAL_RAM_START > SYSTEMAREA_TOP) {",
+"		knl_lowmem_top = (UW*)INTERNAL_RAM_START;",
+"	} else {",
+"		knl_lowmem_top = (UW*)SYSTEMAREA_TOP;",
+"	}",
+"	if((UW)knl_lowmem_top < (UW)&__bss_end) {",
+"		knl_lowmem_top = (UW*)&__bss_end;",
+"	}",
+"",
+"	if((SYSTEMAREA_END != 0) && (INTERNAL_RAM_END > CNF_SYSTEMAREA_END)) {",
+"		knl_lowmem_limit = (UW*)(SYSTEMAREA_END - EXC_STACK_SIZE);",
+"	} else {",
+"		knl_lowmem_limit = (UW*)(INTERNAL_RAM_END - EXC_STACK_SIZE);",
+"	}",
+"#endif",
+"",
+"	/* Configure exception priorities */",
+"	reg = *(_UW*)SCB_AIRCR;",
+"	reg = (reg & (~AIRCR_PRIGROUP7)) | AIRCR_PRIGROUP3;	// PRIGRP:SUBPRI = 4 : 4",
+"	*(_UW*)SCB_AIRCR = (reg & 0x0000FFFF) | AIRCR_VECTKEY;",
+"	",
+"	*(_UW*)SCB_SHPR2 = SCB_SHPR2_VAL;		// SVC pri = 0",
+"	*(_UW*)SCB_SHPR3 = SCB_SHPR3_VAL;		// SysTick = 1 , PendSV = 7",
+"",
+"#if USE_FPU",
+"	/* Enable FPU */",
+"	*(_UW*)FPU_CPACR |= FPU_CPACR_FPUENABLE;",
+"	*(_UW*)FPU_FPCCR |= (FPU_FPCCR_ASPEN | FPU_FPCCR_LSPEN);",
+"#endif /* USE_FPU */",
+"",
+"	/* Startup Kernel */",
+"	main();		/**** No return ****/",
+"	while(1);	/* guard - infinite loops */",
+"}",
+"",
+"#endif	/* CPU_CORE_ARMV7M *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (ARMv7-M)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_SYSDEPEND_",
+"#define _SYSDEPEND_CPU_CORE_SYSDEPEND_",
+"",
+"/*",
+" *    Reset Handler (vector_tbl.c/reset_hdl.c)",
+" */",
+"IMPORT void Reset_Handler(void);		/* Reset Handler */",
+"",
+"/*",
+" *    Exception Handler (vector_tbl.c/exc_hdr.c)",
+" */",
+"IMPORT void NMI_Handler(void);			/* NMI Handler */",
+"IMPORT void HardFault_Handler(void);		/* Hard Fault Handler */",
+"IMPORT void MemManage_Handler(void);		/* MPU Fault Handler */",
+"IMPORT void BusFault_Handler(void);		/* Bus Fault Handler */",
+"IMPORT void UsageFault_Handler(void);		/* Usage Fault Handler */",
+"IMPORT void Svcall_Handler(void);		/* Svcall */",
+"IMPORT void DebugMon_Handler(void);		/* Debug Monitor Handler */",
+"",
+"IMPORT void Default_Handler(void);		/* Default Handler (Undefine Interrupt) */",
+"",
+"/*",
+" * Dispatcher (dispatch.S)",
+" */",
+"IMPORT void knl_dispatch_entry(void);		/* dispatch entry */",
+"IMPORT void knl_dispatch_to_schedtsk(void);	/* force dispatch */",
+"",
+"/*",
+" * Interrupt Control (interrupt.c)",
+" */",
+"IMPORT	UW exchdr_tbl[];			/* Exception handler table (RAM) */",
+"",
+"IMPORT void knl_systim_inthdr(void);		/* System-timer Interrupt handler */",
+"",
+"",
+"/*",
+" * Task context block",
+" */",
+"typedef struct {",
+"	void	*ssp;		/* System stack pointer */",
+"} CTXB;",
+"",
+"/*",
+" *	Control register operation",
+" */",
+"",
+"Inline UW knl_get_ipsr(void)",
+"{",
+"	UW	ipsr;",
+"	Asm(\"mrs %0, ipsr\": \"=r\"(ipsr));",
+"	return ipsr;",
+"}",
+"",
+"Inline UW knl_get_xpsr(void)",
+"{",
+"	UW	xpsr;",
+"	Asm(\"mrs %0, psr\": \"=r\"(xpsr));",
+"	return xpsr;",
+"}",
+"",
+"Inline UW knl_get_primask(void)",
+"{",
+"	UW	primask;",
+"	Asm(\"mrs %0, primask\": \"=r\"(primask));",
+"	return primask;",
+"}",
+"",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_SYSDEPEND_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (ARMv7-M)",
+" *	Hardware-Dependent System Timer (SysTick) Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_SYSTIMER_",
+"#define _SYSDEPEND_CPU_CORE_SYSTIMER_",
+"",
+"/*",
+" * Timer start processing",
+" *	Initialize the timer and start the periodical timer interrupt.",
+" */",
+"Inline void knl_start_hw_timer( void )",
+"{",
+"	UINT	n, imask;",
+"",
+"	DI(imask);",
+"",
+"	/* Set System timer CLK source to Core, Systick exception enable */",
+"	out_w(SYST_CSR, 0x00000006);",
+"",
+"	/* Set counter: TMCLK(MHz) */",
+"	n = (UINT)(TIMER_PERIOD * TMCLK_KHz - 1);",
+"	out_w(SYST_RVR, n);",
+"",
+"	/* Start timer count */",
+"	out_w(SYST_CSR, 0x00000007);",
+"",
+"	EI(imask);",
+"}",
+"",
+"/*",
+" * Clear timer interrupt",
+" *	Clear the timer interrupt request. Depending on the type of",
+" *	hardware, there are two timings for clearing: at the beginning",
+" *	and the end of the interrupt handler.",
+" *	'clear_hw_timer_interrupt()' is called at the beginning of the",
+" *	timer interrupt handler.",
+" *	'end_of_hw_timer_interrupt()' is called at the end of the timer",
+" *	interrupt handler.",
+" *	Use either or both according to hardware.",
+" */",
+"Inline void knl_clear_hw_timer_interrupt( void )",
+"{",
+"	(void)in_w(SYST_CSR);			/* Clear COUNTFLAG */",
+"	out_w(SCB_ICSR, ICSR_PENDSTCLR);",
+"}",
+"",
+"Inline void knl_end_of_hw_timer_interrupt( void )",
+"{",
+"	/* No processing */",
+"}",
+"",
+"/*",
+" * Timer stop processing",
+" *	Stop the timer operation.",
+" *	Called when system stops.",
+" */",
+"Inline void knl_terminate_hw_timer( void )",
+"{",
+"	/* Timer interrupt disable */",
+"	out_w(SYST_CSR, 0x00000000);",
+"}",
+"",
+"/*",
+" * Get processing time from the previous timer interrupt to the",
+" * current (nanosecond)",
+" *	Consider the possibility that the timer interrupt occurred",
+" *	during the interrupt disable and calculate the processing time",
+" *	within the following",
+" *	range: 0 <= Processing time < TIMER_PERIOD * 2",
+" */",
+"Inline UW knl_get_hw_timer_nsec( void )",
+"{",
+"	UW	ofs, max, unf;",
+"	UINT	imsk;",
+"",
+"	DI(imsk);",
+"	max = in_w(SYST_RVR);			/* Setting count */",
+"	unf = in_w(SYST_CSR) & 0x10000;		/* COUNTFLAG */",
+"	ofs = in_w(SYST_CVR) & 0x00ffffff;	/* Current Remained count */",
+"	if ( unf == 0 ) {		/* Reload not occurred */",
+"		unf = in_w(SYST_CSR) & 0x10000;	/* Check COUNTFLAG again */",
+"		if (unf != 0) {		/* Reload occurred */",
+"			ofs = in_w(SYST_CVR) & 0x00ffffff;",
+"		}",
+"	}",
+"	EI(imsk);",
+"	ofs = max - ofs;			/* Elapsed count */",
+"	if ( unf != 0 ) ofs += max + 1;	/* Reload occured, Adjust */",
+"",
+"	return  (UW) ( ( (D)ofs * 1000000 ) / TMCLK_KHz );",
+"}",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_SYSTIMER_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06A",
+" *",
+" *    Copyright (C) 2006-2023 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2023/03.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_RXV2",
+"/*",
+" *	cpu_cntl.c (RXv2)",
+" *	CPU-Dependent Control",
+" */",
+"#include \"kernel.h\"",
+"#include \"../../../sysdepend.h\"",
+"",
+"#include \"cpu_task.h\"",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Task independent status",
+" */",
+"EXPORT	W	knl_taskindp = 0;",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/* Temporal stack ",
+" *	used when 'dispatch_to_schedtsk' is called.",
+" */",
+"",
+"Noinit(EXPORT UB knl_tmp_stack[TMP_STACK_SIZE]);",
+"",
+"#if defined(USE_FUNC_TK_SET_REG) || defined(USE_FUNC_TD_SET_REG)",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Set task register contents (Used in tk_set_reg())",
+" */",
+"EXPORT void knl_set_reg( TCB *tcb, CONST T_REGS *regs, CONST T_EIT *eit, CONST T_CREGS *cregs )",
+"{",
+"	SStackFrame	*ssp;",
+"	INT		i;",
+"",
+"	ssp = (SStackFrame*)(( cregs != NULL )? cregs->ssp: tcb->tskctxb.ssp);",
+"",
+"	if ( regs != NULL ) {",
+"		for ( i = 0; i < 15; ++i ) {",
+"			ssp->r[i] = regs->r[i];",
+"		}",
+"	}",
+"",
+"	if ( eit != NULL ) {",
+"		ssp->spc  = eit->pc;",
+"		ssp->spsw = eit->psw;",
+"	}",
+"",
+"	if ( cregs != NULL ) {",
+"		tcb->tskctxb.ssp = cregs->ssp;",
+"	}",
+"}",
+"#endif /* USE_FUNC_TK_SET_REG || USE_FUNC_TD_SET_REG */",
+"",
+"#if defined(USE_FUNC_TK_GET_REG) || defined(USE_FUNC_TD_GET_REG)",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Get task register contents (Used in tk_get_reg())",
+" */",
+"EXPORT void knl_get_reg( TCB *tcb, T_REGS *regs, T_EIT *eit, T_CREGS *cregs )",
+"{",
+"	SStackFrame	*ssp;",
+"	INT		i;",
+"",
+"	ssp = (SStackFrame*)tcb->tskctxb.ssp;",
+"",
+"	if ( regs != NULL ) {",
+"		for ( i = 0; i < 15; ++i ) {",
+"			regs->r[i] = ssp->r[i];",
+"		}",
+"	}",
+"",
+"	if ( eit != NULL ) {",
+"		eit->pc = ssp->spc;",
+"		eit->psw = ssp->spsw;",
+"	}",
+"",
+"	if ( cregs != NULL ) {",
+"		cregs->ssp = tcb->tskctxb.ssp; ",
+"	}",
+"}",
+"#endif /* USE_FUNC_TK_GET_REG || USE_FUNC_TD_GET_REG */",
+"",
+"#if NUM_COPROCESSOR > 0",
+"#ifdef USE_FUNC_TK_SET_CPR",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Set Coprocessor registers contents (Used in tk_set_cpr())",
+" */",
+"EXPORT ER knl_set_cpr( TCB *tcb, INT copno, CONST T_COPREGS *copregs )",
+"{",
+"	SStackFrame	*ssp;",
+"	ER		ercd;",
+"",
+"	ssp = (SStackFrame*)tcb->tskctxb.ssp;",
+"	ercd = E_OK;",
+"",
+"	switch(copno) {",
+"	case COPNO_0:		/* copno 0: FPU */",
+"#if	USE_FPU",
+"		ssp->fpsw = copregs->cop0.fpsw;",
+"#else",
+"		ercd = E_PAR;",
+"#endif",
+"		break;",
+"",
+"	case COPNO_1:			/* copno 1: DSP */",
+"#if	USE_DSP",
+"		ssp->acc0lo = copregs->cop1.acc0lo;",
+"		ssp->acc0hi = copregs->cop1.acc0hi;",
+"		ssp->acc0gu = copregs->cop1.acc0gu;",
+"		ssp->acc1lo = copregs->cop1.acc1lo;",
+"		ssp->acc1hi = copregs->cop1.acc1hi;",
+"		ssp->acc1gu = copregs->cop1.acc1gu;",
+"#else",
+"		ercd = E_PAR;",
+"#endif",
+"		break;",
+"	default:",
+"		ercd = E_PAR;",
+"	}",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_FUNC_TK_SET_CPR */",
+"",
+"#ifdef USE_FUNC_TK_GET_CPR",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Get Coprocessor registers contents (Used in tk_get_cpr())",
+" */",
+"EXPORT ER knl_get_cpr( TCB *tcb, INT copno, T_COPREGS *copregs)",
+"{",
+"	SStackFrame	*ssp;",
+"	ER		ercd;",
+"",
+"	ssp = (SStackFrame*)tcb->tskctxb.ssp;",
+"	ercd = E_OK;",
+"",
+"	switch (copno) {",
+"	case COPNO_0:			/* copno 0: FPU */",
+"#if	USE_FPU",
+"		copregs->cop0.fpsw = ssp->fpsw;",
+"#else",
+"		ercd = E_PAR;",
+"#endif",
+"		break;",
+"",
+"	case COPNO_1:			/* copno 1: DSP */",
+"#if	USE_DSP",
+"		copregs->cop1.acc0lo = ssp->acc0lo;",
+"		copregs->cop1.acc0hi = ssp->acc0hi;",
+"		copregs->cop1.acc0gu = ssp->acc0gu;",
+"		copregs->cop1.acc1lo = ssp->acc1lo;",
+"		copregs->cop1.acc1hi = ssp->acc1hi;",
+"		copregs->cop1.acc1gu = ssp->acc1gu;",
+"#else",
+"		ercd = E_PAR;",
+"#endif",
+"		break;",
+"",
+"	default:",
+"		ercd = E_PAR;",
+"		break;",
+"	}",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_FUNC_TK_GET_CPR */",
+"#endif /* NUM_COPROCESSOR > 0 */",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" *	Task dispatcher startup",
+" */",
+"EXPORT void knl_force_dispatch( void )",
+"{",
+"	FP	fp = knl_dispatch_to_schedtsk;",
+"",
+"	Asm(\"jsr %0\" :: \"r\"(fp));	/* No return */",
+"}",
+"",
+"EXPORT void knl_dispatch( void )",
+"{",
+"	knl_dispatch_entry();",
+"}",
+"",
+"#endif /* CPU_CORE_RXV2 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (RXv2)",
+" *	CPU-Dependent Status Definition",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_STATUS_",
+"#define _SYSDEPEND_CPU_CORE_STATUS_",
+"",
+"#include <tk/syslib.h>",
+"#include <sys/sysdef.h>",
+"",
+"#include \"sysdepend.h\"",
+"/*",
+" * Start/End critical section",
+" */",
+"#define BEGIN_CRITICAL_SECTION	{ UINT _sr_ = disint();",
+"#define END_CRITICAL_SECTION	if ( !isDI(_sr_)			\\",
+"				  && knl_ctxtsk != knl_schedtsk		\\",
+"				  && !knl_isTaskIndependent()		\\",
+"				  && !knl_dispatch_disabled ) {		\\",
+"					knl_dispatch();			\\",
+"				}					\\",
+"				setint(_sr_); }",
+"/*",
+" * Start/End interrupt disable section",
+" */",
+"#define BEGIN_DISABLE_INTERRUPT	{ UINT _sr_ = disint();",
+"#define END_DISABLE_INTERRUPT	setint(_sr_); }",
+"",
+"/*",
+" * Interrupt enable/disable",
+" */",
+"#define ENABLE_INTERRUPT	{ setint(0); }",
+"#define DISABLE_INTERRUPT	{ disint(); }",
+"",
+"/*",
+" * Enable interrupt nesting",
+" *	Enable the interrupt that has a higher priority than 'level.'",
+" */",
+"#define ENABLE_INTERRUPT_UPTO(level)	{ setint(level); }",
+"",
+"/*",
+" *  Task-independent control",
+" */",
+"IMPORT	W	knl_taskindp;		/* Task independent status */",
+"",
+"/*",
+" * If it is the task-independent part, TRUE",
+" */",
+"Inline BOOL knl_isTaskIndependent( void )",
+"{",
+"	return ( knl_taskindp > 0 )? TRUE: FALSE;",
+"}",
+"/*",
+" * Move to/Restore task independent part",
+" */",
+"Inline void knl_EnterTaskIndependent( void )",
+"{",
+"	knl_taskindp++;",
+"}",
+"",
+"Inline void knl_LeaveTaskIndependent( void )",
+"{",
+"	knl_taskindp--;",
+"}",
+"",
+"/*",
+" * Move to/Restore task independent part",
+" */",
+"#define ENTER_TASK_INDEPENDENT	{ knl_EnterTaskIndependent(); }",
+"#define LEAVE_TASK_INDEPENDENT	{ knl_LeaveTaskIndependent(); }",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" *	Check system state",
+" */",
+"",
+"/*",
+" * When a system call is called from the task independent part, TRUE",
+" */",
+"#define in_indp()	( knl_isTaskIndependent() || knl_ctxtsk == NULL )",
+"",
+"/*",
+" * When a system call is called during dispatch disable, TRUE",
+" * Also include the task independent part as during dispatch disable.",
+" */",
+"#define in_ddsp()	( knl_dispatch_disabled	\\",
+"			|| in_indp()		\\",
+"			|| isDI( GetCpuIntLevel()-1) )",
+"",
+"/*",
+" * When a system call is called during CPU lock (interrupt disable), TRUE",
+" * Also include the task independent part as during CPU lock.",
+" */",
+"#define in_loc()	(  isDI( GetCpuIntLevel()-1)	\\",
+"			|| in_indp() )",
+"",
+"/*",
+" * When a system call is called during executing the quasi task part, TRUE",
+" * Valid only when in_indp() == FALSE because it is not discriminated from ",
+" * the task independent part. ",
+" */",
+"#define in_qtsk()	( knl_ctxtsk->sysmode > knl_ctxtsk->isysmode )",
+"",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_STATUS_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (RXv2)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_CPUTASK_",
+"#define _SYSDEPEND_CPU_CORE_CPUTASK_",
+"",
+"/*",
+" * System stack configuration at task startup",
+" */",
+"typedef struct {",
+"#if	USE_DSP",
+"	UW	acc0lo;",
+"	UW	acc0hi;",
+"	VW	acc0gu;	/* Saved ACC0 */",
+"	UW	acc1lo;",
+"	UW	acc1hi;",
+"	VW	acc1gu;	/* Saved ACC1 */",
+"#endif",
+"#if	USE_FPU",
+"	VW	fpsw;	/* Saved FPSW */",
+"#endif",
+"	VW	r[15];	/* R1-R15 */",
+"	void	*spc;	/* Saved return PC */",
+"	VW	spsw;	/* Saved PSW */",
+"} SStackFrame;",
+"",
+"/*",
+" * Size of system stack area destroyed by 'make_dormant()'",
+" * In other words, the size of area required to write by 'setup_context().'",
+" */",
+"#if	USE_FPU && USE_DSP",
+"#define DORMANT_STACK_SIZE	( sizeof(VW) * 24 )	/* To 'spsw', 'spc', 'acc0', 'acc1', 'fpsw' position */",
+"#elif USE_DSP",
+"#define DORMANT_STACK_SIZE	( sizeof(VW) * 23 )	/* To 'spsw', 'spc', 'acc0', 'acc1' position */",
+"#elif USE_FPU",
+"#define DORMANT_STACK_SIZE	( sizeof(VW) * 18 )	/* To 'spsw', 'spc', 'fpsw' position */",
+"#else",
+"#define DORMANT_STACK_SIZE	( sizeof(VW) * 2 )	/* To 'spsw' and 'spc' position */",
+"#endif",
+"",
+"/*",
+" * Create stack frame for task startup",
+" *	Call from 'make_dormant()'",
+" */",
+"Inline void knl_setup_context( TCB *tcb )",
+"{",
+"	SStackFrame	*ssp;",
+"	void		*pc;",
+"	VW		psw;",
+"",
+"	ssp = (SStackFrame*)((UB*)(tcb->isstack) - (UB*)(sizeof(SStackFrame)));",
+"",
+"	psw = 0x00010000UL;",
+"	pc = (void*)tcb->task;",
+"",
+"	/* CPU context initialization */",
+"	ssp->spsw	= psw;	/* Initial PSW */ ",
+"	ssp->spc	= pc;	/* Task startup address */",
+"#if	USE_FPU",
+"	ssp->fpsw	= FPSW_VAL;",
+"#endif",
+"	tcb->tskctxb.ssp = ssp;			/* System stack */",
+"}",
+"",
+"/*",
+" * Set task startup code",
+" *	Called by 'tk_sta_tsk()' processing.",
+" */",
+"Inline void knl_setup_stacd( TCB *tcb, INT stacd )",
+"{",
+"	SStackFrame	*ssp = tcb->tskctxb.ssp;",
+"",
+"	ssp->r[0] = stacd;		/* R1 */",
+"	ssp->r[1] = (VW)tcb->exinf;	/* R2 */",
+"}",
+"",
+"/*",
+" * Delete task contexts",
+" */",
+"Inline void knl_cleanup_context( TCB *tcb )",
+"{",
+"}",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_CPUTASK_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_RXV2",
+"",
+"/*",
+" *	exc_hdr.c (RXv2)",
+" *	Exception handler",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"#include <tm/tmonitor.h>",
+"#include <kernel.h>",
+"",
+"#if (USE_EXCEPTION_DBG_MSG && USE_TMONITOR)",
+"	#define EXCEPTION_DBG_MSG(a)	tm_printf((UB*)a)",
+"#else",
+"	#define EXCEPTION_DBG_MSG(a)",
+"#endif",
+"",
+"/*",
+" * NMI handler",
+" */",
+"WEAK_FUNC EXPORT void NMI_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"NMI\\n\");",
+"	while(1);",
+"}",
+"",
+"",
+"/*",
+" * Supervisor Instruction Exception Handler",
+" */",
+"WEAK_FUNC EXPORT void SuperVisorInst_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"Supervisor Instruction Exception\\n\");",
+"	while(1);",
+"}",
+"",
+"/* ",
+" * Access Instruction Exception Handler",
+" */",
+"WEAK_FUNC EXPORT void AccessInst_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"Access Instruction Exception\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * Undefined Instruction Exception Handler",
+" */",
+"WEAK_FUNC EXPORT void UndefinedInst_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"Undefined Instruction Exception\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * Floating Point Exception Handler",
+" */",
+"WEAK_FUNC EXPORT void FloatingPoint_Handler(void)",
+"{",
+"	EXCEPTION_DBG_MSG(\"Floating Point Exception\\n\");",
+"	while(1);",
+"}",
+"",
+"/*",
+" * Default HLL Interrupt Handler",
+" */",
+"WEAK_FUNC EXPORT void Default_Handler(UW intno)",
+"{",
+"",
+"#if (USE_EXCEPTION_DBG_MSG && USE_TMONITOR)",
+"	tm_printf((UB*)\"Un-defined Interrupt %d\\n\",intno);",
+"#endif",
+"",
+"	while(1);",
+"}",
+"",
+"#endif /* CPU_CORE_RXV2 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_RXV2",
+"/*",
+" *	interrupt.c (RXv2)",
+" *	Interrupt control",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../../sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt nest counter",
+" */",
+"EXPORT	W	knl_int_nest = 0;	/* Interrupt nest counter */",
+"",
+"",
+"#if !USE_STATIC_IVT",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt Vector table (RAM)",
+" */",
+"",
+"EXPORT FP knl_int_vect_ram[N_INTVEC0] __attribute__ ((section (\".data_ivector\")));",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * HLL(High level programming language) Interrupt Handler Table (RAM)",
+" */",
+"EXPORT FP knl_hll_inthdr_ram[N_INTVEC0] __attribute__ ((section (\".data_hvector\")));",
+"",
+"#endif	/* !USE_STATIC_IVT */",
+"",
+"/* ----------------------------------------------------------------------- */",
+"/*",
+" * Set interrupt handler (Used in tk_def_int())",
+" */",
+"#if !USE_STATIC_IVT",
+"EXPORT ER knl_define_inthdr( INT intno, ATR intatr, FP inthdr )",
+"{",
+"#if USE_GROUP_INT	// Group Interrupt",
+"	if(intno >= INTNO_GROUP_TOP) {",
+"		if( (intatr & TA_HLNG) != 0 ) {",
+"			return knl_define_gint( intno, inthdr);",
+"		} else {",
+"			return E_PAR;",
+"		}",
+"	}",
+"#endif /* USE_GROUP_INT */",
+"",
+"	/* check system interrupt number */",
+"	if((intno < INTNO_USER_MIN) || (intno == INTNO_SYS_TICK)) {",
+"		return E_PAR;",
+"	}",
+"",
+"	if(inthdr != NULL) {	/* define intrrupt handler */",
+"		if ( (intatr & TA_HLNG) != 0 ) {",
+"			knl_hll_inthdr_ram[intno] = inthdr;",
+"			inthdr = knl_int_vect_rom[intno];	/* set HLL-Int handler entry */",
+"		}",
+"	} else 	{		/* Clear interrupt handler */",
+"		knl_hll_inthdr_ram[intno] = knl_hll_inthdr_rom[intno - INTNO_USER_MIN];",
+"		inthdr = knl_int_vect_rom[intno];	/* set HLL-Int handler entry */",
+"	}",
+"",
+"	knl_int_vect_ram[intno] = inthdr;",
+"",
+"	return E_OK;",
+"}",
+"#endif",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt initialize",
+" */",
+"EXPORT ER knl_init_interrupt( void )",
+"{",
+"	/* Register exception handler used on OS			*/",
+"	/* There is no exception handler used in this implementation.	*/",
+"",
+"	return E_OK;",
+"}",
+"",
+"",
+"",
+"#endif	/* CPU_CORE_RXV2 *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	offset.h (RXv2)",
+" *	TCB Offset Definition",
+" */",
+"",
+"#ifndef _OFFSET_",
+"#define _OFFSET_",
+"",
+"",
+"/*----------------------------------------------------------------------*/",
+"/*	offset data in TCB						*/",
+"/*----------------------------------------------------------------------*/",
+"",
+"#define TCB_tskid	8",
+"#define TCB_tskatr	16	",
+"#define TCB_tskctxb	24",
+"#define TCB_state	39",
+"",
+"#define CTXB_ssp	0",
+"",
+"#endif /* _OFFSET_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_RXV2",
+"",
+"/*",
+" *	reset_main.c (RXv2)",
+" *	Reset handler Main routine (Called from reset_hdl.S)",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../../sysdepend.h\"",
+"",
+"#include <tm/tmonitor.h>",
+"",
+"",
+"/* Low level memory manager information */",
+"EXPORT	void	*knl_lowmem_top;		// Head of area (Low address)",
+"EXPORT	void	*knl_lowmem_limit;		// End of area (High address)",
+"",
+"IMPORT	const void *_data_org;",
+"IMPORT	const void *_data_start;",
+"IMPORT	const void *_data_end;",
+"IMPORT	const void *_bss_start;",
+"IMPORT	const void *_bss_end;",
+"#if USE_NOINIT",
+"IMPORT	const void *_noinit_end;",
+"#endif",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Reset Handler Main routine (Called from reset_hdl.S)",
+" */",
+"",
+"EXPORT void reset_main(void)",
+"{",
+"	UW	*src, *top, *end;",
+"	INT	i;",
+"",
+"	/* Startup Hardware */",
+"	knl_startup_hw();",
+"",
+"#if !USE_STATIC_IVT",
+"	/* Load Interrupt Vector Table from ROM to RAM */",
+"	src = (UW*)knl_int_vect_rom;",
+"	top = (UW*)knl_int_vect_ram;",
+"	for(i=0; i < (N_INTVEC0); i++) {",
+"		*top++ = *src++;",
+"	}",
+"	/* Set Vector Table offset to SRAM */",
+"	knl_set_intb((UW)knl_int_vect_ram);",
+"",
+"	/* Load HLL-Interrupt Handler Table from ROM to RAM */",
+"	src = (UW*)knl_hll_inthdr_rom;",
+"	top = (UW*)knl_hll_inthdr_ram;",
+"	for(i=0; i < (N_INTVEC0); i++) {",
+"		*top++ = *src++;",
+"	}",
+"#endif",
+"",
+"	/* Load .data to ram */",
+"	src = (UW*)&_data_org;",
+"	top = (UW*)&_data_start;",
+"	end = (UW*)&_data_end;",
+"	while(top != end) {",
+"		*top++ = *src++;",
+"	}",
+"",
+"	/* Initialize .bss */",
+"#if USE_NOINIT",
+"	top = (UW*)&_noinit_end;",
+"#else ",
+"	top = (UW*)&_bss_start;",
+"#endif",
+"	for(i = ((INT)&_bss_end - (INT)&_bss_start)/sizeof(UW); i > 0 ; i--) {",
+"		*top++ = 0;",
+"	}",
+"",
+"#if USE_IMALLOC",
+"	/* Set System memory area */",
+"	if(INTERNAL_RAM_START > SYSTEMAREA_TOP) {",
+"		knl_lowmem_top = (UW*)INTERNAL_RAM_START;",
+"	} else {",
+"		knl_lowmem_top = (UW*)SYSTEMAREA_TOP;",
+"	}",
+"	if((UW)knl_lowmem_top < (UW)&_bss_end) {",
+"		knl_lowmem_top = (UW*)&_bss_end;",
+"	}",
+"",
+"	if((SYSTEMAREA_END != 0) && (INTERNAL_RAM_END > CNF_SYSTEMAREA_END)) {",
+"		knl_lowmem_limit = (UW*)(SYSTEMAREA_END - EXC_STACK_SIZE);",
+"	} else {",
+"		knl_lowmem_limit = (UW*)(INTERNAL_RAM_END - EXC_STACK_SIZE);",
+"	}",
+"#endif",
+"",
+"	/* Startup Kernel */",
+"	main();		/**** No return ****/",
+"	while(1);	/* guard - infinite loops */",
+"}",
+"",
+"#endif	/* CPU_CORE_RXV2 *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (RXv2)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_SYSDEPEND_",
+"#define _SYSDEPEND_CPU_CORE_SYSDEPEND_",
+"",
+"/*",
+" *    Reset Handler (reset_hdl.S)",
+" */",
+"IMPORT void Reset_Handler(void);		/* Reset Handler */",
+"",
+"/*",
+" *    Exception Handler (exc_hdr.c)",
+" */",
+"IMPORT void SuperVisorInst_Handler(void) __attribute__ ((interrupt));	/* Supervisor Instruction Exception */",
+"IMPORT void AccessInst_Handler(void) __attribute__ ((interrupt));	/* Access Instruction Exception */",
+"IMPORT void UndefinedInst_Handler(void) __attribute__ ((interrupt));	/* Undefined Instruction Exception */",
+"IMPORT void FloatingPoint_Handler(void) __attribute__ ((interrupt));	/* Floating Point Exception */",
+"IMPORT void NMI_Handler(void) __attribute__ ((interrupt));		/* NMI Handler */",
+"",
+"IMPORT void Default_Handler(UW intno);	/* Default HLL Interrupt Handler (Undefine Interrupt) */",
+"",
+"/*",
+" * Dispatcher (dispatch.S)",
+" */",
+"IMPORT void knl_dispatch_entry(void);		/* dispatch entry */",
+"IMPORT void knl_dispatch_to_schedtsk(void);	/* force dispatch */",
+"",
+"/*",
+" * Interrupt Control (interrupt.c)",
+" */",
+"IMPORT FP knl_int_vect_ram[N_INTVEC0];		/* Interrupt Vector table (RAM) */",
+"IMPORT FP knl_hll_inthdr_ram[N_INTVEC0];		/* HLL Interrupt Handler Table (RAM) */",
+"",
+"IMPORT	W knl_int_nest;			/* Interrupt nest counter */",
+"",
+"IMPORT void knl_systim_inthdr(void);		/* System-timer Interrupt handler */",
+"",
+"",
+"/*",
+" * Task context block",
+" */",
+"typedef struct {",
+"	void	*ssp;		/* System stack pointer */",
+"} CTXB;",
+"",
+"/*",
+" *	Control register operation",
+" */",
+"Inline void knl_set_intb(UW intb)",
+"{",
+"	Asm(\"mvtc %0, intb\":: \"r\"(intb));",
+"}",
+"",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_SYSDEPEND_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (RXv2)",
+" *	Hardware-Dependent System Timer (SysTick) Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CORE_SYSTIMER_",
+"#define _SYSDEPEND_CPU_CORE_SYSTIMER_",
+"",
+"/*",
+" * Timer start processing",
+" *	Initialize the timer and start the periodical timer interrupt.",
+" */",
+"Inline void knl_start_hw_timer( void )",
+"{",
+"",
+"	/* set Timer Count */",
+"	out_h(CMT0_COR, SYSCLK_ICLK/PCLK_DIV/1000*TIMER_PERIOD/CMCR_DIV - 1);",
+"",
+"	/* Interrupt is Enable, Set Frequency Dividing */",
+"	out_h(CMT0_CR, CMT0_CR_CMIE | CMCR_CKS_PLCK);",
+"",
+"	/* CMI0 Interrupt Enable, Interrupt Level is 15. */",
+"	EnableInt( INTNO_SYS_TICK , INTLEVEL_SYS_TICK);",
+"",
+"	/* Start timer count */",
+"	out_h(CMT_STR0, CMT_STR0_STR0);",
+"}",
+"",
+"/*",
+" * Clear timer interrupt",
+" *	Clear the timer interrupt request. Depending on the type of",
+" *	hardware, there are two timings for clearing: at the beginning",
+" *	and the end of the interrupt handler.",
+" *	'clear_hw_timer_interrupt()' is called at the beginning of the",
+" *	timer interrupt handler.",
+" *	'end_of_hw_timer_interrupt()' is called at the end of the timer",
+" *	interrupt handler.",
+" *	Use either or both according to hardware.",
+" */",
+"Inline void knl_clear_hw_timer_interrupt( void )",
+"{",
+"	/* Nothing required to do at this point */",
+"}",
+"",
+"Inline void knl_end_of_hw_timer_interrupt( void )",
+"{",
+"	/* Nothing required to do at this point */",
+"}",
+"",
+"/*",
+" * Timer stop processing",
+" *	Stop the timer operation.",
+" *	Called when system stops.",
+" */",
+"Inline void knl_terminate_hw_timer( void )",
+"{",
+"	UH	cmstr0;",
+"",
+"	DisableInt( INTNO_SYS_TICK );	/* Disable timer interrupt */",
+"",
+"	out_h(CMT0_CR, 0);		/* Disable compare match interrupt */",
+"	cmstr0 = in_h(CMT_STR0) & ~(CMT_STR0_STR0);",
+"	out_h(CMT_STR0, cmstr0);	/* Stop timer count */",
+"}",
+"",
+"/*",
+" * Get processing time from the previous timer interrupt to the",
+" * current (nanosecond)",
+" *	Consider the possibility that the timer interrupt occurred",
+" *	during the interrupt disable and calculate the processing time",
+" *	within the following",
+" *	range: 0 <= Processing time < TIMER_PERIOD * 2",
+" */",
+"Inline UW knl_get_hw_timer_nsec( void )",
+"{",
+"	UW	ofs, max;",
+"	UB	unf;",
+"	UINT	imask;",
+"",
+"	DI(imask);",
+"",
+"	max = in_h(CMT0_COR) + 1;			/* Timer Count */",
+"	do {",
+"		unf = CheckInt(INTNO_SYS_TICK);		/* Get Interrupt Status */",
+"		ofs = in_h(CMT0_CNT);			/* Current Count */",
+"	} while ( unf != CheckInt(INTNO_SYS_TICK));	/* Check Interrupt Status */",
+"	if ( unf != 0 ) {",
+"		ofs += max;",
+"	}",
+"",
+"	EI(imask);",
+"",
+"	return ofs * 1000 * CMCR_DIV / (SYSCLK_ICLK/MHz/PCLK_DIV);",
+"}",
+"",
+"#endif /* _SYSDEPEND_CPU_CORE_SYSTIMER_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.04",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/05/17.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_CORE_RXV2",
+"",
+"/*",
+" *	vector_tbl.h (RXv2)",
+" *	Exception Vector Table",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../../sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Reset Vector",
+" * ",
+" */",
+"",
+"void (* const reset_vect[])()  __attribute__((section (\".fvectors\"))) = {",
+"	Reset_Handler,				/* Power On Reset */",
+"};",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Exception Vector Table",
+" * ",
+" */",
+"",
+"void (* const exvect_tbl[])()  __attribute__((section(\".exvectors\"))) = {",
+"	(void(*)())(0xffffffff),		/* MDES  Endian Select Register */",
+"	0,",
+"	(void(*)())(0xffffffff),		/* OFS1 Option function */",
+"	(void(*)())(0xffffffff),		/* OFS0 Option function */",
+"	0,",
+"	0,",
+"	0,",
+"	0,",
+"	(void(*)())(0xffffffff),		/* ID Code */",
+"	(void(*)())(0xffffffff),		/* ID Code */",
+"	(void(*)())(0xffffffff),		/* ID Code */",
+"	(void(*)())(0xffffffff),		/* ID Code */",
+"	0,",
+"	0,",
+"	0,",
+"	0,",
+"	0,",
+"	0,",
+"	0,",
+"	0,",
+"	SuperVisorInst_Handler,			/* Supervisor Instruction Exception */",
+"	AccessInst_Handler,			/* Access Instruction Exception */",
+"	0,",
+"	UndefinedInst_Handler,			/*  Undefined Instruction Exception */",
+"	0,",
+"	FloatingPoint_Handler,			/* Floating Point Exception */",
+"	0,",
+"	0,",
+"	0,",
+"	0,",
+"	NMI_Handler,				/* Non Maskable Interrupt */",
+"};",
+"",
+"#endif /* CPU_CORE_RXV2 */",
+"﻿/*",
+" *	boot_2nd.c (RP2040)",
+" *	Boot process second stage",
+" */",
+"",
+"const unsigned char boot2[]__attribute__((section(\".boot2\"))) = {",
+"0x00, 0xb5, 0x32, 0x4b, 0x21, 0x20, 0x58, 0x60, 0x98, 0x68, 0x02, 0x21, 0x88, 0x43, 0x98, 0x60,",
+"0xd8, 0x60, 0x18, 0x61, 0x58, 0x61, 0x2e, 0x4b, 0x00, 0x21, 0x99, 0x60, 0x02, 0x21, 0x59, 0x61,",
+"0x01, 0x21, 0xf0, 0x22, 0x99, 0x50, 0x2b, 0x49, 0x19, 0x60, 0x01, 0x21, 0x99, 0x60, 0x35, 0x20,",
+"0x00, 0xf0, 0x44, 0xf8, 0x02, 0x22, 0x90, 0x42, 0x14, 0xd0, 0x06, 0x21, 0x19, 0x66, 0x00, 0xf0,",
+"0x34, 0xf8, 0x19, 0x6e, 0x01, 0x21, 0x19, 0x66, 0x00, 0x20, 0x18, 0x66, 0x1a, 0x66, 0x00, 0xf0,",
+"0x2c, 0xf8, 0x19, 0x6e, 0x19, 0x6e, 0x19, 0x6e, 0x05, 0x20, 0x00, 0xf0, 0x2f, 0xf8, 0x01, 0x21,",
+"0x08, 0x42, 0xf9, 0xd1, 0x00, 0x21, 0x99, 0x60, 0x1b, 0x49, 0x19, 0x60, 0x00, 0x21, 0x59, 0x60,",
+"0x1a, 0x49, 0x1b, 0x48, 0x01, 0x60, 0x01, 0x21, 0x99, 0x60, 0xeb, 0x21, 0x19, 0x66, 0xa0, 0x21,",
+"0x19, 0x66, 0x00, 0xf0, 0x12, 0xf8, 0x00, 0x21, 0x99, 0x60, 0x16, 0x49, 0x14, 0x48, 0x01, 0x60,",
+"0x01, 0x21, 0x99, 0x60, 0x01, 0xbc, 0x00, 0x28, 0x00, 0xd0, 0x00, 0x47, 0x12, 0x48, 0x13, 0x49,",
+"0x08, 0x60, 0x03, 0xc8, 0x80, 0xf3, 0x08, 0x88, 0x08, 0x47, 0x03, 0xb5, 0x99, 0x6a, 0x04, 0x20,",
+"0x01, 0x42, 0xfb, 0xd0, 0x01, 0x20, 0x01, 0x42, 0xf8, 0xd1, 0x03, 0xbd, 0x02, 0xb5, 0x18, 0x66,",
+"0x18, 0x66, 0xff, 0xf7, 0xf2, 0xff, 0x18, 0x6e, 0x18, 0x6e, 0x02, 0xbd, 0x00, 0x00, 0x02, 0x40,",
+"0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x07, 0x00, 0x00, 0x03, 0x5f, 0x00, 0x21, 0x22, 0x00, 0x00,",
+"0xf4, 0x00, 0x00, 0x18, 0x22, 0x20, 0x00, 0xa0, 0x00, 0x01, 0x00, 0x10, 0x08, 0xed, 0x00, 0xe0,",
+"0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0xb2, 0x4e, 0x7a,",
+"};",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (RP2040)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CPUSTATUS_",
+"#define _SYSDEPEND_CPU_CPUSTATUS_",
+"",
+"#include \"../core/armv6m/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (RP2040)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CPUTASK_",
+"#define _SYSDEPEND_CPU_CPUTASK_",
+"",
+"#include \"../core/armv6m/cpu_task.h\"",
+"",
+"#endif  /*_SYSDEPEND_CPU_CPUTASK_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (RP2040)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_SYSDEPEND_",
+"#define _SYSDEPEND_CPU_SYSDEPEND_",
+"",
+"#include \"../core/armv6m/sysdepend.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (RP2040)",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_SYSTIMER_",
+"#define _SYSDEPEND_CPU_SYSTIMER_",
+"",
+"#include \"../core/armv6m/sys_timer.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_SYSTIMER_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RP2040",
+"",
+"/*",
+" *	vector_tbl.h (RP2040)",
+" *	Exception/Interrupt Vector Table",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Exception/Interrupt Vector Table",
+" * ",
+" */",
+"",
+"void (* const vector_tbl[])()  __attribute__((section(\".vector\"))) = {",
+"	(void(*)()) (INITIAL_SP),		/* 0: Top of Stack */",
+"	Reset_Handler,				/* 1: Reset Handler */",
+"	NMI_Handler,				/* 2: NMI Handler */",
+"	HardFault_Handler,			/* 3: Hard Fault Handler */",
+"	0,					/* 4: Reserved */",
+"	0,					/* 5: Reserved */",
+"	0,					/* 6: Reserved */",
+"	0,					/* 7: Reserved */",
+"	0,					/* 8: Reserved */",
+"	0,					/* 9: Reserved */",
+"	0,					/* 10: Reserved */",
+"	Svcall_Handler,				/* 11: Svcall */",
+"	0,					/* 10: Reserved */",
+"	0,					/* 13: Reserved */",
+"	knl_dispatch_entry,			/* 14: Pend SV */",
+"	knl_systim_inthdr,			/* 15: Systick */",
+"",
+"	/* External Interrupts */",
+"	Default_Handler,			/* IRQ 0 */",
+"	Default_Handler,			/* IRQ 1 */",
+"	Default_Handler,			/* IRQ 2 */",
+"	Default_Handler,			/* IRQ 3 */",
+"	Default_Handler,			/* IRQ 4 */",
+"	Default_Handler,			/* IRQ 5 */",
+"	Default_Handler,			/* IRQ 6 */",
+"	Default_Handler,			/* IRQ 7 */",
+"	Default_Handler,			/* IRQ 8 */",
+"	Default_Handler,			/* IRQ 9 */",
+"	Default_Handler,			/* IRQ 10 */",
+"	Default_Handler,			/* IRQ 11 */",
+"	Default_Handler,			/* IRQ 12 */",
+"	Default_Handler,			/* IRQ 13 */",
+"	Default_Handler,			/* IRQ 14 */",
+"	Default_Handler,			/* IRQ 15 */",
+"	Default_Handler,			/* IRQ 16 */",
+"	Default_Handler,			/* IRQ 17 */",
+"	Default_Handler,			/* IRQ 18 */",
+"	Default_Handler,			/* IRQ 19 */",
+"	Default_Handler,			/* IRQ 20 */",
+"	Default_Handler,			/* IRQ 21 */",
+"	Default_Handler,			/* IRQ 22 */",
+"	Default_Handler,			/* IRQ 23 */",
+"	Default_Handler,			/* IRQ 24 */",
+"	Default_Handler,			/* IRQ 25 */",
+"	Default_Handler,			/* IRQ 26 */",
+"	Default_Handler,			/* IRQ 27 */",
+"	Default_Handler,			/* IRQ 28 */",
+"	Default_Handler,			/* IRQ 29 */",
+"	Default_Handler,			/* IRQ 30 */",
+"	Default_Handler,			/* IRQ 31 */",
+"};",
+"",
+"#endif /* CPU_RP2040 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (RX231)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CPUSTATUS_",
+"#define _SYSDEPEND_CPU_CPUSTATUS_",
+"",
+"#include \"../core/rxv2/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (RX231)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CPUTASK_",
+"#define _SYSDEPEND_CPU_CPUTASK_",
+"",
+"#include \"../core/rxv2/cpu_task.h\"",
+"",
+"#endif  /*_SYSDEPEND_CPU_CPUTASK_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	hllint_ent.h (RX231)",
+" *	HLL Interrupt routine entry",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../sysdepend.h\"",
+"",
+"#ifndef _SYSDEPEND_CPU_INTVECT_TBL_",
+"#define _SYSDEPEND_CPU_INTVECT_TBL_",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * HLL Interrupt routine entry",
+" * ",
+" */",
+"IMPORT	void	hll_inthdr_entry_0(void);			/* Unconditional trap */",
+"IMPORT	void	hll_inthdr_entry_1(void);			/* Dispatch (reserved) */",
+"IMPORT	void	hll_inthdr_entry_2(void);			/* System call (reserved) */",
+"IMPORT	void	hll_inthdr_entry_3(void);			/* System call : tk_ret_int */",
+"IMPORT	void	hll_inthdr_entry_4(void);			/* Debugger support (reserved) */",
+"IMPORT	void	hll_inthdr_entry_5(void);			/* INT 5 */",
+"IMPORT	void	hll_inthdr_entry_6(void);			/* INT 6 */",
+"IMPORT	void	hll_inthdr_entry_7(void);			/* INT 7 */",
+"IMPORT	void	hll_inthdr_entry_8(void);			/* INT 8 */",
+"IMPORT	void	hll_inthdr_entry_9(void);			/* INT 9 */",
+"IMPORT	void	hll_inthdr_entry_10(void);			/* INT 10 */",
+"IMPORT	void	hll_inthdr_entry_11(void);			/* INT 11 */",
+"IMPORT	void	hll_inthdr_entry_12(void);			/* INT 12 */",
+"IMPORT	void	hll_inthdr_entry_13(void);			/* INT 13 */",
+"IMPORT	void	hll_inthdr_entry_14(void);			/* INT 14 */",
+"IMPORT	void	hll_inthdr_entry_15(void);			/* INT 15 */",
+"IMPORT	void	hll_inthdr_entry_16(void);			/* BSC_BUSERR */",
+"IMPORT	void	hll_inthdr_entry_17(void);			/* INT 17 */",
+"IMPORT	void	hll_inthdr_entry_18(void);			/* INT 18 */",
+"IMPORT	void	hll_inthdr_entry_19(void);			/* INT 19 */",
+"IMPORT	void	hll_inthdr_entry_20(void);			/* INT 20 */",
+"IMPORT	void	hll_inthdr_entry_21(void);			/* INT 21 */",
+"IMPORT	void	hll_inthdr_entry_22(void);			/* INT 22 */",
+"IMPORT	void	hll_inthdr_entry_23(void);			/* FCU_FRDYI */",
+"IMPORT	void	hll_inthdr_entry_24(void);			/* INT 24 */",
+"IMPORT	void	hll_inthdr_entry_25(void);			/* INT 25 */",
+"IMPORT	void	hll_inthdr_entry_26(void);			/* INT 26 */",
+"IMPORT	void	hll_inthdr_entry_27(void);			/* ICU_SWINT */",
+"IMPORT	void	hll_inthdr_entry_28(void);			/* CMT0_CMI0 */",
+"IMPORT	void	hll_inthdr_entry_29(void);			/* CMT0_CMI1 */",
+"IMPORT	void	hll_inthdr_entry_30(void);			/* CMT0_CMI2 */",
+"IMPORT	void	hll_inthdr_entry_31(void);			/* CMT0_CMI3 */",
+"IMPORT	void	hll_inthdr_entry_32(void);			/* CAC_FERRF */",
+"IMPORT	void	hll_inthdr_entry_33(void);			/* CAC_MENDF */",
+"IMPORT	void	hll_inthdr_entry_34(void);			/* CAC_OVFF */",
+"IMPORT	void	hll_inthdr_entry_35(void);			/* INT 35 */",
+"IMPORT	void	hll_inthdr_entry_36(void);			/* USB0_D0FIFO0 */",
+"IMPORT	void	hll_inthdr_entry_37(void);			/* USB0_D1FIFO0 */",
+"IMPORT	void	hll_inthdr_entry_38(void);			/* USB0_USBI0*/",
+"IMPORT	void	hll_inthdr_entry_39(void);			/* INT 39 */",
+"IMPORT	void	hll_inthdr_entry_40(void);			/* SDHI_SBFAI */",
+"IMPORT	void	hll_inthdr_entry_41(void);			/* SDHI_CDETI */",
+"IMPORT	void	hll_inthdr_entry_42(void);			/* SDHI_CACI */",
+"IMPORT	void	hll_inthdr_entry_43(void);			/* SDHI_SDACI */",
+"IMPORT	void	hll_inthdr_entry_44(void);			/* RSPI0_SPEI0 */",
+"IMPORT	void	hll_inthdr_entry_45(void);			/* RSPI0_SPRI0 */",
+"IMPORT	void	hll_inthdr_entry_46(void);			/* RSPI0_SPTI0 */",
+"IMPORT	void	hll_inthdr_entry_47(void);			/* RSPI0_SPII0 */",
+"IMPORT	void	hll_inthdr_entry_48(void);			/* INT 48 */",
+"IMPORT	void	hll_inthdr_entry_49(void);			/* INT 49 */",
+"IMPORT	void	hll_inthdr_entry_50(void);			/* INT 50 */",
+"IMPORT	void	hll_inthdr_entry_51(void);			/* INT 51 */",
+"IMPORT	void	hll_inthdr_entry_52(void);			/* RSCAN_COMFRXINT */",
+"IMPORT	void	hll_inthdr_entry_53(void);			/* RSCAN_RXFINT */",
+"IMPORT	void	hll_inthdr_entry_54(void);			/* RSCAN_TXINT */",
+"IMPORT	void	hll_inthdr_entry_55(void);			/* RSCAN_CHERRINT */",
+"IMPORT	void	hll_inthdr_entry_56(void);			/* RSCAN_GLERRINT */",
+"IMPORT	void	hll_inthdr_entry_57(void);			/* DOC_DOPCF */",
+"IMPORT	void	hll_inthdr_entry_58(void);			/* CMPB_CMPB0 */",
+"IMPORT	void	hll_inthdr_entry_59(void);			/* CMPB_CMPB1 */",
+"IMPORT	void	hll_inthdr_entry_60(void);			/* CTSU_CTSUWR */",
+"IMPORT	void	hll_inthdr_entry_61(void);			/* CTSU_CTSURD */",
+"IMPORT	void	hll_inthdr_entry_62(void);			/* CTSU_CTSUFN */",
+"IMPORT	void	hll_inthdr_entry_63(void);			/* RTC_CUP */",
+"IMPORT	void	hll_inthdr_entry_64(void);			/* ICU_IRQ0 */",
+"IMPORT	void	hll_inthdr_entry_65(void);			/* ICU_IRQ1 */",
+"IMPORT	void	hll_inthdr_entry_66(void);			/* ICU_IRQ2 */",
+"IMPORT	void	hll_inthdr_entry_67(void);			/* ICU_IRQ3 */",
+"IMPORT	void	hll_inthdr_entry_68(void);			/* ICU_IRQ4 */",
+"IMPORT	void	hll_inthdr_entry_69(void);			/* ICU_IRQ5 */",
+"IMPORT	void	hll_inthdr_entry_70(void);			/* ICU_IRQ6 */",
+"IMPORT	void	hll_inthdr_entry_71(void);			/* ICU_IRQ7 */",
+"IMPORT	void	hll_inthdr_entry_72(void);			/* INT 72 */",
+"IMPORT	void	hll_inthdr_entry_73(void);			/* INT 73 */",
+"IMPORT	void	hll_inthdr_entry_74(void);			/* INT 74 */",
+"IMPORT	void	hll_inthdr_entry_75(void);			/* INT 75 */",
+"IMPORT	void	hll_inthdr_entry_76(void);			/* INT 76 */",
+"IMPORT	void	hll_inthdr_entry_77(void);			/* INT 77 */",
+"IMPORT	void	hll_inthdr_entry_78(void);			/* INT 78 */",
+"IMPORT	void	hll_inthdr_entry_79(void);			/* INT 79 */",
+"IMPORT	void	hll_inthdr_entry_80(void);			/* ELC_ELSR8I */",
+"IMPORT	void	hll_inthdr_entry_81(void);			/* INT 81 */",
+"IMPORT	void	hll_inthdr_entry_82(void);			/* INT 82 */",
+"IMPORT	void	hll_inthdr_entry_83(void);			/* INT 83 */",
+"IMPORT	void	hll_inthdr_entry_84(void);			/* INT 84 */",
+"IMPORT	void	hll_inthdr_entry_85(void);			/* INT 85 */",
+"IMPORT	void	hll_inthdr_entry_86(void);			/* INT 86 */",
+"IMPORT	void	hll_inthdr_entry_87(void);			/* INT 87 */",
+"IMPORT	void	hll_inthdr_entry_88(void);			/* LVD_LVD1 */",
+"IMPORT	void	hll_inthdr_entry_89(void);			/* LVD_LVD2 */",
+"IMPORT	void	hll_inthdr_entry_90(void);			/* USB0_USBR0 */",
+"IMPORT	void	hll_inthdr_entry_91(void);			/* VBATT_VBTLVDI */",
+"IMPORT	void	hll_inthdr_entry_92(void);			/* RTC_ALM */",
+"IMPORT	void	hll_inthdr_entry_93(void);			/* RTC_PRD */",
+"IMPORT	void	hll_inthdr_entry_94(void);			/* INT 94 */",
+"IMPORT	void	hll_inthdr_entry_95(void);			/* INT 95 */",
+"IMPORT	void	hll_inthdr_entry_96(void);			/* INT 96 */",
+"IMPORT	void	hll_inthdr_entry_97(void);			/* INT 97 */",
+"IMPORT	void	hll_inthdr_entry_98(void);			/* INT 98 */",
+"IMPORT	void	hll_inthdr_entry_99(void);			/* INT 99 */",
+"IMPORT	void	hll_inthdr_entry_100(void);			/* INT 100 */",
+"IMPORT	void	hll_inthdr_entry_101(void);			/* INT 101 */",
+"IMPORT	void	hll_inthdr_entry_102(void);			/* S12AD_S12ADI0 */",
+"IMPORT	void	hll_inthdr_entry_103(void);			/* S12AD_GBADI */",
+"IMPORT	void	hll_inthdr_entry_104(void);			/* CMPB1_CMPB2 */",
+"IMPORT	void	hll_inthdr_entry_105(void);			/* CMPB1_CMPB3 */",
+"IMPORT	void	hll_inthdr_entry_106(void);			/* ELC_ELSR18I */",
+"IMPORT	void	hll_inthdr_entry_107(void);			/* ELC_ELSR19I */",
+"IMPORT	void	hll_inthdr_entry_108(void);			/* SSI0_SSIF0 */",
+"IMPORT	void	hll_inthdr_entry_109(void);			/* SSI0_SSIRXI0 */",
+"IMPORT	void	hll_inthdr_entry_110(void);			/* SSI0_SSITXI0 */",
+"IMPORT	void	hll_inthdr_entry_111(void);			/* Secure_RD */",
+"IMPORT	void	hll_inthdr_entry_112(void);			/* Secure_WR */",
+"IMPORT	void	hll_inthdr_entry_113(void);			/* Secure_Error */",
+"IMPORT	void	hll_inthdr_entry_114(void);			/* MTU0_TGIA0 */",
+"IMPORT	void	hll_inthdr_entry_115(void);			/* MTU0_TGIB0 */",
+"IMPORT	void	hll_inthdr_entry_116(void);			/* MTU0_TGIC0 */",
+"IMPORT	void	hll_inthdr_entry_117(void);			/* MTU0_TGID0 */",
+"IMPORT	void	hll_inthdr_entry_118(void);			/* MTU0_TCIV0 */",
+"IMPORT	void	hll_inthdr_entry_119(void);			/* MTU0_TGIE0 */",
+"IMPORT	void	hll_inthdr_entry_120(void);			/* MTU0_TGIF0 */",
+"IMPORT	void	hll_inthdr_entry_121(void);			/* MTU1_TGIA1 */",
+"IMPORT	void	hll_inthdr_entry_122(void);			/* MTU1_TGIB1 */",
+"IMPORT	void	hll_inthdr_entry_123(void);			/* MTU1_TCIV1 */",
+"IMPORT	void	hll_inthdr_entry_124(void);			/* MTU1_TCIU1 */",
+"IMPORT	void	hll_inthdr_entry_125(void);			/* MTU2_TGIA2 */",
+"IMPORT	void	hll_inthdr_entry_126(void);			/* MTU2_TGIB2 */",
+"IMPORT	void	hll_inthdr_entry_127(void);			/* MTU2_TCIV2 */",
+"IMPORT	void	hll_inthdr_entry_128(void);			/* MTU2_TCIU2 */",
+"IMPORT	void	hll_inthdr_entry_129(void);			/* MTU3_TGIA3 */",
+"IMPORT	void	hll_inthdr_entry_130(void);			/* MTU3_TGIB3 */",
+"IMPORT	void	hll_inthdr_entry_131(void);			/* MTU3_TGIC3 */",
+"IMPORT	void	hll_inthdr_entry_132(void);			/* MTU3_TGID3 */",
+"IMPORT	void	hll_inthdr_entry_133(void);			/* MTU3_TCIV3 */",
+"IMPORT	void	hll_inthdr_entry_134(void);			/* MTU4_TGIA4 */",
+"IMPORT	void	hll_inthdr_entry_135(void);			/* MTU4_TGIB4 */",
+"IMPORT	void	hll_inthdr_entry_136(void);			/* MTU4_TGIC4 */",
+"IMPORT	void	hll_inthdr_entry_137(void);			/* MTU4_TGID4 */",
+"IMPORT	void	hll_inthdr_entry_138(void);			/* MTU4_TCIV4 */",
+"IMPORT	void	hll_inthdr_entry_139(void);			/* MTU5_TGIU5 */",
+"IMPORT	void	hll_inthdr_entry_140(void);			/* MTU5_TGIV5 */",
+"IMPORT	void	hll_inthdr_entry_141(void);			/* MTU5_TGIW5 */",
+"IMPORT	void	hll_inthdr_entry_142(void);			/* TPU0_TGI0A */",
+"IMPORT	void	hll_inthdr_entry_143(void);			/* TPU0_TGI0B */",
+"IMPORT	void	hll_inthdr_entry_144(void);			/* TPU0_TGI0C */",
+"IMPORT	void	hll_inthdr_entry_145(void);			/* TPU0_TGI0D */",
+"IMPORT	void	hll_inthdr_entry_146(void);			/* TPU0_TCI0V */",
+"IMPORT	void	hll_inthdr_entry_147(void);			/* TPU1_TGI1A */",
+"IMPORT	void	hll_inthdr_entry_148(void);			/* TPU1_TGI1B */",
+"IMPORT	void	hll_inthdr_entry_149(void);			/* TPU1_TCI1V */",
+"IMPORT	void	hll_inthdr_entry_150(void);			/* TPU1_TCI1U */",
+"IMPORT	void	hll_inthdr_entry_151(void);			/* TPU2_TGI2A */",
+"IMPORT	void	hll_inthdr_entry_152(void);			/* TPU2_TGI2B */",
+"IMPORT	void	hll_inthdr_entry_153(void);			/* TPU2_TCI2V */",
+"IMPORT	void	hll_inthdr_entry_154(void);			/* TPU2_TCI2U */",
+"IMPORT	void	hll_inthdr_entry_155(void);			/* TPU3_TGI3A */",
+"IMPORT	void	hll_inthdr_entry_156(void);			/* TPU3_TGI3B */",
+"IMPORT	void	hll_inthdr_entry_157(void);			/* TPU3_TGI3C */",
+"IMPORT	void	hll_inthdr_entry_158(void);			/* TPU3_TGI3D */",
+"IMPORT	void	hll_inthdr_entry_159(void);			/* TPU3_TCI3V */",
+"IMPORT	void	hll_inthdr_entry_160(void);			/* TPU4_TGI4A */",
+"IMPORT	void	hll_inthdr_entry_161(void);			/* TPU4_TGI4B */",
+"IMPORT	void	hll_inthdr_entry_162(void);			/* TPU4_TCI4V */",
+"IMPORT	void	hll_inthdr_entry_163(void);			/* TPU4_TCI4U */",
+"IMPORT	void	hll_inthdr_entry_164(void);			/* TPU5_TGI5A */",
+"IMPORT	void	hll_inthdr_entry_165(void);			/* TPU5_TGI5B */",
+"IMPORT	void	hll_inthdr_entry_166(void);			/* TPU5_TCI5V */",
+"IMPORT	void	hll_inthdr_entry_167(void);			/* TPU5_TCI5U */",
+"IMPORT	void	hll_inthdr_entry_168(void);			/* INT 168 */",
+"IMPORT	void	hll_inthdr_entry_169(void);			/* INT 169 */",
+"IMPORT	void	hll_inthdr_entry_170(void);			/* POE_OEI1 */",
+"IMPORT	void	hll_inthdr_entry_171(void);			/* POE_OEI2 */",
+"IMPORT	void	hll_inthdr_entry_172(void);			/* INT 172 */",
+"IMPORT	void	hll_inthdr_entry_173(void);			/* INT 173 */",
+"IMPORT	void	hll_inthdr_entry_174(void);			/* TMR0_CMIA0 */",
+"IMPORT	void	hll_inthdr_entry_175(void);			/* TMR0_CMIB0 */",
+"IMPORT	void	hll_inthdr_entry_176(void);			/* TMR0_OVI0 */",
+"IMPORT	void	hll_inthdr_entry_177(void);			/* TMR1_CMIA1 */",
+"IMPORT	void	hll_inthdr_entry_178(void);			/* TMR1_CMIB1 */",
+"IMPORT	void	hll_inthdr_entry_179(void);			/* TMR1_OVI1 */",
+"IMPORT	void	hll_inthdr_entry_180(void);			/* TMR2_CMIA2 */",
+"IMPORT	void	hll_inthdr_entry_181(void);			/* TMR2_CMIB2 */",
+"IMPORT	void	hll_inthdr_entry_182(void);			/* TMR2_OVI2 */",
+"IMPORT	void	hll_inthdr_entry_183(void);			/* TMR3_CMIA3 */",
+"IMPORT	void	hll_inthdr_entry_184(void);			/* TMR3_CMIB3 */",
+"IMPORT	void	hll_inthdr_entry_185(void);			/* TMR3_OVI3 */",
+"IMPORT	void	hll_inthdr_entry_186(void);			/* INT 186 */",
+"IMPORT	void	hll_inthdr_entry_187(void);			/* INT 187 */",
+"IMPORT	void	hll_inthdr_entry_188(void);			/* INT 188 */",
+"IMPORT	void	hll_inthdr_entry_189(void);			/* INT 189 */",
+"IMPORT	void	hll_inthdr_entry_190(void);			/* INT 190 */",
+"IMPORT	void	hll_inthdr_entry_191(void);			/* INT 191 */",
+"IMPORT	void	hll_inthdr_entry_192(void);			/* INT 192 */",
+"IMPORT	void	hll_inthdr_entry_193(void);			/* INT 193 */",
+"IMPORT	void	hll_inthdr_entry_194(void);			/* INT 194 */",
+"IMPORT	void	hll_inthdr_entry_195(void);			/* INT 195 */",
+"IMPORT	void	hll_inthdr_entry_196(void);			/* INT 196 */",
+"IMPORT	void	hll_inthdr_entry_197(void);			/* INT 197 */",
+"IMPORT	void	hll_inthdr_entry_198(void);			/* DMAC_DMAC0I*/",
+"IMPORT	void	hll_inthdr_entry_199(void);			/* DMAC_DMAC1I*/",
+"IMPORT	void	hll_inthdr_entry_209(void);			/* DMAC_DMAC2I*/",
+"IMPORT	void	hll_inthdr_entry_201(void);			/* DMAC_DMAC3I*/",
+"IMPORT	void	hll_inthdr_entry_202(void);			/* INT 202 */",
+"IMPORT	void	hll_inthdr_entry_203(void);			/* INT 203 */",
+"IMPORT	void	hll_inthdr_entry_204(void);			/* INT 204 */",
+"IMPORT	void	hll_inthdr_entry_205(void);			/* INT 205 */",
+"IMPORT	void	hll_inthdr_entry_206(void);			/* INT 206 */",
+"IMPORT	void	hll_inthdr_entry_207(void);			/* INT 207 */",
+"IMPORT	void	hll_inthdr_entry_208(void);			/* INT 208 */",
+"IMPORT	void	hll_inthdr_entry_209(void);			/* INT 209 */",
+"IMPORT	void	hll_inthdr_entry_210(void);			/* INT 210 */",
+"IMPORT	void	hll_inthdr_entry_211(void);			/* INT 211 */",
+"IMPORT	void	hll_inthdr_entry_212(void);			/* INT 212 */",
+"IMPORT	void	hll_inthdr_entry_213(void);			/* INT 213 */",
+"IMPORT	void	hll_inthdr_entry_214(void);			/* SCI0_ERI0 */",
+"IMPORT	void	hll_inthdr_entry_215(void);			/* SCI0_RXI0 */",
+"IMPORT	void	hll_inthdr_entry_216(void);			/* SCI0_TXI0 */",
+"IMPORT	void	hll_inthdr_entry_217(void);			/* SCI0_TEI0 */",
+"IMPORT	void	hll_inthdr_entry_218(void);			/* SCI1_ERI1 */",
+"IMPORT	void	hll_inthdr_entry_219(void);			/* SCI1_RXI1 */",
+"IMPORT	void	hll_inthdr_entry_220(void);			/* SCI1_TXI1 */",
+"IMPORT	void	hll_inthdr_entry_221(void);			/* SCI1_TEI1 */",
+"IMPORT	void	hll_inthdr_entry_222(void);			/* SCI5_ERI5 */",
+"IMPORT	void	hll_inthdr_entry_223(void);			/* SCI5_RXI5 */",
+"IMPORT	void	hll_inthdr_entry_224(void);			/* SCI5_TXI5 */",
+"IMPORT	void	hll_inthdr_entry_225(void);			/* SCI5_TEI5 */",
+"IMPORT	void	hll_inthdr_entry_226(void);			/* SCI6_ERI6 */",
+"IMPORT	void	hll_inthdr_entry_227(void);			/* SCI6_RXI6 */",
+"IMPORT	void	hll_inthdr_entry_228(void);			/* SCI6_TXI6 */",
+"IMPORT	void	hll_inthdr_entry_229(void);			/* SCI6_TEI6 */",
+"IMPORT	void	hll_inthdr_entry_230(void);			/* SCI8_ERI8 */",
+"IMPORT	void	hll_inthdr_entry_231(void);			/* SCI8_RXI8 */",
+"IMPORT	void	hll_inthdr_entry_232(void);			/* SCI8_TXI8 */",
+"IMPORT	void	hll_inthdr_entry_233(void);			/* SCI8_TEI8 */",
+"IMPORT	void	hll_inthdr_entry_234(void);			/* SCI9_ERI9 */",
+"IMPORT	void	hll_inthdr_entry_235(void);			/* SCI9_RXI9 */",
+"IMPORT	void	hll_inthdr_entry_236(void);			/* SCI9_TXI9 */",
+"IMPORT	void	hll_inthdr_entry_237(void);			/* SCI9_TEI9 */",
+"IMPORT	void	hll_inthdr_entry_238(void);			/* SCI12_ERI12 */",
+"IMPORT	void	hll_inthdr_entry_239(void);			/* SCI12_RXI12 */",
+"IMPORT	void	hll_inthdr_entry_240(void);			/* SCI12_TXI12 */",
+"IMPORT	void	hll_inthdr_entry_241(void);			/* SCI12_TEI12 */",
+"IMPORT	void	hll_inthdr_entry_242(void);			/* SCI12_SCIX0 */",
+"IMPORT	void	hll_inthdr_entry_243(void);			/* SCI12_SCIX1 */",
+"IMPORT	void	hll_inthdr_entry_244(void);			/* SCI12_SCIX2 */",
+"IMPORT	void	hll_inthdr_entry_245(void);			/* SCI12_SCIX3 */",
+"IMPORT	void	hll_inthdr_entry_246(void);			/* RIIC0_EEI0 */",
+"IMPORT	void	hll_inthdr_entry_247(void);			/* RIIC0_RXI0 */",
+"IMPORT	void	hll_inthdr_entry_248(void);			/* RIIC0_TXI0 */",
+"IMPORT	void	hll_inthdr_entry_249(void);			/* RIIC0_TEI0 */",
+"IMPORT	void	hll_inthdr_entry_250(void);			/* INT 250 */",
+"IMPORT	void	hll_inthdr_entry_251(void);			/* INT 251 */",
+"IMPORT	void	hll_inthdr_entry_252(void);			/* INT 252 */",
+"IMPORT	void	hll_inthdr_entry_253(void);			/* INT 253 */",
+"IMPORT	void	hll_inthdr_entry_254(void);			/* INT 254 */",
+"IMPORT	void	hll_inthdr_entry_255(void);			/* INT 255 */",
+"",
+"#endif /* _SYSDEPEND_CPU_INTVECT_TBL_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.04",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/05/17.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RX231",
+"",
+"/*",
+" *	hllint_tbl.c (RX231)",
+" *	HLL Interrupt Handler Table (ROM)",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * HLL Interrupt Handler Table (ROM)",
+" * ",
+" */",
+"EXPORT void (* const knl_hll_inthdr_rom[])()  __attribute__((section(\".hvectors\"))) = {",
+"	Default_Handler,			/* Unconditional trap */",
+"	Default_Handler,			/* Dispatch */",
+"	Default_Handler,			/* System call (reserved) */",
+"	Default_Handler,			/* System call : tk_ret_int */",
+"	Default_Handler,			/* Debugger support (reserved) */",
+"	Default_Handler,			/* INT 5 */",
+"	Default_Handler,			/* INT 6 */",
+"	Default_Handler,			/* INT 7 */",
+"	Default_Handler,			/* INT 8 */",
+"	Default_Handler,			/* INT 9 */",
+"	Default_Handler,			/* INT 10 */",
+"	Default_Handler,			/* INT 11 */",
+"	Default_Handler,			/* INT 12 */",
+"	Default_Handler,			/* INT 13 */",
+"	Default_Handler,			/* INT 14 */",
+"	Default_Handler,			/* INT 15 */",
+"	Default_Handler,			/* BSC_BUSERR */",
+"	Default_Handler,			/* INT 17 */",
+"	Default_Handler,			/* INT 18 */",
+"	Default_Handler,			/* INT 19 */",
+"	Default_Handler,			/* INT 20 */",
+"	Default_Handler,			/* INT 21 */",
+"	Default_Handler,			/* INT 22 */",
+"	Default_Handler,			/* FCU_FRDYI */",
+"	Default_Handler,			/* INT 24 */",
+"	Default_Handler,			/* INT 25 */",
+"	Default_Handler,			/* INT 26 */",
+"	Default_Handler,			/* ICU_SWINT */",
+"	knl_timer_handler,			/* CMT0_CMI0 **** System timer *****/",
+"	Default_Handler,			/* CMT0_CMI1 */",
+"	Default_Handler,			/* CMT0_CMI2 */",
+"	Default_Handler,			/* CMT0_CMI3 */",
+"	Default_Handler,			/* CAC_FERRF */",
+"	Default_Handler,			/* CAC_MENDF */",
+"	Default_Handler,			/* CAC_OVFF */",
+"	Default_Handler,			/* INT 35 */",
+"	Default_Handler,			/* USB0_D0FIFO0 */",
+"	Default_Handler,			/* USB0_D1FIFO0 */",
+"	Default_Handler,			/* USB0_USBI0*/",
+"	Default_Handler,			/* INT 39 */",
+"	Default_Handler,			/* SDHI_SBFAI */",
+"	Default_Handler,			/* SDHI_CDETI */",
+"	Default_Handler,			/* SDHI_CACI */",
+"	Default_Handler,			/* SDHI_SDACI */",
+"	Default_Handler,			/* RSPI0_SPEI0 */",
+"	Default_Handler,			/* RSPI0_SPRI0 */",
+"	Default_Handler,			/* RSPI0_SPTI0 */",
+"	Default_Handler,			/* RSPI0_SPII0 */",
+"	Default_Handler,			/* INT 48 */",
+"	Default_Handler,			/* INT 49 */",
+"	Default_Handler,			/* INT 50 */",
+"	Default_Handler,			/* INT 51 */",
+"	Default_Handler,			/* RSCAN_COMFRXINT */",
+"	Default_Handler,			/* RSCAN_RXFINT */",
+"	Default_Handler,			/* RSCAN_TXINT */",
+"	Default_Handler,			/* RSCAN_CHERRINT */",
+"	Default_Handler,			/* RSCAN_GLERRINT */",
+"	Default_Handler,			/* DOC_DOPCF */",
+"	Default_Handler,			/* CMPB_CMPB0 */",
+"	Default_Handler,			/* CMPB_CMPB1 */",
+"	Default_Handler,			/* CTSU_CTSUWR */",
+"	Default_Handler,			/* CTSU_CTSURD */",
+"	Default_Handler,			/* CTSU_CTSUFN */",
+"	Default_Handler,			/* RTC_CUP */",
+"	Default_Handler,			/* ICU_IRQ0 */",
+"	Default_Handler,			/* ICU_IRQ1 */",
+"	Default_Handler,			/* ICU_IRQ2 */",
+"	Default_Handler,			/* ICU_IRQ3 */",
+"	Default_Handler,			/* ICU_IRQ4 */",
+"	Default_Handler,			/* ICU_IRQ5 */",
+"	Default_Handler,			/* ICU_IRQ6 */",
+"	Default_Handler,			/* ICU_IRQ7 */",
+"	Default_Handler,			/* INT 72 */",
+"	Default_Handler,			/* INT 73 */",
+"	Default_Handler,			/* INT 74 */",
+"	Default_Handler,			/* INT 75 */",
+"	Default_Handler,			/* INT 76 */",
+"	Default_Handler,			/* INT 77 */",
+"	Default_Handler,			/* INT 78 */",
+"	Default_Handler,			/* INT 79 */",
+"	Default_Handler,			/* ELC_ELSR8I */",
+"	Default_Handler,			/* INT 81 */",
+"	Default_Handler,			/* INT 82 */",
+"	Default_Handler,			/* INT 83 */",
+"	Default_Handler,			/* INT 84 */",
+"	Default_Handler,			/* INT 85 */",
+"	Default_Handler,			/* INT 86 */",
+"	Default_Handler,			/* INT 87 */",
+"	Default_Handler,			/* LVD_LVD1 */",
+"	Default_Handler,			/* LVD_LVD2 */",
+"	Default_Handler,			/* USB0_USBR0 */",
+"	Default_Handler,			/* VBATT_VBTLVDI */",
+"	Default_Handler,			/* RTC_ALM */",
+"	Default_Handler,			/* RTC_PRD */",
+"	Default_Handler,			/* INT 94 */",
+"	Default_Handler,			/* INT 95 */",
+"	Default_Handler,			/* INT 96 */",
+"	Default_Handler,			/* INT 97 */",
+"	Default_Handler,			/* INT 98 */",
+"	Default_Handler,			/* INT 99 */",
+"	Default_Handler,			/* INT 100 */",
+"	Default_Handler,			/* INT 101 */",
+"	Default_Handler,			/* S12AD_S12ADI0 */",
+"	Default_Handler,			/* S12AD_GBADI */",
+"	Default_Handler,			/* CMPB1_CMPB2 */",
+"	Default_Handler,			/* CMPB1_CMPB3 */",
+"	Default_Handler,			/* ELC_ELSR18I */",
+"	Default_Handler,			/* ELC_ELSR19I */",
+"	Default_Handler,			/* SSI0_SSIF0 */",
+"	Default_Handler,			/* SSI0_SSIRXI0 */",
+"	Default_Handler,			/* SSI0_SSITXI0 */",
+"	Default_Handler,			/* Secure_RD */",
+"	Default_Handler,			/* Secure_WR */",
+"	Default_Handler,			/* Secure_Error */",
+"	Default_Handler,			/* MTU0_TGIA0 */",
+"	Default_Handler,			/* MTU0_TGIB0 */",
+"	Default_Handler,			/* MTU0_TGIC0 */",
+"	Default_Handler,			/* MTU0_TGID0 */",
+"	Default_Handler,			/* MTU0_TCIV0 */",
+"	Default_Handler,			/* MTU0_TGIE0 */",
+"	Default_Handler,			/* MTU0_TGIF0 */",
+"	Default_Handler,			/* MTU1_TGIA1 */",
+"	Default_Handler,			/* MTU1_TGIB1 */",
+"	Default_Handler,			/* MTU1_TCIV1 */",
+"	Default_Handler,			/* MTU1_TCIU1 */",
+"	Default_Handler,			/* MTU2_TGIA2 */",
+"	Default_Handler,			/* MTU2_TGIB2 */",
+"	Default_Handler,			/* MTU2_TCIV2 */",
+"	Default_Handler,			/* MTU2_TCIU2 */",
+"	Default_Handler,			/* MTU3_TGIA3 */",
+"	Default_Handler,			/* MTU3_TGIB3 */",
+"	Default_Handler,			/* MTU3_TGIC3 */",
+"	Default_Handler,			/* MTU3_TGID3 */",
+"	Default_Handler,			/* MTU3_TCIV3 */",
+"	Default_Handler,			/* MTU4_TGIA4 */",
+"	Default_Handler,			/* MTU4_TGIB4 */",
+"	Default_Handler,			/* MTU4_TGIC4 */",
+"	Default_Handler,			/* MTU4_TGID4 */",
+"	Default_Handler,			/* MTU4_TCIV4 */",
+"	Default_Handler,			/* MTU5_TGIU5 */",
+"	Default_Handler,			/* MTU5_TGIV5 */",
+"	Default_Handler,			/* MTU5_TGIW5 */",
+"	Default_Handler,			/* TPU0_TGI0A */",
+"	Default_Handler,			/* TPU0_TGI0B */",
+"	Default_Handler,			/* TPU0_TGI0C */",
+"	Default_Handler,			/* TPU0_TGI0D */",
+"	Default_Handler,			/* TPU0_TCI0V */",
+"	Default_Handler,			/* TPU1_TGI1A */",
+"	Default_Handler,			/* TPU1_TGI1B */",
+"	Default_Handler,			/* TPU1_TCI1V */",
+"	Default_Handler,			/* TPU1_TCI1U */",
+"	Default_Handler,			/* TPU2_TGI2A */",
+"	Default_Handler,			/* TPU2_TGI2B */",
+"	Default_Handler,			/* TPU2_TCI2V */",
+"	Default_Handler,			/* TPU2_TCI2U */",
+"	Default_Handler,			/* TPU3_TGI3A */",
+"	Default_Handler,			/* TPU3_TGI3B */",
+"	Default_Handler,			/* TPU3_TGI3C */",
+"	Default_Handler,			/* TPU3_TGI3D */",
+"	Default_Handler,			/* TPU3_TCI3V */",
+"	Default_Handler,			/* TPU4_TGI4A */",
+"	Default_Handler,			/* TPU4_TGI4B */",
+"	Default_Handler,			/* TPU4_TCI4V */",
+"	Default_Handler,			/* TPU4_TCI4U */",
+"	Default_Handler,			/* TPU5_TGI5A */",
+"	Default_Handler,			/* TPU5_TGI5B */",
+"	Default_Handler,			/* TPU5_TCI5V */",
+"	Default_Handler,			/* TPU5_TCI5U */",
+"	Default_Handler,			/* INT 168 */",
+"	Default_Handler,			/* INT 169 */",
+"	Default_Handler,			/* POE_OEI1 */",
+"	Default_Handler,			/* POE_OEI2 */",
+"	Default_Handler,			/* INT 172 */",
+"	Default_Handler,			/* INT 173 */",
+"	Default_Handler,			/* TMR0_CMIA0 */",
+"	Default_Handler,			/* TMR0_CMIB0 */",
+"	Default_Handler,			/* TMR0_OVI0 */",
+"	Default_Handler,			/* TMR1_CMIA1 */",
+"	Default_Handler,			/* TMR1_CMIB1 */",
+"	Default_Handler,			/* TMR1_OVI1 */",
+"	Default_Handler,			/* TMR2_CMIA2 */",
+"	Default_Handler,			/* TMR2_CMIB2 */",
+"	Default_Handler,			/* TMR2_OVI2 */",
+"	Default_Handler,			/* TMR3_CMIA3 */",
+"	Default_Handler,			/* TMR3_CMIB3 */",
+"	Default_Handler,			/* TMR3_OVI3 */",
+"	Default_Handler,			/* INT 186 */",
+"	Default_Handler,			/* INT 187 */",
+"	Default_Handler,			/* INT 188 */",
+"	Default_Handler,			/* INT 189 */",
+"	Default_Handler,			/* INT 190 */",
+"	Default_Handler,			/* INT 191 */",
+"	Default_Handler,			/* INT 192 */",
+"	Default_Handler,			/* INT 193 */",
+"	Default_Handler,			/* INT 194 */",
+"	Default_Handler,			/* INT 195 */",
+"	Default_Handler,			/* INT 196 */",
+"	Default_Handler,			/* INT 197 */",
+"	Default_Handler,			/* DMAC_DMAC0I*/",
+"	Default_Handler,			/* DMAC_DMAC1I*/",
+"	Default_Handler,			/* DMAC_DMAC2I*/",
+"	Default_Handler,			/* DMAC_DMAC3I*/",
+"	Default_Handler,			/* INT 202 */",
+"	Default_Handler,			/* INT 203 */",
+"	Default_Handler,			/* INT 204 */",
+"	Default_Handler,			/* INT 205 */",
+"	Default_Handler,			/* INT 206 */",
+"	Default_Handler,			/* INT 207 */",
+"	Default_Handler,			/* INT 208 */",
+"	Default_Handler,			/* INT 209 */",
+"	Default_Handler,			/* INT 210 */",
+"	Default_Handler,			/* INT 211 */",
+"	Default_Handler,			/* INT 212 */",
+"	Default_Handler,			/* INT 213 */",
+"	Default_Handler,			/* SCI0_ERI0 */",
+"	Default_Handler,			/* SCI0_RXI0 */",
+"	Default_Handler,			/* SCI0_TXI0 */",
+"	Default_Handler,			/* SCI0_TEI0 */",
+"	Default_Handler,			/* SCI1_ERI1 */",
+"	Default_Handler,			/* SCI1_RXI1 */",
+"	Default_Handler,			/* SCI1_TXI1 */",
+"	Default_Handler,			/* SCI1_TEI1 */",
+"	Default_Handler,			/* SCI5_ERI5 */",
+"	Default_Handler,			/* SCI5_RXI5 */",
+"	Default_Handler,			/* SCI5_TXI5 */",
+"	Default_Handler,			/* SCI5_TEI5 */",
+"	Default_Handler,			/* SCI6_ERI6 */",
+"	Default_Handler,			/* SCI6_RXI6 */",
+"	Default_Handler,			/* SCI6_TXI6 */",
+"	Default_Handler,			/* SCI6_TEI6 */",
+"	Default_Handler,			/* SCI8_ERI8 */",
+"	Default_Handler,			/* SCI8_RXI8 */",
+"	Default_Handler,			/* SCI8_TXI8 */",
+"	Default_Handler,			/* SCI8_TEI8 */",
+"	Default_Handler,			/* SCI9_ERI9 */",
+"	Default_Handler,			/* SCI9_RXI9 */",
+"	Default_Handler,			/* SCI9_TXI9 */",
+"	Default_Handler,			/* SCI9_TEI9 */",
+"	Default_Handler,			/* SCI12_ERI12 */",
+"	Default_Handler,			/* SCI12_RXI12 */",
+"	Default_Handler,			/* SCI12_TXI12 */",
+"	Default_Handler,			/* SCI12_TEI12 */",
+"	Default_Handler,			/* SCI12_SCIX0 */",
+"	Default_Handler,			/* SCI12_SCIX1 */",
+"	Default_Handler,			/* SCI12_SCIX2 */",
+"	Default_Handler,			/* SCI12_SCIX3 */",
+"	Default_Handler,			/* RIIC0_EEI0 */",
+"	Default_Handler,			/* RIIC0_RXI0 */",
+"	Default_Handler,			/* RIIC0_TXI0 */",
+"	Default_Handler,			/* RIIC0_TEI0 */",
+"	Default_Handler,			/* INT 250 */",
+"	Default_Handler,			/* INT 251 */",
+"	Default_Handler,			/* INT 252 */",
+"	Default_Handler,			/* INT 253 */",
+"	Default_Handler,			/* INT 254 */",
+"	Default_Handler,			/* INT 255 */",
+"};",
+"",
+"#endif /* CPU_CORE_RX231 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.04",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/05/17.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RX231",
+"",
+"/*",
+" *	intvect_tbl.c (RX231)",
+" *	Interrupt Vector Table (ROM)",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../sysdepend.h\"",
+"",
+"#include \"hllint_ent.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt Vector Table (ROM)",
+" * ",
+" */",
+"EXPORT void (* const knl_int_vect_rom[])()  __attribute__((section(\".rvectors\"))) = {",
+"	hll_inthdr_entry_0,			/* Unconditional trap */",
+"	hll_inthdr_entry_1,			/* Dispatch */",
+"	hll_inthdr_entry_2,			/* System call (reserved) */",
+"	hll_inthdr_entry_3,			/* System call : tk_ret_int */",
+"	hll_inthdr_entry_4,			/* Debugger support (reserved) */",
+"	hll_inthdr_entry_5,			/* INT 5 */",
+"	hll_inthdr_entry_6,			/* INT 6 */",
+"	hll_inthdr_entry_7,			/* INT 7 */",
+"	hll_inthdr_entry_8,			/* INT 8 */",
+"	hll_inthdr_entry_9,			/* INT 9 */",
+"	hll_inthdr_entry_10,			/* INT 10 */",
+"	hll_inthdr_entry_11,			/* INT 11 */",
+"	hll_inthdr_entry_12,			/* INT 12 */",
+"	hll_inthdr_entry_13,			/* INT 13 */",
+"	hll_inthdr_entry_14,			/* INT 14 */",
+"	hll_inthdr_entry_15,			/* INT 15 */",
+"	hll_inthdr_entry_16,			/* BSC_BUSERR */",
+"	hll_inthdr_entry_17,			/* INT 17 */",
+"	hll_inthdr_entry_18,			/* INT 18 */",
+"	hll_inthdr_entry_19,			/* INT 19 */",
+"	hll_inthdr_entry_20,			/* INT 20 */",
+"	hll_inthdr_entry_21,			/* INT 21 */",
+"	hll_inthdr_entry_22,			/* INT 22 */",
+"	hll_inthdr_entry_23,			/* FCU_FRDYI */",
+"	hll_inthdr_entry_24,			/* INT 24 */",
+"	hll_inthdr_entry_25,			/* INT 25 */",
+"	hll_inthdr_entry_26,			/* INT 26 */",
+"	hll_inthdr_entry_27,			/* ICU_SWINT */",
+"	hll_inthdr_entry_28,			/* CMT0_CMI0 */",
+"	hll_inthdr_entry_29,			/* CMT0_CMI1 */",
+"	hll_inthdr_entry_30,			/* CMT0_CMI2 */",
+"	hll_inthdr_entry_31,			/* CMT0_CMI3 */",
+"	hll_inthdr_entry_32,			/* CAC_FERRF */",
+"	hll_inthdr_entry_33,			/* CAC_MENDF */",
+"	hll_inthdr_entry_34,			/* CAC_OVFF */",
+"	hll_inthdr_entry_35,			/* INT 35 */",
+"	hll_inthdr_entry_36,			/* USB0_D0FIFO0 */",
+"	hll_inthdr_entry_37,			/* USB0_D1FIFO0 */",
+"	hll_inthdr_entry_38,			/* USB0_USBI0*/",
+"	hll_inthdr_entry_39,			/* INT 39 */",
+"	hll_inthdr_entry_40,			/* SDHI_SBFAI */",
+"	hll_inthdr_entry_41,			/* SDHI_CDETI */",
+"	hll_inthdr_entry_42,			/* SDHI_CACI */",
+"	hll_inthdr_entry_43,			/* SDHI_SDACI */",
+"	hll_inthdr_entry_44,			/* RSPI0_SPEI0 */",
+"	hll_inthdr_entry_45,			/* RSPI0_SPRI0 */",
+"	hll_inthdr_entry_46,			/* RSPI0_SPTI0 */",
+"	hll_inthdr_entry_47,			/* RSPI0_SPII0 */",
+"	hll_inthdr_entry_48,			/* INT 48 */",
+"	hll_inthdr_entry_49,			/* INT 49 */",
+"	hll_inthdr_entry_50,			/* INT 50 */",
+"	hll_inthdr_entry_51,			/* INT 51 */",
+"	hll_inthdr_entry_52,			/* RSCAN_COMFRXINT */",
+"	hll_inthdr_entry_53,			/* RSCAN_RXFINT */",
+"	hll_inthdr_entry_54,			/* RSCAN_TXINT */",
+"	hll_inthdr_entry_55,			/* RSCAN_CHERRINT */",
+"	hll_inthdr_entry_56,			/* RSCAN_GLERRINT */",
+"	hll_inthdr_entry_57,			/* DOC_DOPCF */",
+"	hll_inthdr_entry_58,			/* CMPB_CMPB0 */",
+"	hll_inthdr_entry_59,			/* CMPB_CMPB1 */",
+"	hll_inthdr_entry_60,			/* CTSU_CTSUWR */",
+"	hll_inthdr_entry_61,			/* CTSU_CTSURD */",
+"	hll_inthdr_entry_62,			/* CTSU_CTSUFN */",
+"	hll_inthdr_entry_63,			/* RTC_CUP */",
+"	hll_inthdr_entry_64,			/* ICU_IRQ0 */",
+"	hll_inthdr_entry_65,			/* ICU_IRQ1 */",
+"	hll_inthdr_entry_66,			/* ICU_IRQ2 */",
+"	hll_inthdr_entry_67,			/* ICU_IRQ3 */",
+"	hll_inthdr_entry_68,			/* ICU_IRQ4 */",
+"	hll_inthdr_entry_69,			/* ICU_IRQ5 */",
+"	hll_inthdr_entry_70,			/* ICU_IRQ6 */",
+"	hll_inthdr_entry_71,			/* ICU_IRQ7 */",
+"	hll_inthdr_entry_72,			/* INT 72 */",
+"	hll_inthdr_entry_73,			/* INT 73 */",
+"	hll_inthdr_entry_74,			/* INT 74 */",
+"	hll_inthdr_entry_75,			/* INT 75 */",
+"	hll_inthdr_entry_76,			/* INT 76 */",
+"	hll_inthdr_entry_77,			/* INT 77 */",
+"	hll_inthdr_entry_78,			/* INT 78 */",
+"	hll_inthdr_entry_79,			/* INT 79 */",
+"	hll_inthdr_entry_80,			/* ELC_ELSR8I */",
+"	hll_inthdr_entry_81,			/* INT 81 */",
+"	hll_inthdr_entry_82,			/* INT 82 */",
+"	hll_inthdr_entry_83,			/* INT 83 */",
+"	hll_inthdr_entry_84,			/* INT 84 */",
+"	hll_inthdr_entry_85,			/* INT 85 */",
+"	hll_inthdr_entry_86,			/* INT 86 */",
+"	hll_inthdr_entry_87,			/* INT 87 */",
+"	hll_inthdr_entry_88,			/* LVD_LVD1 */",
+"	hll_inthdr_entry_89,			/* LVD_LVD2 */",
+"	hll_inthdr_entry_90,			/* USB0_USBR0 */",
+"	hll_inthdr_entry_91,			/* VBATT_VBTLVDI */",
+"	hll_inthdr_entry_92,			/* RTC_ALM */",
+"	hll_inthdr_entry_93,			/* RTC_PRD */",
+"	hll_inthdr_entry_94,			/* INT 94 */",
+"	hll_inthdr_entry_95,			/* INT 95 */",
+"	hll_inthdr_entry_96,			/* INT 96 */",
+"	hll_inthdr_entry_97,			/* INT 97 */",
+"	hll_inthdr_entry_98,			/* INT 98 */",
+"	hll_inthdr_entry_99,			/* INT 99 */",
+"	hll_inthdr_entry_100,			/* INT 100 */",
+"	hll_inthdr_entry_101,			/* INT 101 */",
+"	hll_inthdr_entry_102,			/* S12AD_S12ADI0 */",
+"	hll_inthdr_entry_103,			/* S12AD_GBADI */",
+"	hll_inthdr_entry_104,			/* CMPB1_CMPB2 */",
+"	hll_inthdr_entry_105,			/* CMPB1_CMPB3 */",
+"	hll_inthdr_entry_106,			/* ELC_ELSR18I */",
+"	hll_inthdr_entry_107,			/* ELC_ELSR19I */",
+"	hll_inthdr_entry_108,			/* SSI0_SSIF0 */",
+"	hll_inthdr_entry_109,			/* SSI0_SSIRXI0 */",
+"	hll_inthdr_entry_110,			/* SSI0_SSITXI0 */",
+"	hll_inthdr_entry_111,			/* Secure_RD */",
+"	hll_inthdr_entry_112,			/* Secure_WR */",
+"	hll_inthdr_entry_113,			/* Secure_Error */",
+"	hll_inthdr_entry_114,			/* MTU0_TGIA0 */",
+"	hll_inthdr_entry_115,			/* MTU0_TGIB0 */",
+"	hll_inthdr_entry_116,			/* MTU0_TGIC0 */",
+"	hll_inthdr_entry_117,			/* MTU0_TGID0 */",
+"	hll_inthdr_entry_118,			/* MTU0_TCIV0 */",
+"	hll_inthdr_entry_119,			/* MTU0_TGIE0 */",
+"	hll_inthdr_entry_120,			/* MTU0_TGIF0 */",
+"	hll_inthdr_entry_121,			/* MTU1_TGIA1 */",
+"	hll_inthdr_entry_122,			/* MTU1_TGIB1 */",
+"	hll_inthdr_entry_123,			/* MTU1_TCIV1 */",
+"	hll_inthdr_entry_124,			/* MTU1_TCIU1 */",
+"	hll_inthdr_entry_125,			/* MTU2_TGIA2 */",
+"	hll_inthdr_entry_126,			/* MTU2_TGIB2 */",
+"	hll_inthdr_entry_127,			/* MTU2_TCIV2 */",
+"	hll_inthdr_entry_128,			/* MTU2_TCIU2 */",
+"	hll_inthdr_entry_129,			/* MTU3_TGIA3 */",
+"	hll_inthdr_entry_130,			/* MTU3_TGIB3 */",
+"	hll_inthdr_entry_131,			/* MTU3_TGIC3 */",
+"	hll_inthdr_entry_132,			/* MTU3_TGID3 */",
+"	hll_inthdr_entry_133,			/* MTU3_TCIV3 */",
+"	hll_inthdr_entry_134,			/* MTU4_TGIA4 */",
+"	hll_inthdr_entry_135,			/* MTU4_TGIB4 */",
+"	hll_inthdr_entry_136,			/* MTU4_TGIC4 */",
+"	hll_inthdr_entry_137,			/* MTU4_TGID4 */",
+"	hll_inthdr_entry_138,			/* MTU4_TCIV4 */",
+"	hll_inthdr_entry_139,			/* MTU5_TGIU5 */",
+"	hll_inthdr_entry_140,			/* MTU5_TGIV5 */",
+"	hll_inthdr_entry_141,			/* MTU5_TGIW5 */",
+"	hll_inthdr_entry_142,			/* TPU0_TGI0A */",
+"	hll_inthdr_entry_143,			/* TPU0_TGI0B */",
+"	hll_inthdr_entry_144,			/* TPU0_TGI0C */",
+"	hll_inthdr_entry_145,			/* TPU0_TGI0D */",
+"	hll_inthdr_entry_146,			/* TPU0_TCI0V */",
+"	hll_inthdr_entry_147,			/* TPU1_TGI1A */",
+"	hll_inthdr_entry_148,			/* TPU1_TGI1B */",
+"	hll_inthdr_entry_149,			/* TPU1_TCI1V */",
+"	hll_inthdr_entry_150,			/* TPU1_TCI1U */",
+"	hll_inthdr_entry_151,			/* TPU2_TGI2A */",
+"	hll_inthdr_entry_152,			/* TPU2_TGI2B */",
+"	hll_inthdr_entry_153,			/* TPU2_TCI2V */",
+"	hll_inthdr_entry_154,			/* TPU2_TCI2U */",
+"	hll_inthdr_entry_155,			/* TPU3_TGI3A */",
+"	hll_inthdr_entry_156,			/* TPU3_TGI3B */",
+"	hll_inthdr_entry_157,			/* TPU3_TGI3C */",
+"	hll_inthdr_entry_158,			/* TPU3_TGI3D */",
+"	hll_inthdr_entry_159,			/* TPU3_TCI3V */",
+"	hll_inthdr_entry_160,			/* TPU4_TGI4A */",
+"	hll_inthdr_entry_161,			/* TPU4_TGI4B */",
+"	hll_inthdr_entry_162,			/* TPU4_TCI4V */",
+"	hll_inthdr_entry_163,			/* TPU4_TCI4U */",
+"	hll_inthdr_entry_164,			/* TPU5_TGI5A */",
+"	hll_inthdr_entry_165,			/* TPU5_TGI5B */",
+"	hll_inthdr_entry_166,			/* TPU5_TCI5V */",
+"	hll_inthdr_entry_167,			/* TPU5_TCI5U */",
+"	hll_inthdr_entry_168,			/* INT 168 */",
+"	hll_inthdr_entry_169,			/* INT 169 */",
+"	hll_inthdr_entry_170,			/* POE_OEI1 */",
+"	hll_inthdr_entry_171,			/* POE_OEI2 */",
+"	hll_inthdr_entry_172,			/* INT 172 */",
+"	hll_inthdr_entry_173,			/* INT 173 */",
+"	hll_inthdr_entry_174,			/* TMR0_CMIA0 */",
+"	hll_inthdr_entry_175,			/* TMR0_CMIB0 */",
+"	hll_inthdr_entry_176,			/* TMR0_OVI0 */",
+"	hll_inthdr_entry_177,			/* TMR1_CMIA1 */",
+"	hll_inthdr_entry_178,			/* TMR1_CMIB1 */",
+"	hll_inthdr_entry_179,			/* TMR1_OVI1 */",
+"	hll_inthdr_entry_180,			/* TMR2_CMIA2 */",
+"	hll_inthdr_entry_181,			/* TMR2_CMIB2 */",
+"	hll_inthdr_entry_182,			/* TMR2_OVI2 */",
+"	hll_inthdr_entry_183,			/* TMR3_CMIA3 */",
+"	hll_inthdr_entry_184,			/* TMR3_CMIB3 */",
+"	hll_inthdr_entry_185,			/* TMR3_OVI3 */",
+"	hll_inthdr_entry_186,			/* INT 186 */",
+"	hll_inthdr_entry_187,			/* INT 187 */",
+"	hll_inthdr_entry_188,			/* INT 188 */",
+"	hll_inthdr_entry_189,			/* INT 189 */",
+"	hll_inthdr_entry_190,			/* INT 190 */",
+"	hll_inthdr_entry_191,			/* INT 191 */",
+"	hll_inthdr_entry_192,			/* INT 192 */",
+"	hll_inthdr_entry_193,			/* INT 193 */",
+"	hll_inthdr_entry_194,			/* INT 194 */",
+"	hll_inthdr_entry_195,			/* INT 195 */",
+"	hll_inthdr_entry_196,			/* INT 196 */",
+"	hll_inthdr_entry_197,			/* INT 197 */",
+"	hll_inthdr_entry_198,			/* DMAC_DMAC0I*/",
+"	hll_inthdr_entry_199,			/* DMAC_DMAC1I*/",
+"	hll_inthdr_entry_209,			/* DMAC_DMAC2I*/",
+"	hll_inthdr_entry_201,			/* DMAC_DMAC3I*/",
+"	hll_inthdr_entry_202,			/* INT 202 */",
+"	hll_inthdr_entry_203,			/* INT 203 */",
+"	hll_inthdr_entry_204,			/* INT 204 */",
+"	hll_inthdr_entry_205,			/* INT 205 */",
+"	hll_inthdr_entry_206,			/* INT 206 */",
+"	hll_inthdr_entry_207,			/* INT 207 */",
+"	hll_inthdr_entry_208,			/* INT 208 */",
+"	hll_inthdr_entry_209,			/* INT 209 */",
+"	hll_inthdr_entry_210,			/* INT 210 */",
+"	hll_inthdr_entry_211,			/* INT 211 */",
+"	hll_inthdr_entry_212,			/* INT 212 */",
+"	hll_inthdr_entry_213,			/* INT 213 */",
+"	hll_inthdr_entry_214,			/* SCI0_ERI0 */",
+"	hll_inthdr_entry_215,			/* SCI0_RXI0 */",
+"	hll_inthdr_entry_216,			/* SCI0_TXI0 */",
+"	hll_inthdr_entry_217,			/* SCI0_TEI0 */",
+"	hll_inthdr_entry_218,			/* SCI1_ERI1 */",
+"	hll_inthdr_entry_219,			/* SCI1_RXI1 */",
+"	hll_inthdr_entry_220,			/* SCI1_TXI1 */",
+"	hll_inthdr_entry_221,			/* SCI1_TEI1 */",
+"	hll_inthdr_entry_222,			/* SCI5_ERI5 */",
+"	hll_inthdr_entry_223,			/* SCI5_RXI5 */",
+"	hll_inthdr_entry_224,			/* SCI5_TXI5 */",
+"	hll_inthdr_entry_225,			/* SCI5_TEI5 */",
+"	hll_inthdr_entry_226,			/* SCI6_ERI6 */",
+"	hll_inthdr_entry_227,			/* SCI6_RXI6 */",
+"	hll_inthdr_entry_228,			/* SCI6_TXI6 */",
+"	hll_inthdr_entry_229,			/* SCI6_TEI6 */",
+"	hll_inthdr_entry_230,			/* SCI8_ERI8 */",
+"	hll_inthdr_entry_231,			/* SCI8_RXI8 */",
+"	hll_inthdr_entry_232,			/* SCI8_TXI8 */",
+"	hll_inthdr_entry_233,			/* SCI8_TEI8 */",
+"	hll_inthdr_entry_234,			/* SCI9_ERI9 */",
+"	hll_inthdr_entry_235,			/* SCI9_RXI9 */",
+"	hll_inthdr_entry_236,			/* SCI9_TXI9 */",
+"	hll_inthdr_entry_237,			/* SCI9_TEI9 */",
+"	hll_inthdr_entry_238,			/* SCI12_ERI12 */",
+"	hll_inthdr_entry_239,			/* SCI12_RXI12 */",
+"	hll_inthdr_entry_240,			/* SCI12_TXI12 */",
+"	hll_inthdr_entry_241,			/* SCI12_TEI12 */",
+"	hll_inthdr_entry_242,			/* SCI12_SCIX0 */",
+"	hll_inthdr_entry_243,			/* SCI12_SCIX1 */",
+"	hll_inthdr_entry_244,			/* SCI12_SCIX2 */",
+"	hll_inthdr_entry_245,			/* SCI12_SCIX3 */",
+"	hll_inthdr_entry_246,			/* RIIC0_EEI0 */",
+"	hll_inthdr_entry_247,			/* RIIC0_RXI0 */",
+"	hll_inthdr_entry_248,			/* RIIC0_TXI0 */",
+"	hll_inthdr_entry_249,			/* RIIC0_TEI0 */",
+"	hll_inthdr_entry_250,			/* INT 250 */",
+"	hll_inthdr_entry_251,			/* INT 251 */",
+"	hll_inthdr_entry_252,			/* INT 252 */",
+"	hll_inthdr_entry_253,			/* INT 253 */",
+"	hll_inthdr_entry_254,			/* INT 254 */",
+"	hll_inthdr_entry_255,			/* INT 255 */",
+"};",
+"",
+"#endif /* CPU_CORE_RX231 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (RX231)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_SYSDEPEND_",
+"#define _SYSDEPEND_CPU_SYSDEPEND_",
+"",
+"#include \"../core/rxv2/sysdepend.h\"",
+"",
+"/*",
+" *    Interrupt Vector Table (ROM) (intvect_tbl.c)",
+" */",
+"IMPORT void (* const knl_int_vect_rom[])();",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * HLL Interrupt Handler Table (ROM) (hllint_tbl.c)",
+" * ",
+" */",
+"IMPORT void (* const knl_hll_inthdr_rom[])();",
+"",
+"#endif /* _SYSDEPEND_CPU_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (RX231)",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_SYSTIMER_",
+"#define _SYSDEPEND_CPU_SYSTIMER_",
+"",
+"#include \"../core/rxv2/sys_timer.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_SYSTIMER_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (RX65N)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CPUSTATUS_",
+"#define _SYSDEPEND_CPU_CPUSTATUS_",
+"",
+"#include \"../core/rxv2/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" * ",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (RX65N)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CPUTASK_",
+"#define _SYSDEPEND_CPU_CPUTASK_",
+"",
+"#include \"../core/rxv2/cpu_task.h\"",
+"",
+"#endif  /*_SYSDEPEND_CPU_CPUTASK_ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RX65N",
+"",
+"/*",
+" *	groupint_tbl.c (RX65N)",
+" *	Group Interrupt Handler Table",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../sysdepend.h\"",
+"",
+"#if USE_GROUP_INT",
+"/*",
+" * Group Interrupt Handler Table",
+" */",
+"LOCAL FP gint_tbl[N_GROUP_INT];",
+"",
+"/*",
+" * Set Group int. handler table (Used knl_define_inthdr())",
+" */",
+"EXPORT ER knl_define_gint( INT intno, FP inthdr)",
+"{",
+"	if(intno < INTNO_GROUP_TOP + N_GROUP_INT) {",
+"		gint_tbl[intno - INTNO_GROUP_TOP] = inthdr;",
+"	} else {",
+"		return E_PAR;",
+"	}",
+"	return E_OK;",
+"}",
+"",
+"/*",
+" * Common Group interrupt handler",
+" */",
+"EXPORT void knl_group_inthdr(UW intno)",
+"{",
+"	FP	gint_hdr;",
+"	UW	grp;",
+"	UW	hdrno, i;",
+"",
+"	ClearInt(intno);",
+"",
+"	switch(intno) {",
+"	case INTNO_GROUPBE0:",
+"		grp = in_w(ICU_GRPBE0);",
+"		hdrno = 0;",
+"		break;",
+"	case INTNO_GROUPBL0:",
+"		grp = in_w(ICU_GRPBL0);",
+"		hdrno = 32;",
+"		break;",
+"	case INTNO_GROUPBL1:",
+"		grp = in_w(ICU_GRPBL1);",
+"		hdrno = 64;",
+"		break;",
+"	case INTNO_GROUPBL2:",
+"		grp = in_w(ICU_GRPBL2);",
+"		hdrno = 96;",
+"		break;",
+"	case INTNO_GROUPAL0:",
+"		grp = in_w(ICU_GRPAL0);",
+"		hdrno = 128;",
+"		break;",
+"	case INTNO_GROUPAL1:",
+"		grp = in_w(ICU_GRPAL1);",
+"		hdrno = 160;",
+"		break;",
+"	}",
+"",
+"	for(i = 0; i < 32; i++) {",
+"		if(grp & (1<<i)) {",
+"			gint_hdr = gint_tbl[hdrno + i];",
+"			if(gint_hdr != NULL) {",
+"				(*gint_hdr)(INTNO_GROUP_TOP + hdrno + i);",
+"			} else {",
+"				Default_Handler(intno);",
+"			}",
+"		}",
+"	}",
+"}",
+"",
+"#endif /* USE_GROUP_INT */",
+"#endif /* CPU_RX65N *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	hllint_ent.h (RX65N)",
+" *	HLL Interrupt routine entry",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../sysdepend.h\"",
+"",
+"#ifndef _SYSDEPEND_CPU_INTVECT_TBL_",
+"#define _SYSDEPEND_CPU_INTVECT_TBL_",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * HLL Interrupt routine entry",
+" * ",
+" */",
+"IMPORT	void	hll_inthdr_entry_0(void);",
+"IMPORT	void	hll_inthdr_entry_1(void);",
+"IMPORT	void	hll_inthdr_entry_2(void);",
+"IMPORT	void	hll_inthdr_entry_3(void);",
+"IMPORT	void	hll_inthdr_entry_4(void);",
+"IMPORT	void	hll_inthdr_entry_5(void);",
+"IMPORT	void	hll_inthdr_entry_6(void);",
+"IMPORT	void	hll_inthdr_entry_7(void);",
+"IMPORT	void	hll_inthdr_entry_8(void);",
+"IMPORT	void	hll_inthdr_entry_9(void);",
+"IMPORT	void	hll_inthdr_entry_10(void);",
+"IMPORT	void	hll_inthdr_entry_11(void);",
+"IMPORT	void	hll_inthdr_entry_12(void);",
+"IMPORT	void	hll_inthdr_entry_13(void);",
+"IMPORT	void	hll_inthdr_entry_14(void);",
+"IMPORT	void	hll_inthdr_entry_15(void);",
+"IMPORT	void	hll_inthdr_entry_16(void);",
+"IMPORT	void	hll_inthdr_entry_17(void);",
+"IMPORT	void	hll_inthdr_entry_18(void);",
+"IMPORT	void	hll_inthdr_entry_19(void);",
+"IMPORT	void	hll_inthdr_entry_20(void);",
+"IMPORT	void	hll_inthdr_entry_21(void);",
+"IMPORT	void	hll_inthdr_entry_22(void);",
+"IMPORT	void	hll_inthdr_entry_23(void);",
+"IMPORT	void	hll_inthdr_entry_24(void);",
+"IMPORT	void	hll_inthdr_entry_25(void);",
+"IMPORT	void	hll_inthdr_entry_26(void);",
+"IMPORT	void	hll_inthdr_entry_27(void);",
+"IMPORT	void	hll_inthdr_entry_28(void);",
+"IMPORT	void	hll_inthdr_entry_29(void);",
+"IMPORT	void	hll_inthdr_entry_30(void);",
+"IMPORT	void	hll_inthdr_entry_31(void);",
+"IMPORT	void	hll_inthdr_entry_32(void);",
+"IMPORT	void	hll_inthdr_entry_33(void);",
+"IMPORT	void	hll_inthdr_entry_34(void);",
+"IMPORT	void	hll_inthdr_entry_35(void);",
+"IMPORT	void	hll_inthdr_entry_36(void);",
+"IMPORT	void	hll_inthdr_entry_37(void);",
+"IMPORT	void	hll_inthdr_entry_38(void);",
+"IMPORT	void	hll_inthdr_entry_39(void);",
+"IMPORT	void	hll_inthdr_entry_40(void);",
+"IMPORT	void	hll_inthdr_entry_41(void);",
+"IMPORT	void	hll_inthdr_entry_42(void);",
+"IMPORT	void	hll_inthdr_entry_43(void);",
+"IMPORT	void	hll_inthdr_entry_44(void);",
+"IMPORT	void	hll_inthdr_entry_45(void);",
+"IMPORT	void	hll_inthdr_entry_46(void);",
+"IMPORT	void	hll_inthdr_entry_47(void);",
+"IMPORT	void	hll_inthdr_entry_48(void);",
+"IMPORT	void	hll_inthdr_entry_49(void);",
+"IMPORT	void	hll_inthdr_entry_50(void);",
+"IMPORT	void	hll_inthdr_entry_51(void);",
+"IMPORT	void	hll_inthdr_entry_52(void);",
+"IMPORT	void	hll_inthdr_entry_53(void);",
+"IMPORT	void	hll_inthdr_entry_54(void);",
+"IMPORT	void	hll_inthdr_entry_55(void);",
+"IMPORT	void	hll_inthdr_entry_56(void);",
+"IMPORT	void	hll_inthdr_entry_57(void);",
+"IMPORT	void	hll_inthdr_entry_58(void);",
+"IMPORT	void	hll_inthdr_entry_59(void);",
+"IMPORT	void	hll_inthdr_entry_60(void);",
+"IMPORT	void	hll_inthdr_entry_61(void);",
+"IMPORT	void	hll_inthdr_entry_62(void);",
+"IMPORT	void	hll_inthdr_entry_63(void);",
+"IMPORT	void	hll_inthdr_entry_64(void);",
+"IMPORT	void	hll_inthdr_entry_65(void);",
+"IMPORT	void	hll_inthdr_entry_66(void);",
+"IMPORT	void	hll_inthdr_entry_67(void);",
+"IMPORT	void	hll_inthdr_entry_68(void);",
+"IMPORT	void	hll_inthdr_entry_69(void);",
+"IMPORT	void	hll_inthdr_entry_70(void);",
+"IMPORT	void	hll_inthdr_entry_71(void);",
+"IMPORT	void	hll_inthdr_entry_72(void);",
+"IMPORT	void	hll_inthdr_entry_73(void);",
+"IMPORT	void	hll_inthdr_entry_74(void);",
+"IMPORT	void	hll_inthdr_entry_75(void);",
+"IMPORT	void	hll_inthdr_entry_76(void);",
+"IMPORT	void	hll_inthdr_entry_77(void);",
+"IMPORT	void	hll_inthdr_entry_78(void);",
+"IMPORT	void	hll_inthdr_entry_79(void);",
+"IMPORT	void	hll_inthdr_entry_80(void);",
+"IMPORT	void	hll_inthdr_entry_81(void);",
+"IMPORT	void	hll_inthdr_entry_82(void);",
+"IMPORT	void	hll_inthdr_entry_83(void);",
+"IMPORT	void	hll_inthdr_entry_84(void);",
+"IMPORT	void	hll_inthdr_entry_85(void);",
+"IMPORT	void	hll_inthdr_entry_86(void);",
+"IMPORT	void	hll_inthdr_entry_87(void);",
+"IMPORT	void	hll_inthdr_entry_88(void);",
+"IMPORT	void	hll_inthdr_entry_89(void);",
+"IMPORT	void	hll_inthdr_entry_90(void);",
+"IMPORT	void	hll_inthdr_entry_91(void);",
+"IMPORT	void	hll_inthdr_entry_92(void);",
+"IMPORT	void	hll_inthdr_entry_93(void);",
+"IMPORT	void	hll_inthdr_entry_94(void);",
+"IMPORT	void	hll_inthdr_entry_95(void);",
+"IMPORT	void	hll_inthdr_entry_96(void);",
+"IMPORT	void	hll_inthdr_entry_97(void);",
+"IMPORT	void	hll_inthdr_entry_98(void);",
+"IMPORT	void	hll_inthdr_entry_99(void);",
+"IMPORT	void	hll_inthdr_entry_100(void);",
+"IMPORT	void	hll_inthdr_entry_101(void);",
+"IMPORT	void	hll_inthdr_entry_102(void);",
+"IMPORT	void	hll_inthdr_entry_103(void);",
+"IMPORT	void	hll_inthdr_entry_104(void);",
+"IMPORT	void	hll_inthdr_entry_105(void);",
+"IMPORT	void	hll_inthdr_entry_106(void);",
+"IMPORT	void	hll_inthdr_entry_107(void);",
+"IMPORT	void	hll_inthdr_entry_108(void);",
+"IMPORT	void	hll_inthdr_entry_109(void);",
+"IMPORT	void	hll_inthdr_entry_110(void);",
+"IMPORT	void	hll_inthdr_entry_111(void);",
+"IMPORT	void	hll_inthdr_entry_112(void);",
+"IMPORT	void	hll_inthdr_entry_113(void);",
+"IMPORT	void	hll_inthdr_entry_114(void);",
+"IMPORT	void	hll_inthdr_entry_115(void);",
+"IMPORT	void	hll_inthdr_entry_116(void);",
+"IMPORT	void	hll_inthdr_entry_117(void);",
+"IMPORT	void	hll_inthdr_entry_118(void);",
+"IMPORT	void	hll_inthdr_entry_119(void);",
+"IMPORT	void	hll_inthdr_entry_120(void);",
+"IMPORT	void	hll_inthdr_entry_121(void);",
+"IMPORT	void	hll_inthdr_entry_122(void);",
+"IMPORT	void	hll_inthdr_entry_123(void);",
+"IMPORT	void	hll_inthdr_entry_124(void);",
+"IMPORT	void	hll_inthdr_entry_125(void);",
+"IMPORT	void	hll_inthdr_entry_126(void);",
+"IMPORT	void	hll_inthdr_entry_127(void);",
+"IMPORT	void	hll_inthdr_entry_128(void);",
+"IMPORT	void	hll_inthdr_entry_129(void);",
+"IMPORT	void	hll_inthdr_entry_130(void);",
+"IMPORT	void	hll_inthdr_entry_131(void);",
+"IMPORT	void	hll_inthdr_entry_132(void);",
+"IMPORT	void	hll_inthdr_entry_133(void);",
+"IMPORT	void	hll_inthdr_entry_134(void);",
+"IMPORT	void	hll_inthdr_entry_135(void);",
+"IMPORT	void	hll_inthdr_entry_136(void);",
+"IMPORT	void	hll_inthdr_entry_137(void);",
+"IMPORT	void	hll_inthdr_entry_138(void);",
+"IMPORT	void	hll_inthdr_entry_139(void);",
+"IMPORT	void	hll_inthdr_entry_140(void);",
+"IMPORT	void	hll_inthdr_entry_141(void);",
+"IMPORT	void	hll_inthdr_entry_142(void);",
+"IMPORT	void	hll_inthdr_entry_143(void);",
+"IMPORT	void	hll_inthdr_entry_144(void);",
+"IMPORT	void	hll_inthdr_entry_145(void);",
+"IMPORT	void	hll_inthdr_entry_146(void);",
+"IMPORT	void	hll_inthdr_entry_147(void);",
+"IMPORT	void	hll_inthdr_entry_148(void);",
+"IMPORT	void	hll_inthdr_entry_149(void);",
+"IMPORT	void	hll_inthdr_entry_150(void);",
+"IMPORT	void	hll_inthdr_entry_151(void);",
+"IMPORT	void	hll_inthdr_entry_152(void);",
+"IMPORT	void	hll_inthdr_entry_153(void);",
+"IMPORT	void	hll_inthdr_entry_154(void);",
+"IMPORT	void	hll_inthdr_entry_155(void);",
+"IMPORT	void	hll_inthdr_entry_156(void);",
+"IMPORT	void	hll_inthdr_entry_157(void);",
+"IMPORT	void	hll_inthdr_entry_158(void);",
+"IMPORT	void	hll_inthdr_entry_159(void);",
+"IMPORT	void	hll_inthdr_entry_160(void);",
+"IMPORT	void	hll_inthdr_entry_161(void);",
+"IMPORT	void	hll_inthdr_entry_162(void);",
+"IMPORT	void	hll_inthdr_entry_163(void);",
+"IMPORT	void	hll_inthdr_entry_164(void);",
+"IMPORT	void	hll_inthdr_entry_165(void);",
+"IMPORT	void	hll_inthdr_entry_166(void);",
+"IMPORT	void	hll_inthdr_entry_167(void);",
+"IMPORT	void	hll_inthdr_entry_168(void);",
+"IMPORT	void	hll_inthdr_entry_169(void);",
+"IMPORT	void	hll_inthdr_entry_170(void);",
+"IMPORT	void	hll_inthdr_entry_171(void);",
+"IMPORT	void	hll_inthdr_entry_172(void);",
+"IMPORT	void	hll_inthdr_entry_173(void);",
+"IMPORT	void	hll_inthdr_entry_174(void);",
+"IMPORT	void	hll_inthdr_entry_175(void);",
+"IMPORT	void	hll_inthdr_entry_176(void);",
+"IMPORT	void	hll_inthdr_entry_177(void);",
+"IMPORT	void	hll_inthdr_entry_178(void);",
+"IMPORT	void	hll_inthdr_entry_179(void);",
+"IMPORT	void	hll_inthdr_entry_180(void);",
+"IMPORT	void	hll_inthdr_entry_181(void);",
+"IMPORT	void	hll_inthdr_entry_182(void);",
+"IMPORT	void	hll_inthdr_entry_183(void);",
+"IMPORT	void	hll_inthdr_entry_184(void);",
+"IMPORT	void	hll_inthdr_entry_185(void);",
+"IMPORT	void	hll_inthdr_entry_186(void);",
+"IMPORT	void	hll_inthdr_entry_187(void);",
+"IMPORT	void	hll_inthdr_entry_188(void);",
+"IMPORT	void	hll_inthdr_entry_189(void);",
+"IMPORT	void	hll_inthdr_entry_190(void);",
+"IMPORT	void	hll_inthdr_entry_191(void);",
+"IMPORT	void	hll_inthdr_entry_192(void);",
+"IMPORT	void	hll_inthdr_entry_193(void);",
+"IMPORT	void	hll_inthdr_entry_194(void);",
+"IMPORT	void	hll_inthdr_entry_195(void);",
+"IMPORT	void	hll_inthdr_entry_196(void);",
+"IMPORT	void	hll_inthdr_entry_197(void);",
+"IMPORT	void	hll_inthdr_entry_198(void);",
+"IMPORT	void	hll_inthdr_entry_199(void);",
+"IMPORT	void	hll_inthdr_entry_209(void);",
+"IMPORT	void	hll_inthdr_entry_201(void);",
+"IMPORT	void	hll_inthdr_entry_202(void);",
+"IMPORT	void	hll_inthdr_entry_203(void);",
+"IMPORT	void	hll_inthdr_entry_204(void);",
+"IMPORT	void	hll_inthdr_entry_205(void);",
+"IMPORT	void	hll_inthdr_entry_206(void);",
+"IMPORT	void	hll_inthdr_entry_207(void);",
+"IMPORT	void	hll_inthdr_entry_208(void);",
+"IMPORT	void	hll_inthdr_entry_209(void);",
+"IMPORT	void	hll_inthdr_entry_210(void);",
+"IMPORT	void	hll_inthdr_entry_211(void);",
+"IMPORT	void	hll_inthdr_entry_212(void);",
+"IMPORT	void	hll_inthdr_entry_213(void);",
+"IMPORT	void	hll_inthdr_entry_214(void);",
+"IMPORT	void	hll_inthdr_entry_215(void);",
+"IMPORT	void	hll_inthdr_entry_216(void);",
+"IMPORT	void	hll_inthdr_entry_217(void);",
+"IMPORT	void	hll_inthdr_entry_218(void);",
+"IMPORT	void	hll_inthdr_entry_219(void);",
+"IMPORT	void	hll_inthdr_entry_220(void);",
+"IMPORT	void	hll_inthdr_entry_221(void);",
+"IMPORT	void	hll_inthdr_entry_222(void);",
+"IMPORT	void	hll_inthdr_entry_223(void);",
+"IMPORT	void	hll_inthdr_entry_224(void);",
+"IMPORT	void	hll_inthdr_entry_225(void);",
+"IMPORT	void	hll_inthdr_entry_226(void);",
+"IMPORT	void	hll_inthdr_entry_227(void);",
+"IMPORT	void	hll_inthdr_entry_228(void);",
+"IMPORT	void	hll_inthdr_entry_229(void);",
+"IMPORT	void	hll_inthdr_entry_230(void);",
+"IMPORT	void	hll_inthdr_entry_231(void);",
+"IMPORT	void	hll_inthdr_entry_232(void);",
+"IMPORT	void	hll_inthdr_entry_233(void);",
+"IMPORT	void	hll_inthdr_entry_234(void);",
+"IMPORT	void	hll_inthdr_entry_235(void);",
+"IMPORT	void	hll_inthdr_entry_236(void);",
+"IMPORT	void	hll_inthdr_entry_237(void);",
+"IMPORT	void	hll_inthdr_entry_238(void);",
+"IMPORT	void	hll_inthdr_entry_239(void);",
+"IMPORT	void	hll_inthdr_entry_240(void);",
+"IMPORT	void	hll_inthdr_entry_241(void);",
+"IMPORT	void	hll_inthdr_entry_242(void);",
+"IMPORT	void	hll_inthdr_entry_243(void);",
+"IMPORT	void	hll_inthdr_entry_244(void);",
+"IMPORT	void	hll_inthdr_entry_245(void);",
+"IMPORT	void	hll_inthdr_entry_246(void);",
+"IMPORT	void	hll_inthdr_entry_247(void);",
+"IMPORT	void	hll_inthdr_entry_248(void);",
+"IMPORT	void	hll_inthdr_entry_249(void);",
+"IMPORT	void	hll_inthdr_entry_250(void);",
+"IMPORT	void	hll_inthdr_entry_251(void);",
+"IMPORT	void	hll_inthdr_entry_252(void);",
+"IMPORT	void	hll_inthdr_entry_253(void);",
+"IMPORT	void	hll_inthdr_entry_254(void);",
+"IMPORT	void	hll_inthdr_entry_255(void);",
+"",
+"#endif /* _SYSDEPEND_CPU_INTVECT_TBL_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RX65N",
+"",
+"/*",
+" *	hllint_tbl.c (RX65N)",
+" *	HLL Interrupt Handler Table (ROM)",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * HLL Interrupt Handler Table (ROM)",
+" * ",
+" */",
+"EXPORT void (* const knl_hll_inthdr_rom[])()  __attribute__((section(\".hvectors\"))) = {",
+"	Default_Handler,			/* Unconditional trap */",
+"	Default_Handler,			/* Dispatch */",
+"	Default_Handler,			/* System call (reserved) */",
+"	Default_Handler,			/* System call : tk_ret_int */",
+"	Default_Handler,			/* Debugger support (reserved) */",
+"	Default_Handler,			/* INT 5 */",
+"	Default_Handler,			/* INT 6 */",
+"	Default_Handler,			/* INT 7 */",
+"	Default_Handler,			/* INT 8 */",
+"	Default_Handler,			/* INT 9 */",
+"	Default_Handler,			/* INT 10 */",
+"	Default_Handler,			/* INT 11 */",
+"	Default_Handler,			/* INT 12 */",
+"	Default_Handler,			/* INT 13 */",
+"	Default_Handler,			/* INT 14 */",
+"	Default_Handler,			/* INT 15 */",
+"	Default_Handler,			/* BSC_BUSERR */",
+"	Default_Handler,			/* INT 17 */",
+"	Default_Handler,			/* RAM_RAMERR */",
+"	Default_Handler,			/* INT 19 */",
+"	Default_Handler,			/* INT 20 */",
+"	Default_Handler,			/* FCU_FIFERR */",
+"	Default_Handler,			/* INT 22 */",
+"	Default_Handler,			/* FCU_FRDYI */",
+"	Default_Handler,			/* INT 24 */",
+"	Default_Handler,			/* INT 25 */",
+"	Default_Handler,			/* ICU_SWINT2 */",
+"	Default_Handler,			/* ICU_SWINT */",
+"	knl_timer_handler,			/* CMT0_CMI0 **** System timer *****/",
+"	Default_Handler,			/* CMT0_CMI1 */",
+"	Default_Handler,			/* CMTW0_CMWI0 */",
+"	Default_Handler,			/* CMTW1_CMWI1 */",
+"	Default_Handler,			/* INT 32 */",
+"	Default_Handler,			/* INT 33 */",
+"	Default_Handler,			/* USB0_D0FIFO0 */",
+"	Default_Handler,			/* USB0_D1FIFO0 */",
+"	Default_Handler,			/* INT 36 */",
+"	Default_Handler,			/* INT 37 */",
+"	Default_Handler,			/* RSPI0_SPRI0 */",
+"	Default_Handler,			/* RSPI0_SPTI0 */",
+"	Default_Handler,			/* RSPI1_SPRI1 */",
+"	Default_Handler,			/* RSPI1_SPTI1 */",
+"	Default_Handler,			/* QSPI_SPRI */",
+"	Default_Handler,			/* QSPI_SPTI */",
+"	Default_Handler,			/* SDHI_SBFAI */",
+"	Default_Handler,			/* MMCIF_MBFAI */",
+"	Default_Handler,			/* INT 46 */",
+"	Default_Handler,			/* INT 47 */",
+"	Default_Handler,			/* INT 48 */",
+"	Default_Handler,			/* INT 49 */",
+"	Default_Handler,			/* RIIC1_RXI1 */",
+"	Default_Handler,			/* RIIC1_TXI1 */",
+"	Default_Handler,			/* RIIC0_RXI0 */",
+"	Default_Handler,			/* RIIC0_TXI0 */",
+"	Default_Handler,			/* RIIC2_RXI2 */",
+"	Default_Handler,			/* RIIC2_TXI2 */",
+"	Default_Handler,			/* INT 56 */",
+"	Default_Handler,			/* INT 57 */",
+"	Default_Handler,			/* SCI0_RXI0 */",
+"	Default_Handler,			/* SCI0_TXI0 */",
+"	Default_Handler,			/* SCI1_RXI1 */",
+"	Default_Handler,			/* SCI1_TXI1 */",
+"	Default_Handler,			/* SCI2_RXI2 */",
+"	Default_Handler,			/* SCI2_TXI2 */",
+"	Default_Handler,			/* ICU_IRQ0 */",
+"	Default_Handler,			/* ICU_IRQ1 */",
+"	Default_Handler,			/* ICU_IRQ2 */",
+"	Default_Handler,			/* ICU_IRQ3 */",
+"	Default_Handler,			/* ICU_IRQ4 */",
+"	Default_Handler,			/* ICU_IRQ5 */",
+"	Default_Handler,			/* ICU_IRQ6 */",
+"	Default_Handler,			/* ICU_IRQ7 */",
+"	Default_Handler,			/* ICU_IRQ8 */",
+"	Default_Handler,			/* ICU_IRQ9 */",
+"	Default_Handler,			/* ICU_IRQ10 */",
+"	Default_Handler,			/* ICU_IRQ11 */",
+"	Default_Handler,			/* ICU_IRQ12 */",
+"	Default_Handler,			/* ICU_IRQ13 */",
+"	Default_Handler,			/* ICU_IRQ14 */",
+"	Default_Handler,			/* ICU_IRQ15 */",
+"	Default_Handler,			/* SCI3_RXI3 */",
+"	Default_Handler,			/* SCI3_TXI3 */",
+"	Default_Handler,			/* SCI4_RXI4 */",
+"	Default_Handler,			/* SCI4_TXI4 */",
+"	Default_Handler,			/* SCI5_RXI5 */",
+"	Default_Handler,			/* SCI5_TXI5 */",
+"	Default_Handler,			/* SCI6_RXI6 */",
+"	Default_Handler,			/* SCI6_TXI6 */",
+"	Default_Handler,			/* LVD_LVD1 */",
+"	Default_Handler,			/* LVD_LVD2 */",
+"	Default_Handler,			/* USB0_USBR0 */",
+"	Default_Handler,			/* SCI6_RXI6 */",
+"	Default_Handler,			/* RTC_ALM */",
+"	Default_Handler,			/* RTC_PRD */",
+"	Default_Handler,			/* INT 94 */",
+"	Default_Handler,			/* IWDT_IWUNI */",
+"	Default_Handler,			/* WDT_WUNI */",
+"	Default_Handler,			/* RDC_PCDFI */",
+"	Default_Handler,			/* SCI7_RXI7 */",
+"	Default_Handler,			/* SCI7_TXI7 */",
+"	Default_Handler,			/* SCI8_RXI8 */",
+"	Default_Handler,			/* SCI8_TXI8 */",
+"	Default_Handler,			/* SCI9_RXI9 */",
+"	Default_Handler,			/* SCI9_TXI9 */",
+"	Default_Handler,			/* SCI10_RXI10 */",
+"	Default_Handler,			/* SCI10_TXI10 */",
+"	knl_group_inthdr,			/* ICU_GROUPBE0 *** group interrupt  **/",
+"	knl_group_inthdr,			/* ICU_GROUPBL2 *** group interrupt  **/",
+"	Default_Handler,			/* RSPI2_SPRI2 */",
+"	Default_Handler,			/* RSPI2_SPTI2 */",
+"	knl_group_inthdr,			/* ICU_GROUPBL0 *** group interrupt  **/",
+"	knl_group_inthdr,			/* ICU_GROUPBL1 *** group interrupt  **/",
+"	knl_group_inthdr,			/* ICU_GROUPAL0 *** group interrupt  **/",
+"	knl_group_inthdr,			/* ICU_GROUPAL1 *** group interrupt  **/",
+"	Default_Handler,			/* SCI11_RXI11 */",
+"	Default_Handler,			/* SCI11_TXI11 */",
+"	Default_Handler,			/* SCI12_RXI12 */",
+"	Default_Handler,			/* SCI12_TXI12 */",
+"	Default_Handler,			/* INT 118 */",
+"	Default_Handler,			/* INT 119 */",
+"	Default_Handler,			/* DMAC_DMAC0I */",
+"	Default_Handler,			/* DMAC_DMAC1I */",
+"	Default_Handler,			/* DMAC_DMAC2I */",
+"	Default_Handler,			/* DMAC_DMAC3I */",
+"	Default_Handler,			/* DMAC_DMAC74I */",
+"	Default_Handler,			/* OST_OSTDI */",
+"	Default_Handler,			/* EXDMAC_EXDMAC0I */",
+"	Default_Handler,			/* EXDMAC_EXDMAC1I */",
+"	Default_Handler,			/* INTB 128 */",
+"	Default_Handler,			/* INTB 129 */",
+"	Default_Handler,			/* INTB 130 */",
+"	Default_Handler,			/* INTB 131 */",
+"	Default_Handler,			/* INTB 132 */",
+"	Default_Handler,			/* INTB 133 */",
+"	Default_Handler,			/* INTB 134 */",
+"	Default_Handler,			/* INTB 135 */",
+"	Default_Handler,			/* INTB 136 */",
+"	Default_Handler,			/* INTB 137 */",
+"	Default_Handler,			/* INTB 138 */",
+"	Default_Handler,			/* INTB 139 */",
+"	Default_Handler,			/* INTB 140 */",
+"	Default_Handler,			/* INTB 141 */",
+"	Default_Handler,			/* INTB 142 */",
+"	Default_Handler,			/* INTB 143 */",
+"	Default_Handler,			/* INTB 144 */",
+"	Default_Handler,			/* INTB 145 */",
+"	Default_Handler,			/* INTB 146 */",
+"	Default_Handler,			/* INTB 147 */",
+"	Default_Handler,			/* INTB 148 */",
+"	Default_Handler,			/* INTB 149 */",
+"	Default_Handler,			/* INTB 150 */",
+"	Default_Handler,			/* INTB 151 */",
+"	Default_Handler,			/* INTB 152 */",
+"	Default_Handler,			/* INTB 153 */",
+"	Default_Handler,			/* INTB 154 */",
+"	Default_Handler,			/* INTB 155 */",
+"	Default_Handler,			/* INTB 156 */",
+"	Default_Handler,			/* INTB 157 */",
+"	Default_Handler,			/* INTB 158 */",
+"	Default_Handler,			/* INTB 159 */",
+"	Default_Handler,			/* INTB 160 */",
+"	Default_Handler,			/* INTB 161 */",
+"	Default_Handler,			/* INTB 162 */",
+"	Default_Handler,			/* INTB 163 */",
+"	Default_Handler,			/* INTB 164 */",
+"	Default_Handler,			/* INTB 165 */",
+"	Default_Handler,			/* INTB 166 */",
+"	Default_Handler,			/* INTB 167 */",
+"	Default_Handler,			/* INTB 168 */",
+"	Default_Handler,			/* INTB 169 */",
+"	Default_Handler,			/* INTB 170 */",
+"	Default_Handler,			/* INTB 171 */",
+"	Default_Handler,			/* INTB 172 */",
+"	Default_Handler,			/* INTB 173 */",
+"	Default_Handler,			/* INTB 174 */",
+"	Default_Handler,			/* INTB 175 */",
+"	Default_Handler,			/* INTB 176 */",
+"	Default_Handler,			/* INTB 177 */",
+"	Default_Handler,			/* INTB 178 */",
+"	Default_Handler,			/* INTB 179 */",
+"	Default_Handler,			/* INTB 180 */",
+"	Default_Handler,			/* INTB 181 */",
+"	Default_Handler,			/* INTB 182 */",
+"	Default_Handler,			/* INTB 183 */",
+"	Default_Handler,			/* INTB 184 */",
+"	Default_Handler,			/* INTB 185 */",
+"	Default_Handler,			/* INTB 186 */",
+"	Default_Handler,			/* INTB 187 */",
+"	Default_Handler,			/* INTB 188 */",
+"	Default_Handler,			/* INTB 189 */",
+"	Default_Handler,			/* INTB 190 */",
+"	Default_Handler,			/* INTB 191 */",
+"	Default_Handler,			/* INTB 192 */",
+"	Default_Handler,			/* INTB 193 */",
+"	Default_Handler,			/* INTB 194 */",
+"	Default_Handler,			/* INTB 195 */",
+"	Default_Handler,			/* INTB 196 */",
+"	Default_Handler,			/* INTB 197 */",
+"	Default_Handler,			/* INTB 198 */",
+"	Default_Handler,			/* INTB 199 */",
+"	Default_Handler,			/* INTB 209 */",
+"	Default_Handler,			/* INTB 201 */",
+"	Default_Handler,			/* INTB 202 */",
+"	Default_Handler,			/* INTB 203 */",
+"	Default_Handler,			/* INTB 204 */",
+"	Default_Handler,			/* INTB 205 */",
+"	Default_Handler,			/* INTB 206 */",
+"	Default_Handler,			/* INTB 207 */",
+"	Default_Handler,			/* INTA 208 */",
+"	Default_Handler,			/* INTA 209 */",
+"	Default_Handler,			/* INTA 210 */",
+"	Default_Handler,			/* INTA 211 */",
+"	Default_Handler,			/* INTA 212 */",
+"	Default_Handler,			/* INTA 213 */",
+"	Default_Handler,			/* INTA 214 */",
+"	Default_Handler,			/* INTA 215 */",
+"	Default_Handler,			/* INTA 216 */",
+"	Default_Handler,			/* INTA 217 */",
+"	Default_Handler,			/* INTA 218 */",
+"	Default_Handler,			/* INTA 219 */",
+"	Default_Handler,			/* INTA 220 */",
+"	Default_Handler,			/* INTA 221 */",
+"	Default_Handler,			/* INTA 222 */",
+"	Default_Handler,			/* INTA 223 */",
+"	Default_Handler,			/* INTA 224 */",
+"	Default_Handler,			/* INTA 225 */",
+"	Default_Handler,			/* INTA 226 */",
+"	Default_Handler,			/* INTA 227 */",
+"	Default_Handler,			/* INTA 228 */",
+"	Default_Handler,			/* INTA 229 */",
+"	Default_Handler,			/* INTA 230 */",
+"	Default_Handler,			/* INTA 231 */",
+"	Default_Handler,			/* INTA 232 */",
+"	Default_Handler,			/* INTA 233 */",
+"	Default_Handler,			/* INTA 234 */",
+"	Default_Handler,			/* INTA 235 */",
+"	Default_Handler,			/* INTA 236 */",
+"	Default_Handler,			/* INTA 237 */",
+"	Default_Handler,			/* INTA 238 */",
+"	Default_Handler,			/* INTA 239 */",
+"	Default_Handler,			/* INTA 240 */",
+"	Default_Handler,			/* INTA 241 */",
+"	Default_Handler,			/* INTA 242 */",
+"	Default_Handler,			/* INTA 243 */",
+"	Default_Handler,			/* INTA 244 */",
+"	Default_Handler,			/* INTA 245 */",
+"	Default_Handler,			/* INTA 246 */",
+"	Default_Handler,			/* INTA 247 */",
+"	Default_Handler,			/* INTA 248 */",
+"	Default_Handler,			/* INTA 249 */",
+"	Default_Handler,			/* INTA 250 */",
+"	Default_Handler,			/* INTA 251 */",
+"	Default_Handler,			/* INTA 252 */",
+"	Default_Handler,			/* INTA 253 */",
+"	Default_Handler,			/* INTA 254 */",
+"	Default_Handler,			/* INTA 255 */",
+"};",
+"",
+"#endif /* CPU_RX65N */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RX65N",
+"",
+"/*",
+" *	intvect_tbl.c (RX65N)",
+" *	Interrupt Vector Table (ROM)",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../sysdepend.h\"",
+"",
+"#include \"hllint_ent.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt Vector Table (ROM)",
+" * ",
+" */",
+"EXPORT void (* const knl_int_vect_rom[])()  __attribute__((section(\".rvectors\"))) = {",
+"	hll_inthdr_entry_0,			/* Unconditional trap */",
+"	hll_inthdr_entry_1,			/* Dispatch */",
+"	hll_inthdr_entry_2,			/* System call (reserved) */",
+"	hll_inthdr_entry_3,			/* System call : tk_ret_int */",
+"	hll_inthdr_entry_4,			/* Debugger support (reserved) */",
+"	hll_inthdr_entry_5,			/* INT 5 */",
+"	hll_inthdr_entry_6,			/* INT 6 */",
+"	hll_inthdr_entry_7,			/* INT 7 */",
+"	hll_inthdr_entry_8,			/* INT 8 */",
+"	hll_inthdr_entry_9,			/* INT 9 */",
+"	hll_inthdr_entry_10,			/* INT 10 */",
+"	hll_inthdr_entry_11,			/* INT 11 */",
+"	hll_inthdr_entry_12,			/* INT 12 */",
+"	hll_inthdr_entry_13,			/* INT 13 */",
+"	hll_inthdr_entry_14,			/* INT 14 */",
+"	hll_inthdr_entry_15,			/* INT 15 */",
+"	hll_inthdr_entry_16,			/* BSC_BUSERR */",
+"	hll_inthdr_entry_17,			/* INT 17 */",
+"	hll_inthdr_entry_18,			/* RAM_RAMERR */",
+"	hll_inthdr_entry_19,			/* INT 19 */",
+"	hll_inthdr_entry_20,			/* INT 20 */",
+"	hll_inthdr_entry_21,			/* FCU_FIFERR */",
+"	hll_inthdr_entry_22,			/* INT 22 */",
+"	hll_inthdr_entry_23,			/* FCU_FRDYI */",
+"	hll_inthdr_entry_24,			/* INT 24 */",
+"	hll_inthdr_entry_25,			/* INT 25 */",
+"	hll_inthdr_entry_26,			/* ICU_SWINT2 */",
+"	hll_inthdr_entry_27,			/* ICU_SWINT */",
+"	hll_inthdr_entry_28,			/* CMT0_CMI0 */",
+"	hll_inthdr_entry_29,			/* CMT0_CMI1 */",
+"	hll_inthdr_entry_30,			/* CMTW0_CMWI0 */",
+"	hll_inthdr_entry_31,			/* CMTW1_CMWI1 */",
+"	hll_inthdr_entry_32,			/* INT 32 */",
+"	hll_inthdr_entry_33,			/* INT 33 */",
+"	hll_inthdr_entry_34,			/* USB0_D0FIFO0 */",
+"	hll_inthdr_entry_35,			/* USB0_D1FIFO0 */",
+"	hll_inthdr_entry_36,			/* INT 36 */",
+"	hll_inthdr_entry_37,			/* INT 37 */",
+"	hll_inthdr_entry_38,			/* RSPI0_SPRI0 */",
+"	hll_inthdr_entry_39,			/* RSPI0_SPTI0 */",
+"	hll_inthdr_entry_40,			/* RSPI1_SPRI1 */",
+"	hll_inthdr_entry_41,			/* RSPI1_SPTI1 */",
+"	hll_inthdr_entry_42,			/* QSPI_SPRI */",
+"	hll_inthdr_entry_43,			/* QSPI_SPTI */",
+"	hll_inthdr_entry_44,			/* SDHI_SBFAI */",
+"	hll_inthdr_entry_45,			/* MMCIF_MBFAI */",
+"	hll_inthdr_entry_46,			/* INT 46 */",
+"	hll_inthdr_entry_47,			/* INT 47 */",
+"	hll_inthdr_entry_48,			/* INT 48 */",
+"	hll_inthdr_entry_49,			/* INT 49 */",
+"	hll_inthdr_entry_50,			/* RIIC1_RXI1 */",
+"	hll_inthdr_entry_51,			/* RIIC1_TXI1 */",
+"	hll_inthdr_entry_52,			/* RIIC0_RXI0 */",
+"	hll_inthdr_entry_53,			/* RIIC0_TXI0 */",
+"	hll_inthdr_entry_54,			/* RIIC2_RXI2 */",
+"	hll_inthdr_entry_55,			/* RIIC2_TXI2 */",
+"	hll_inthdr_entry_56,			/* INT 56 */",
+"	hll_inthdr_entry_57,			/* INT 57 */",
+"	hll_inthdr_entry_58,			/* SCI0_RXI0 */",
+"	hll_inthdr_entry_59,			/* SCI0_TXI0 */",
+"	hll_inthdr_entry_60,			/* SCI1_RXI1 */",
+"	hll_inthdr_entry_61,			/* SCI1_TXI1 */",
+"	hll_inthdr_entry_62,			/* SCI2_RXI2 */",
+"	hll_inthdr_entry_63,			/* SCI2_TXI2 */",
+"	hll_inthdr_entry_64,			/* ICU_IRQ0 */",
+"	hll_inthdr_entry_65,			/* ICU_IRQ1 */",
+"	hll_inthdr_entry_66,			/* ICU_IRQ2 */",
+"	hll_inthdr_entry_67,			/* ICU_IRQ3 */",
+"	hll_inthdr_entry_68,			/* ICU_IRQ4 */",
+"	hll_inthdr_entry_69,			/* ICU_IRQ5 */",
+"	hll_inthdr_entry_70,			/* ICU_IRQ6 */",
+"	hll_inthdr_entry_71,			/* ICU_IRQ7 */",
+"	hll_inthdr_entry_72,			/* ICU_IRQ8 */",
+"	hll_inthdr_entry_73,			/* ICU_IRQ9 */",
+"	hll_inthdr_entry_74,			/* ICU_IRQ10 */",
+"	hll_inthdr_entry_75,			/* ICU_IRQ11 */",
+"	hll_inthdr_entry_76,			/* ICU_IRQ12 */",
+"	hll_inthdr_entry_77,			/* ICU_IRQ13 */",
+"	hll_inthdr_entry_78,			/* ICU_IRQ14 */",
+"	hll_inthdr_entry_79,			/* ICU_IRQ15 */",
+"	hll_inthdr_entry_80,			/* SCI3_RXI3 */",
+"	hll_inthdr_entry_81,			/* SCI3_TXI3 */",
+"	hll_inthdr_entry_82,			/* SCI4_RXI4 */",
+"	hll_inthdr_entry_83,			/* SCI4_TXI4 */",
+"	hll_inthdr_entry_84,			/* SCI5_RXI5 */",
+"	hll_inthdr_entry_85,			/* SCI5_TXI5 */",
+"	hll_inthdr_entry_86,			/* SCI6_RXI6 */",
+"	hll_inthdr_entry_87,			/* SCI6_TXI6 */",
+"	hll_inthdr_entry_88,			/* LVD_LVD1 */",
+"	hll_inthdr_entry_89,			/* LVD_LVD2 */",
+"	hll_inthdr_entry_90,			/* USB0_USBR0 */",
+"	hll_inthdr_entry_91,			/* SCI6_RXI6 */",
+"	hll_inthdr_entry_92,			/* RTC_ALM */",
+"	hll_inthdr_entry_93,			/* RTC_PRD */",
+"	hll_inthdr_entry_94,			/* INT 94 */",
+"	hll_inthdr_entry_95,			/* IWDT_IWUNI */",
+"	hll_inthdr_entry_96,			/* WDT_WUNI */",
+"	hll_inthdr_entry_97,			/* RDC_PCDFI */",
+"	hll_inthdr_entry_98,			/* SCI7_RXI7 */",
+"	hll_inthdr_entry_99,			/* SCI7_TXI7 */",
+"	hll_inthdr_entry_100,			/* SCI8_RXI8 */",
+"	hll_inthdr_entry_101,			/* SCI8_TXI8 */",
+"	hll_inthdr_entry_102,			/* SCI9_RXI9 */",
+"	hll_inthdr_entry_103,			/* SCI9_TXI9 */",
+"	hll_inthdr_entry_104,			/* SCI10_RXI10 */",
+"	hll_inthdr_entry_105,			/* SCI10_TXI10 */",
+"	hll_inthdr_entry_106,			/* ICU_GROUPBE0 */",
+"	hll_inthdr_entry_107,			/* ICU_GROUPBL2 */",
+"	hll_inthdr_entry_108,			/* RSPI2_SPRI2 */",
+"	hll_inthdr_entry_109,			/* RSPI2_SPTI2 */",
+"	hll_inthdr_entry_110,			/* ICU_GROUPBL0 */",
+"	hll_inthdr_entry_111,			/* ICU_GROUPBL1 */",
+"	hll_inthdr_entry_112,			/* ICU_GROUPAL0 */",
+"	hll_inthdr_entry_113,			/* ICU_GROUPAL1 */",
+"	hll_inthdr_entry_114,			/* SCI11_RXI11 */",
+"	hll_inthdr_entry_115,			/* SCI11_TXI11 */",
+"	hll_inthdr_entry_116,			/* SCI12_RXI12 */",
+"	hll_inthdr_entry_117,			/* SCI12_TXI12 */",
+"	hll_inthdr_entry_118,			/* INT 118 */",
+"	hll_inthdr_entry_119,			/* INT 119 */",
+"	hll_inthdr_entry_120,			/* DMAC_DMAC0I */",
+"	hll_inthdr_entry_121,			/* DMAC_DMAC1I */",
+"	hll_inthdr_entry_122,			/* DMAC_DMAC2I */",
+"	hll_inthdr_entry_123,			/* DMAC_DMAC3I */",
+"	hll_inthdr_entry_124,			/* DMAC_DMAC74I */",
+"	hll_inthdr_entry_125,			/* OST_OSTDI */",
+"	hll_inthdr_entry_126,			/* EXDMAC_EXDMAC0I */",
+"	hll_inthdr_entry_127,			/* EXDMAC_EXDMAC1I */",
+"	hll_inthdr_entry_128,			/* INTB 128 */",
+"	hll_inthdr_entry_129,			/* INTB 129 */",
+"	hll_inthdr_entry_130,			/* INTB 130 */",
+"	hll_inthdr_entry_131,			/* INTB 131 */",
+"	hll_inthdr_entry_132,			/* INTB 132 */",
+"	hll_inthdr_entry_133,			/* INTB 133 */",
+"	hll_inthdr_entry_134,			/* INTB 134 */",
+"	hll_inthdr_entry_135,			/* INTB 135 */",
+"	hll_inthdr_entry_136,			/* INTB 136 */",
+"	hll_inthdr_entry_137,			/* INTB 137 */",
+"	hll_inthdr_entry_138,			/* INTB 138 */",
+"	hll_inthdr_entry_139,			/* INTB 139 */",
+"	hll_inthdr_entry_140,			/* INTB 140 */",
+"	hll_inthdr_entry_141,			/* INTB 141 */",
+"	hll_inthdr_entry_142,			/* INTB 142 */",
+"	hll_inthdr_entry_143,			/* INTB 143 */",
+"	hll_inthdr_entry_144,			/* INTB 144 */",
+"	hll_inthdr_entry_145,			/* INTB 145 */",
+"	hll_inthdr_entry_146,			/* INTB 146 */",
+"	hll_inthdr_entry_147,			/* INTB 147 */",
+"	hll_inthdr_entry_148,			/* INTB 148 */",
+"	hll_inthdr_entry_149,			/* INTB 149 */",
+"	hll_inthdr_entry_150,			/* INTB 150 */",
+"	hll_inthdr_entry_151,			/* INTB 151 */",
+"	hll_inthdr_entry_152,			/* INTB 152 */",
+"	hll_inthdr_entry_153,			/* INTB 153 */",
+"	hll_inthdr_entry_154,			/* INTB 154 */",
+"	hll_inthdr_entry_155,			/* INTB 155 */",
+"	hll_inthdr_entry_156,			/* INTB 156 */",
+"	hll_inthdr_entry_157,			/* INTB 157 */",
+"	hll_inthdr_entry_158,			/* INTB 158 */",
+"	hll_inthdr_entry_159,			/* INTB 159 */",
+"	hll_inthdr_entry_160,			/* INTB 160 */",
+"	hll_inthdr_entry_161,			/* INTB 161 */",
+"	hll_inthdr_entry_162,			/* INTB 162 */",
+"	hll_inthdr_entry_163,			/* INTB 163 */",
+"	hll_inthdr_entry_164,			/* INTB 164 */",
+"	hll_inthdr_entry_165,			/* INTB 165 */",
+"	hll_inthdr_entry_166,			/* INTB 166 */",
+"	hll_inthdr_entry_167,			/* INTB 167 */",
+"	hll_inthdr_entry_168,			/* INTB 168 */",
+"	hll_inthdr_entry_169,			/* INTB 169 */",
+"	hll_inthdr_entry_170,			/* INTB 170 */",
+"	hll_inthdr_entry_171,			/* INTB 171 */",
+"	hll_inthdr_entry_172,			/* INTB 172 */",
+"	hll_inthdr_entry_173,			/* INTB 173 */",
+"	hll_inthdr_entry_174,			/* INTB 174 */",
+"	hll_inthdr_entry_175,			/* INTB 175 */",
+"	hll_inthdr_entry_176,			/* INTB 176 */",
+"	hll_inthdr_entry_177,			/* INTB 177 */",
+"	hll_inthdr_entry_178,			/* INTB 178 */",
+"	hll_inthdr_entry_179,			/* INTB 179 */",
+"	hll_inthdr_entry_180,			/* INTB 180 */",
+"	hll_inthdr_entry_181,			/* INTB 181 */",
+"	hll_inthdr_entry_182,			/* INTB 182 */",
+"	hll_inthdr_entry_183,			/* INTB 183 */",
+"	hll_inthdr_entry_184,			/* INTB 184 */",
+"	hll_inthdr_entry_185,			/* INTB 185 */",
+"	hll_inthdr_entry_186,			/* INTB 186 */",
+"	hll_inthdr_entry_187,			/* INTB 187 */",
+"	hll_inthdr_entry_188,			/* INTB 188 */",
+"	hll_inthdr_entry_189,			/* INTB 189 */",
+"	hll_inthdr_entry_190,			/* INTB 190 */",
+"	hll_inthdr_entry_191,			/* INTB 191 */",
+"	hll_inthdr_entry_192,			/* INTB 192 */",
+"	hll_inthdr_entry_193,			/* INTB 193 */",
+"	hll_inthdr_entry_194,			/* INTB 194 */",
+"	hll_inthdr_entry_195,			/* INTB 195 */",
+"	hll_inthdr_entry_196,			/* INTB 196 */",
+"	hll_inthdr_entry_197,			/* INTB 197 */",
+"	hll_inthdr_entry_198,			/* INTB 198 */",
+"	hll_inthdr_entry_199,			/* INTB 199 */",
+"	hll_inthdr_entry_209,			/* INTB 209 */",
+"	hll_inthdr_entry_201,			/* INTB 201 */",
+"	hll_inthdr_entry_202,			/* INTB 202 */",
+"	hll_inthdr_entry_203,			/* INTB 203 */",
+"	hll_inthdr_entry_204,			/* INTB 204 */",
+"	hll_inthdr_entry_205,			/* INTB 205 */",
+"	hll_inthdr_entry_206,			/* INTB 206 */",
+"	hll_inthdr_entry_207,			/* INTB 207 */",
+"	hll_inthdr_entry_208,			/* INTA 208 */",
+"	hll_inthdr_entry_209,			/* INTA 209 */",
+"	hll_inthdr_entry_210,			/* INTA 210 */",
+"	hll_inthdr_entry_211,			/* INTA 211 */",
+"	hll_inthdr_entry_212,			/* INTA 212 */",
+"	hll_inthdr_entry_213,			/* INTA 213 */",
+"	hll_inthdr_entry_214,			/* INTA 214 */",
+"	hll_inthdr_entry_215,			/* INTA 215 */",
+"	hll_inthdr_entry_216,			/* INTA 216 */",
+"	hll_inthdr_entry_217,			/* INTA 217 */",
+"	hll_inthdr_entry_218,			/* INTA 218 */",
+"	hll_inthdr_entry_219,			/* INTA 219 */",
+"	hll_inthdr_entry_220,			/* INTA 220 */",
+"	hll_inthdr_entry_221,			/* INTA 221 */",
+"	hll_inthdr_entry_222,			/* INTA 222 */",
+"	hll_inthdr_entry_223,			/* INTA 223 */",
+"	hll_inthdr_entry_224,			/* INTA 224 */",
+"	hll_inthdr_entry_225,			/* INTA 225 */",
+"	hll_inthdr_entry_226,			/* INTA 226 */",
+"	hll_inthdr_entry_227,			/* INTA 227 */",
+"	hll_inthdr_entry_228,			/* INTA 228 */",
+"	hll_inthdr_entry_229,			/* INTA 229 */",
+"	hll_inthdr_entry_230,			/* INTA 230 */",
+"	hll_inthdr_entry_231,			/* INTA 231 */",
+"	hll_inthdr_entry_232,			/* INTA 232 */",
+"	hll_inthdr_entry_233,			/* INTA 233 */",
+"	hll_inthdr_entry_234,			/* INTA 234 */",
+"	hll_inthdr_entry_235,			/* INTA 235 */",
+"	hll_inthdr_entry_236,			/* INTA 236 */",
+"	hll_inthdr_entry_237,			/* INTA 237 */",
+"	hll_inthdr_entry_238,			/* INTA 238 */",
+"	hll_inthdr_entry_239,			/* INTA 239 */",
+"	hll_inthdr_entry_240,			/* INTA 240 */",
+"	hll_inthdr_entry_241,			/* INTA 241 */",
+"	hll_inthdr_entry_242,			/* INTA 242 */",
+"	hll_inthdr_entry_243,			/* INTA 243 */",
+"	hll_inthdr_entry_244,			/* INTA 244 */",
+"	hll_inthdr_entry_245,			/* INTA 245 */",
+"	hll_inthdr_entry_246,			/* INTA 246 */",
+"	hll_inthdr_entry_247,			/* INTA 247 */",
+"	hll_inthdr_entry_248,			/* INTA 248 */",
+"	hll_inthdr_entry_249,			/* INTA 249 */",
+"	hll_inthdr_entry_250,			/* INTA 250 */",
+"	hll_inthdr_entry_251,			/* INTA 251 */",
+"	hll_inthdr_entry_252,			/* INTA 252 */",
+"	hll_inthdr_entry_253,			/* INTA 253 */",
+"	hll_inthdr_entry_254,			/* INTA 254 */",
+"	hll_inthdr_entry_255,			/* INTA 255 */",
+"};",
+"",
+"#endif /* CPU_RX65N */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (RX65N)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_SYSDEPEND_",
+"#define _SYSDEPEND_CPU_SYSDEPEND_",
+"",
+"#include \"../core/rxv2/sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" *    Interrupt control",
+" */",
+"",
+"/* Interrupt Vector Table (ROM) (intvect_tbl.c) */",
+"IMPORT void (* const knl_int_vect_rom[])();",
+"",
+"/* HLL Interrupt Handler Table (ROM) (hllint_tbl.c) */",
+"IMPORT void (* const knl_hll_inthdr_rom[])();",
+"",
+"#if USE_GROUP_INT",
+"/* Set Group int. handler table */",
+"IMPORT ER knl_define_gint( INT intno, FP inthdr);",
+"",
+"/* Common Group interrupt handler */",
+"IMPORT void knl_group_inthdr(UW intno);",
+"",
+"#endif /* USE_GROUP_INT */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" *    Clock Setting (cpu_clock.c)",
+" */",
+"IMPORT void startup_clock(void);",
+"IMPORT void shutdown_clock(void);",
+"",
+"#endif /* _SYSDEPEND_CPU_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (RX65N)",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_SYSTIMER_",
+"#define _SYSDEPEND_CPU_SYSTIMER_",
+"",
+"#include \"../core/rxv2/sys_timer.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_SYSTIMER_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (RZ/A2M)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CPUSTATUS_",
+"#define _SYSDEPEND_CPU_CPUSTATUS_",
+"",
+"#include \"../core/armv7a/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (RZ/A2M)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CPUTASK_",
+"#define _SYSDEPEND_CPU_CPUTASK_",
+"",
+"#include \"../core/armv7a/cpu_task.h\"",
+"",
+"#endif  /*_SYSDEPEND_CPU_CPUTASK_ */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (RZ/A2M)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_SYSDEPEND_",
+"#define _SYSDEPEND_CPU_SYSDEPEND_",
+"",
+"#include \"../core/armv7a/sysdepend.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (RZ/A2M)",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_SYSTIMER_",
+"#define _SYSDEPEND_CPU_SYSTIMER_",
+"",
+"#include \"../core/armv7a/sys_timer.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_SYSTIMER_ */﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RZA2M",
+"",
+"/*",
+" *	ttb_ini.c (RZ/A2M)",
+" *	TTB(translation table base) initial value",
+" */",
+"#include <tk/tkernel.h>",
+"",
+"typedef struct {",
+"	UW	addr;		/* Address */",
+"	UW	size;		/* Area size */",
+"	UW	attr;		/* Attribute*/",
+"	UW	dmy;		/* Padding */",
+"} T_TTB_VAL;",
+"",
+"EXPORT const T_TTB_VAL	knl_ttb_ini[] = {",
+"	{0x1f000000,               0x00100000,         TTB_ATR_STRGLY,           0x00000000},	// Internal I/O area 0x1f000000 - 0x1f0fffff",
+"	{0x1f400000,               0x00100000,         TTB_ATR_STRGLY,           0x00000000},	// Internal I/O area 0x1f400000 - 0x1f4fffff",
+"	{0x1f800000,               0x00100000,         TTB_ATR_STRGLY,           0x00000000},	// Internal I/O area 0x1f800000 - 0x1f8ffff",
+"	{0x20000000,               0x02000000,         TTB_ATR_NORMAL_CACHE,     0x00000000},	// SPI multi I/O bus area (Serial flash) 0x20000000 - 0x2fffffff  32MB on board",
+"	{0x30000000,               0x00800000,         TTB_ATR_NORMAL_CACHE,     0x00000000},	// Hyper Flash area  0x30000000 - 0x3fffffff  8MB on board",
+"	{0x40000000,               0x00800000,         TTB_ATR_NORMAL_CACHE,     0x00000000},	// Hyper RAM area    0x40000000 - 0x4fffffff  8MB on board",
+"	{IRAM_CACHED_START_ADDR,   IRAM_CACHED_SIZE,   TTB_ATR_NORMAL_CACHE,     0x00000000},	// Internal RAM (CACHED) area",
+"	{IRAM_UNCACHED_START_ADDR, IRAM_UNCACHED_SIZE, TTB_ATR_NORMAL_NOT_CACHE, 0x00000000},	// Internal RAM (UBCACHED) area",
+"	{0xe8000000,               0x00300000,         TTB_ATR_STRGLY,           0x00000000},	// Internal I/O area 0xe8000000 - 0xe82fffff",
+"	{0xea000000,               0x01000000,         TTB_ATR_STRGLY,           0x00000000},	// Internal I/O area 0xea000000 - 0xea0fffff",
+"	{0xf0000000,               0x00100000,         TTB_ATR_STRGLY,           0x00000000},	// Internal I/O area 0xf0000000 - 0xf00fffff",
+"	{0xfc000000,               0x00100000,         TTB_ATR_STRGLY,           0x00000000},	// Internal I/O area 0xfc000000 - 0xfc0fffff",
+"	{0xfcf00000,               0x00100000,         TTB_ATR_STRGLY,           0x00000000},	// Internal I/O area 0xfcf00000 - 0xfcffffff",
+"	{0xfff00000,               0x00100000,         TTB_ATR_STRGLY,           0x00000000},	// Internal I/O area 0xfff00000 - 0xffffffff",
+"	{0x00000000,               0x00000000,         0x00000000,               0x00000000},	// terminate",
+"",
+"};",
+"",
+"#endif /* CPU_RZA2M *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPUSTATUS_",
+"#define _SYSDEPEND_CPUSTATUS_",
+"",
+"/* System dependencies */",
+"#define CPUSTATUS_PATH_(a)	#a",
+"#define CPUSTATUS_PATH(a)	CPUSTATUS_PATH_(a)",
+"#define CPUSTATUS_SYSDEP()	CPUSTATUS_PATH(TARGET_DIR/cpu_status.h)",
+"#include CPUSTATUS_SYSDEP()",
+"",
+"#endif /* _SYSDEPEND_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (STM32H7)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CPUSTATUS_",
+"#define _SYSDEPEND_CPU_CPUSTATUS_",
+"",
+"#include \"../core/armv7m/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (STM32H7)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CPUTASK_",
+"#define _SYSDEPEND_CPU_CPUTASK_",
+"",
+"#include \"../core/armv7m/cpu_task.h\"",
+"",
+"#endif  /*_SYSDEPEND_CPU_CPUTASK_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (STM32H7)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_SYSDEPEND_",
+"#define _SYSDEPEND_CPU_SYSDEPEND_",
+"",
+"#include \"../core/armv7m/sysdepend.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (STM32H7)",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_SYSTIMER_",
+"#define _SYSDEPEND_CPU_SYSTIMER_",
+"",
+"#include \"../core/armv7m/sys_timer.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_SYSTIMER_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_STM32H7",
+"",
+"/*",
+" *	vector_tbl.h (STM32H7)",
+" *	Exception/Interrupt Vector Table",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Exception/Interrupt Vector Table",
+" * ",
+" */",
+"",
+"void (* const vector_tbl[])()  __attribute__((section(\".vector\"))) = {",
+"	(void(*)()) (INITIAL_SP),		/* 0: Top of Stack */",
+"	Reset_Handler,				/* 1: Reset Handler */",
+"	NMI_Handler,				/* 2: NMI Handler */",
+"	HardFault_Handler,			/* 3: Hard Fault Handler */",
+"	MemManage_Handler,			/* 4: MPU Fault Handler */",
+"	BusFault_Handler,			/* 5: Bus Fault Handler */",
+"	UsageFault_Handler,			/* 6: Usage Fault Handler */",
+"	0,					/* 7: Reserved */",
+"	0,					/* 8: Reserved */",
+"	0,					/* 9: Reserved */",
+"	0,					/* 10: Reserved */",
+"	Svcall_Handler,				/* 11: Svcall */",
+"	DebugMon_Handler,			/* 12: Debug Monitor Handler */",
+"	0,					/* 13: Reserved */",
+"	knl_dispatch_entry,			/* 14: Pend SV */",
+"	knl_systim_inthdr,			/* 15: Systick */",
+"",
+"	/* External Interrupts */",
+"	Default_Handler,			/* IRQ 0 */",
+"	Default_Handler,			/* IRQ 1 */",
+"	Default_Handler,			/* IRQ 2 */",
+"	Default_Handler,			/* IRQ 3 */",
+"	Default_Handler,			/* IRQ 4 */",
+"	Default_Handler,			/* IRQ 5 */",
+"	Default_Handler,			/* IRQ 6 */",
+"	Default_Handler,			/* IRQ 7 */",
+"	Default_Handler,			/* IRQ 8 */",
+"	Default_Handler,			/* IRQ 9 */",
+"	Default_Handler,			/* IRQ 10 */",
+"	Default_Handler,			/* IRQ 11 */",
+"	Default_Handler,			/* IRQ 12 */",
+"	Default_Handler,			/* IRQ 13 */",
+"	Default_Handler,			/* IRQ 14 */",
+"	Default_Handler,			/* IRQ 15 */",
+"	Default_Handler,			/* IRQ 16 */",
+"	Default_Handler,			/* IRQ 17 */",
+"	Default_Handler,			/* IRQ 18 */",
+"	Default_Handler,			/* IRQ 19 */",
+"	Default_Handler,			/* IRQ 20 */",
+"	Default_Handler,			/* IRQ 21 */",
+"	Default_Handler,			/* IRQ 22 */",
+"	Default_Handler,			/* IRQ 23 */",
+"	Default_Handler,			/* IRQ 24 */",
+"	Default_Handler,			/* IRQ 25 */",
+"	Default_Handler,			/* IRQ 26 */",
+"	Default_Handler,			/* IRQ 27 */",
+"	Default_Handler,			/* IRQ 28 */",
+"	Default_Handler,			/* IRQ 29 */",
+"	Default_Handler,			/* IRQ 30 */",
+"	Default_Handler,			/* IRQ 31 */",
+"	Default_Handler,			/* IRQ 32 */",
+"	Default_Handler,			/* IRQ 33 */",
+"	Default_Handler,			/* IRQ 34 */",
+"	Default_Handler,			/* IRQ 35 */",
+"	Default_Handler,			/* IRQ 36 */",
+"	Default_Handler,			/* IRQ 37 */",
+"	Default_Handler,			/* IRQ 38 */",
+"	Default_Handler,			/* IRQ 39 */",
+"	Default_Handler,			/* IRQ 40 */",
+"	Default_Handler,			/* IRQ 41 */",
+"	Default_Handler,			/* IRQ 42 */",
+"	Default_Handler,			/* IRQ 43 */",
+"	Default_Handler,			/* IRQ 44 */",
+"	Default_Handler,			/* IRQ 45 */",
+"	Default_Handler,			/* IRQ 46 */",
+"	Default_Handler,			/* IRQ 47 */",
+"	Default_Handler,			/* IRQ 48 */",
+"	Default_Handler,			/* IRQ 49 */",
+"	Default_Handler,			/* IRQ 50 */",
+"	Default_Handler,			/* IRQ 51 */",
+"	Default_Handler,			/* IRQ 52 */",
+"	Default_Handler,			/* IRQ 53 */",
+"	Default_Handler,			/* IRQ 54 */",
+"	Default_Handler,			/* IRQ 55 */",
+"	Default_Handler,			/* IRQ 56 */",
+"	Default_Handler,			/* IRQ 57 */",
+"	Default_Handler,			/* IRQ 58 */",
+"	Default_Handler,			/* IRQ 59 */",
+"	Default_Handler,			/* IRQ 60 */",
+"	Default_Handler,			/* IRQ 61 */",
+"	Default_Handler,			/* IRQ 62 */",
+"	Default_Handler,			/* IRQ 63 */",
+"	Default_Handler,			/* IRQ 64 */",
+"	Default_Handler,			/* IRQ 65 */",
+"	Default_Handler,			/* IRQ 66 */",
+"	Default_Handler,			/* IRQ 67 */",
+"	Default_Handler,			/* IRQ 68 */",
+"	Default_Handler,			/* IRQ 69 */",
+"	Default_Handler,			/* IRQ 70 */",
+"	Default_Handler,			/* IRQ 71 */",
+"	Default_Handler,			/* IRQ 72 */",
+"	Default_Handler,			/* IRQ 73 */",
+"	Default_Handler,			/* IRQ 74 */",
+"	Default_Handler,			/* IRQ 75 */",
+"	Default_Handler,			/* IRQ 76 */",
+"	Default_Handler,			/* IRQ 77 */",
+"	Default_Handler,			/* IRQ 78 */",
+"	Default_Handler,			/* IRQ 79 */",
+"	Default_Handler,			/* IRQ 80 */",
+"	Default_Handler,			/* IRQ 81 */",
+"	Default_Handler,			/* IRQ 82 */",
+"	Default_Handler,			/* IRQ 83 */",
+"	Default_Handler,			/* IRQ 84 */",
+"	Default_Handler,			/* IRQ 85 */",
+"	Default_Handler,			/* IRQ 86 */",
+"	Default_Handler,			/* IRQ 87 */",
+"	Default_Handler,			/* IRQ 88 */",
+"	Default_Handler,			/* IRQ 89 */",
+"	Default_Handler,			/* IRQ 90 */",
+"	Default_Handler,			/* IRQ 91 */",
+"	Default_Handler,			/* IRQ 92 */",
+"	Default_Handler,			/* IRQ 93 */",
+"	Default_Handler,			/* IRQ 94 */",
+"	Default_Handler,			/* IRQ 95 */",
+"	Default_Handler,			/* IRQ 96 */",
+"	Default_Handler,			/* IRQ 97 */",
+"	Default_Handler,			/* IRQ 98 */",
+"	Default_Handler,			/* IRQ 99 */",
+"	Default_Handler,			/* IRQ 100 */",
+"	Default_Handler,			/* IRQ 101 */",
+"	Default_Handler,			/* IRQ 102 */",
+"	Default_Handler,			/* IRQ 103 */",
+"	Default_Handler,			/* IRQ 104 */",
+"	Default_Handler,			/* IRQ 105 */",
+"	Default_Handler,			/* IRQ 106 */",
+"	Default_Handler,			/* IRQ 107 */",
+"	Default_Handler,			/* IRQ 108 */",
+"	Default_Handler,			/* IRQ 109 */",
+"	Default_Handler,			/* IRQ 110 */",
+"	Default_Handler,			/* IRQ 111 */",
+"	Default_Handler,			/* IRQ 112 */",
+"	Default_Handler,			/* IRQ 113 */",
+"	Default_Handler,			/* IRQ 114 */",
+"	Default_Handler,			/* IRQ 115 */",
+"	Default_Handler,			/* IRQ 116 */",
+"	Default_Handler,			/* IRQ 117 */",
+"	Default_Handler,			/* IRQ 118 */",
+"	Default_Handler,			/* IRQ 119 */",
+"	Default_Handler,			/* IRQ 120 */",
+"	Default_Handler,			/* IRQ 121 */",
+"	Default_Handler,			/* IRQ 122 */",
+"	Default_Handler,			/* IRQ 123 */",
+"	Default_Handler,			/* IRQ 124 */",
+"	Default_Handler,			/* IRQ 125 */",
+"	Default_Handler,			/* IRQ 126 */",
+"	Default_Handler,			/* IRQ 127 */",
+"	Default_Handler,			/* IRQ 128 */",
+"	Default_Handler,			/* IRQ 129 */",
+"	Default_Handler,			/* IRQ 130 */",
+"	Default_Handler,			/* IRQ 131 */",
+"	Default_Handler,			/* IRQ 132 */",
+"	Default_Handler,			/* IRQ 133 */",
+"	Default_Handler,			/* IRQ 134 */",
+"	Default_Handler,			/* IRQ 135 */",
+"	Default_Handler,			/* IRQ 136 */",
+"	Default_Handler,			/* IRQ 137 */",
+"	Default_Handler,			/* IRQ 138 */",
+"	Default_Handler,			/* IRQ 139 */",
+"	Default_Handler,			/* IRQ 140 */",
+"	Default_Handler,			/* IRQ 141 */",
+"	Default_Handler,			/* IRQ 142 */",
+"	Default_Handler,			/* IRQ 143 */",
+"	Default_Handler,			/* IRQ 144 */",
+"	Default_Handler,			/* IRQ 145 */",
+"	Default_Handler,			/* IRQ 146 */",
+"	Default_Handler,			/* IRQ 147 */",
+"	Default_Handler,			/* IRQ 148 */",
+"	Default_Handler,			/* IRQ 149 */",
+"	Default_Handler,			/* IRQ 150 */",
+"	Default_Handler,			/* IRQ 151 */",
+"	Default_Handler,			/* IRQ 152 */",
+"	Default_Handler,			/* IRQ 153 */",
+"	Default_Handler,			/* IRQ 154 */",
+"	Default_Handler,			/* IRQ 155 */",
+"	Default_Handler,			/* IRQ 156 */",
+"	Default_Handler,			/* IRQ 157 */",
+"	Default_Handler,			/* IRQ 158 */",
+"	Default_Handler,			/* IRQ 159 */",
+"	Default_Handler,			/* IRQ 160 */",
+"	Default_Handler,			/* IRQ 161 */",
+"	Default_Handler,			/* IRQ 162 */",
+"	Default_Handler,			/* IRQ 163 */",
+"	Default_Handler,			/* IRQ 164 */",
+"	Default_Handler,			/* IRQ 165 */",
+"	Default_Handler,			/* IRQ 166 */",
+"	Default_Handler,			/* IRQ 167 */",
+"	Default_Handler,			/* IRQ 168 */",
+"	Default_Handler,			/* IRQ 169 */",
+"	Default_Handler,			/* IRQ 170 */",
+"	Default_Handler,			/* IRQ 171 */",
+"	Default_Handler,			/* IRQ 172 */",
+"	Default_Handler,			/* IRQ 173 */",
+"	Default_Handler,			/* IRQ 174 */",
+"	Default_Handler,			/* IRQ 175 */",
+"	Default_Handler,			/* IRQ 176 */",
+"	Default_Handler,			/* IRQ 177 */",
+"	Default_Handler,			/* IRQ 178 */",
+"	Default_Handler,			/* IRQ 179 */",
+"	Default_Handler,			/* IRQ 180 */",
+"	Default_Handler,			/* IRQ 181 */",
+"	Default_Handler,			/* IRQ 182 */",
+"	Default_Handler,			/* IRQ 183 */",
+"	Default_Handler,			/* IRQ 184 */",
+"	Default_Handler,			/* IRQ 185 */",
+"	Default_Handler,			/* IRQ 186 */",
+"	Default_Handler,			/* IRQ 187 */",
+"	Default_Handler,			/* IRQ 188 */",
+"	Default_Handler,			/* IRQ 189 */",
+"",
+"};",
+"",
+"#endif /* CPU_STM32H7 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (STM32L4)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CPUSTATUS_",
+"#define _SYSDEPEND_CPU_CPUSTATUS_",
+"",
+"#include \"../core/armv7m/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (STM32L4)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CPUTASK_",
+"#define _SYSDEPEND_CPU_CPUTASK_",
+"",
+"#include \"../core/armv7m/cpu_task.h\"",
+"",
+"#endif  /*_SYSDEPEND_CPU_CPUTASK_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (STM32L4)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_SYSDEPEND_",
+"#define _SYSDEPEND_CPU_SYSDEPEND_",
+"",
+"#include \"../core/armv7m/sysdepend.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (STM32L4)",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_SYSTIMER_",
+"#define _SYSDEPEND_CPU_SYSTIMER_",
+"",
+"#include \"../core/armv7m/sys_timer.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_SYSTIMER_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.04",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/05/17.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_STM32L4",
+"",
+"/*",
+" *	vector_tbl.h (STM32L)",
+" *	Exception/Interrupt Vector Table",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Exception/Interrupt Vector Table",
+" * ",
+" */",
+"",
+"void (* const vector_tbl[])()  __attribute__((section(\".vector\"))) = {",
+"	(void(*)()) (INITIAL_SP),		/* 0: Top of Stack */",
+"	Reset_Handler,				/* 1: Reset Handler */",
+"	NMI_Handler,				/* 2: NMI Handler */",
+"	HardFault_Handler,			/* 3: Hard Fault Handler */",
+"	MemManage_Handler,			/* 4: MPU Fault Handler */",
+"	BusFault_Handler,			/* 5: Bus Fault Handler */",
+"	UsageFault_Handler,			/* 6: Usage Fault Handler */",
+"	0,					/* 7: Reserved */",
+"	0,					/* 8: Reserved */",
+"	0,					/* 9: Reserved */",
+"	0,					/* 10: Reserved */",
+"	Svcall_Handler,				/* 11: Svcall */",
+"	DebugMon_Handler,			/* 12: Debug Monitor Handler */",
+"	0,					/* 13: Reserved */",
+"	knl_dispatch_entry,			/* 14: Pend SV */",
+"	knl_systim_inthdr,			/* 15: Systick */",
+"",
+"	/* External Interrupts */",
+"	Default_Handler,			/* IRQ 0 */",
+"	Default_Handler,			/* IRQ 1 */",
+"	Default_Handler,			/* IRQ 2 */",
+"	Default_Handler,			/* IRQ 3 */",
+"	Default_Handler,			/* IRQ 4 */",
+"	Default_Handler,			/* IRQ 5 */",
+"	Default_Handler,			/* IRQ 6 */",
+"	Default_Handler,			/* IRQ 7 */",
+"	Default_Handler,			/* IRQ 8 */",
+"	Default_Handler,			/* IRQ 9 */",
+"	Default_Handler,			/* IRQ 10 */",
+"	Default_Handler,			/* IRQ 11 */",
+"	Default_Handler,			/* IRQ 12 */",
+"	Default_Handler,			/* IRQ 13 */",
+"	Default_Handler,			/* IRQ 14 */",
+"	Default_Handler,			/* IRQ 15 */",
+"	Default_Handler,			/* IRQ 16 */",
+"	Default_Handler,			/* IRQ 17 */",
+"	Default_Handler,			/* IRQ 18 */",
+"	Default_Handler,			/* IRQ 19 */",
+"	Default_Handler,			/* IRQ 20 */",
+"	Default_Handler,			/* IRQ 21 */",
+"	Default_Handler,			/* IRQ 22 */",
+"	Default_Handler,			/* IRQ 23 */",
+"	Default_Handler,			/* IRQ 24 */",
+"	Default_Handler,			/* IRQ 25 */",
+"	Default_Handler,			/* IRQ 26 */",
+"	Default_Handler,			/* IRQ 27 */",
+"	Default_Handler,			/* IRQ 28 */",
+"	Default_Handler,			/* IRQ 29 */",
+"	Default_Handler,			/* IRQ 30 */",
+"	Default_Handler,			/* IRQ 31 */",
+"	Default_Handler,			/* IRQ 32 */",
+"	Default_Handler,			/* IRQ 33 */",
+"	Default_Handler,			/* IRQ 34 */",
+"	Default_Handler,			/* IRQ 35 */",
+"	Default_Handler,			/* IRQ 36 */",
+"	Default_Handler,			/* IRQ 37 */",
+"	Default_Handler,			/* IRQ 38 */",
+"	Default_Handler,			/* IRQ 39 */",
+"	Default_Handler,			/* IRQ 40 */",
+"	Default_Handler,			/* IRQ 41 */",
+"	Default_Handler,			/* IRQ 42 */",
+"	Default_Handler,			/* IRQ 43 */",
+"	Default_Handler,			/* IRQ 44 */",
+"	Default_Handler,			/* IRQ 45 */",
+"	Default_Handler,			/* IRQ 46 */",
+"	Default_Handler,			/* IRQ 47 */",
+"	Default_Handler,			/* IRQ 48 */",
+"	Default_Handler,			/* IRQ 49 */",
+"	Default_Handler,			/* IRQ 50 */",
+"	Default_Handler,			/* IRQ 51 */",
+"	Default_Handler,			/* IRQ 52 */",
+"	Default_Handler,			/* IRQ 53 */",
+"	Default_Handler,			/* IRQ 54 */",
+"	Default_Handler,			/* IRQ 55 */",
+"	Default_Handler,			/* IRQ 56 */",
+"	Default_Handler,			/* IRQ 57 */",
+"	Default_Handler,			/* IRQ 58 */",
+"	Default_Handler,			/* IRQ 59 */",
+"	Default_Handler,			/* IRQ 60 */",
+"	Default_Handler,			/* IRQ 61 */",
+"	Default_Handler,			/* IRQ 62 */",
+"	Default_Handler,			/* IRQ 63 */",
+"	Default_Handler,			/* IRQ 64 */",
+"	Default_Handler,			/* IRQ 65 */",
+"	Default_Handler,			/* IRQ 66 */",
+"	Default_Handler,			/* IRQ 67 */",
+"	Default_Handler,			/* IRQ 68 */",
+"	Default_Handler,			/* IRQ 69 */",
+"	Default_Handler,			/* IRQ 70 */",
+"	Default_Handler,			/* IRQ 71 */",
+"	Default_Handler,			/* IRQ 72 */",
+"	Default_Handler,			/* IRQ 73 */",
+"	Default_Handler,			/* IRQ 74 */",
+"	Default_Handler,			/* IRQ 75 */",
+"	Default_Handler,			/* IRQ 76 */",
+"	Default_Handler,			/* IRQ 77 */",
+"	Default_Handler,			/* IRQ 78 */",
+"	Default_Handler,			/* IRQ 79 */",
+"	Default_Handler,			/* IRQ 80 */",
+"	Default_Handler,			/* IRQ 81 */",
+"};",
+"",
+"#endif /* CPU_STM32L4 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPUTASK_",
+"#define _SYSDEPEND_CPUTASK_",
+"",
+"/* System dependencies */",
+"#define CPUTASK_PATH_(a)	#a",
+"#define CPUTASK_PATH(a)		CPUTASK_PATH_(a)",
+"#define CPUTASK_SYSDEP()	CPUTASK_PATH(TARGET_DIR/cpu_task.h)",
+"#include CPUTASK_SYSDEP()",
+"",
+"#endif /* _SYSDEPEND_CPUTASK_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (TX03-M367)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CPUSTATUS_",
+"#define _SYSDEPEND_CPU_CPUSTATUS_",
+"",
+"#include \"../core/armv7m/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (TX03-M367)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_CPUTASK_",
+"#define _SYSDEPEND_CPU_CPUTASK_",
+"",
+"#include \"../core/armv7m/cpu_task.h\"",
+"",
+"#endif  /*_SYSDEPEND_CPU_CPUTASK_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (TX03-M367)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_SYSDEPEND_",
+"#define _SYSDEPEND_CPU_SYSDEPEND_",
+"",
+"#include \"../core/armv7m/sysdepend.h\"",
+"",
+"/*",
+" *    Clock Setting (cpu_clock.c)",
+" */",
+"IMPORT void startup_clock(UB pll_mode);",
+"IMPORT void shutdown_clock(void);",
+"",
+"#endif /* _SYSDEPEND_CPU_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (TX03-M367)",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_CPU_SYSTIMER_",
+"#define _SYSDEPEND_CPU_SYSTIMER_",
+"",
+"#include \"../core/armv7m/sys_timer.h\"",
+"",
+"#endif /* _SYSDEPEND_CPU_SYSTIMER_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.04",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/05/17 .",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_TMPM367FDFG",
+"",
+"/*",
+" *	vector_tbl.h (TX03-M367)",
+" *	Exception/Interrupt Vector Table",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"../../sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Exception/Interrupt Vector Table",
+" * ",
+" */",
+"",
+"void (* const vector_tbl[])()  __attribute__((section(\".vector\"))) = {",
+"	(void(*)()) (INITIAL_SP),		/* 0: Top of Stack */",
+"	Reset_Handler,				/* 1: Reset Handler */",
+"	NMI_Handler,				/* 2: NMI Handler */",
+"	HardFault_Handler,			/* 3: Hard Fault Handler */",
+"	MemManage_Handler,			/* 4: MPU Fault Handler */",
+"	BusFault_Handler,			/* 5: Bus Fault Handler */",
+"	UsageFault_Handler,			/* 6: Usage Fault Handler */",
+"	0,					/* 7: Reserved */",
+"	0,					/* 8: Reserved */",
+"	0,					/* 9: Reserved */",
+"	0,					/* 10: Reserved */",
+"	Svcall_Handler,			/* 11: Svcall */",
+"	DebugMon_Handler,			/* 12: Debug Monitor Handler */",
+"	0,					/* 13: Reserved */",
+"	knl_dispatch_entry,			/* 14: Pend SV */",
+"	knl_systim_inthdr,			/* 15: Systick */",
+"",
+"	/* External Interrupts */",
+"	Default_Handler,			/* IRQ 0 */",
+"	Default_Handler,			/* IRQ 1 */",
+"	Default_Handler,			/* IRQ 2 */",
+"	Default_Handler,			/* IRQ 3 */",
+"	Default_Handler,			/* IRQ 4 */",
+"	Default_Handler,			/* IRQ 5 */",
+"	Default_Handler,			/* IRQ 6 */",
+"	Default_Handler,			/* IRQ 7 */",
+"	Default_Handler,			/* IRQ 8 */",
+"	Default_Handler,			/* IRQ 9 */",
+"	Default_Handler,			/* IRQ 10 */",
+"	Default_Handler,			/* IRQ 11 */",
+"	Default_Handler,			/* IRQ 12 */",
+"	Default_Handler,			/* IRQ 13 */",
+"	Default_Handler,			/* IRQ 14 */",
+"	Default_Handler,			/* IRQ 15 */",
+"	Default_Handler,			/* IRQ 16 */",
+"	Default_Handler,			/* IRQ 17 */",
+"	Default_Handler,			/* IRQ 18 */",
+"	Default_Handler,			/* IRQ 19 */",
+"	Default_Handler,			/* IRQ 20 */",
+"	Default_Handler,			/* IRQ 21 */",
+"	Default_Handler,			/* IRQ 22 */",
+"	Default_Handler,			/* IRQ 23 */",
+"	Default_Handler,			/* IRQ 24 */",
+"	Default_Handler,			/* IRQ 25 */",
+"	Default_Handler,			/* IRQ 26 */",
+"	Default_Handler,			/* IRQ 27 */",
+"	Default_Handler,			/* IRQ 28 */",
+"	Default_Handler,			/* IRQ 29 */",
+"	Default_Handler,			/* IRQ 30 */",
+"	Default_Handler,			/* IRQ 31 */",
+"	Default_Handler,			/* IRQ 32 */",
+"	Default_Handler,			/* IRQ 33 */",
+"	Default_Handler,			/* IRQ 34 */",
+"	Default_Handler,			/* IRQ 35 */",
+"	Default_Handler,			/* IRQ 36 */",
+"	Default_Handler,			/* IRQ 37 */",
+"	Default_Handler,			/* IRQ 38 */",
+"	Default_Handler,			/* IRQ 39 */",
+"	Default_Handler,			/* IRQ 40 */",
+"	Default_Handler,			/* IRQ 41 */",
+"	Default_Handler,			/* IRQ 42 */",
+"	Default_Handler,			/* IRQ 43 */",
+"	Default_Handler,			/* IRQ 44 */",
+"	Default_Handler,			/* IRQ 45 */",
+"	Default_Handler,			/* IRQ 46 */",
+"	Default_Handler,			/* IRQ 47 */",
+"	Default_Handler,			/* IRQ 48 */",
+"	Default_Handler,			/* IRQ 49 */",
+"	Default_Handler,			/* IRQ 50 */",
+"	Default_Handler,			/* IRQ 51 */",
+"	Default_Handler,			/* IRQ 52 */",
+"	Default_Handler,			/* IRQ 53 */",
+"	Default_Handler,			/* IRQ 54 */",
+"	Default_Handler,			/* IRQ 55 */",
+"	Default_Handler,			/* IRQ 56 */",
+"	Default_Handler,			/* IRQ 57 */",
+"	Default_Handler,			/* IRQ 58 */",
+"	Default_Handler,			/* IRQ 59 */",
+"	Default_Handler,			/* IRQ 60 */",
+"	Default_Handler,			/* IRQ 61 */",
+"	Default_Handler,			/* IRQ 62 */",
+"	Default_Handler,			/* IRQ 63 */",
+"	Default_Handler,			/* IRQ 64 */",
+"	Default_Handler,			/* IRQ 65 */",
+"	Default_Handler,			/* IRQ 66 */",
+"	Default_Handler,			/* IRQ 67 */",
+"	Default_Handler,			/* IRQ 68 */",
+"	Default_Handler,			/* IRQ 69 */",
+"	Default_Handler,			/* IRQ 70 */",
+"	Default_Handler,			/* IRQ 71 */",
+"	Default_Handler,			/* IRQ 72 */",
+"	Default_Handler,			/* IRQ 73 */",
+"	Default_Handler,			/* IRQ 74 */",
+"	Default_Handler,			/* IRQ 75 */",
+"	Default_Handler,			/* IRQ 76 */",
+"	Default_Handler,			/* IRQ 77 */",
+"	Default_Handler,			/* IRQ 78 */",
+"	Default_Handler,			/* IRQ 79 */",
+"	Default_Handler,			/* IRQ 80 */",
+"	Default_Handler,			/* IRQ 81 */",
+"	Default_Handler,			/* IRQ 82 */",
+"	Default_Handler,			/* IRQ 83 */",
+"	Default_Handler,			/* IRQ 84 */",
+"	Default_Handler,			/* IRQ 85 */",
+"	Default_Handler,			/* IRQ 86 */",
+"	Default_Handler,			/* IRQ 87 */",
+"	Default_Handler,			/* IRQ 88 */",
+"	Default_Handler,			/* IRQ 89 */",
+"	Default_Handler,			/* IRQ 90 */",
+"	Default_Handler,			/* IRQ 91 */",
+"	Default_Handler,			/* IRQ 92 */",
+"	Default_Handler,			/* IRQ 93 */",
+"	Default_Handler,			/* IRQ 94 */",
+"	Default_Handler,			/* IRQ 95 */",
+"	Default_Handler,			/* IRQ 96 */",
+"	Default_Handler,			/* IRQ 97 */",
+"	Default_Handler,			/* IRQ 98 */",
+"	Default_Handler,			/* IRQ 99 */",
+"	Default_Handler,			/* IRQ 100 */",
+"	Default_Handler,			/* IRQ 101 */",
+"	Default_Handler,			/* IRQ 102 */",
+"	Default_Handler,			/* IRQ 103 */",
+"	Default_Handler,			/* IRQ 104 */",
+"	Default_Handler,			/* IRQ 105 */",
+"	Default_Handler,			/* IRQ 106 */",
+"	Default_Handler,			/* IRQ 107 */",
+"	Default_Handler,			/* IRQ 108 */",
+"	Default_Handler,			/* IRQ 109 */",
+"	Default_Handler,			/* IRQ 110 */",
+"	Default_Handler,			/* IRQ 111 */",
+"	Default_Handler,			/* IRQ 112 */",
+"	Default_Handler,			/* IRQ 113 */",
+"	Default_Handler,			/* IRQ 114 */",
+"	Default_Handler,			/* IRQ 115 */",
+"	Default_Handler,			/* IRQ 116 */",
+"	Default_Handler,			/* IRQ 117 */",
+"	Default_Handler,			/* IRQ 118 */",
+"	Default_Handler,			/* IRQ 119 */",
+"	Default_Handler,			/* IRQ 120 */",
+"	Default_Handler,			/* IRQ 121 */",
+"	Default_Handler,			/* IRQ 122 */",
+"	Default_Handler,			/* IRQ 123 */",
+"	Default_Handler,			/* IRQ 124 */",
+"	Default_Handler,			/* IRQ 125 */",
+"	Default_Handler,			/* IRQ 126 */",
+"	Default_Handler,			/* IRQ 127 */",
+"",
+"};",
+"",
+"#endif /* CPU_TMPM367FDFG */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"#include <sys/machine.h>",
+"#ifdef IOTE_M367",
+"",
+"/*",
+" *	cpu_clock.c (M367 IoT-Engine)",
+" *	Clock Setting",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/*",
+" *  Startup System Clock",
+" *    Input clock = 12MHz  Output clock = 72MHz(PLL_MODE_6X) or 48MHz(PLL_MODE_4X)",
+" *    **** This implementation assumes 6 multiplication.",
+" */",
+"EXPORT void startup_clock(UB pll_mode)",
+"{",
+"	_UW	*osccr	= (_UW*)CLKCTRL_CGOSCCR;",
+"",
+"	/* Unprotect CG . */",
+"	*(_UW*)CLKCTRL_CGPROTECT = 0xC1;",
+"	",
+"",
+"	*osccr = (*osccr | ((1 << 19) | (1 << 18) | (1 << 8))) & 0xFFFFFFF7;",
+"	",
+"	/* Warming up = 100usec */",
+"	*osccr = (*osccr & 0x000FFFFF) | (0x64 << 20) | (1);",
+"	while( (*osccr & CLKCTRL_CGOSCCR_WUEF) != 0 ) {",
+"		;",
+"	}",
+"	",
+"	/* External oscillator select  */",
+"	do{",
+"		*osccr |= (1 << 17);",
+"	} while((*osccr & (1 << 17)) == 0);",
+"	",
+"	/* Internal oscillator off */",
+"	*osccr &= ~(1 << 16);",
+"	",
+"	",
+"	/* PLLON = off */",
+"	*osccr &= 0xFFFFFFFB;",
+"",
+"	/* Specify the number of PLL multiplier factors */",
+"	if(pll_mode == PLL_MODE_4X) {",
+"		*(_UW*)CLKCTRL_CGPLLSEL = CLKCTRL_CGPLLSEL_4X << 1;",
+"	}",
+"	else if(pll_mode == PLL_MODE_6X) {",
+"		*(_UW*)CLKCTRL_CGPLLSEL = CLKCTRL_CGPLLSEL_6X << 1;",
+"	}",
+"	else {		/* invarid pamameter */",
+"		return;",
+"	}",
+"	",
+"	/* Waiting for PLL stablization (100usec) */",
+"	*osccr = (*osccr & 0x000FFFFF) | CLKCTRL_CGOSCCR_WUPT(100, HISPEED_CLOCK_MHz) | (1);",
+"	while( (*osccr & CLKCTRL_CGOSCCR_WUEF) != 0 ) {",
+"		;",
+"	}",
+"	",
+"	/* Enable PLL operation and Wait for PLL stablization (200usec) */",
+"	*osccr = (*osccr & 0x000FFFFF) | (CLKCTRL_CGOSCCR_PLLON |",
+"			    CLKCTRL_CGOSCCR_WUPT(200, HISPEED_CLOCK_MHz) | (1));",
+"	while( (*osccr & CLKCTRL_CGOSCCR_WUEF) != 0 ) {",
+"		;",
+"	}",
+"	",
+"	/* PLL operation select */",
+"	*(_UW*)CLKCTRL_CGPLLSEL |= CLKCTRL_CGPLLSEL_PLLSEL;",
+"	",
+"	/* fgear = fc/2, fperiph = fgear, T0 = fperiph, SCOUT = fsys/2 */",
+"	*(_UW*)CLKCTRL_CGSYSCR = (1 << 16) | (4);",
+"	",
+"	/* Protect CG */",
+"	*(_UW*)CLKCTRL_CGPROTECT = 0xFF;",
+"	",
+"	return;",
+"	",
+"}",
+"",
+"",
+"EXPORT void shutdown_clock(void)",
+"{",
+"",
+"}",
+"",
+"#endif /* IOTE_M367 *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (M367 IoT-Engine)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUSTATUS_",
+"#define _SYSDEPEND_TARGET_CPUSTATUS_",
+"",
+"#include \"../cpu/tx03_m367/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (M367 IoT-Engine)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUTASK_",
+"#define _SYSDEPEND_TARGET_CPUTASK_",
+"",
+"#include \"../cpu/tx03_m367/cpu_task.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_CPUTASK_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.04",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/05/17.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef IOTE_M367",
+"",
+"/*",
+" *	devinit.c (M367 IoT-Engine)",
+" *	Device-Dependent Initialization",
+" */",
+"",
+"#include <sys/sysdef.h>",
+"#include <tm/tmonitor.h>",
+"#include <tk/device.h>",
+"",
+"#include \"kernel.h\"",
+"#include \"sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Initialization before micro T-Kernel starts",
+" */",
+"",
+"EXPORT ER knl_init_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Start processing after T-Kernel starts",
+" *	Called from the initial task contexts.",
+" */",
+"EXPORT ER knl_start_device( void )",
+"{",
+"",
+"#if USE_SDEV_DRV	// Use sample driver",
+"	ER	err;",
+"",
+"	/* A/D Converter unit.A \"adca\" & Unit.B \"adcb\" */",
+"	#if DEVCNF_USE_ADC",
+"		err = dev_init_adc(0);",
+"		if(err < E_OK) return err;",
+"		err = dev_init_adc(1);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* I2C SBI1 \"iicb\" */",
+"	#if DEVCNF_USE_IIC",
+"		err = dev_init_i2c(1);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* Serial UART5 \"serb\" */",
+"	#if DEVCNF_USE_SER",
+"		err = dev_init_ser(1);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"#endif",
+"",
+"	return E_OK;",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System finalization",
+" *	Called just before system shutdown.",
+" *	Execute finalization that must be done before system shutdown.",
+" */",
+"EXPORT ER knl_finish_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"#endif /* USE_SHUTDOWN */",
+"",
+"#endif /* IOTE_M367 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef IOTE_M367",
+"",
+"/*",
+" *	hw_setting.c (M367 IoT-Engine)",
+" *	startup / shoutdown processing for hardware",
+" *	",
+" *	Pin function Setting (for IoT-Engine Starter board)",
+" *		PA0 ~ PA3 : Debug I/F",
+" *		PA4  : UART RTS5",
+" *		PA5  : UART RXD5",
+" *		PA6  : UART TXD5",
+" *		PA7  : UART CTS5",
+" *",
+" *		(USE_SDEV_DRV)",
+" *		PB0  : GPIO out (LED4)",
+" *		PF3  : GPIO out (LED3)",
+" *		PF6  : I2C SCL1",
+" *		PF7  : I2C SDA1",
+" *		PL1  : GPIO out (I2C Enable)",
+" *",
+" * 		(A/DC)",
+" * 		PI0  ; AIN A0 (Light sensor)",
+" *		PI2  : AIN A2 (Ardino A2)",
+" * 		PI3  : AIN A3 (Ardino A1)",
+"  * 		PI4  : AIN B0 (Ardino A0)",
+" * 		PI5  : AIN B1 (Temp sensor)",
+" * 		PI6  : AIN B2 (Analog SW)",
+" * 		PI7  ; AIN B3 (Analog SW)",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include <tm/tmonitor.h>",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/* ",
+" * Setup pin functions Tadle",
+" */",
+"typedef struct {",
+"	UW	addr;",
+"	UW	data;",
+"} T_SETUP_REG;",
+"",
+"LOCAL const T_SETUP_REG setup_regs[] = {",
+"",
+"#if !USE_SDEV_DRV	// Do not use device sample driver",
+"	//  Debugger I/F : PA0 ~ PA3",
+"	//  Serial debug I/F : PA4 -> RTS5, PA5 -> RXD5, PA6 -> TXD5, PA7 -> CTS5",
+"	{PORT_FR1(A),	0x0000000F},",
+"	{PORT_FR2(A),	0x000000F0},",
+"	{PORT_PUP(A),	0x0000000A},",
+"	{PORT_CR(A),	0x00000053},",
+"	{PORT_IE(A),	0x000000AE},",
+"",
+"#else			// Use the device sample driver",
+"	// Port Output : PB0",
+"	{PORT_DATA(B),	0x00000000},",
+"	{PORT_CR(B),	0x00000001},",
+"",
+"	//  Debugger I/F : PA0 ~ PA3",
+"	//  Serial debug I/F : PA4 -> RTS5, PA5 -> RXD5, PA6 -> TXD5, PA7 -> CTS5",
+"	{PORT_FR1(A),	0x0000000F},",
+"	{PORT_FR2(A),	0x000000F0},",
+"	{PORT_PUP(A),	0x0000000A},",
+"	{PORT_CR(A),	0x00000053},",
+"	{PORT_IE(A),	0x000000AE},",
+"",
+"	// I2C I/F : PF6 -> SCL1, PF7 -> SDA1",
+"	// Port Output : PF3",
+"	{PORT_FR4(F),	0x000000C0},",
+"	{PORT_OD(F),	0x000000C0},",
+"	{PORT_DATA(F),	0x00000000},",
+"	{PORT_CR(F),	0x000000C8},",
+"	{PORT_IE(F),	0x000000C0},",
+"",
+"	// PL1	P-OUT	I2C_ENABLE",
+"	{PORT_DATA(L),	0x00000000},",
+"	{PORT_CR(L),	0x00000002},",
+"",
+"#endif /* USE_SDEV_DRV */",
+"",
+"	{0, 0}",
+"};",
+"",
+"/*",
+" * Startup Device",
+" */",
+"EXPORT void knl_startup_hw(void)",
+"{",
+"	const T_SETUP_REG	*p;",
+"",
+"	/* Disable Watch Dog Timer */",
+"	*(_UW*)WDOG_WDMOD &= ~0x00000080;",
+"	*(_UW*)WDOG_WDCR = WDOG_WDCR_DISABLE;",
+"",
+"	startup_clock(PLL_MODE_6X);",
+"",
+"	/* Setup Pin Function */",
+"	for(p = setup_regs; p->addr != 0; p++) {",
+"		*(_UW*)(p->addr) = p->data;",
+"	}",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/*",
+" * Shutdown device",
+" */",
+"EXPORT void knl_shutdown_hw( void )",
+"{",
+"	disint();",
+"	while(1);",
+"}",
+"#endif /* USE_SHUTDOWN */",
+"",
+"/*",
+" * Re-start device",
+" *	mode = -1		reset and re-start	(Reset -> Boot -> Start)",
+" *	mode = -2		fast re-start		(Start)",
+" *	mode = -3		Normal re-start		(Boot -> Start)",
+" */",
+"EXPORT ER knl_restart_hw( W mode )",
+"{",
+"	switch(mode) {",
+"	case -1: /* Reset and re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM RESET & RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	case -2: /* fast re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM FAST RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	case -3: /* Normal re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	default:",
+"		return E_PAR;",
+"	}",
+"}",
+"",
+"",
+"#endif /* IOTE_M367 *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"#include <kernel.h>",
+"",
+"#ifdef IOTE_M367",
+"",
+"/*",
+" *	power_save.c (M367 IoT-Engine)",
+" *	Power-Saving Function",
+" */",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/*",
+" * Switch to power-saving mode",
+" */",
+"EXPORT void low_pow( void )",
+"{",
+"}",
+"",
+"/*",
+" * Move to suspend mode",
+" */",
+"EXPORT void off_pow( void )",
+"{",
+"}",
+"",
+"",
+"#endif /* IOTE_M367 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (M367 IoT-Engine)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSDEPEND_",
+"#define _SYSDEPEND_TARGET_SYSDEPEND_",
+"",
+"",
+"#include \"../cpu/tx03_m367/sysdepend.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_msg.h (M367 IoT-Engine)",
+" *	Hardware-Dependent System message",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSMSG_",
+"#define _SYSDEPEND_TARGET_SYSMSG_",
+"",
+"#include <tm/tmonitor.h>",
+"",
+"#if (USE_SYSTEM_MESSAGE && USE_TMONITOR)",
+"#define SYSTEM_MESSAGE(s)	tm_putstring((UB*)s)",
+"#else",
+"#define SYSTEM_MESSAGE(s)",
+"#endif /* USE_SYSTEM_MESSAGE && USE_TMONITOR */",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSMSG_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (M367 IoT-Engine)",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSTIMER_",
+"#define _SYSDEPEND_TARGET_SYSTIMER_",
+"",
+"#include \"../cpu/tx03_m367/sys_timer.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSTIMER_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef IOTE_RX231",
+"",
+"/*",
+" *	cpu_clock.c (RX231 IoT-Engine)",
+" *	Clock Setting",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/*",
+" *  Startup System Clock",
+" *    Used Main Clock(8MHz), Uesd PLL/UPLL, System Clock 54MHz",
+" *    ICLK:54MHz, PCLKA:54MHz, PCLKB:27MHz, PCLKD:54MHz, FCLK:1.6875MHz, UCLK:48MHz",
+" */",
+"EXPORT void startup_clock(void)",
+"{",
+"	out_h(SYSTEM_PRCR, 0xA503);			/* Register Protect Disable */",
+"",
+"	out_b(SYSTEM_MOSCWTCR, 0x05);			/* LOCO(4MHz)*16384cyc=4.096ms(Over 3ms) */",
+"	out_b(SYSTEM_MOSCCR, 0x00);			/* Enable Main Clock */",
+"",
+"	while(!(in_b(SYSTEM_OSCOVFSR) & 0x01));		/* Wait Main Clock Stabilization */",
+"",
+"	out_h(SYSTEM_PLLCR, 0x1A01);			/* PLL 8MHz/2*13.5=54MHz */",
+"	out_b(SYSTEM_PLLCR2, 0x00);			/* Enable PLL */",
+"	while(!(in_b(SYSTEM_OSCOVFSR) & 0x04));		/* Wait PLL Stabilization */",
+"",
+"	out_h(SYSTEM_UPLLCR, 0x0B11);			/* UPLL 8MHz/1*6=48MHz */",
+"	out_b(SYSTEM_UPLLCR2, 0x00);			/* Enable UPLL */",
+"	while( !(in_b(SYSTEM_OSCOVFSR) & 0x20));	/* Wait UPLL Stabilization */",
+"",
+"	out_b(SYSTEM_OPCCR, 0x00);			/* High Speed Mode */",
+"	while( in_b(SYSTEM_OPCCR) & 0x10);		/* Wait Transition Completed */",
+"	",
+"	out_b(SYSTEM_MEMWAIT, 0x01);			/* Memory Wait States */",
+"",
+"	out_w(SYSTEM_SCKCR, 0x50860100);		/* ICLK=PCLKA=PCLKD:54MHz,PCLKB:27MHz,UCLK:48MHz,FCLK:1.6875MHz */",
+"	out_h(SYSTEM_SCKCR3, 0x0400);			/* Select PLL */",
+"",
+"	out_b(SYSTEM_LOCOCR, 0x01);			/* Disable LOCO */",
+"",
+"	out_h(SYSTEM_PRCR, 0xA500);			/* Register protect Enable */",
+"",
+"	return;",
+"}",
+"",
+"",
+"EXPORT void shutdown_clock(void)",
+"{",
+"}",
+"",
+"#endif /* IOTE_RX231 *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (RX231 IoT-Engine)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUSTATUS_",
+"#define _SYSDEPEND_TARGET_CPUSTATUS_",
+"",
+"#include \"../cpu/rx231/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (RX231 IoT-Engine)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUTASK_",
+"#define _SYSDEPEND_TARGET_CPUTASK_",
+"",
+"#include \"../cpu/rx231/cpu_task.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_CPUTASK_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.04",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/05/17.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef IOTE_RX231",
+"",
+"/*",
+" *	devinit.c (RX231 IoT-Engine)",
+" *	Device-Dependent Initialization",
+" */",
+"",
+"#include <sys/sysdef.h>",
+"#include <tm/tmonitor.h>",
+"#include <tk/device.h>",
+"",
+"#include \"kernel.h\"",
+"#include \"sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Initialization before micro T-Kernel starts",
+" */",
+"",
+"EXPORT ER knl_init_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Start processing after T-Kernel starts",
+" *	Called from the initial task contexts.",
+" */",
+"EXPORT ER knl_start_device( void )",
+"{",
+"#if USE_SDEV_DRV	// Use sample driver",
+"	ER	err;",
+"",
+"	/* A/D Converter \"adca\" */",
+"	#if DEVCNF_USE_ADC",
+"		err = dev_init_adc(0);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* SCI6 \"serd\" */",
+"	#if DEVCNF_USE_SER",
+"		err = dev_init_ser(3);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* RIIC0 \"iica\" */",
+"	#if DEVCNF_USE_IIC",
+"		err = dev_init_i2c(0);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"#endif",
+"",
+"	return E_OK;",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System finalization",
+" *	Called just before system shutdown.",
+" *	Execute finalization that must be done before system shutdown.",
+" */",
+"EXPORT ER knl_finish_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"#endif /* USE_SHUTDOWN */",
+"",
+"#endif /* IOTE_RX231 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (RX231 IoT-Engine)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUSTATUS_",
+"#define _SYSDEPEND_TARGET_CPUSTATUS_",
+"",
+"#include \"../cpu/rx231/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (RX231 IoT-Engine)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUTASK_",
+"#define _SYSDEPEND_TARGET_CPUTASK_",
+"",
+"#include \"../cpu/rx231/cpu_task.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_CPUTASK_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.04",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/05/17.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef IOTE_RX231",
+"",
+"/*",
+" *	devinit.c (RX231 IoT-Engine)",
+" *	Device-Dependent Initialization",
+" */",
+"",
+"#include <sys/sysdef.h>",
+"#include <tm/tmonitor.h>",
+"#include <tk/device.h>",
+"",
+"#include \"kernel.h\"",
+"#include \"sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Initialization before micro T-Kernel starts",
+" */",
+"",
+"EXPORT ER knl_init_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Start processing after T-Kernel starts",
+" *	Called from the initial task contexts.",
+" */",
+"EXPORT ER knl_start_device( void )",
+"{",
+"#if USE_SDEV_DRV	// Use sample driver",
+"	ER	err;",
+"",
+"	/* A/D Converter \"adca\" */",
+"	#if DEVCNF_USE_ADC",
+"		err = dev_init_adc(0);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* SCI6 \"serd\" */",
+"	#if DEVCNF_USE_SER",
+"		err = dev_init_ser(3);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* RIIC0 \"iica\" */",
+"	#if DEVCNF_USE_IIC",
+"		err = dev_init_i2c(0);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"#endif",
+"",
+"	return E_OK;",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System finalization",
+" *	Called just before system shutdown.",
+" *	Execute finalization that must be done before system shutdown.",
+" */",
+"EXPORT ER knl_finish_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"#endif /* USE_SHUTDOWN */",
+"",
+"#endif /* IOTE_RX231 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"#include <sys/machine.h>",
+"#ifdef IOTE_RX231",
+"",
+"/*",
+" *	hw_setting.c (RX231 IoT-Engine)",
+" *	startup / shoutdown processing for hardware",
+" *	",
+" *	Pin function Setting (for IoT-Engine Starter board)",
+" *		PB0  : SCI6.RXD6",
+" *		PB1  : SCI6.TXD6",
+" *",
+" *		(USE_SDEV_DRV)",
+" *		P16  : SCL0 (Arduino I2C)",
+"		P17  : SDA0 (Arduino I2C)",
+"		P40  : AN000 (Analog-SW/Arduino A0)",
+"		P41  : AN001 (Analog-SW/Arduino A1)",
+"		P42  : AN002 (Temp sensor/Arduino A2)",
+" *",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include <tm/tmonitor.h>",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/* ",
+" * Setup register data ",
+" */",
+"typedef struct {",
+"	UW	addr;",
+"	UW	data;",
+"} T_SETUP_REG;",
+"",
+"/* ",
+" * Setup module stop Tadle",
+" */",
+"LOCAL const T_SETUP_REG mstop_tbl[] = {",
+"#if !USE_SDEV_DRV	// Do not use sample device driver",
+"	{ MSTPCRA, 0xEFFF7FCF },	/* Enable DMAC/DTC, CMT0-1, TMR0-3 */",
+"	{ MSTPCRB, 0xFDFFFFFF },	/* Enable SCI6 */",
+"	{ MSTPCRC, 0x7FFF0000 },	/* Disable Deep-Sleep mode, Enable RAM */",
+"	{ MSTPCRD, 0xFFFFFF00 },",
+"",
+"#else			// Use the sample device driver",
+"	{ MSTPCRA, 0xEFFD7FCF },	/* Enable DMAC/DTC, ADC, CMT0-1, TMR0-3 */",
+"	{ MSTPCRB, 0xFDDFFFFF },	/* Enable SCI6, RIIC0 */",
+"	{ MSTPCRC, 0x7FFF0000 },	/* Disable Deep-Sleep mode, Enable RAM */",
+"	{ MSTPCRD, 0xFFFFFF00 },",
+"",
+"#endif /* !USE_SDEV_DRV */",
+"	{0, 0}",
+"};",
+"",
+"/* ",
+" * Setup pin functions Tadle",
+" */",
+"LOCAL const T_SETUP_REG pinfnc_tbl[] = {",
+"	{MPC_PBnPFS(0), 0x0B},		/* PB0 = SCI6.RXD6 */",
+"	{MPC_PBnPFS(1), 0x0B},		/* PB1 = SCI6.TXD6 */",
+"",
+"#if USE_SDEV_DRV	// Use the sample device driver",
+"	{MPC_P1nPFS(6), 0x0F},		/* P16 = SCL0 */",
+"	{MPC_P1nPFS(7), 0x0F},		/* P17 = SDA0 */",
+"	{MPC_P4nPFS(0), 0x80},		/* P40 = AN000 */",
+"	{MPC_P4nPFS(1), 0x80},		/* P41 = AN001 */",
+"	{MPC_P4nPFS(2), 0x80},		/* P42 = AN002 */",
+"",
+"#endif /* USE_SDEV_DRV */",
+"	{0, 0}",
+"};",
+"",
+"/* ",
+" * Setup port mode Tadle",
+" */",
+"LOCAL const T_SETUP_REG portmode_tbl[] = {",
+"	{PORTB_PMR, 0x03},		/* Set PB0&PB1 as a peripheral function. */",
+"",
+"#if USE_SDEV_DRV	// Use the sample device driver",
+"	{PORT1_PMR, 0xC0},		// P16-P17 peripheral function",
+"	{PORT1_ODR1, 0x50},		// P16-O17 open drain",
+"	{PORT4_PMR, 0x00},		/* P40-P42 General-purpose i/o port */",
+"	{PORT4_PDR, 0x00},		/* P40-P42 input port */",
+"#endif /* USE_SDEV_DRV */",
+"",
+"	{0, 0}",
+"};",
+"",
+"/*",
+" * Startup hardware",
+" */",
+"EXPORT void knl_startup_hw(void)",
+"{",
+"	const T_SETUP_REG	*p;",
+"",
+"	/* Setup module stop */",
+"	out_h(SYSTEM_PRCR, 0xA502);		/* Disable Register Protect */",
+"	for(p = mstop_tbl; p->addr != 0; p++) {",
+"		out_w(p->addr, p->data);",
+"	}",
+"	out_h(SYSTEM_PRCR, 0xA500);		/* Enable Register protect */",
+"",
+"	/* Setup Pin Function */",
+"	out_b(MPC_PWPR, 0);",
+"	out_b(MPC_PWPR, MPC_PWMR_PFSWE);	/* Disable Register Protect */",
+"	for(p = pinfnc_tbl; p->addr != 0; p++) {",
+"		out_b(p->addr, (UB)p->data);",
+"	}",
+"	out_b(MPC_PWPR, MPC_PWMR_B0WI);		/* Enable Register protect */",
+"",
+"	/* Setup port mode */",
+"	for(p = portmode_tbl; p->addr != 0; p++) {",
+"		out_b(p->addr, (UB)p->data);",
+"	}	",
+"",
+"	startup_clock();			/* Startup CPU Clock */",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/*",
+" * Shutdown hardware",
+" */",
+"EXPORT void knl_shutdown_hw( void )",
+"{",
+"	disint();",
+"	shutdown_clock();",
+"",
+"	while(1);",
+"}",
+"#endif /* USE_SHUTDOWN */",
+"",
+"/*",
+" * Re-start hardware",
+" *	mode = -1		reset and re-start	(Reset -> Boot -> Start)",
+" *	mode = -2		fast re-start		(Start)",
+" *	mode = -3		Normal re-start		(Boot -> Start)",
+" */",
+"EXPORT ER knl_restart_hw( W mode )",
+"{",
+"	switch(mode) {",
+"	case -1: /* Reset and re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM RESET & RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	case -2: /* fast re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM FAST RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	case -3: /* Normal re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	default:",
+"		return E_PAR;",
+"	}",
+"}",
+"",
+"",
+"#endif /* IOTE_RX231 *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"#include <kernel.h>",
+"",
+"#ifdef IOTE_RX231",
+"",
+"/*",
+" *	power_save.c (RX231 IoT-Engine)",
+" *	Power-Saving Function",
+" */",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/*",
+" * Switch to power-saving mode",
+" */",
+"EXPORT void low_pow( void )",
+"{",
+"}",
+"",
+"/*",
+" * Move to suspend mode",
+" */",
+"EXPORT void off_pow( void )",
+"{",
+"}",
+"",
+"",
+"#endif /* IOTE_RX231 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (RX231 IoT-Engine)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSDEPEND_",
+"#define _SYSDEPEND_TARGET_SYSDEPEND_",
+"",
+"#include \"../cpu/rx231/sysdepend.h\"",
+"",
+"/*",
+" *    Clock Setting (cpu_clock.c)",
+" */",
+"IMPORT void startup_clock(void);",
+"IMPORT void shutdown_clock(void);",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_msg.h (RX231 IoT-Engine)",
+" *	Hardware-Dependent System message",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSMSG_",
+"#define _SYSDEPEND_TARGET_SYSMSG_",
+"",
+"#include <tm/tmonitor.h>",
+"",
+"#if (USE_SYSTEM_MESSAGE && USE_TMONITOR)",
+"#define SYSTEM_MESSAGE(s)	tm_putstring((UB*)s)",
+"#else",
+"#define SYSTEM_MESSAGE(s)",
+"#endif /* USE_SYSTEM_MESSAGE && USE_TMONITOR */",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSMSG_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (RX231 IoT-Engine)",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSTIMER_",
+"#define _SYSDEPEND_TARGET_SYSTIMER_",
+"",
+"#include \"../cpu/rx231/sys_timer.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSTIMER_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef CPU_RZA2M",
+"",
+"/*",
+" *	cpu_clock.c (RZ/A2M)",
+" *	Clock Setting",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/*",
+" *  Startup System Clock (CPG settings)",
+" */",
+"EXPORT void startup_clock(void)",
+"{",
+"	_UW	dummy_32b;",
+"	_UB	dummy_8b;",
+"",
+"	/* standby_mode_en bit of Power Control Register setting */",
+"	*(_UW*)PL310_POWER_CTL |= 0x0001;",
+"	dummy_32b = in_w(PL310_POWER_CTL);",
+"	(void)dummy_32b;		/* Warning avoidance */",
+"",
+"	/* CPG Setting */",
+"	out_h(CPG_FRQCR, CPG_FRQCR_INIVAL);",
+"",
+"	/* Writing to On-Chip Data-Retention RAM is enabled. */",
+"	out_b(CPG_SYSCR3,0x0F);",
+"	dummy_8b = in_b(CPG_SYSCR3);",
+"	(void)dummy_8b;		/* Warning avoidance */",
+"}",
+"",
+"EXPORT void shutdown_clock(void)",
+"{",
+"",
+"}",
+"",
+"#endif /* CPU_RZA2M *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (RZ/A2M IoT-Engine)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUSTATUS_",
+"#define _SYSDEPEND_TARGET_CPUSTATUS_",
+"",
+"#include \"../cpu/rza2m/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (RZ/A2M IoT-Engine)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUTASK_",
+"#define _SYSDEPEND_TARGET_CPUTASK_",
+"",
+"#include \"../cpu/rza2m/cpu_task.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_CPUTASK_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef IOTE_RZA2M",
+"",
+"/*",
+" *	devinit.c (RZ/A2M IoT-Engine)",
+" *	Device-Dependent Initialization",
+" */",
+"",
+"#include <sys/sysdef.h>",
+"#include <tm/tmonitor.h>",
+"#include <tk/device.h>",
+"",
+"#include \"kernel.h\"",
+"#include \"sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Initialization before micro T-Kernel starts",
+" */",
+"",
+"EXPORT ER knl_init_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Start processing after T-Kernel starts",
+" *	Called from the initial task contexts.",
+" */",
+"EXPORT ER knl_start_device( void )",
+"{",
+"#if USE_SDEV_DRV",
+"	ER	err;",
+"",
+"	/* A/D Converter \"adca\" */",
+"	#if DEVCNF_USE_ADC",
+"		err = dev_init_adc(0);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* I2C unit.3 \"iicd\" */",
+"	#if DEVCNF_USE_IIC",
+"		err = dev_init_i2c(3);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"",
+"	/* Serial ch.4 \"sere\" */",
+"	#if DEVCNF_USE_SER",
+"		err = dev_init_ser(4);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"#endif",
+"	return E_OK;",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System finalization",
+" *	Called just before system shutdown.",
+" *	Execute finalization that must be done before system shutdown.",
+" */",
+"EXPORT ER knl_finish_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"#endif /* USE_SHUTDOWN */",
+"",
+"#endif /* IOTE_RZA2M */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef IOTE_RZA2M",
+"",
+"/*",
+" *	hw_setting.c (RZ/A2M IoT-Engine)",
+" *		hardware settings",
+" *",
+" *	startup / shoutdown processing for hardware",
+" *	",
+" *	Pin function Setting (for IoT-Engine Starter board)",
+" *		P90  : TxD4",
+" *		PB1  : RxD4",
+" *",
+" *		(USE_SDEV_DRV)",
+" *		P50  : AN000 (Arduino A0)",
+" *		P51  : AN001 (Arduino A1)",
+" *		P52  : AN002 (Arduino A2)",
+" *		P53  : AN003 (Arduino A3)",
+" *		P54  : AN004 (Arduino A4)",
+" *		P55  : AN005 (Arduino A5)",
+" *		PD0  : RIIC0 SCL (Arduino I2C)",
+" *		PD1  : RIIC0 SDA (Arduino I2C)",
+" *		PD6  : RIIC3 SCL (On Board)",
+" *		PD7  : RIIC3 SDA (On Board)",
+" *",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include <tm/tmonitor.h>",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/* ",
+" * Setup register data ",
+" */",
+"typedef struct {",
+"	UW	addr;",
+"	UB	data;",
+"} T_SETUP_REG;",
+"",
+"/* ",
+" * Setup module stop Tadle",
+" */",
+"LOCAL const T_SETUP_REG stbcr_tbl[] = {",
+"#if !USE_SDEV_DRV	// Do not use sample device driver",
+"	{CPG_STBCR3 , 0b10001101},	/* Enable OSTM0, OSTM1, OSTM2 */",
+"	{CPG_STBCR4 , 0b11110111},	/* Enable SCIF4 */",
+"",
+"#else			// Use the sample device driver",
+"	{CPG_STBCR3 , 0b10001101},	/* Enable OSTM0, OSTM1, OSTM2 */",
+"	{CPG_STBCR4 , 0b11110111},	/* Enable SCIF4 */",
+"	{CPG_STBCR5 , 0b01110011},	/* Enable A/D, RTC0, RTC1 */",
+"	{CPG_STBCR8 , 0b01100111},	/* Enable RIIC0, RIIC3, SPIBSC */",
+"",
+"#endif",
+"",
+"/* When all devices are enabled */",
+"//	{CPG_STBCR2 , 0x6A},	/* Port level is keep in standby mode, [1], [1], [0], [1], [0], [1], CoreSight */",
+"//	{CPG_STBCR3 , 0x80},	/* [1], OSTM0, OSTM1, OSTM3, MTU3, CAN-FD, [0], GPT */",
+"//	{CPG_STBCR4 , 0x00},	/* SCIF0, SCIF1, SCIF2, SCIF3, SCIF4, SCI0, SCI1,IrDA */",
+"//	{CPG_STBCR5 , 0x31},	/* A/D, CEU, [1], [1], RTC0, RTC1, JCU, [1] */",
+"//	{CPG_STBCR6 , 0x80},	/* [1], VIN, ETHER0, ETHER1, EtherPTR, EtherM, USB0, USB1 */",
+"//	{CPG_STBCR7 , 0x10},	/* IMR-LS2, DAVE-2D, MIPI, [1], SSIF0, SSIF1, SSIF2, SSIF3 */",
+"//	{CPG_STBCR8 , 0x05},	/* IIC0, IIC1, IIC2, IIC3, SPIBSC, [1], VDC6, [1] */",
+"//	{CPG_STBCR9 , 0x11},	/* RSPI0, RSPI1, RSPI2, [1], HYPER, OCTA, SPDIF, DRP */",
+"//	{CPG_STBCR10, 0x00},	/* TSIP, [0], [0], NAND, SDHI00, SDHI01, SDHI10, SDHI11 */",
+"//	{CPG_STBCR11, 0x3F},	/* POE3, POEG, [1], [1], [1], [1], [1] , [1] */",
+"",
+"	{0, 0}",
+"};",
+"",
+"/* ",
+" * Setup pin functions Tadle",
+" */",
+"LOCAL const T_SETUP_REG pfunc_tbl[] = {",
+"#if !USE_SDEV_DRV	// Do not use sample device driver",
+"	{PORT9n_PFS(0), 0x04},		// P90 -> SCIFA.TxD4",
+"	{PORT9n_PFS(1), 0x04},		// P91 -> SCIFA.RxD4",
+"",
+"#else			// Use the sample device driver",
+"	{PORT5n_PFS(0), 0x01},		// P50 = AN000",
+"	{PORT5n_PFS(1), 0x01},		// P51 = AN001",
+"	{PORT5n_PFS(2), 0x01},		// P52 = AN002",
+"	{PORT9n_PFS(0), 0x04},		// P90 -> SCIFA.TxD4",
+"	{PORT9n_PFS(1), 0x04},		// P91 -> SCIFA.RxD4",
+"	{PORTDn_PFS(0), 0x01},		// PD0 -> RIIC0.SCL",
+"	{PORTDn_PFS(1), 0x01},		// PD1 -> RIIC0.SDA",
+"	{PORTDn_PFS(6), 0x01},		// PD6 -> RIIC3.SCL",
+"	{PORTDn_PFS(7), 0x01},		// PD7 -> RIIC3.SDA",
+"",
+"#endif",
+"	{0, 0}",
+"};",
+"",
+"/* ",
+" * Setup port mode Tadle",
+" */",
+"LOCAL const T_SETUP_REG pmode_tbl[] = {",
+"#if !USE_SDEV_DRV	// Do not use sample device driver",
+"	{PORT9_PMR, 0b00000011},	// P90-P91 peripheral function",
+"",
+"#else			// Use the sample device driver",
+"	{PORT5_PMR, 0b00000111},	// P50-P52 peripheral function",
+"	{PORT9_PMR, 0b00000011},	// P90-P91 peripheral function",
+"	{PORTD_PMR, 0b11000011},	// PD0-PD1, PD6-PD7 peripheral function",
+"",
+"#endif",
+"	{0, 0}",
+"};",
+"",
+"/*",
+" * Startup hardware",
+" */",
+"EXPORT void knl_startup_hw(void)",
+"{",
+"	const T_SETUP_REG	*p;",
+"	_UB			dummy_b;",
+"",
+"	/* Startup System Clock (CPG settings) */",
+"	startup_clock();",
+"",
+"	/* Setting the clock supply to each module */",
+"	for(p = stbcr_tbl; p->addr != 0; p++) {",
+"		out_b(p->addr, p->data);",
+"		dummy_b = in_b(p->addr);",
+"	}",
+"	dummy_b;",
+"",
+"	/* Setup port mode */",
+"	for(p = pmode_tbl; p->addr != 0; p++) {",
+"		or_b(p->addr, p->data);",
+"	}",
+"",
+"	/* Setup Pin Function */",
+"	out_b(PORT_PWPR, 0);",
+"	out_b(PORT_PWPR, PORT_PWPR_PFSWE);		/* Allow writing to PFS */",
+"	for(p = pfunc_tbl; p->addr != 0; p++) {",
+"		out_b(p->addr, p->data);",
+"	}",
+"	out_b(PORT_PWPR, PORT_PWPR_B0WI);		/* Prohibit writing to PFS */",
+"",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/*",
+" * Shutdown hardware",
+" */",
+"EXPORT void knl_shutdown_hw( void )",
+"{",
+"	disint();",
+"	shutdown_clock();",
+"",
+"	while(1);",
+"}",
+"#endif /* USE_SHUTDOWN */",
+"",
+"/*",
+" * Re-start hardware",
+" *	mode = -1		reset and re-start	(Reset -> Boot -> Start)",
+" *	mode = -2		fast re-start		(Start)",
+" *	mode = -3		Normal re-start		(Boot -> Start)",
+" */",
+"EXPORT ER knl_restart_hw( W mode )",
+"{",
+"	switch(mode) {",
+"	case -1: /* Reset and re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM RESET & RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	case -2: /* fast re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM FAST RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	case -3: /* Normal re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	default:",
+"		return E_PAR;",
+"	}",
+"}",
+"",
+"#endif	/* IOTE_RZA2M *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef IOTE_RZA2M",
+"",
+"#include <tk/tkernel.h>",
+"#include <kernel.h>",
+"",
+"/*",
+" *	power_save.c (RZ/A2M IoT-Engine)",
+" *	Power-Saving Function",
+" */",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/*",
+" * Switch to power-saving mode",
+" */",
+"EXPORT void low_pow( void )",
+"{",
+"}",
+"",
+"/*",
+" * Move to suspend mode",
+" */",
+"EXPORT void off_pow( void )",
+"{",
+"}",
+"",
+"",
+"#endif /* IOTE_RZA2M */",
+"﻿/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (RZ/A2M IoT-Engine)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSDEPEND_",
+"#define _SYSDEPEND_TARGET_SYSDEPEND_",
+"",
+"",
+"#include \"../cpu/rza2m/sysdepend.h\"",
+"",
+"/*",
+" *    Clock Setting (cpu_clock.c)",
+" */",
+"IMPORT void startup_clock(void);",
+"IMPORT void shutdown_clock(void);",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_msg.h (RZ/A2M IoT-Engine)",
+" *	Hardware-Dependent System message",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSMSG_",
+"#define _SYSDEPEND_TARGET_SYSMSG_",
+"",
+"#include <tm/tmonitor.h>",
+"",
+"#if (USE_SYSTEM_MESSAGE && USE_TMONITOR)",
+"#define SYSTEM_MESSAGE(s)	tm_putstring((UB*)s)",
+"#else",
+"#define SYSTEM_MESSAGE(s)",
+"#endif /* USE_SYSTEM_MESSAGE && USE_TMONITOR */",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSMSG_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.05",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (RZ/A2M IoT-Engine)",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSTIMER_",
+"#define _SYSDEPEND_TARGET_SYSTIMER_",
+"",
+"#include \"../cpu/rza2m/sys_timer.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSTIMER_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef IOTE_STM32L4",
+"",
+"/*",
+" *	cpu_clock.c (STM32L4 IoT-Engine)",
+" *	Clock Setting",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/*",
+" *  Startup System Clock",
+" */",
+"EXPORT void startup_clock(ATR clkatr)",
+"{	",
+"	UW	f_ratency;",
+"",
+"	/* Enable clock source */",
+"	/* Use HSI clock */",
+"	if( clkatr & CLKATR_HSI ) {",
+"		*(_UW*)RCC_CR |= RCC_CR_HSION;			// HSI enable",
+"		while((*(_UW*)RCC_CR & RCC_CR_HSIRDY) == 0 );	// Wait HSI ready",
+"	}",
+"	/* Use HSE clock */",
+"	if( clkatr & CLKATR_HSE ) {",
+"		*(_UW*)RCC_CR |= RCC_CR_HSEON;			// HSE enable",
+"		while( (*(_UW*)RCC_CR & RCC_CR_HSERDY) == 0 );	/* Wait HSE ready */",
+"	}",
+"	/* Use MSI clock */",
+"	if(clkatr & CLKATR_MSI) {",
+"		*(_UW*)RCC_CR |= RCC_CR_MSION;			// MSI enable",
+"		while((*(_UW*)RCC_CR & RCC_CR_MSIRDY) == 0 );	// Wait MSI ready",
+"	}",
+"",
+"	if(clkatr & CLKATR_USE_PLL) {		/* PLL Configuration */",
+"		*(_UW*)RCC_CR &= ~RCC_CR_PLLON;			// Disable PLL",
+"		while((*(_UW*)RCC_CR & RCC_CR_PLLRDY) != 0 );	// Wait PLL disable",
+"",
+"		out_w(RCC_PLLCFGR, (RCC_PLLCFGR_INIT & ~RCC_PLLCFGR_PLLSRC) | RCC_PLLCFGR_PLLSRC_INIT);	// Set PLL",
+"",
+"		*(_UW*)RCC_CR |= RCC_CR_PLLON;			// Enable PLL",
+"		*(_UW*)RCC_PLLCFGR |= RCC_PLLCFGR_PLLREN;	// Enable PLL System Clock output",
+"		while((*(_UW*)RCC_CR & RCC_CR_PLLRDY) == 0);	// Wait PLL ready",
+"	}",
+"",
+"	if(clkatr & CLKATR_USE_PLLSAI1) {	/* PLLSAI1 Configuration */",
+"		*(_UW*)RCC_CR &= ~RCC_CR_PLLSAI1ON;		// Disable PLLSAI1",
+"		while((*(_UW*)RCC_CR & RCC_CR_PLLSAI1RDY) != 0 );	// Wait PLLSAI1 disable",
+"",
+"		out_w(RCC_PLLSAI1CFGR, RCC_PLLSAI1CFGR_INIT);	// Set PLLSAI1",
+"",
+"		*(_UW*)RCC_CR |= RCC_CR_PLLSAI1ON;		// Enable PLLSAI1",
+"		while((*(_UW*)RCC_CR & RCC_CR_PLLSAI1RDY) == 0);	// Wait PLLSAI1 ready",
+"	}",
+"",
+"	if(clkatr & CLKATR_USE_PLLSAI2) {	/* PLLSAI2 Configuration */",
+"		*(_UW*)RCC_CR &= ~RCC_CR_PLLSAI2ON;		// Disable PLLSAI2",
+"		while((*(_UW*)RCC_CR & RCC_CR_PLLSAI2RDY) != 0 );	// Wait PLLSAI2 disable",
+"",
+"		out_w(RCC_PLLSAI1CFGR, RCC_PLLSAI2CFGR_INIT);	// Set PLLSAI2",
+"",
+"		*(_UW*)RCC_CR |= RCC_CR_PLLSAI2ON;		// Enable PLLSAI2",
+"		while((*(_UW*)RCC_CR & RCC_CR_PLLSAI2RDY) == 0);	// Wait PLLSAI2 ready",
+"	}",
+"",
+"	/* Set Flash Memory Access latency  */",
+"	f_ratency = (clkatr & CLKATR_LATENCY_MASK)>>8;",
+"	*(_UW*)FLASH_ACR = (*(_UW*)FLASH_ACR & ~FLASH_ACR_LATENCY_MASK)| FLASH_ACR_LATENCY(f_ratency);",
+"	while( (*(_UW*)FLASH_ACR & FLASH_ACR_LATENCY_MASK) != FLASH_ACR_LATENCY(f_ratency) );",
+"",
+"	/* Clock setting */",
+"	out_w(RCC_CFGR, (RCC_CFGR_INIT & ~RCC_CFGR_SW) | RCC_CFGR_SW_INIT);",
+"	while((*(_UW*)RCC_CFGR & RCC_CFGR_SW) != RCC_CFGR_SW_INIT);",
+"",
+"	/* Disable all interrupts */",
+"	out_w(RCC_CIER, 0);",
+"}",
+"",
+"EXPORT void shutdown_clock(void)",
+"{",
+"",
+"}",
+"",
+"#endif /* IOTE_STM32L4 *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (STM32L4 IoT-Engine)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUSTATUS_",
+"#define _SYSDEPEND_TARGET_CPUSTATUS_",
+"",
+"#include \"../cpu/stm32l4/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (STM32L4 IoT-Engine)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUTASK_",
+"#define _SYSDEPEND_TARGET_CPUTASK_",
+"",
+"#include \"../cpu/stm32l4/cpu_task.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_CPUTASK_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.04",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/05/17.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef IOTE_STM32L4",
+"",
+"/*",
+" *	devinit.c (STM32L4 IoT-Engine)",
+" *	Device-Dependent Initialization",
+" */",
+"",
+"#include <sys/sysdef.h>",
+"#include <tm/tmonitor.h>",
+"#include <tk/device.h>",
+"",
+"#include \"kernel.h\"",
+"#include \"sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Initialization before micro T-Kernel starts",
+" */",
+"",
+"EXPORT ER knl_init_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Start processing after T-Kernel starts",
+" *	Called from the initial task contexts.",
+" */",
+"EXPORT ER knl_start_device( void )",
+"{",
+"",
+"#if USE_SDEV_DRV	// Use sample driver",
+"	ER	err;",
+"",
+"	/* A/D Converter unit.0 \"adca\" */",
+"	#if DEVCNF_USE_ADC",
+"		err = dev_init_adc(0);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* I2C unit.0 \"iica\" */",
+"	#if DEVCNF_USE_IIC",
+"		err = dev_init_i2c(0);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* Serial ch.2 \"serb\" */",
+"	#if DEVCNF_USE_SER",
+"		err = dev_init_ser(1);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"#endif",
+"",
+"	return E_OK;",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System finalization",
+" *	Called just before system shutdown.",
+" *	Execute finalization that must be done before system shutdown.",
+" */",
+"EXPORT ER knl_finish_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"#endif /* USE_SHUTDOWN */",
+"",
+"#endif /* IOTE_STM32L4 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef IOTE_STM32L4",
+"",
+"/*",
+" *	hw_setting.c (STM32L4 IoT-Engine)",
+" *	startup / shoutdown processing for hardware",
+" *	",
+" *	Pin function Setting (for IoT-Engine Starter board)",
+" *		PD5  : USART2 TX",
+" *		PD6  : USART2 RX",
+" *",
+" *		(USE_SDEV_DRV)	",
+" *		PA0  : A/DC12 IN5 (Arduino A1)",
+" *		PA1  : A/DC12 IN6 (Analog-SW)",
+" *		PA2  : A/DC12 IN7 (Temp sensor)",
+" *		PA4  : A/DC12 IN9 (Light sensor)",
+" *",
+" *		PB1  : A/DC12 IN16 (Analog-SW)",
+" *		PB8  : I2C1 SCL (on board)",
+" *		PB9  : I2C1 SDA (on board)",
+" *		PB10 : I2C2 SCL (Arduino I2C)",
+" *		PB11 : I2C2 SDA (Arduino I2C)",
+" *",
+" *		PC3  : A/DC123_IN4 (Arduino A0)",
+" *		PC4  : A/DC12_IN13 (Arduino A2)",
+" *",
+" *		PD9  : GPIO out (I2C Enable)",
+" *		PD11 : GPIO out (LED3)",
+" *		PD15 : GPIO out (LED4)",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include <tm/tmonitor.h>",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/* ",
+" * Setup register data ",
+" */",
+"typedef struct {",
+"	UW	addr;",
+"	UW	data;",
+"} T_SETUP_REG;",
+"",
+"/*",
+" * Setup module clock",
+" */",
+"LOCAL const T_SETUP_REG modclk_tbl[] = {",
+"",
+"#if !USE_SDEV_DRV	// Do not use sample device driver",
+"	{RCC_AHB2ENR,		0x00000008},	// GPIO-D enable",
+"	{RCC_APB1ENR1,		0x0002000F},	// USART2, TIM2-TIM5 enable",
+"	{RCC_APB2ENR,		0x00000001},	// SYSCFG enable",
+"",
+"#else			// Use the sample device driver",
+"	{RCC_AHB2ENR,		0x0000000F},	// GPIO-A ~ D enable",
+"	{RCC_APB1ENR1,		0x0002000F},	// USART2, TIM2-TIM5 enable",
+"	{RCC_APB2ENR,		0x00000001},	// SYSCFG enable",
+"#endif /* !USE_SDEV_DRV */",
+"",
+"	{0, 0}",
+"};",
+"",
+"/* ",
+" * Setup pin functions Tadle",
+" */",
+"LOCAL const T_SETUP_REG pinfnc_tbl[] = {",
+"",
+"#if !USE_SDEV_DRV	// Do not use device sample driver",
+"	// Serial debug I/F : PD5 -> USART2_TX, PD6 -> USART2_RX",
+"	{GPIO_MODER(D),		0x00002800},",
+"	{GPIO_OTYPER(D),	0x00000000},",
+"	{GPIO_OSPEEDR(D),	0x00001400},",
+"	{GPIO_PUPDR(D),		0x00001400},",
+"	{GPIO_AFRH(D),		0x00000000},",
+"	{GPIO_AFRL(D),		0x07700000},",
+"",
+"#else			// Use the device sample driver",
+"	// A/DC in: PA0,PA1,PA2,PA4",
+"	{GPIO_MODER(A),		0xABFFFFFF},",
+"	{GPIO_OTYPER(A),	0x00000000},",
+"	{GPIO_OSPEEDR(A),	0x0C000000},",
+"	{GPIO_PUPDR(A),		0x64000000},",
+"	{GPIO_AFRL(A),		0x00000000},",
+"	{GPIO_AFRH(A),		0x00000000},",
+"	{GPIO_ASCR(A),		0x00000017},	",
+"",
+"	// I2C I/F : PB8 -> I2C1_SCL, PB9 -> I2C1_SDA",
+"	// I2C I/F : PB10 -> I2C2_SCL, PB11 -> I2C2_SDA",
+"	// A/DC in : PB1",
+"	{GPIO_MODER(B),		0xFFAAFFBF},",
+"	{GPIO_OTYPER(B),	0x00000F00},",
+"	{GPIO_OSPEEDR(B),	0x00FF0000},",
+"	{GPIO_PUPDR(B),		0x00550100},",
+"	{GPIO_AFRL(B),		0x00000000},",
+"	{GPIO_AFRH(B),		0x00004444},",
+"	{GPIO_ASCR(B),		0x00000002},",
+"",
+"	// A/DC in: PC3,PC4",
+"	{GPIO_MODER(C),		0xFFFFFFFF},",
+"	{GPIO_OTYPER(C),	0x00000000},",
+"	{GPIO_OSPEEDR(C),	0x00000000},",
+"	{GPIO_PUPDR(C),		0x00000000},",
+"	{GPIO_AFRL(C),		0x00000000},",
+"	{GPIO_AFRH(C),		0x00000000},",
+"	{GPIO_ASCR(C),		0x00000018},	",
+"",
+"	// Serial debug I/F : PD5 -> USART2_TX, PD6 -> USART2_RX",
+"	// Port Output : PD9, PD11, PD15",
+"	{GPIO_MODER(D),		0x40442800},",
+"	{GPIO_OTYPER(D),	0x00000000},",
+"	{GPIO_OSPEEDR(D),	0x00001400},",
+"	{GPIO_PUPDR(D),		0x00001400},",
+"	{GPIO_AFRL(D),		0x00000000},",
+"	{GPIO_AFRL(D),		0x07700000},",
+"",
+"#endif /* USE_SDEV_DRV */",
+"",
+"	{0, 0}",
+"};",
+"",
+"/*",
+" * Startup Device",
+" */",
+"EXPORT void knl_startup_hw(void)",
+"{",
+"	const T_SETUP_REG	*p;",
+"",
+"	startup_clock(CLKATR_HSE | CLKATR_USE_PLL | CLKATR_USE_PLLSAI1 |CLKATR_USE_PLLSAI2 | CLKATR_LATENCY_4);",
+"",
+"	/* Startup module clock */",
+"	for(p = modclk_tbl; p->addr != 0; p++) {",
+"		*(_UW*)(p->addr) = p->data;",
+"		while(*(_UW*)(p->addr) != p->data);",
+"	}",
+"",
+"	/* Setup Pin Function */",
+"	for(p = pinfnc_tbl; p->addr != 0; p++) {",
+"		*(_UW*)(p->addr) = p->data;",
+"	}",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/*",
+" * Shutdown device",
+" */",
+"EXPORT void knl_shutdown_hw( void )",
+"{",
+"	disint();",
+"	while(1);",
+"}",
+"#endif /* USE_SHUTDOWN */",
+"",
+"/*",
+" * Re-start device",
+" *	mode = -1		reset and re-start	(Reset -> Boot -> Start)",
+" *	mode = -2		fast re-start		(Start)",
+" *	mode = -3		Normal re-start		(Boot -> Start)",
+" */",
+"EXPORT ER knl_restart_hw( W mode )",
+"{",
+"	switch(mode) {",
+"	case -1: /* Reset and re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM RESET & RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	case -2: /* fast re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM FAST RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	case -3: /* Normal re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	default:",
+"		return E_PAR;",
+"	}",
+"}",
+"",
+"",
+"#endif /* IOTE_STM32L4 *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef IOTE_STM32L4",
+"",
+"#include <tk/tkernel.h>",
+"#include <kernel.h>",
+"",
+"/*",
+" *	power_save.c (STM32L4 IoT-Engine)",
+" *	Power-Saving Function",
+" */",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/*",
+" * Switch to power-saving mode",
+" */",
+"EXPORT void low_pow( void )",
+"{",
+"}",
+"",
+"/*",
+" * Move to suspend mode",
+" */",
+"EXPORT void off_pow( void )",
+"{",
+"}",
+"",
+"",
+"#endif /* IOTE_STM32L4 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/10.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (STM32L4 IoT-Engine)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSDEPEND_",
+"#define _SYSDEPEND_TARGET_SYSDEPEND_",
+"",
+"#include \"../cpu/stm32l4/sysdepend.h\"",
+"",
+"/*",
+" *    Clock Setting (cpu_clock.c)",
+" */",
+"IMPORT void startup_clock(ATR clkatr);",
+"/* ATR clkatr: Clock attribute */",
+"#define	CLKATR_MSI		0x00000001",
+"#define	CLKATR_HSI		0x00000002",
+"#define	CLKATR_HSE		0x00000004",
+"",
+"#define CLKATR_USE_PLL		0x00000010",
+"#define CLKATR_USE_PLLSAI1	0x00000020",
+"#define CLKATR_USE_PLLSAI2	0x00000040",
+"",
+"#define CLKATR_LATENCY_0	0x00000000",
+"#define CLKATR_LATENCY_1	0x00000100",
+"#define CLKATR_LATENCY_2	0x00000200",
+"#define CLKATR_LATENCY_3	0x00000300",
+"#define CLKATR_LATENCY_4	0x00000400",
+"#define	CLKATR_LATENCY_MASK	0x00000F00",
+"",
+"IMPORT void shutdown_clock(void);",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_msg.h (STM32L4 IoT-Engine)",
+" *	Hardware-Dependent System message",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSMSG_",
+"#define _SYSDEPEND_TARGET_SYSMSG_",
+"",
+"#include <tm/tmonitor.h>",
+"",
+"#if (USE_SYSTEM_MESSAGE && USE_TMONITOR)",
+"#define SYSTEM_MESSAGE(s)	tm_putstring((UB*)s)",
+"#else",
+"#define SYSTEM_MESSAGE(s)",
+"#endif /* USE_SYSTEM_MESSAGE && USE_TMONITOR */",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSMSG_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (STM32L4 IoT-Engine)",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSTIMER_",
+"#define _SYSDEPEND_TARGET_SYSTIMER_",
+"",
+"#include \"../cpu/stm32l4/sys_timer.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSTIMER_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06.B0",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/07.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef NUCLEO_H723",
+"",
+"/*",
+" *	cpu_clock.c (Nucleo-144 STM32H723)",
+" *	Clock Setting",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/*",
+" *  Startup System Clock",
+" */",
+"EXPORT void startup_clock(ATR clkatr)",
+"{",
+"	/* Supply configuration update enable */",
+"	out_w(PWR_CR3, (in_w(PWR_CR3)&~(0x00000003)) | PWR_CR3_LDOEN);",
+"	while((in_w(PWR_CSR1) & PWR_CSR1_ACTVOSRDY) == 0);",
+"",
+"	/* Configure the main internal regulator output voltage */",
+"	out_w(PWR_D3CR, PWR_D3CR_INIT);",
+"	in_w(PWR_D3CR);",
+"	while((in_w(PWR_D3CR) & PWR_D3CR_VOSRDY) == 0);",
+"",
+"	/* Enable clock source */",
+"	/* Use HSI clock */",
+"	if( clkatr & CLKATR_HSI ) {",
+"		*(_UW*)RCC_CR |= RCC_CR_HSION;				// HSI enable",
+"		while((*(_UW*)RCC_CR & RCC_CR_HSIRDY) == 0 );		// Wait HSI ready",
+"	}",
+"",
+"	/* Use CSI clock */",
+"	if( clkatr & CLKATR_CSI ) {",
+"		*(_UW*)RCC_CR |= RCC_CR_CSION;				// CSI enable",
+"		while((*(_UW*)RCC_CR & RCC_CR_CSIRDY) == 0 );		// Wait CSI ready",
+"	}",
+"",
+"	/* Use MSE clock */",
+"	if( clkatr & CLKATR_HSE ) {",
+"		if( clkatr & CLKATR_HSEBYP) *(_UW*)RCC_CR |= RCC_CR_HSEBYP;	// HSE clock bypass",
+"		*(_UW*)RCC_CR |= RCC_CR_HSEON;				// HSE enable",
+"		while( (*(_UW*)RCC_CR & RCC_CR_HSERDY) == 0 );		// Wait HSE ready",
+"	}",
+"",
+"	/* Use HSI48 clock */",
+"	if( clkatr & CLKATR_HSI48 ) {",
+"		*(_UW*)RCC_CR |= RCC_CR_HSI48ON;			// HSI48 enable",
+"		while( (*(_UW*)RCC_CR & RCC_CR_HSI48RDY) == 0 );	// Wait HSI48 ready",
+"	}",
+"",
+"	/* PLL1 Configuration */",
+"	if(clkatr & CLKATR_PLL1) {",
+"		*(_UW*)RCC_CR &= ~RCC_CR_PLL1ON;		// PLL1 disable",
+"		while( (*((_UW*)RCC_CR) & RCC_CR_PLL1RDY) != 0 );	// Wait PLL1 ready",
+"",
+"		out_w(RCC_PLLCKSELR, RCC_PLLCKSELR_INIT);	// PLLs clock source selection",
+"		out_w(RCC_PLL1DIVR, RCC_PLL1DIVR_INIT);		// PLL1 dividers configuration",
+"",
+"		*(_UW*)RCC_PLLCFGR &= ~RCC_PLLCFGR_PLL1FRACEN;	// PLL1 fractional latch disable",
+"	",
+"		out_w(RCC_PLL1FRACR, RCC_PLL1FRACR_INIT);	// PLL1 fractional divider",
+"		out_w(RCC_PLLCFGR, RCC_PLLCFGR_INIT);		// PLLs Configuration",
+"	",
+"		*(_UW*)RCC_PLLCFGR |= RCC_PLLCFGR_PLL1FRACEN;	// PLL1 fractional latch enable",
+"	",
+"		*(_UW*)RCC_CR |= RCC_CR_PLL1ON;			// PLL1 eneble",
+"		while( (*((_UW*)RCC_CR) & RCC_CR_PLL1RDY) == 0 );	// Wait PLL1 ready",
+"	}",
+"",
+"	/* Prescaler configuration */",
+"	out_w(RCC_D1CFGR, RCC_D1CFGR_INIT);	// D1 domain AHB & Core prescaler(HCLK & SYSCLK)",
+"	out_w(RCC_D2CFGR, RCC_D2CFGR_INIT);	// D2 domain APB1&2 prescaler (PCLK1&2)",
+"	out_w(RCC_D3CFGR, RCC_D3CFGR_INIT);	// D3 domain APB4 prescaler (D3PCLK1)",
+"",
+"	/* Set Flash Memory Access latency  */",
+"	out_w(FLASH_ACR, FLASH_ACR_INIT);	// FLASH Read latency",
+"	while(in_w(FLASH_ACR) != FLASH_ACR_INIT);",
+"",
+"	/* Set system clock switch */",
+"	out_w(RCC_CFGR, (in_w(RCC_CFGR) & ~RCC_CFGR_SW) | RCC_CFGR_SW_INIT);",
+"	while(((in_w(RCC_CFGR) & RCC_CFGR_SWS) >>3) != RCC_CFGR_SW_INIT) ;",
+"",
+"	/* PLL2 Configuration */",
+"	if(clkatr & CLKATR_PLL2) {",
+"		*(_UW*)RCC_CR &= ~RCC_CR_PLL2ON;			// PLL2 disable",
+"		while( (*((_UW*)RCC_CR) & RCC_CR_PLL2RDY) != 0 );	// Wait PLL2 disable",
+"",
+"		out_w(RCC_PLLCKSELR, (in_w(RCC_PLLCKSELR) & ~RCC_PLLCKSELR_DIVM2)|(RCC_PLLCKSELR_DIVM2_INIT<<12));",
+"		out_w(RCC_PLL2DIVR, RCC_PLL2DIVR_INIT);",
+"",
+"		*(_UW*)RCC_PLLCFGR &= ~RCC_PLLCFGR_PLL2FRACEN;	// PLL2 fractional latch disable",
+"",
+"		out_w(RCC_PLL2FRACR, RCC_PLL2FRACR_INIT);	// PLL2 fractional divider",
+"		out_w(RCC_PLLCFGR, (in_w(RCC_PLLCFGR) & ~(RCC_PLLCFGR_PLL2RGE | RCC_PLLCFGR_PLL2VCOSEL))",
+"					|((RCC_PLLCFGR_PLL2RGE_INIT<<6)|(RCC_PLLCFGR_PLL2VCOSEL_INIT<<5)));",
+"",
+"		*(_UW*)RCC_PLLCFGR |= RCC_PLLCFGR_PLL2FRACEN;	// PLL2 fractional latch enable",
+"		",
+"		*(_UW*)RCC_CR |= RCC_CR_PLL2ON;				// PLL2 Enable",
+"		while( (*((_UW*)RCC_CR) & RCC_CR_PLL2RDY) == 0 );	// Wait PLL2 ready",
+"	}",
+"",
+"	/* PLL3 Configuration */",
+"	if(clkatr & CLKATR_PLL3) {",
+"		*(_UW*)RCC_CR &= ~RCC_CR_PLL3ON;			// PLL3 disable",
+"		while( (*((_UW*)RCC_CR) & RCC_CR_PLL3RDY) != 0 );	// Wait PLL3 disable",
+"",
+"		out_w(RCC_PLLCKSELR, (in_w(RCC_PLLCKSELR) & ~RCC_PLLCKSELR_DIVM3)|(RCC_PLLCKSELR_DIVM3_INIT<<20));",
+"		out_w(RCC_PLL3DIVR, RCC_PLL3DIVR_INIT);",
+"",
+"		*(_UW*)RCC_PLLCFGR &= ~RCC_PLLCFGR_PLL3FRACEN;	// PLL3 fractional latch disable",
+"",
+"		out_w(RCC_PLL3FRACR, RCC_PLL3FRACR_INIT);	// PLL3 fractional divider",
+"		out_w(RCC_PLLCFGR, (in_w(RCC_PLLCFGR) & ~(RCC_PLLCFGR_PLL3RGE | RCC_PLLCFGR_PLL3VCOSEL))",
+"					|((RCC_PLLCFGR_PLL3RGE_INIT<<10)|(RCC_PLLCFGR_PLL2VCOSEL_INIT<<9)));",
+"",
+"		*(_UW*)RCC_PLLCFGR |= RCC_PLLCFGR_PLL3FRACEN;	// PLL3 fractional latch enable",
+"		",
+"		*(_UW*)RCC_CR |= RCC_CR_PLL3ON;				// PLL3 Enable",
+"		while( (*((_UW*)RCC_CR) & RCC_CR_PLL3RDY) == 0 );	// Wait PLL3 ready",
+"	}",
+"",
+"	/* Disable all interrupts */",
+"	out_w(RCC_CIER, 0);",
+"}",
+"",
+"EXPORT void shutdown_clock(void)",
+"{",
+"",
+"}",
+"",
+"#endif /* NUCLEO_H723 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (Nucleo-144 STM32H723)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUSTATUS_",
+"#define _SYSDEPEND_TARGET_CPUSTATUS_",
+"",
+"#include \"../cpu/stm32h7/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (Nucleo-144 STM32H723)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUTASK_",
+"#define _SYSDEPEND_TARGET_CPUTASK_",
+"",
+"#include \"../cpu/stm32h7/cpu_task.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_CPUTASK_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef NUCLEO_H723",
+"",
+"/*",
+" *	devinit.c (Nucleo-144 STM32H723)",
+" *	Device-Dependent Initialization",
+" */",
+"",
+"#include <sys/sysdef.h>",
+"#include <tm/tmonitor.h>",
+"#include <tk/device.h>",
+"",
+"#include <kernel.h>",
+"#include \"sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Initialization before micro T-Kernel starts",
+" */",
+"",
+"EXPORT ER knl_init_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Start processing after T-Kernel starts",
+" *	Called from the initial task contexts.",
+" */",
+"EXPORT ER knl_start_device( void )",
+"{",
+"#if USE_SDEV_DRV	// Use sample driver",
+"	ER	err;",
+"",
+"	/* A/D Converter unit.0 \"adca\" */",
+"	#if DEVCNF_USE_ADC",
+"		err = dev_init_adc(0);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* I2C unit.0 \"iica\" */",
+"	#if DEVCNF_USE_IIC",
+"		err = dev_init_i2c(0);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* Serial ch.2 \"serc\" */",
+"	#if DEVCNF_USE_SER",
+"		err = dev_init_ser(2);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"#endif",
+"",
+"	return E_OK;",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System finalization",
+" *	Called just before system shutdown.",
+" *	Execute finalization that must be done before system shutdown.",
+" */",
+"EXPORT ER knl_finish_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"#endif /* USE_SHUTDOWN */",
+"",
+"#endif /*NUCLEO_H723 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef NUCLEO_H723",
+"",
+"/*",
+" *	hw_setting.c (Nucleo-144 STM32H723)",
+" *	startup / shoutdown processing for hardware",
+" *		PB0  : GPIO Out(LED Green)",
+" *		PB14 : GPIO Out(LED Red)",
+" *		PE1  : GPIO Out(LED Yellow)",
+" *		PC13 : GPIO In(Push Button)",
+" *		PD8  : USART3 TX",
+" *		PD9  : USART3 RX",
+" */",
+"",
+"#include <kernel.h>",
+"#include <tm/tmonitor.h>",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/* ",
+" * Setup register data ",
+" */",
+"typedef struct {",
+"	UW	addr;",
+"	UW	data;",
+"} T_SETUP_REG;",
+"",
+"/*",
+" * Setup module clock",
+" */",
+"LOCAL const T_SETUP_REG modclk_tbl[] = {",
+"",
+"#if !USE_SDEV_DRV	// Do not use sample device driver",
+"	{RCC_AHB4ENR,		0x0000001E},	// GPIOB,C,D,E enable",
+"	{RCC_APB1LENR,		0x0004000F},	// USART3, TIM2-TIM5 enable",
+"	{RCC_APB4ENR,		0x00000002},	// SYSCFG enable",
+"",
+"#else			// Use the sample device driver",
+"	{RCC_AHB4ENR,		0x0000001F},	// GPIOA,B,C,D,E enable",
+"	{RCC_APB1LENR,		0x0004000F},	// USART3, TIM2-TIM5 enable",
+"	{RCC_APB4ENR,		0x00000002},	// SYSCFG enable",
+"",
+"#endif /* !USE_SDEV_DRV */",
+"",
+"	{0, 0}",
+"};",
+"",
+"/* ",
+" * Setup pin functions Tadle",
+" */",
+"LOCAL const T_SETUP_REG pinfnc_tbl[] = {",
+"",
+"#if !USE_SDEV_DRV	// Do not use device sample driver",
+"	/* GPIOB Setting   PB0,PB14:LED PB9,PB8:I2C */",
+"	{GPIO_MODER(B),		0xDFFAFEBD},	// GPIOB mode",
+"	{GPIO_OTYPER(B),	0x00000000},	// GPIOB output type",
+"	{GPIO_OSPEEDR(B),	0x000000C0},	// GPIOB output speed",
+"	{GPIO_PUPDR(B),		0x00000100},	// GPIOB Pull-up/down",
+"	{GPIO_AFRH(B),		0x00000044},	// GPIOB alternate function high",
+"",
+"	/* GPIOC Setting   PC13:Button */",
+"	{GPIO_MODER(C),		0xF3FFFFFF},	// GPIOC mode",
+"	{GPIO_OTYPER(C),	0x00000000},	// GPIOC output type",
+"	{GPIO_OSPEEDR(C),	0x00000000},	// GPIOC output speed",
+"	{GPIO_PUPDR(C),		0x00000000},	// GPIOC Pull-up/down",
+"",
+"	/* GPIOD Setting   PD8:USART3 TX  PD9:USART3 RX */",
+"	{GPIO_MODER(D),		0xFFFAFFFF},	// GPIOD mode",
+"	{GPIO_OTYPER(D),	0x00000000},	// GPIOD output type",
+"	{GPIO_OSPEEDR(D),	0x00000000},	// GPIOD output speed",
+"	{GPIO_PUPDR(D),		0x00000000},	// GPIOD Pull-up/down",
+"	{GPIO_AFRH(D),		0x00000077},	// GPIO alternate function",
+"",
+"	/* GPIOE Setting   PE1:LED */",
+"	{GPIO_MODER(E),		0xFFFFFFF7},	// GPIOE mode",
+"	{GPIO_OTYPER(E),	0x00000000},	// GPIOE output type",
+"	{GPIO_OSPEEDR(E),	0x00000000},	// GPIOE output speed",
+"	{GPIO_PUPDR(E),		0x00000000},	// GPIOE Pull-up/down",
+"",
+"#else			// Use the device sample driver",
+"",
+"	/* GPIOA Setting   PA3: Arduino A0 */",
+"	{GPIO_MODER(A),		0xABFFFFFF},	// GPIOA mode",
+"	{GPIO_OTYPER(A),	0x00000000},	// GPIOA output type",
+"	{GPIO_OSPEEDR(A),	0x0C000000},	// GPIOA output speed",
+"	{GPIO_PUPDR(A),		0x64000000},	// GPIOA Pull-up/down",
+"",
+"	/* GPIOB Setting   PB0,PB14:LED  PB9:I2C1_SDA  PB8:I2C1_SCL */",
+"	{GPIO_MODER(B),		0xDFFAFEBD},	// GPIOB mode",
+"	{GPIO_OTYPER(B),	0x00000300},	// GPIOB output type",
+"	{GPIO_OSPEEDR(B),	0x000000C0},	// GPIOB output speed",
+"	{GPIO_PUPDR(B),		0x00000100},	// GPIOB Pull-up/down",
+"	{GPIO_AFRH(B),		0x00000044},	// GPIO alternate function",
+"",
+"	/* GPIOC Setting   PC13:Button */",
+"	{GPIO_MODER(C),		0xF3FFFFFF},	// GPIOC mode",
+"	{GPIO_OTYPER(C),	0x00000000},	// GPIOC output type",
+"	{GPIO_OSPEEDR(C),	0x00000000},	// GPIOC output speed",
+"	{GPIO_PUPDR(C),		0x00000000},	// GPIOC Pull-up/down",
+"",
+"	/* GPIOD Setting   PD8: USART3 TX  PD9  : USART3 RX */",
+"	{GPIO_MODER(D),		0xFFFAFFFF},	// GPIOD mode",
+"	{GPIO_OTYPER(D),	0x00000000},	// GPIOD output type",
+"	{GPIO_OSPEEDR(D),	0x00000000},	// GPIOD output speed",
+"	{GPIO_PUPDR(D),		0x00000000},	// GPIOD Pull-up/down",
+"	{GPIO_AFRH(D),		0x00000077},	// GPIO alternate function",
+"",
+"	/* GPIOE Setting   PE1:LED */",
+"	{GPIO_MODER(E),		0xFFFFFFF7},	// GPIOE mode",
+"	{GPIO_OTYPER(E),	0x00000000},	// GPIOE output type",
+"	{GPIO_OSPEEDR(E),	0x00000000},	// GPIOE output speed",
+"	{GPIO_PUPDR(E),		0x00000000},	// GPIOE Pull-up/down",
+"",
+"	/* SYSCFG Setting   PC3:Analog switch open */",
+"	{SYSCFG_PMCR,		0x08000000},	// SYSCFG Peripheral mode",
+"",
+"#endif /* USE_SDEV_DRV */",
+"",
+"	{0, 0}",
+"};",
+"",
+"/*",
+" * Startup Device",
+" */",
+"EXPORT void knl_startup_hw(void)",
+"{",
+"	const T_SETUP_REG	*p;",
+"",
+"	/* Startup module clock */",
+"	for(p = modclk_tbl; p->addr != 0; p++) {",
+"		*(_UW*)(p->addr) = p->data;",
+"		while(*(_UW*)(p->addr) != p->data);	/* Delay after an RCC peripheral clock enabling */",
+"	}",
+"",
+"	/* Startup clock */",
+"	startup_clock(CLKATR_HSE | CLKATR_HSEBYP | CLKATR_PLL1);",
+"",
+"	/* Setup Pin Function */",
+"	for(p = pinfnc_tbl; p->addr != 0; p++) {",
+"		*(_UW*)(p->addr) = p->data;",
+"	}",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/*",
+" * Shutdown device",
+" */",
+"EXPORT void knl_shutdown_hw( void )",
+"{",
+"	disint();",
+"	while(1);",
+"}",
+"#endif /* USE_SHUTDOWN */",
+"",
+"/*",
+" * Re-start device",
+" *	mode = -1		reset and re-start	(Reset -> Boot -> Start)",
+" *	mode = -2		fast re-start		(Start)",
+" *	mode = -3		Normal re-start		(Boot -> Start)",
+" */",
+"EXPORT ER knl_restart_hw( W mode )",
+"{",
+"	switch(mode) {",
+"	case -1: /* Reset and re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM RESET & RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	case -2: /* fast re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM FAST RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	case -3: /* Normal re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	default:",
+"		return E_PAR;",
+"	}",
+"}",
+"",
+"",
+"#endif /* NUCLEO_H723 *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"#include <kernel.h>",
+"",
+"#ifdef NUCLEO_H723",
+"",
+"/*",
+" *	power_save.c (Nucleo-144 STM32H723)",
+" *	Power-Saving Function",
+" */",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/*",
+" * Switch to power-saving mode",
+" */",
+"EXPORT void low_pow( void )",
+"{",
+"}",
+"",
+"/*",
+" * Move to suspend mode",
+" */",
+"EXPORT void off_pow( void )",
+"{",
+"}",
+"",
+"",
+"#endif /* NUCLEO_H723 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (Nucleo-64 STM32H723)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSDEPEND_",
+"#define _SYSDEPEND_TARGET_SYSDEPEND_",
+"",
+"#include \"../cpu/stm32h7/sysdepend.h\"",
+"",
+"/*",
+" *    Clock Setting (cpu_clock.c)",
+" */",
+"IMPORT void startup_clock(ATR clkatr);",
+"#define	CLKATR_HSI		0x00000001",
+"#define	CLKATR_CSI		0x00000002",
+"#define	CLKATR_HSE		0x00000004",
+"#define	CLKATR_HSEBYP		0x00000008",
+"#define CLKATR_HSI48		0x00000010",
+"",
+"#define	CLKATR_PLL1		0x00000020",
+"#define	CLKATR_PLL2		0x00000040",
+"#define	CLKATR_PLL3		0x00000080",
+"",
+"IMPORT void shutdown_clock(void);",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_msg.h (Nucleo-144 STM32H723)",
+" *	Hardware-Dependent System message",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSMSG_",
+"#define _SYSDEPEND_TARGET_SYSMSG_",
+"",
+"#include <tm/tmonitor.h>",
+"",
+"#if (USE_SYSTEM_MESSAGE && USE_TMONITOR)",
+"#define SYSTEM_MESSAGE(s)	tm_putstring((UB*)s)",
+"#else",
+"#define SYSTEM_MESSAGE(s)",
+"#endif /* USE_SYSTEM_MESSAGE && USE_TMONITOR */",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSMSG_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (Nucleo-144 STM32H723)",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSTIMER_",
+"#define _SYSDEPEND_TARGET_SYSTIMER_",
+"",
+"#include \"../cpu/stm32h7/sys_timer.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSTIMER_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.06.B0",
+" *",
+" *    Copyright (C) 2006-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/07.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef NUCLEO_L476",
+"",
+"/*",
+" *	cpu_clock.c (Nucleo-64 STM32L476)",
+" *	Clock Setting",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/*",
+" *  Startup System Clock",
+" */",
+"EXPORT void startup_clock(ATR clkatr)",
+"{	",
+"	UW	f_ratency;",
+"",
+"	/* Enable clock source */",
+"	/* Use HSI clock */",
+"	if( clkatr & CLKATR_HSI ) {",
+"		*(_UW*)RCC_CR |= RCC_CR_HSION;			// HSI enable",
+"		while((*(_UW*)RCC_CR & RCC_CR_HSIRDY) == 0 );	// Wait HSI ready",
+"	}",
+"	/* Use HSE clock */",
+"	if( clkatr & CLKATR_HSE ) {",
+"		*(_UW*)RCC_CR |= RCC_CR_HSEON;			// HSE enable",
+"		while( (*(_UW*)RCC_CR & RCC_CR_HSERDY) == 0 );	/* Wait HSE ready */",
+"	}",
+"	/* Use MSI clock */",
+"	if(clkatr & CLKATR_MSI) {",
+"		*(_UW*)RCC_CR |= RCC_CR_MSION;			// MSI enable",
+"		while((*(_UW*)RCC_CR & RCC_CR_MSIRDY) == 0 );	// Wait MSI ready",
+"	}",
+"",
+"	if(clkatr & CLKATR_USE_PLL) {		/* PLL Configuration */",
+"		*(_UW*)RCC_CR &= ~RCC_CR_PLLON;			// Disable PLL",
+"		while((*(_UW*)RCC_CR & RCC_CR_PLLRDY) != 0 );	// Wait PLL disable",
+"",
+"		out_w(RCC_PLLCFGR, (RCC_PLLCFGR_INIT & ~RCC_PLLCFGR_PLLSRC) | RCC_PLLCFGR_PLLSRC_INIT);	// Set PLL",
+"",
+"		*(_UW*)RCC_CR |= RCC_CR_PLLON;			// Enable PLL",
+"		*(_UW*)RCC_PLLCFGR |= RCC_PLLCFGR_PLLREN;	// Enable PLL System Clock output",
+"		while((*(_UW*)RCC_CR & RCC_CR_PLLRDY) == 0);	// Wait PLL ready",
+"	}",
+"",
+"	if(clkatr & CLKATR_USE_PLLSAI1) {	/* PLLSAI1 Configuration */",
+"		*(_UW*)RCC_CR &= ~RCC_CR_PLLSAI1ON;		// Disable PLLSAI1",
+"		while((*(_UW*)RCC_CR & RCC_CR_PLLSAI1RDY) != 0 );	// Wait PLLSAI1 disable",
+"",
+"		out_w(RCC_PLLSAI1CFGR, RCC_PLLSAI1CFGR_INIT);	// Set PLLSAI1",
+"",
+"		*(_UW*)RCC_CR |= RCC_CR_PLLSAI1ON;		// Enable PLLSAI1",
+"		while((*(_UW*)RCC_CR & RCC_CR_PLLSAI1RDY) == 0);	// Wait PLLSAI1 ready",
+"	}",
+"",
+"	if(clkatr & CLKATR_USE_PLLSAI2) {	/* PLLSAI2 Configuration */",
+"		*(_UW*)RCC_CR &= ~RCC_CR_PLLSAI2ON;		// Disable PLLSAI2",
+"		while((*(_UW*)RCC_CR & RCC_CR_PLLSAI2RDY) != 0 );	// Wait PLLSAI2 disable",
+"",
+"		out_w(RCC_PLLSAI1CFGR, RCC_PLLSAI2CFGR_INIT);	// Set PLLSAI2",
+"",
+"		*(_UW*)RCC_CR |= RCC_CR_PLLSAI2ON;		// Enable PLLSAI2",
+"		while((*(_UW*)RCC_CR & RCC_CR_PLLSAI2RDY) == 0);	// Wait PLLSAI2 ready",
+"	}",
+"",
+"	/* Set Flash Memory Access latency  */",
+"	f_ratency = (clkatr & CLKATR_LATENCY_MASK)>>8;",
+"	*(_UW*)FLASH_ACR = (*(_UW*)FLASH_ACR & ~FLASH_ACR_LATENCY_MASK)| FLASH_ACR_LATENCY(f_ratency);",
+"	while( (*(_UW*)FLASH_ACR & FLASH_ACR_LATENCY_MASK) != FLASH_ACR_LATENCY(f_ratency) );",
+"",
+"	/* Clock setting */",
+"	out_w(RCC_CFGR, (RCC_CFGR_INIT & ~RCC_CFGR_SW) | RCC_CFGR_SW_INIT);",
+"	while((*(_UW*)RCC_CFGR & RCC_CFGR_SW) != RCC_CFGR_SW_INIT);",
+"",
+"	/* Disable all interrupts */",
+"	out_w(RCC_CIER, 0);",
+"}",
+"",
+"EXPORT void shutdown_clock(void)",
+"{",
+"",
+"}",
+"",
+"#endif /* NUCLEO_L476 *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (Nucleo-64 STM32L476)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUSTATUS_",
+"#define _SYSDEPEND_TARGET_CPUSTATUS_",
+"",
+"#include \"../cpu/stm32l4/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (Nucleo-64 STM32L476)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUTASK_",
+"#define _SYSDEPEND_TARGET_CPUTASK_",
+"",
+"#include \"../cpu/stm32l4/cpu_task.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_CPUTASK_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef NUCLEO_L476",
+"",
+"/*",
+" *	devinit.c (Nucleo-64 STM32L476)",
+" *	Device-Dependent Initialization",
+" */",
+"",
+"#include <sys/sysdef.h>",
+"#include <tm/tmonitor.h>",
+"#include <tk/device.h>",
+"",
+"#include <kernel.h>",
+"#include \"sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Initialization before micro T-Kernel starts",
+" */",
+"",
+"EXPORT ER knl_init_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Start processing after T-Kernel starts",
+" *	Called from the initial task contexts.",
+" */",
+"EXPORT ER knl_start_device( void )",
+"{",
+"#if USE_SDEV_DRV	// Use sample driver",
+"	ER	err;",
+"",
+"	/* A/D Converter unit.0 \"adca\" */",
+"	#if DEVCNF_USE_ADC",
+"		err = dev_init_adc(0);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* I2C unit.0 \"iica\" */",
+"	#if DEVCNF_USE_IIC",
+"		err = dev_init_i2c(0);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* Serial ch.2 \"serb\" */",
+"	#if DEVCNF_USE_SER",
+"		err = dev_init_ser(1);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"#endif",
+"",
+"	return E_OK;",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System finalization",
+" *	Called just before system shutdown.",
+" *	Execute finalization that must be done before system shutdown.",
+" */",
+"EXPORT ER knl_finish_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"#endif /* USE_SHUTDOWN */",
+"",
+"#endif /*NUCLEO_L476 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef NUCLEO_L476",
+"",
+"/*",
+" *	hw_setting.c (Nucleo-64 STM32L476)",
+" *	startup / shoutdown processing for hardware",
+" *	",
+" *	Pin function Setting",
+" *		PA2  : USART2 TX",
+" *		PA3  : USART2 RX",
+" *		PA5  : GPIO Out(LED)",
+" *		PC13 : GPIO In(Push Button)",
+" *",
+" *		(USE_SDEV_DRV)	",
+" *		PA0  : A/DC12 IN5",
+" *		PA1  : A/DC12 IN6",
+" *		PA4  : A/DC12 IN9",
+" *		PB0  : A/DC12 IN15",
+" *		PB8  : I2C1 DCL",
+" *		PB9  : I2C1 SDA",
+" */",
+"",
+"#include <kernel.h>",
+"#include <tm/tmonitor.h>",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/* ",
+" * Setup register data ",
+" */",
+"typedef struct {",
+"	UW	addr;",
+"	UW	data;",
+"} T_SETUP_REG;",
+"",
+"/*",
+" * Setup module clock",
+" */",
+"LOCAL const T_SETUP_REG modclk_tbl[] = {",
+"",
+"#if !USE_SDEV_DRV	// Do not use sample device driver",
+"	{RCC_AHB2ENR,		0x00000005},	// GPIOA,GPIOC enable",
+"	{RCC_APB1ENR1,		0x0002000F},	// USART2, TIM2-TIM5 enable",
+"	{RCC_APB2ENR,		0x00000001},	// SYSCFG enable",
+"",
+"#else			// Use the sample device driver",
+"	{RCC_AHB2ENR,		0x00000007},	// GPIOA, B, C enable",
+"	{RCC_APB1ENR1,		0x0002000F},	// USART2, TIM2-TIM5 enable",
+"	{RCC_APB2ENR,		0x00000001},	// SYSCFG enable",
+"#endif /* !USE_SDEV_DRV */",
+"",
+"	{0, 0}",
+"};",
+"",
+"/* ",
+" * Setup pin functions Tadle",
+" */",
+"LOCAL const T_SETUP_REG pinfnc_tbl[] = {",
+"",
+"#if !USE_SDEV_DRV	// Do not use device sample driver",
+"",
+"	// Serial debug I/F : PA2 -> USART2_TX, PA3 -> USART2_RX",
+"	// GPIOA out : PA5 -> LED",
+"	{GPIO_MODER(A),		0xABFFF7AF},	// GPIOA mode",
+"	{GPIO_OTYPER(A),	0x00000000},	// GPIOA output type",
+"	{GPIO_OSPEEDR(A),	0x0C000000},	// GPIOA output speed",
+"	{GPIO_PUPDR(A),		0x64000000},	// GPIOA Pull-up/down",
+"	{GPIO_AFRL(A),		0x00007700},",
+"",
+"	// GPIOC in   PC13 -> Push button",
+"	{GPIO_MODER(C),		0xF3FFFFFF},	// GPIOC mode",
+"	{GPIO_OTYPER(C),	0x00000000},	// GPIOC output type",
+"	{GPIO_OSPEEDR(C),	0x00000000},	// GPIOC output speed",
+"	{GPIO_PUPDR(C),		0x00000000},	// GPIOC Pull-up/down",
+"",
+"#else			// Use the device sample driver",
+"",
+"	// Serial debug I/F : PA2 -> USART2_TX, PA3 -> USART2_RX",
+"	// GPIOA out : PA5",
+"	// A/DC in : PA0, PA1, PA4",
+"	{GPIO_MODER(A),		0xABFFF7AF},	// GPIOA mode",
+"	{GPIO_OTYPER(A),	0x00000000},	// GPIOA output type",
+"	{GPIO_OSPEEDR(A),	0x0C000050},	// GPIOA output speed",
+"	{GPIO_PUPDR(A),		0x64000050},	// GPIOA Pull-up/down",
+"	{GPIO_AFRL(A),		0x00007700},	// GPIOA Alternate function",
+"	{GPIO_ASCR(A),		0x00000013},	// GPIOA Analog switch control",
+"",
+"	// I2C I/F : PB8 -> I2C1_DCL, PB9 -> I2C1_SDA",
+"	// A/DC in : PB0",
+"	{GPIO_MODER(B),		0xFFFAFFBF},	// GPIOB mode",
+"	{GPIO_OTYPER(B),	0x00000300},	// GPIOB output type",
+"	{GPIO_OSPEEDR(B),	0x000F0000},	// GPIOB output speed",
+"	{GPIO_PUPDR(B),		0x00050100},	// GPIOB Pull-up/down",
+"	{GPIO_AFRL(B),		0x00000000},	// GPIOB Alternate function",
+"	{GPIO_AFRH(B),		0x00000044},	// GPIOB Alternate function",
+"	{GPIO_ASCR(B),		0x00000001},	// GPIOB Analog switch control",
+"",
+"	// GPIOC in   PC13 -> Push button",
+"	{GPIO_MODER(C),		0xF3FFFFFF},	// GPIOC mode",
+"	{GPIO_OSPEEDR(C),	0x00000000},	// GPIOC output speed",
+"	{GPIO_OTYPER(C),	0x00000000},	// GPIOC output type",
+"	{GPIO_PUPDR(C),		0x00000000},	// GPIOC Pull-up/down",
+"",
+"#endif /* USE_SDEV_DRV */",
+"",
+"	{0, 0}",
+"};",
+"",
+"/*",
+" * Startup Device",
+" */",
+"EXPORT void knl_startup_hw(void)",
+"{",
+"	const T_SETUP_REG	*p;",
+"",
+"	/* Startup clock : Use HSI clock, Use PLL, Flash latency 4 */",
+"	startup_clock(CLKATR_HSI | CLKATR_USE_PLL | CLKATR_USE_PLLSAI1 |CLKATR_USE_PLLSAI2 | CLKATR_LATENCY_4);",
+"",
+"	/* Startup module clock */",
+"	for(p = modclk_tbl; p->addr != 0; p++) {",
+"		*(_UW*)(p->addr) = p->data;",
+"		while(*(_UW*)(p->addr) != p->data);	/* Delay after an RCC peripheral clock enabling */",
+"	}",
+"",
+"	/* Setup Pin Function */",
+"	for(p = pinfnc_tbl; p->addr != 0; p++) {",
+"		*(_UW*)(p->addr) = p->data;",
+"	}",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/*",
+" * Shutdown device",
+" */",
+"EXPORT void knl_shutdown_hw( void )",
+"{",
+"	disint();",
+"	while(1);",
+"}",
+"#endif /* USE_SHUTDOWN */",
+"",
+"/*",
+" * Re-start device",
+" *	mode = -1		reset and re-start	(Reset -> Boot -> Start)",
+" *	mode = -2		fast re-start		(Start)",
+" *	mode = -3		Normal re-start		(Boot -> Start)",
+" */",
+"EXPORT ER knl_restart_hw( W mode )",
+"{",
+"	switch(mode) {",
+"	case -1: /* Reset and re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM RESET & RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	case -2: /* fast re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM FAST RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	case -3: /* Normal re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	default:",
+"		return E_PAR;",
+"	}",
+"}",
+"",
+"",
+"#endif /* NUCLEO_L476 *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"#include <kernel.h>",
+"",
+"#ifdef NUCLEO_L476",
+"",
+"/*",
+" *	power_save.c (Nucleo-64 STM32L476)",
+" *	Power-Saving Function",
+" */",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/*",
+" * Switch to power-saving mode",
+" */",
+"EXPORT void low_pow( void )",
+"{",
+"}",
+"",
+"/*",
+" * Move to suspend mode",
+" */",
+"EXPORT void off_pow( void )",
+"{",
+"}",
+"",
+"",
+"#endif /* NUCLEO_L476 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (Nucleo-64 STM32L476)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSDEPEND_",
+"#define _SYSDEPEND_TARGET_SYSDEPEND_",
+"",
+"#include \"../cpu/stm32l4/sysdepend.h\"",
+"",
+"/*",
+" *    Clock Setting (cpu_clock.c)",
+" */",
+"IMPORT void startup_clock(ATR clkatr);",
+"/* ATR clkatr: Clock attribute */",
+"#define	CLKATR_MSI		0x00000001",
+"#define	CLKATR_HSI		0x00000002",
+"#define	CLKATR_HSE		0x00000004",
+"",
+"#define CLKATR_USE_PLL		0x00000010",
+"#define CLKATR_USE_PLLSAI1	0x00000020",
+"#define CLKATR_USE_PLLSAI2	0x00000040",
+"",
+"#define CLKATR_LATENCY_0	0x00000000",
+"#define CLKATR_LATENCY_1	0x00000100",
+"#define CLKATR_LATENCY_2	0x00000200",
+"#define CLKATR_LATENCY_3	0x00000300",
+"#define CLKATR_LATENCY_4	0x00000400",
+"#define	CLKATR_LATENCY_MASK	0x00000F00",
+"",
+"IMPORT void shutdown_clock(void);",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_msg.h (Nucleo-64 STM32L476)",
+" *	Hardware-Dependent System message",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSMSG_",
+"#define _SYSDEPEND_TARGET_SYSMSG_",
+"",
+"#include <tm/tmonitor.h>",
+"",
+"#if (USE_SYSTEM_MESSAGE && USE_TMONITOR)",
+"#define SYSTEM_MESSAGE(s)	tm_putstring((UB*)s)",
+"#else",
+"#define SYSTEM_MESSAGE(s)",
+"#endif /* USE_SYSTEM_MESSAGE && USE_TMONITOR */",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSMSG_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2021-2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/02.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (Nucleo-64 STM32L476)",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSTIMER_",
+"#define _SYSDEPEND_TARGET_SYSTIMER_",
+"",
+"#include \"../cpu/stm32l4/sys_timer.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSTIMER_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef PICO_RP2040",
+"",
+"/*",
+" *	cpu_clock.c (RaspberryPi Pico)",
+" *	Clock Setting",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"#include \"sysdepend.h\"",
+"",
+"/* ",
+" * PLL initialization",
+" */",
+"LOCAL void init_pll(UW pll, UINT refdiv, UINT vco_mhz, UINT post_div1, UINT post_div2)",
+"{",
+"	UW	fbdiv, pdiv;",
+"	UW	pll_reset;",
+"",
+"	fbdiv	= vco_mhz / (XOSC_MHz / refdiv);",
+"	pdiv = (post_div1 << PLL_PRIM_POSTDIV1_LSB)|(post_div2 << PLL_PRIM_POSTDIV2_LSB);",
+"",
+"	pll_reset = (pll==PLL_USB_BASE)? RESETS_RESET_PLLUSB: RESETS_RESET_PLLSYS;",
+"	set_w(RESETS_RESET, pll_reset);",
+"	clr_w(RESETS_RESET, pll_reset);",
+"",
+"	out_w(pll+PLL_CS, refdiv);",
+"	out_w(pll+PLL_FBDIV_INT, fbdiv);",
+"",
+"	clr_w(pll+PLL_PWR, (PLL_PWR_PD | PLL_PWR_VCOPD));",
+"	while (!(in_w(pll+PLL_CS) & PLL_CS_LOCK)) ;",
+"",
+"	out_w(pll+PLL_PRIM, pdiv);",
+"	clr_w(pll+PLL_PWR, PLL_PWR_POSTDIVPD);",
+"}",
+"",
+"/* ",
+" * Peripheral clock setting",
+" */",
+"LOCAL void clock_config(UINT clock_kind, UW clksrc, UW src_freq, UW freq)",
+"{",
+"	UW	clock;",
+"	UW	div;",
+"",
+"	if (freq > src_freq) return;",
+"",
+"	clock = CLOCKS_BASE + (clock_kind * 0xC);",
+"",
+"	div = (UW)(((UD)src_freq << 8) / freq);",
+"	if (div > in_w(clock+CLK_x_DIV)) out_w(clock+CLK_x_DIV, div);",
+"",
+"	clr_w(clock+CLK_x_CTRL, CLK_CTRL_ENABLE);	// Disable clock",
+"	for( _UW dely_cyc = 3; dely_cyc--;) ;",
+"",
+"	out_w(clock+CLK_x_CTRL, (in_w(clock+CLK_x_CTRL) & CLK_SYS_CTRL_AUXSRC) | (clksrc << 5));",
+"",
+"	set_w(clock+CLK_x_CTRL, CLK_CTRL_ENABLE);	// Enable clock",
+"	out_w(clock+CLK_x_DIV, div);",
+"}",
+"",
+"/*",
+" *  Startup System Clock",
+" */",
+"EXPORT void startup_clock(ATR clkatr)",
+"{",
+"	UW	div;",
+"",
+"	out_w(CLK_SYS_RESUS_CTRL, 0);",
+"",
+"	/* XOSC settings */",
+"	out_w(XOSC_CTRL, XOSC_CTRL_FRANG_1_15MHZ);",
+"	out_w(XOSC_STARTUP, XOSC_STARTUP_DELAY);",
+"	set_w(XOSC_CTRL, XOSC_CTRL_ENABLE);",
+"	while((in_w(XOSC_STATUS) & XOSC_STATUS_STABLE)==0);",
+"",
+"	clr_w(CLK_SYS+CLK_x_CTRL, CLK_SYS_CTRL_SRC);",
+"	while(in_w(CLK_SYS+CLK_x_SELECTED) != 0x1);",
+"	clr_w(CLK_REF+CLK_x_CTRL, CLK_REF_CTRL_SRC);",
+"	while(in_w(CLK_REF+CLK_x_SELECTED) != 0x1);",
+"",
+"	/* PLL settings */",
+"	init_pll(PLL_SYS_BASE, 1, 1500, 6, 2);	// PLL SYS 125MHz",
+"	init_pll(PLL_USB_BASE, 1, 480, 5, 2);	// PLL USB 48MHz",
+"",
+"	/* CLK_REF settings */",
+"	div = (XOSC_MHz << 8) / XOSC_MHz;",
+"	if (div > in_w(CLK_REF+CLK_x_DIV)) out_w(CLK_REF+CLK_x_DIV, div);",
+"",
+"	out_w(CLK_REF+CLK_x_CTRL, (in_w(CLK_REF+CLK_x_CTRL) & ~CLK_REF_CTRL_SRC) | 2 );	// clock source = xosc",
+"	while(!(in_w(CLK_REF+CLK_x_SELECTED)&(1<<2)));",
+"",
+"	out_w(CLK_REF+CLK_x_DIV, div);",
+"",
+"	/* CLK SYS settings */",
+"	div = (TMCLK_MHz << 8) / TMCLK_MHz;",
+"	if (div > in_w(CLK_SYS+CLK_x_DIV)) out_w(CLK_SYS+CLK_x_DIV, div);",
+"",
+"	clr_w(CLK_SYS+CLK_x_CTRL, CLK_SYS_CTRL_SRC);	// clock source = clk_ref",
+"	while(!(in_w(CLK_SYS+CLK_x_SELECTED) & 0x1));",
+"",
+"	out_w(CLK_SYS+CLK_x_CTRL, (in_w(CLK_SYS+CLK_x_CTRL) & ~CLK_SYS_CTRL_AUXSRC));	// auxsrc = 0(pll_sys)",
+"	out_w(CLK_SYS+CLK_x_CTRL, (in_w(CLK_SYS+CLK_x_CTRL) & ~CLK_SYS_CTRL_SRC) | 1 );	// clock source = aux",
+"	while(!(in_w(CLK_SYS+CLK_x_SELECTED)&(1<<1)));",
+"",
+"	out_w(CLK_SYS+CLK_x_DIV, div);",
+"",
+"	/* CLK PERI (UART+SPI) settings */",
+"	if(clkatr & CLKATR_PREI) {",
+"		clock_config( CLK_KIND_PERI, CLK_PERI_SRC, CLK_PLL_SYS_FREQ, CLK_PERI_FREQ);",
+"	}",
+"",
+"	/* CLK_USB settings */",
+"	if(clkatr & CLKATR_USB) {",
+"		clock_config( CLK_KIND_USB, CLK_USB_SRC, CLK_PLL_USB_FREQ, CLK_USB_FREQ);",
+"	}",
+"",
+"	/* CLK_ADC settings */",
+"	if(clkatr & CLKATR_ADC) {",
+"		clock_config( CLK_KIND_ADC, CLK_ADC_SRC, CLK_PLL_USB_FREQ, CLK_ADC_FREQ);",
+"	}",
+"",
+"	/* CLK_RTC settings */",
+"	if(clkatr & CLKATR_RTC) {",
+"		clock_config( CLK_KIND_RTC, CLK_RTC_SRC, CLK_PLL_USB_FREQ, CLK_RTC_FREQ);",
+"	}",
+"}",
+"",
+"EXPORT void shutdown_clock(void)",
+"{",
+"",
+"}",
+"",
+"#endif /* PICO_RP2040 *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (RaspberryPi Pico)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUSTATUS_",
+"#define _SYSDEPEND_TARGET_CPUSTATUS_",
+"",
+"#include \"../cpu/rp2040/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h (RaspberryPi Pico)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUTASK_",
+"#define _SYSDEPEND_TARGET_CPUTASK_",
+"",
+"#include \"../cpu/rp2040/cpu_task.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_CPUTASK_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef PICO_RP2040",
+"",
+"/*",
+" *	devinit.c (RaspberryPi Pico)",
+" *	Device-Dependent Initialization",
+" */",
+"",
+"#include <sys/sysdef.h>",
+"#include <tm/tmonitor.h>",
+"#include <tk/device.h>",
+"",
+"#include <kernel.h>",
+"#include \"sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Initialization before micro T-Kernel starts",
+" */",
+"",
+"EXPORT ER knl_init_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Start processing after T-Kernel starts",
+" *	Called from the initial task contexts.",
+" */",
+"EXPORT ER knl_start_device( void )",
+"{",
+"#if USE_SDEV_DRV	// Use sample driver",
+"	ER	err;",
+"",
+"	/* A/D Converter unit.0 \"adca\" */",
+"	#if DEVCNF_USE_ADC",
+"		err = dev_init_adc(0);",
+"		if(err < E_OK) return err;",
+"//		err = dev_init_adc(1);",
+"//		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* I2C unit.0 \"iica\" */",
+"	#if DEVCNF_USE_IIC",
+"		err = dev_init_i2c(0);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* UART0 \"sera\" */",
+"	#if DEVCNF_USE_SER",
+"		err = dev_init_ser(0);",
+"		if(err < E_OK) return err;",
+"//		err = dev_init_ser(1);",
+"//		if(err < E_OK) return err;",
+"	#endif",
+"",
+"#endif",
+"",
+"	return E_OK;",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System finalization",
+" *	Called just before system shutdown.",
+" *	Execute finalization that must be done before system shutdown.",
+" */",
+"EXPORT ER knl_finish_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"#endif /* USE_SHUTDOWN */",
+"",
+"#endif /* PICO_RP2040 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef PICO_RP2040",
+"",
+"/*",
+" *	hw_setting.c (RaspberryPi Pico)",
+" *	startup / shoutdown processing for hardware",
+" *	",
+" *	Pin function Setting (for RasoberryPi Pico)",
+" *		P25  : GPIO out (LED)",
+" *		P0   : UART0-TX",
+" *		P1   : UART0-RX",
+" */",
+"",
+"#include <kernel.h>",
+"#include <tm/tmonitor.h>",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/* ",
+" * Setup register data ",
+" */",
+"typedef struct {",
+"	UW	addr;",
+"	UW	data;",
+"} T_SETUP_REG;",
+"",
+"/*",
+" * Release peripheral’s reset",
+" */",
+"LOCAL const UW module_tbl[] = {",
+"	RESETS_RESET_IO_BANK0,		/* IO_BANK0 */",
+"	RESETS_RESET_PADS_BANK0,	/* PADS_BANK0 */",
+"	RESETS_RESET_UART0,		/* UART0 */",
+"",
+"#if USE_PTMR",
+"	RESETS_RESET_PWM,		/* PWM */",
+"#endif	/* USE_PTMR */",
+"",
+"#if USE_SDEV_DRV	// Do not use sample device driver",
+"	RESETS_RESET_ADC,		/* A/DC */",
+"	RESETS_RESET_I2C0,		/* I2C0 */",
+"#endif /* USE_SDEV_DRV */",
+"	0",
+"};",
+"",
+"/* ",
+" * Setup pin functions Tadle",
+" */",
+"LOCAL const T_SETUP_REG pinfnc_tbl[] = {",
+"	/* P25 : LED */",
+"	{GPIO_CTRL(25),	GPIO_CTRL_FUNCSEL_SIO},		/* P25 GPIO */",
+"	{GPIO_OE, (1<<25)},				/* P25 output enable */",
+"	/* P0,P1 : UART0 */",
+"	{GPIO_CTRL(0),	GPIO_CTRL_FUNCSEL_UART},	/* P0 UART0-TX */",
+"	{GPIO_CTRL(1),	GPIO_CTRL_FUNCSEL_UART},	/* P1 UART0-RX */",
+"",
+"#if USE_SDEV_DRV	// Do not use sample device driver",
+"	/* P26 : ADC0 */",
+"	{GPIO_CTRL(26),	GPIO_CTRL_FUNCSEL_NULL},",
+"	{GPIO(26), GPIO_DRIVE_4MA | GPIO_SHEMITT},	/* Disable input & pull-up & pull-down */",
+"",
+"	/* P27 : ADC1 */",
+"	{GPIO_CTRL(27),	GPIO_CTRL_FUNCSEL_NULL},",
+"	{GPIO(27), GPIO_DRIVE_4MA | GPIO_SHEMITT},	/* Disable input & pull-up & pull-down */",
+"",
+"	/* P28 : ADC2 */",
+"	{GPIO_CTRL(28),	GPIO_CTRL_FUNCSEL_NULL},",
+"	{GPIO(28), GPIO_DRIVE_4MA | GPIO_SHEMITT},	/* Disable input & pull-up & pull-down */",
+"",
+"	/* P8 : I2C0_SDA */",
+"	{GPIO_CTRL(8),	GPIO_CTRL_FUNCSEL_I2C},",
+"	{GPIO(8), GPIO_IE | GPIO_DRIVE_4MA | GPIO_PUE | GPIO_SHEMITT},	/* Pull-up */",
+"",
+"	/* P9 : I2C0_SCL */",
+"	{GPIO_CTRL(9),	GPIO_CTRL_FUNCSEL_I2C},",
+"	{GPIO(9), GPIO_IE | GPIO_DRIVE_4MA | GPIO_PUE | GPIO_SHEMITT},	/* Pull-up */",
+"",
+"#endif /* USE_SDEV_DRV */",
+"	{0, 0}",
+"};",
+"",
+"/*",
+" * Startup Device",
+" */",
+"EXPORT void knl_startup_hw(void)",
+"{",
+"	const T_SETUP_REG	*p;",
+"	UW	rst;",
+"",
+"	/* Startup System Clock */",
+"	startup_clock(CLKATR_USB | CLKATR_ADC | CLKATR_RTC | CLKATR_PREI);",
+"",
+"	for(INT i = 0; (rst = module_tbl[i]); i++) {",
+"		set_w(RESETS_RESET, rst);",
+"		clr_w(RESETS_RESET, rst);",
+"		while((in_w(RESETS_RESET_DONE) & rst)==0);",
+"	}",
+"",
+"	for(p = pinfnc_tbl; p->addr != 0; p++) {",
+"		out_w(p->addr, p->data);",
+"	}",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/*",
+" * Shutdown device",
+" */",
+"EXPORT void knl_shutdown_hw( void )",
+"{",
+"	disint();",
+"	while(1);",
+"}",
+"#endif /* USE_SHUTDOWN */",
+"",
+"/*",
+" * Re-start device",
+" *	mode = -1		reset and re-start	(Reset -> Boot -> Start)",
+" *	mode = -2		fast re-start		(Start)",
+" *	mode = -3		Normal re-start		(Boot -> Start)",
+" */",
+"EXPORT ER knl_restart_hw( W mode )",
+"{",
+"	switch(mode) {",
+"	case -1: /* Reset and re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM RESET & RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	case -2: /* fast re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM FAST RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	case -3: /* Normal re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	default:",
+"		return E_PAR;",
+"	}",
+"}",
+"",
+"",
+"#endif /* PICO_RP2040 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"#include <kernel.h>",
+"",
+"#ifdef PICO_RP2040",
+"",
+"/*",
+" *	power_save.c (RaspberryPi Pico)",
+" *	Power-Saving Function",
+" */",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/*",
+" * Switch to power-saving mode",
+" */",
+"EXPORT void low_pow( void )",
+"{",
+"}",
+"",
+"/*",
+" * Move to suspend mode",
+" */",
+"EXPORT void off_pow( void )",
+"{",
+"}",
+"",
+"",
+"#endif /* PICO_RP2040 */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (RaspberryPi Pico)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSDEPEND_",
+"#define _SYSDEPEND_TARGET_SYSDEPEND_",
+"",
+"#include \"../cpu/rp2040/sysdepend.h\"",
+"",
+"/*",
+" *    Clock Setting (cpu_clock.c)",
+" */",
+"IMPORT void startup_clock(ATR clkatr);",
+"#define	CLKATR_PREI		0x00000001",
+"#define	CLKATR_USB		0x00000002",
+"#define	CLKATR_ADC		0x00000004",
+"#define	CLKATR_RTC		0x00000008",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_msg.h (RaspberryPi Pico)",
+" *	Hardware-Dependent System message",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSMSG_",
+"#define _SYSDEPEND_TARGET_SYSMSG_",
+"",
+"#include <tm/tmonitor.h>",
+"",
+"#if (USE_SYSTEM_MESSAGE && USE_TMONITOR)",
+"#define SYSTEM_MESSAGE(s)	tm_putstring((UB*)s)",
+"#else",
+"#define SYSTEM_MESSAGE(s)",
+"#endif /* USE_SYSTEM_MESSAGE && USE_TMONITOR */",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSMSG_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (RaspberryPi Pico)",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSTIMER_",
+"#define _SYSDEPEND_TARGET_SYSTIMER_",
+"",
+"#include \"../cpu/rp2040/sys_timer.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSTIMER_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef RSK_RX65N",
+"",
+"/*",
+" *	cpu_clock.c (Renesas Starter Kit+ for RX65N)",
+" *	Clock Setting",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/*",
+" *  Startup System Clock",
+" *    Used Main Clock(24MHz), Uesd PLL/UPLL, System Clock 120MHz",
+" *    ICLK:120MHz, PCLKA:120MHz, PCLKB:60MHz, PCLKC:60MHz, PCLKD:60MHz, FCLK:60MHz, BCLK:60MHz, UCLK:40MHz",
+" */",
+"EXPORT void startup_clock(void)",
+"{",
+"	out_h(SYSTEM_PRCR, 0xA503);			/* Register Protect Disable */",
+"",
+"	out_b(SYSTEM_MOFCR, 0x00);			/* Set Main Clock (24MHz XTAL) */",
+"	out_b(SYSTEM_MOSCWTCR, 0x5C);			/* Set Main CLock Wait Time */",
+"	out_b(SYSTEM_MOSCCR, 0x00);			/* Enable Main Clock */",
+"	while(!(in_b(SYSTEM_OSCOVFSR) & 0x01));		/* Wait Main Clock Stabilization */",
+"",
+"	out_b(SYSTEM_ROMWT, 0x02);			/* ROM wait 2 (120MHz) */",
+"",
+"	out_h(SYSTEM_PLLCR, 0x1301);			/* PLL 24MHz/2*10=120MHz */",
+"	out_b(SYSTEM_PLLCR2, 0x00);			/* Enable PLL */",
+"	while(!(in_b(SYSTEM_OSCOVFSR) & 0x04));		/* Wait PLL Stabilization */",
+"",
+"	out_w(SYSTEM_SCKCR, 0x10010111);		/* ICLK=PCLKA:120MHz,FCLK=BCLK=PCLKB=PCLKC=PCLKD=60MHz */",
+"	out_h(SYSTEM_SCKCR2, 0x0021);			/* UCLK:40MHz */",
+"	out_h(SYSTEM_SCKCR3, 0x0400);			/* Select PLL */",
+"",
+"	out_b(SYSTEM_LOCOCR, 0x01);			/* Disable LOCO */",
+"	out_b(RTC_RCR3, 0x06);				/* Disable Sub Clock */",
+"	out_b(SYSTEM_SOSCCR, 0x01);			/* Disable Sub Clock */",
+"	while(!(in_b(SYSTEM_OSCOVFSR) & 0x02));		/* Wait Sub Clock Stoped */",
+"",
+"	out_h(SYSTEM_PRCR, 0xA500);			/* Register protect Enable */",
+"",
+"	return;",
+"}",
+"",
+"EXPORT void shutdown_clock(void)",
+"{",
+"}",
+"",
+"#endif /* CPU_RX65N *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022.04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (Renesas Starter Kit+ for RX65N)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUSTATUS_",
+"#define _SYSDEPEND_TARGET_CPUSTATUS_",
+"",
+"#include \"../cpu/rx65n/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022.04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h  (Renesas Starter Kit+ for RX65N)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUTASK_",
+"#define _SYSDEPEND_TARGET_CPUTASK_",
+"",
+"#include \"../cpu/rx65n/cpu_task.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_CPUTASK_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022.04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef RSK_RX65N",
+"",
+"/*",
+" *	devinit.c (Renesas Starter Kit+ for RX65N)",
+" *	Device-Dependent Initialization",
+" */",
+"",
+"#include <sys/sysdef.h>",
+"#include <tm/tmonitor.h>",
+"#include <tk/device.h>",
+"",
+"#include \"kernel.h\"",
+"#include \"sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Initialization before micro T-Kernel starts",
+" */",
+"",
+"EXPORT ER knl_init_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Start processing after T-Kernel starts",
+" *	Called from the initial task contexts.",
+" */",
+"EXPORT ER knl_start_device( void )",
+"{",
+"#if USE_GROUP_INT	// Use group interrupt",
+"	EnableInt(INTNO_GROUPBE0, INTPRI_GROUPBE0);",
+"	EnableInt(INTNO_GROUPBL0, INTPRI_GROUPBL0);",
+"	EnableInt(INTNO_GROUPBL1, INTPRI_GROUPBL1);",
+"	EnableInt(INTNO_GROUPBL2, INTPRI_GROUPBL2);",
+"	EnableInt(INTNO_GROUPAL0, INTPRI_GROUPAL0);",
+"	EnableInt(INTNO_GROUPAL1, INTPRI_GROUPAL1);",
+"#endif /* USE_GROUP_INT */",
+"",
+"#if USE_SDEV_DRV	// Use sample driver",
+"	ER	err;",
+"",
+"	/* A/D Converter \"adca\" */",
+"	#if DEVCNF_USE_ADC",
+"		err = dev_init_adc(0);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* SCI6 \"serd\" */",
+"	#if DEVCNF_USE_SER",
+"		err = dev_init_ser(8);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* RIIC0 \"iica\" */",
+"	#if DEVCNF_USE_IIC",
+"		err = dev_init_i2c(0);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"#endif",
+"",
+"	return E_OK;",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System finalization",
+" *	Called just before system shutdown.",
+" *	Execute finalization that must be done before system shutdown.",
+" */",
+"EXPORT ER knl_finish_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"#endif /* USE_SHUTDOWN */",
+"",
+"#endif /* RSK_RX65N */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022.04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef RSK_RX65N",
+"",
+"/*",
+" *	hw_setting.c (Renesas Starter Kit+ for RX65N)",
+" *	startup / shoutdown processing for hardware",
+" *	",
+" *	Pin function Setting (for IoT-Engine Starter board)",
+" *		PJ1  : SCI8 RXD8",
+" *		PJ2  : SCI8 TXD8",
+" *",
+" *		(USE_SDEV_DRV)",
+" *		P12  : RIIC0 SCL0",
+" *		P13  : RIIC0 SDA0",
+" *		P40  : AN000",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include <tm/tmonitor.h>",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/* ",
+" * Setup register data ",
+" */",
+"typedef struct {",
+"	UW	addr;",
+"	UW	data;",
+"} T_SETUP_REG;",
+"",
+"/* ",
+" * Setup module stop Tadle",
+" */",
+"LOCAL const T_SETUP_REG mstop_tbl[] = {",
+"#if !USE_SDEV_DRV	// Do not use sample device driver",
+"	{ MSTPCRA, 0x46FF7FCF },	/* Enable EXDMAC, DMAC/DTC, CMT0-1, TMR0-3 */",
+"	{ MSTPCRB, 0xFFFFFFFF },",
+"	{ MSTPCRC, 0xF7FF0000 },	/* Enable SCI8, Disable Deep-Sleep mode, Enable RAM */",
+"	{ MSTPCRD, 0xFFFFFF00 },",
+"",
+"#else			// Use the sample device driver",
+"	{ MSTPCRA, 0x46F57FCF },	/* Enable EXDMAC, DMAC/DTC, S12AD0, CMT0-1, TMR0-3 */",
+"	{ MSTPCRB, 0xFFDFFFFF },	/* Enable RIIC0 */",
+"	{ MSTPCRC, 0xF7FF0000 },	/* Enable SCI8, Disable Deep-Sleep mode, Enable RAM */",
+"	{ MSTPCRD, 0xFFFFFF00 },",
+"",
+"#endif /* !USE_SDEV_DRV */",
+"	{0, 0}",
+"};",
+"",
+"/* ",
+" * Setup pin functions Tadle",
+" */",
+"LOCAL const T_SETUP_REG pinfnc_tbl[] = {",
+"	{MPC_PJnPFS(1), 0x0A},		/* PJ1 = SCI8 RXD8 */",
+"	{MPC_PJnPFS(2), 0x0A},		/* PJ2 = SCI8 TXD8 */",
+"",
+"#if USE_SDEV_DRV	// Use the sample device driver",
+"	{MPC_P1nPFS(2), 0x0F},		/* P12 = RIIC0 SCL0 */",
+"	{MPC_P1nPFS(3), 0x0F},		/* P13 = RIIC0 SDA0 */",
+"	{MPC_P4nPFS(0), 0x80},		/* P40 = AN000 */",
+"",
+"#endif /* USE_SDEV_DRV */",
+"	{0, 0}",
+"};",
+"",
+"/* ",
+" * Setup port mode Tadle",
+" */",
+"LOCAL const T_SETUP_REG portmode_tbl[] = {",
+"	/* PJ1:SCI8 RXD8 PJ2:SCI8 TXD8 */",
+"	{PORTJ_PMR, 0x06},		/* PJ1&PJ2 peripheral function. */",
+"	{PORTJ_PODR, 0x04},		/* PJ2 = 'H' */",
+"	{PORTJ_PDR, 0x04},		/* PJ2 output port */",
+"",
+"#if USE_SDEV_DRV	// Use the sample device driver",
+"	/*  P12:RIIC0_SCL0 P13:RIIC0_SDA0 */",
+"	{PORT1_PMR, 0x0C},		/* P12&P13  peripheral function. */",
+"	{PORT1_PCR, 0x0C},		/* P12&P13 Pull-up */",
+"	/* P40:AN000 */",
+"	{PORT4_PMR, 0x00},		/* P40  AN000 */",
+"	{PORT4_PDR, 0x00},",
+"",
+"#endif /* USE_SDEV_DRV */",
+"",
+"	{0, 0}",
+"};",
+"",
+"/*",
+" * Startup hardware",
+" */",
+"EXPORT void knl_startup_hw(void)",
+"{",
+"	const T_SETUP_REG	*p;",
+"",
+"	/* Setup module stop */",
+"	out_h(SYSTEM_PRCR, 0xA502);		/* Disable Register Protect */",
+"	for(p = mstop_tbl; p->addr != 0; p++) {",
+"		out_w(p->addr, p->data);",
+"	}",
+"	out_h(SYSTEM_PRCR, 0xA500);		/* Enable Register protect */",
+"",
+"	/* Setup Pin Function */",
+"	out_b(MPC_PWPR, 0);",
+"	out_b(MPC_PWPR, MPC_PWMR_PFSWE);	/* Disable Register Protect */",
+"	for(p = pinfnc_tbl; p->addr != 0; p++) {",
+"		out_b(p->addr, (UB)p->data);",
+"	}",
+"	out_b(MPC_PWPR, MPC_PWMR_B0WI);		/* Enable Register protect */",
+"",
+"	/* Setup port mode */",
+"	for(p = portmode_tbl; p->addr != 0; p++) {",
+"		out_b(p->addr, (UB)p->data);",
+"	}	",
+"",
+"	startup_clock();			/* Startup CPU Clock */",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/*",
+" * Shutdown hardware",
+" */",
+"EXPORT void knl_shutdown_hw( void )",
+"{",
+"	disint();",
+"	shutdown_clock();",
+"",
+"	while(1);",
+"}",
+"#endif /* USE_SHUTDOWN */",
+"",
+"/*",
+" * Re-start hardware",
+" *	mode = -1		reset and re-start	(Reset -> Boot -> Start)",
+" *	mode = -2		fast re-start		(Start)",
+" *	mode = -3		Normal re-start		(Boot -> Start)",
+" */",
+"EXPORT ER knl_restart_hw( W mode )",
+"{",
+"	switch(mode) {",
+"	case -1: /* Reset and re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM RESET & RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	case -2: /* fast re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM FAST RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	case -3: /* Normal re-start */",
+"		SYSTEM_MESSAGE(\"\\n<< SYSTEM RESTART >>\\n\");",
+"		return E_NOSPT;",
+"	default:",
+"		return E_PAR;",
+"	}",
+"}",
+"",
+"",
+"#endif /* RSK_RX65N *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022.04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"#include <kernel.h>",
+"",
+"#ifdef RSK_RX65N",
+"",
+"/*",
+" *	power_save.c (Renesas Starter Kit+ for RX65N)",
+" *	Power-Saving Function",
+" */",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/*",
+" * Switch to power-saving mode",
+" */",
+"EXPORT void low_pow( void )",
+"{",
+"}",
+"",
+"/*",
+" * Move to suspend mode",
+" */",
+"EXPORT void off_pow( void )",
+"{",
+"}",
+"",
+"",
+"#endif /* RSK_RX65N */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022.04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (Renesas Starter Kit+ for RX65N)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSDEPEND_",
+"#define _SYSDEPEND_TARGET_SYSDEPEND_",
+"",
+"",
+"#include \"../cpu/rx65n/sysdepend.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022.04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_msg.h (Renesas Starter Kit+ for RX65N)",
+" *	Hardware-Dependent System message",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSMSG_",
+"#define _SYSDEPEND_TARGET_SYSMSG_",
+"",
+"#include <tm/tmonitor.h>",
+"",
+"#if (USE_SYSTEM_MESSAGE && USE_TMONITOR)",
+"#define SYSTEM_MESSAGE(s)	tm_putstring((UB*)s)",
+"#else",
+"#define SYSTEM_MESSAGE(s)",
+"#endif /* USE_SYSTEM_MESSAGE && USE_TMONITOR */",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSMSG_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022.04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (Renesas Starter Kit+ for RX65N)",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSTIMER_",
+"#define _SYSDEPEND_TARGET_SYSTIMER_",
+"",
+"#include \"../cpu/rx65n/sys_timer.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSTIMER_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef RTB_RX65N",
+"",
+"/*",
+" *	cpu_clock.c (Renesas Target Board for RX65N)",
+" *	Clock Setting",
+" */",
+"",
+"#include <tk/tkernel.h>",
+"",
+"#include \"sysdepend.h\"",
+"",
+"/*",
+" *  Startup System Clock",
+" *    Used HOCO Clock(16MHz), Uesd PLL/UPLL, System Clock 240MHz",
+" *    ICLK:120MHz, PCLKA:120MHz, PCLKB:60MHz, PCLKC:60MHz, PCLKD:60MHz, FCLK:60MHz, BCLK:60MHz",
+" */",
+"EXPORT void startup_clock(void)",
+"{",
+"	out_h(SYSTEM_PRCR, 0xA503);			/* Register Protect Disable */",
+"",
+"	/* After reset, HOCO oscillation is effective. */",
+"",
+"	out_h(SYSTEM_PLLCR, 0x1D10);			/* PLL 16MHz/1*15=240MHz */",
+"	out_b(SYSTEM_PLLCR2, 0x00);			/* Enable PLL */",
+"	while(!(in_b(SYSTEM_OSCOVFSR) & 0x04));		/* Wait PLL Stabilization */",
+"",
+"	out_b(SYSTEM_ROMWT, 0x02);			/* ROM wait 2 */",
+"",
+"	out_w(SYSTEM_SCKCR, 0x21c21222);		/* ICLK=120MHz,FCLK=BCLK=PCLKB=PCLKC=PCLKD=60MHz */",
+"	out_h(SYSTEM_SCKCR2, 0x0011);			/* (UCLK:48MHz) */",
+"	out_h(SYSTEM_SCKCR3, 0x0400);			/* Select PLL */",
+"",
+"	out_b(SYSTEM_LOCOCR, 0x01);			/* Disable LOCO */",
+"	out_b(RTC_RCR3, 0x06);				/* Disable Sub Clock */",
+"	out_b(SYSTEM_SOSCCR, 0x01);			/* Disable Sub Clock */",
+"	while((in_b(SYSTEM_OSCOVFSR) != 0x0C));		/* Wait Sub Clock Stoped */",
+"",
+"	out_h(SYSTEM_PRCR, 0xA500);			/* Register protect Enable */",
+"",
+"	return;",
+"}",
+"",
+"EXPORT void shutdown_clock(void)",
+"{",
+"}",
+"",
+"#endif /* RTB_RX65N *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022.04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_status.h (Renesas Target Board for RX65N)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUSTATUS_",
+"#define _SYSDEPEND_TARGET_CPUSTATUS_",
+"",
+"#include \"../cpu/rx65n/cpu_status.h\"",
+"",
+"#endif /* _SYSDEPEND_CPUSTATUS_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpu_task.h  (Renesas Target Board for RX65N)",
+" *	CPU-Dependent Task Start Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_CPUTASK_",
+"#define _SYSDEPEND_TARGET_CPUTASK_",
+"",
+"#include \"../cpu/rx65n/cpu_task.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_CPUTASK_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"#include <sys/machine.h>",
+"#ifdef RTB_RX65N",
+"",
+"/*",
+" *	devinit.c (Renesas Target Board for RX65N)",
+" *	Device-Dependent Initialization",
+" */",
+"",
+"#include <sys/sysdef.h>",
+"#include <tm/tmonitor.h>",
+"#include <tk/device.h>",
+"",
+"#include \"kernel.h\"",
+"#include \"sysdepend.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Initialization before micro T-Kernel starts",
+" */",
+"",
+"EXPORT ER knl_init_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Start processing after T-Kernel starts",
+" *	Called from the initial task contexts.",
+" */",
+"EXPORT ER knl_start_device( void )",
+"{",
+"#if USE_GROUP_INT	// Use group interrupt",
+"	EnableInt(INTNO_GROUPBE0, INTPRI_GROUPBE0);",
+"	EnableInt(INTNO_GROUPBL0, INTPRI_GROUPBL0);",
+"	EnableInt(INTNO_GROUPBL1, INTPRI_GROUPBL1);",
+"	EnableInt(INTNO_GROUPBL2, INTPRI_GROUPBL2);",
+"	EnableInt(INTNO_GROUPAL0, INTPRI_GROUPAL0);",
+"	EnableInt(INTNO_GROUPAL1, INTPRI_GROUPAL1);",
+"#endif /* USE_GROUP_INT */",
+"",
+"#if USE_SDEV_DRV	// Use sample driver",
+"	ER	err;",
+"",
+"	/* A/D Converter \"adca\" */",
+"	#if DEVCNF_USE_ADC",
+"		err = dev_init_adc(0);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"	/* RIIC0 \"iica\" */",
+"	#if DEVCNF_USE_IIC",
+"		err = dev_init_i2c(0);",
+"		if(err < E_OK) return err;",
+"	#endif",
+"",
+"#endif	/* USE_SDEV_DRV */",
+"",
+"	return E_OK;",
+"}",
+"",
+"#if USE_SHUTDOWN",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * System finalization",
+" *	Called just before system shutdown.",
+" *	Execute finalization that must be done before system shutdown.",
+" */",
+"EXPORT ER knl_finish_device( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"#endif /* USE_SHUTDOWN */",
+"",
+"#endif /* RTB_RX65N */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysdepend.h (Renesas Target Board for RX65N)",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSDEPEND_",
+"#define _SYSDEPEND_TARGET_SYSDEPEND_",
+"",
+"",
+"#include \"../cpu/rx65n/sysdepend.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_msg.h (Renesas Target Board for RX65N)",
+" *	Hardware-Dependent System message",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSMSG_",
+"#define _SYSDEPEND_TARGET_SYSMSG_",
+"",
+"#include <tm/tmonitor.h>",
+"",
+"#if (USE_SYSTEM_MESSAGE && USE_TMONITOR)",
+"#define SYSTEM_MESSAGE(s)	tm_putstring((UB*)s)",
+"#else",
+"#define SYSTEM_MESSAGE(s)",
+"#endif /* USE_SYSTEM_MESSAGE && USE_TMONITOR */",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSMSG_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.0 BSP",
+" *",
+" *    Copyright (C) 2022 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2022/04.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h (Renesas Target Board for RX65N)",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_TARGET_SYSTIMER_",
+"#define _SYSDEPEND_TARGET_SYSTIMER_",
+"",
+"#include \"../cpu/rx65n/sys_timer.h\"",
+"",
+"#endif /* _SYSDEPEND_TARGET_SYSTIMER_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	Sysdepend.h",
+" *	System-Dependent local defined",
+" */",
+"",
+"#ifndef _SYSDEPEND_SYSDEPEND_",
+"#define _SYSDEPEND_SYSDEPEND_",
+"",
+"/* System dependencies */",
+"#define SYSDEPEND_PATH_(a)	#a",
+"#define SYSDEPEND_PATH(a)	SYSDEPEND_PATH_(a)",
+"#define SYSDEPEND_SYSDEP()	SYSDEPEND_PATH(TARGET_DIR/sysdepend.h)",
+"#include SYSDEPEND_SYSDEP()",
+"",
+"#endif /* _SYSDEPEND_SYSDEPEND_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_msg.h",
+" *	Hardware-Dependent System Message",
+" */",
+"",
+"#ifndef _SYSDEPEND_SYSMSG_",
+"#define _SYSDEPEND_SYSMSG_",
+"",
+"/* System dependencies */",
+"#define SYSMSG_PATH_(a)	#a",
+"#define SYSMSG_PATH(a)	SYSMSG_PATH_(a)",
+"#define SYSMSG_SYSDEP()	SYSMSG_PATH(TARGET_DIR/sys_msg.h)",
+"#include SYSMSG_SYSDEP()",
+"",
+"#endif /* _SYSDEPEND_SYSMSG_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sys_timer.h",
+" *	Hardware-Dependent System Timer Processing",
+" */",
+"",
+"#ifndef _SYSDEPEND_SYSTIMER_",
+"#define _SYSDEPEND_SYSTIMER_",
+"",
+"/* System dependencies */",
+"#define SYSTIMER_PATH_(a)	#a",
+"#define SYSTIMER_PATH(a)	SYSTIMER_PATH_(a)",
+"#define SYSTIMER_SYSDEP()	SYSTIMER_PATH(TARGET_DIR/sys_timer.h)",
+"#include SYSTIMER_SYSDEP()",
+"",
+"#endif /* _SYSDEPEND_SYSTIMER_ *//*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.01",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/05/29.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	sysinit.c",
+" *	micro T-Kernel Startup / Finalization",
+" */",
+"#include \"kernel.h\"",
+"#include <tm/tmonitor.h>",
+"",
+"/*",
+" * Start micro T-Kernel",
+" *    Initialize sequence before micro T-Kernel start.",
+" *    Perform preparation necessary to start micro T-Kernel.",
+" */",
+"EXPORT INT main( void )",
+"{",
+"	ER	ercd;",
+"",
+"	DISABLE_INTERRUPT;",
+"",
+"#if USE_TMONITOR",
+"	/* Initialize T-Monitor Compatible Library */",
+"	libtm_init();",
+"#endif",
+"",
+"#if USE_IMALLOC",
+"	/* Initialize Internal memory allocation (Imalloc) */",
+"	ercd = knl_init_Imalloc();",
+"	if ( ercd < E_OK ) {",
+"		SYSTEM_MESSAGE(\"!ERROR! init_Imalloc\\n\");",
+"		goto err_ret;",
+"	}",
+"#endif /* USE_IMALLOC */",
+"",
+"	/* Initialize Device before micro T-Kernel starts */",
+"	ercd = knl_init_device();",
+"	if ( ercd < E_OK ) {",
+"		SYSTEM_MESSAGE(\"!ERROR! init_device\\n\");",
+"		goto err_ret;",
+"	}",
+"",
+"	/* Interrupt initialize */",
+"	ercd = knl_init_interrupt();",
+"	if ( ercd < E_OK ) {",
+"		SYSTEM_MESSAGE(\"!ERROR! init_initialize\\n\");",
+"		goto err_ret;",
+"	}",
+"",
+"	/* Initialize Kernel-objects  */",
+"	ercd = knl_init_object();",
+"	if ( ercd < E_OK ) {",
+"		SYSTEM_MESSAGE(\"!ERROR! kernel object initialize\\n\");",
+"		goto err_ret1;",
+"	}",
+"",
+"	/* Start System Timer */",
+"	ercd = knl_timer_startup();",
+"	if ( ercd < E_OK ) {",
+"		SYSTEM_MESSAGE(\"!ERROR! System timer startup\\n\");",
+"		goto err_ret1;",
+"	}",
+"",
+"	/* Create & start initial task */",
+"	ercd = tk_cre_tsk((CONST T_CTSK *)&knl_init_ctsk);",
+"	if ( ercd >= E_OK ) {",
+"		ercd = tk_sta_tsk((ID)ercd, 0);",
+"		if ( ercd >= E_OK ) {",
+"			knl_force_dispatch();",
+"			/**** Start Initial Task. ****/",
+"			/**** No return ****/",
+"		} else {",
+"			SYSTEM_MESSAGE(\"!ERROR! Initial Task can not start\\n\");",
+"		}",
+"	} else {",
+"		SYSTEM_MESSAGE(\"!ERROR! Initial Task can not creat\\n\");",
+"	}",
+"",
+"	/* After this, Error handling */",
+"",
+"#if USE_SHUTDOWN",
+"	knl_timer_shutdown();	/* Stop System timer */",
+"err_ret1:",
+"	knl_shutdown_hw();	/* Hardware-dependent Finalization */",
+"	/**** No return ****/",
+"#else",
+"err_ret1:",
+"#endif /* USE_SHUTDOWN */",
+"",
+"err_ret:",
+"	while(1);",
+"	return 0;",
+"}",
+"",
+"/*",
+" * Exit micro T-Kernel from Initial Task.",
+" */",
+"#if USE_SHUTDOWN",
+"EXPORT void knl_tkernel_exit( void )",
+"{",
+"	knl_timer_shutdown();	/* Stop System timer */",
+"	knl_shutdown_hw();	/* Hardware-dependent Finalization */",
+"	/**** No return ****/",
+"",
+"	while(1);",
+"}",
+"#endif /* USE_SHUTDOWN */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	check.h",
+" *	Macro for Error Check ",
+" */",
+"",
+"#ifndef _CHECK_",
+"#define _CHECK_",
+"",
+"/*",
+" * Check object ID range (E_ID)",
+" */",
+"#if CHK_ID",
+"#define CHECK_TSKID(tskid) {					\\",
+"	if (!in_indp() && ((tskid) == TSK_SELF)) {		\\",
+"		return E_OBJ;					\\",
+"	} else if (!CHK_TSKID(tskid)) {				\\",
+"		return E_ID;					\\",
+"	}							\\",
+"}",
+"#define CHECK_TSKID_SELF(tskid) {				\\",
+"	if ( !( (!in_indp() && (tskid) == TSK_SELF)		\\",
+"		|| CHK_TSKID(tskid) ) ) {			\\",
+"		return E_ID;					\\",
+"	}							\\",
+"}",
+"#define CHECK_SEMID(semid) {					\\",
+"	if (!CHK_SEMID(semid)) {				\\",
+"		return E_ID;					\\",
+"	}							\\",
+"}",
+"#define CHECK_FLGID(flgid) {					\\",
+"	if (!CHK_FLGID(flgid)) {				\\",
+"		return E_ID;					\\",
+"	}							\\",
+"}",
+"#define CHECK_MBXID(mbxid) {					\\",
+"	if (!CHK_MBXID(mbxid)) {				\\",
+"		return E_ID;					\\",
+"	}							\\",
+"}",
+"#define CHECK_MBFID(mbfid) {					\\",
+"	if (!CHK_MBFID(mbfid)) {				\\",
+"		return E_ID;					\\",
+"	}							\\",
+"}",
+"#define CHECK_PORID(porid) {					\\",
+"	if (!CHK_PORID(porid)) {				\\",
+"		return E_ID;					\\",
+"	}							\\",
+"}",
+"#define CHECK_MTXID(pisid) {					\\",
+"	if (!CHK_MTXID(pisid)) {				\\",
+"		return E_ID;					\\",
+"	}							\\",
+"}",
+"#define CHECK_MPLID(mplid) {					\\",
+"	if (!CHK_MPLID(mplid)) {				\\",
+"		return E_ID;					\\",
+"	}							\\",
+"}",
+"#define CHECK_MPFID(mpfid) {					\\",
+"	if (!CHK_MPFID(mpfid)) {				\\",
+"		return E_ID;					\\",
+"	}							\\",
+"}",
+"#define CHECK_CYCID(cycid) {					\\",
+"	if (!CHK_CYCID(cycid)) {				\\",
+"		return E_ID;					\\",
+"	}							\\",
+"}",
+"#define CHECK_ALMID(almid) {					\\",
+"	if (!CHK_ALMID(almid)) {				\\",
+"		return E_ID;					\\",
+"	}							\\",
+"}",
+"#else /* CHK_ID */",
+"#define CHECK_TSKID(tskid)",
+"#define CHECK_TSKID_SELF(tskid)",
+"#define CHECK_SEMID(semid)",
+"#define CHECK_FLGID(flgid)",
+"#define CHECK_MBXID(mbxid)",
+"#define CHECK_MBFID(mbfid)",
+"#define CHECK_PORID(porid)",
+"#define CHECK_MTXID(pisid)",
+"#define CHECK_MPLID(mplid)",
+"#define CHECK_MPFID(mpfid)",
+"#define CHECK_CYCID(cycid)",
+"#define CHECK_ALMID(almid)",
+"#define CHECK_SSYID(ssid)",
+"#define CHECK_SSYID_ALL(ssid)",
+"#endif /* CHK_ID */",
+"",
+"/*",
+" * Check whether its own task is specified (E_OBJ)",
+" */",
+"#if CHK_SELF",
+"#define CHECK_NONSELF(tskid) {					\\",
+"	if (!in_indp() && (tskid) == knl_ctxtsk->tskid) {		\\",
+"		return E_OBJ;					\\",
+"	}							\\",
+"}",
+"#else /* CHK_SELF */",
+"#define CHECK_NONSELF(tskid)",
+"#endif /* CHK_SELF */",
+"",
+"/*",
+" * Check task priority value (E_PAR)",
+" */",
+"#if CHK_PAR",
+"#define CHECK_PRI(pri) {					\\",
+"	if (!CHK_PRI(pri)) {					\\",
+"		return E_PAR;					\\",
+"	}							\\",
+"}",
+"#define CHECK_PRI_INI(pri) {					\\",
+"	if ((pri) != TPRI_INI && !CHK_PRI(pri)) {		\\",
+"		return E_PAR;					\\",
+"	}							\\",
+"}",
+"#define CHECK_PRI_RUN(pri) {					\\",
+"	if ((pri) != TPRI_RUN && !CHK_PRI(pri)) {		\\",
+"		return E_PAR;					\\",
+"	}							\\",
+"}",
+"#else /* CHK_PAR */",
+"#define CHECK_PRI(pri)",
+"#define CHECK_PRI_INI(pri)",
+"#define CHECK_PRI_RUN(pri)",
+"#endif /* CHK_PAR */",
+"",
+"/*",
+" * Check timeout specification value (E_PAR)",
+" */",
+"#if CHK_PAR",
+"#define CHECK_TMOUT(tmout) {					\\",
+"	if (!((tmout) >= TMO_FEVR)) {				\\",
+"		return E_PAR;					\\",
+"	}							\\",
+"}",
+"#define CHECK_RELTIM(tmout) {					\\",
+"	if(tmout >= 0x80000000UL){				\\",
+"		return E_PAR;					\\",
+"	}							\\",
+"}",
+"#else /* CHK_PAR */",
+"#define CHECK_TMOUT(tmout)",
+"#define CHECK_RELTIM(tmout)",
+"#endif /* CHK_PAR */",
+"",
+"/*",
+" * Check other parameter errors (E_PAR)",
+" */",
+"#if CHK_PAR",
+"#define CHECK_PAR(exp) {					\\",
+"	if (!(exp)) {						\\",
+"		return E_PAR;					\\",
+"	}							\\",
+"}",
+"#else /* CHK_PAR */",
+"#define CHECK_PAR(exp)",
+"#endif /* CHK_PAR */",
+"",
+"/*",
+" * Check reservation attribute error (E_RSATR)",
+" */",
+"#if CHK_RSATR",
+"#define CHECK_RSATR(atr, maxatr) {				\\",
+"	if ((atr) & ~(maxatr)) {				\\",
+"	        return E_RSATR;					\\",
+"	}							\\",
+"}",
+"#else /* CHK_RSATR */",
+"#define CHECK_RSATR(atr, maxatr)",
+"#endif /* CHK_RSATR */",
+"",
+"/*",
+" * Check unsupported function (E_NOSPT)",
+" */",
+"#if CHK_NOSPT",
+"#define CHECK_NOSPT(exp) {					\\",
+"	if (!(exp)) {						\\",
+"		return E_NOSPT;					\\",
+"	}							\\",
+"}",
+"#else /* CHK_NOSPT */",
+"#define CHECK_NOSPT(exp)",
+"#endif /* CHK_NOSPT */",
+"",
+"/*",
+" * Check whether task-independent part is running (E_CTX)",
+" */",
+"#if CHK_CTX",
+"#define CHECK_INTSK() {						\\",
+"	if (in_indp()) {					\\",
+"		return E_CTX;					\\",
+"	}							\\",
+"}",
+"#else /* CHK_CTX */",
+"#define CHECK_INTSK()",
+"#endif /* CHK_CTX */",
+"",
+"/*",
+" * Check whether dispatch is in disabled state (E_CTX)",
+" */",
+"#if CHK_CTX",
+"#define CHECK_DISPATCH() {					\\",
+"	if (in_ddsp()) {					\\",
+"		return E_CTX;					\\",
+"	}							\\",
+"}",
+"#define CHECK_DISPATCH_POL(tmout) {				\\",
+"	if ((tmout) != TMO_POL && in_ddsp()) {			\\",
+"		return E_CTX;					\\",
+"	}							\\",
+"}",
+"#else /* CHK_CTX */",
+"#define CHECK_DISPATCH()",
+"#define CHECK_DISPATCH_POL(tmout)",
+"#endif /* CHK_CTX */",
+"",
+"/*",
+" * Check other context errors (E_CTX)",
+" */",
+"#if CHK_CTX",
+"#define CHECK_CTX(exp) {					\\",
+"	if (!(exp)) {						\\",
+"		return E_CTX;					\\",
+"	}							\\",
+"}",
+"#else /* CHK_CTX */",
+"#define CHECK_CTX(exp)",
+"#endif /* CHK_CTX */",
+"",
+"#endif /* _CHECK_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.03",
+" *",
+" *    Copyright (C) 2006-2021 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2021/03/31.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	cpuctl.c",
+" *	CPU Control",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"task.h\"",
+"#include \"check.h\"",
+"",
+"",
+"#ifdef USE_FUNC_TK_DIS_DSP",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Dispatch disable",
+" */",
+"SYSCALL ER tk_dis_dsp( void )",
+"{",
+"	CHECK_CTX(!in_loc());",
+"",
+"	knl_dispatch_disabled = DDS_DISABLE;",
+"",
+"	return E_OK;",
+"}",
+"#endif /* USE_FUNC_TK_DIS_DSP */",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Dispatch enable",
+" */",
+"#ifdef USE_FUNC_TK_ENA_DSP",
+"SYSCALL ER tk_ena_dsp( void )",
+"{",
+"	CHECK_CTX(!in_loc());",
+"",
+"	knl_dispatch_disabled = DDS_ENABLE;",
+"	if ( knl_ctxtsk != knl_schedtsk ) {",
+"		knl_dispatch();",
+"	}",
+"",
+"	return E_OK;",
+"}",
+"#endif /* USE_FUNC_TK_ENA_DSP */",
+"",
+"#if TK_SUPPORT_REGOPS",
+"#ifdef USE_FUNC_TK_SET_REG",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Set task register contents",
+" */",
+"SYSCALL ER tk_set_reg( ID tskid,",
+"		CONST T_REGS *pk_regs, CONST T_EIT *pk_eit, CONST T_CREGS *pk_cregs )",
+"{",
+"	TCB		*tcb;",
+"	ER		ercd = E_OK;",
+"",
+"	CHECK_INTSK();",
+"	CHECK_TSKID(tskid);",
+"	CHECK_NONSELF(tskid);",
+"",
+"	tcb = get_tcb(tskid);",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	if ( tcb->state == TS_NONEXIST ) {",
+"		ercd = E_NOEXS;",
+"	} else {",
+"		knl_set_reg(tcb, pk_regs, pk_eit, pk_cregs);",
+"	}",
+"	END_CRITICAL_SECTION;",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_FUNC_TK_SET_REG */",
+"",
+"#ifdef USE_FUNC_TK_GET_REG",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Get task register contents",
+" */",
+"SYSCALL ER tk_get_reg( ID tskid, T_REGS *pk_regs, T_EIT *pk_eit, T_CREGS *pk_cregs )",
+"{",
+"	TCB		*tcb;",
+"	ER		ercd = E_OK;",
+"",
+"	CHECK_INTSK();",
+"	CHECK_TSKID(tskid);",
+"	CHECK_NONSELF(tskid);",
+"",
+"	tcb = get_tcb(tskid);",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	if ( tcb->state == TS_NONEXIST ) {",
+"		ercd = E_NOEXS;",
+"	} else {",
+"		knl_get_reg(tcb, pk_regs, pk_eit, pk_cregs);",
+"	}",
+"	END_CRITICAL_SECTION;",
+"",
+"	return ercd;",
+"}",
+"",
+"#endif /* USE_FUNC_TK_GET_REG */",
+"#endif /* TK_SUPPORT_REGOPS */",
+"",
+"#if NUM_COPROCESSOR > 0",
+"#ifdef USE_FUNC_TK_SET_CPR",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Set coprocessor registers contents",
+" */",
+"SYSCALL ER tk_set_cpr( ID tskid, INT copno, CONST T_COPREGS *pk_copregs )",
+"{",
+"	TCB		*tcb;",
+"	ER		ercd = E_OK;",
+"",
+"	CHECK_INTSK();",
+"	CHECK_TSKID(tskid);",
+"	CHECK_NONSELF(tskid);",
+"",
+"	tcb = get_tcb(tskid);",
+"	if((copno < 0) || (copno >= NUM_COPROCESSOR)",
+"		|| !(tcb->tskatr & (TA_COP0 << copno))) {",
+"		return E_PAR;",
+"	}",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	if ( tcb->state == TS_NONEXIST ) {",
+"		ercd = E_NOEXS;",
+"	} else {",
+"		ercd = knl_set_cpr(tcb, copno, pk_copregs);",
+"	}",
+"	END_CRITICAL_SECTION;",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_FUNC_TK_SET_CPR */",
+"",
+"#ifdef USE_FUNC_TK_GET_CPR",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Get coprocessor registers contents",
+" */",
+"SYSCALL ER tk_get_cpr( ID tskid, INT copno, T_COPREGS *pk_copregs )",
+"{",
+"	TCB		*tcb;",
+"	ER		ercd = E_OK;",
+"",
+"	CHECK_INTSK();",
+"	CHECK_TSKID(tskid);",
+"	CHECK_NONSELF(tskid);",
+"",
+"	tcb = get_tcb(tskid);",
+"	if((copno < 0) || (copno >= NUM_COPROCESSOR)",
+"		|| !(tcb->tskatr & (TA_COP0 << copno))) {",
+"		return E_PAR;",
+"	}",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	if ( tcb->state == TS_NONEXIST ) {",
+"		ercd = E_NOEXS;",
+"	} else {",
+"		ercd = knl_get_cpr(tcb, copno, pk_copregs);",
+"	}",
+"	END_CRITICAL_SECTION;",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_FUNC_TK_GET_CPR */",
+"#endif /* NUM_COPROCESSOR > 0 */",
+"",
+"#if USE_DBGSPT",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" *	Debugger support function",
+" */",
+"",
+"#if TK_SUPPORT_REGOPS",
+"#ifdef USE_FUNC_TD_SET_REG",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Set task register",
+" */",
+"SYSCALL ER td_set_reg( ID tskid, CONST T_REGS *regs, CONST T_EIT *eit, CONST T_CREGS *cregs )",
+"{",
+"	TCB	*tcb;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_TSKID(tskid);",
+"",
+"	tcb = get_tcb(tskid);",
+"	if ( tcb == knl_ctxtsk ) {",
+"		return E_OBJ;",
+"	}",
+"",
+"	BEGIN_DISABLE_INTERRUPT;",
+"	if ( tcb->state == TS_NONEXIST ) {",
+"		ercd = E_NOEXS;",
+"	} else {",
+"		knl_set_reg(tcb, regs, eit, cregs);",
+"	}",
+"	END_DISABLE_INTERRUPT;",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_FUNC_TD_SET_REG */",
+"",
+"#ifdef USE_FUNC_TD_GET_REG",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Get task register",
+" */",
+"SYSCALL ER td_get_reg( ID tskid, T_REGS *regs, T_EIT *eit, T_CREGS *cregs )",
+"{",
+"	TCB	*tcb;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_TSKID(tskid);",
+"",
+"	tcb = get_tcb(tskid);",
+"	if ( tcb == knl_ctxtsk ) {",
+"		return E_OBJ;",
+"	}",
+"",
+"	BEGIN_DISABLE_INTERRUPT;",
+"	if ( tcb->state == TS_NONEXIST ) {",
+"		ercd = E_NOEXS;",
+"	} else {",
+"		knl_get_reg(tcb, regs, eit, cregs);",
+"	}",
+"	END_DISABLE_INTERRUPT;",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_FUNC_TD_GET_REG */",
+"#endif /* TK_SUPPORT_REGOPS */",
+"",
+"#endif /* USE_DBGSPT */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.02",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/10/21.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	device.c",
+" *	Device Management Function",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"sysmgr.h\"",
+"#include \"device.h\"",
+"",
+"#if USE_DEVICE",
+"",
+"/* Lock for device management exclusive control */",
+"Noinit(EXPORT	FastMLock	knl_DevMgrLock);",
+"",
+"/* Device initial setting information */",
+"Noinit(EXPORT	T_IDEV		knl_DefaultIDev);",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" *	Device registration management",
+" */",
+"",
+"Noinit(EXPORT	DevCB		knl_DevCBtbl[MAX_REGDEV]);	/* Device registration information table */",
+"Noinit(EXPORT	QUEUE		knl_UsedDevCB);	/* In-use queue */",
+"Noinit(EXPORT	QUEUE		knl_FreeDevCB);	/* Unused queue */",
+"",
+"",
+"/*",
+" * Search registration device",
+" */",
+"EXPORT DevCB* knl_searchDevCB( CONST UB *devnm )",
+"{",
+"	QUEUE	*q;",
+"	DevCB	*devcb;",
+"",
+"	for ( q = knl_UsedDevCB.next; q != &knl_UsedDevCB; q = q->next ) {",
+"		devcb = (DevCB*)q;",
+"",
+"		if ( devcb->devnm[0] == devnm[0] && knl_strcmp((char*)devcb->devnm, (char*)devnm) == 0 ) {",
+"			return devcb; /* Found */",
+"		}",
+"	}",
+"",
+"	return NULL;",
+"}",
+"",
+"/*",
+" * Get DevCB for new registration",
+" */",
+"LOCAL DevCB* newDevCB( CONST UB *devnm )",
+"{",
+"	DevCB	*devcb;",
+"",
+"	devcb = (DevCB*)QueRemoveNext(&knl_FreeDevCB);",
+"	if ( devcb == NULL ) {",
+"		return NULL; /* No space */",
+"	}",
+"",
+"	knl_strncpy((char*)devcb->devnm, (char*)devnm, L_DEVNM+1);",
+"	QueInit(&devcb->openq);",
+"",
+"	QueInsert(&devcb->q, &knl_UsedDevCB);",
+"",
+"	return devcb;",
+"}",
+"",
+"/*",
+" * Free DevCB",
+" */",
+"LOCAL void delDevCB( DevCB *devcb )",
+"{",
+"	QueRemove(&devcb->q);",
+"	QueInsert(&devcb->q, &knl_FreeDevCB);",
+"	devcb->devnm[0] = '\\0';",
+"}",
+"",
+"/*",
+" * Device registration",
+" */",
+"SYSCALL ID tk_def_dev( CONST UB *devnm, CONST T_DDEV *pk_ddev, T_IDEV *pk_idev )",
+"{",
+"	DevCB	*devcb;",
+"	INT	len;",
+"	ER	ercd;",
+"",
+"	LockREG();",
+"",
+"	len = knl_strlen((char*)devnm);",
+"	if ( len == 0 || len > L_DEVNM ) {",
+"		ercd = E_PAR;",
+"		goto err_ret1;",
+"	}",
+"",
+"	if ( pk_ddev != NULL ) {",
+"		if ( pk_ddev->nsub < 0 || pk_ddev->nsub > MAX_UNIT ) {",
+"			ercd = E_PAR;",
+"			goto err_ret1;",
+"		}",
+"",
+"		/* Make sure that the length of the logical device name",
+"		   does not exceed the character limit */",
+"		if ( pk_ddev->nsub > 0   ) {",
+"			++len;",
+"		}",
+"		if ( pk_ddev->nsub > 10  ) {",
+"			++len;",
+"		}",
+"		if ( pk_ddev->nsub > 100 ) {",
+"			++len;",
+"		}",
+"		if ( len > L_DEVNM ) {",
+"			ercd = E_PAR;",
+"			goto err_ret1;",
+"		}",
+"	}",
+"",
+"	LockDM();",
+"",
+"	/* Search whether 'devnm' device is registered */",
+"	devcb = knl_searchDevCB(devnm);",
+"	if ( devcb == NULL ) {",
+"		if ( pk_ddev == NULL ) {",
+"			ercd = E_NOEXS;",
+"			goto err_ret2;",
+"		}",
+"",
+"		/* Get 'devcb' for new registration because it is not",
+"		   registered */",
+"		devcb = newDevCB(devnm);",
+"		if ( devcb == NULL ) {",
+"			ercd = E_LIMIT;",
+"			goto err_ret2;",
+"		}",
+"	}",
+"",
+"	if ( pk_ddev != NULL ) {",
+"		/* Set/update device registration information */",
+"		devcb->ddev = *pk_ddev;",
+"",
+"		if ( pk_idev != NULL ) {",
+"			/* Device initial setting information */",
+"			*pk_idev = knl_DefaultIDev;",
+"		}",
+"	} else {",
+"		if ( !isQueEmpty(&devcb->openq) ) {",
+"			/* In use (open) */",
+"			ercd = E_BUSY;",
+"			goto err_ret2;",
+"		}",
+"",
+"		/* Device unregistration */",
+"		delDevCB(devcb);",
+"	}",
+"",
+"	UnlockDM();",
+"	UnlockREG();",
+"",
+"	return DID(devcb);",
+"",
+"err_ret2:",
+"	UnlockDM();",
+"err_ret1:",
+"	UnlockREG();",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Check device initial information",
+" */",
+"SYSCALL ER tk_ref_idv( T_IDEV *pk_idev )",
+"{",
+"	LockDM();",
+"	*pk_idev = knl_DefaultIDev;",
+"	UnlockDM();",
+"",
+"	return E_OK;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Get physical device name",
+" *	Get the subunit number (return value) ",
+" *	from the logical device name (ldevnm) and the physical",
+" *	device name (pdevnm).",
+" */",
+"EXPORT INT knl_phydevnm( UB *pdevnm, CONST UB *ldevnm )",
+"{",
+"	UB	c;",
+"	INT	unitno;",
+"",
+"	while ( (c = *ldevnm) != '\\0' ) {",
+"		if ( c >= '0' && c <= '9' ) {",
+"			break;",
+"		}",
+"		*pdevnm++ = c;",
+"		ldevnm++;",
+"	}",
+"	*pdevnm = '\\0';",
+"",
+"	unitno = 0;",
+"	if (c != '\\0') {",
+"		while ( (c = *ldevnm) != '\\0' ) {",
+"			unitno = unitno * 10 + (c - '0');",
+"			ldevnm++;",
+"		}",
+"		++unitno;",
+"	}",
+"",
+"	return unitno;",
+"}",
+"",
+"/*",
+" * Get logical device name",
+" *	Get the logical device name from",
+" *	the physical device name (pdevnm) and the subunit number (unitno).",
+" */",
+"LOCAL void logdevnm( UB *ldevnm, UB *pdevnm, INT unitno )",
+"{",
+"	UB	unostr[12], *cp;",
+"",
+"	knl_strcpy((char*)ldevnm, (char*)pdevnm);",
+"	if ( unitno > 0 ) {",
+"		cp = &unostr[11];",
+"		*cp = '\\0';",
+"		while (*ldevnm != '\\0') {",
+"			++ldevnm;",
+"		}",
+"		--unitno;",
+"		do {",
+"			*(--cp) = (UB)('0' + (unitno % 10));",
+"			unitno /= 10;",
+"		} while (unitno);",
+"		knl_strcat((char*)ldevnm, (char*)cp);",
+"	}",
+"}",
+"",
+"/*",
+" * Get device name",
+" */",
+"SYSCALL ID tk_get_dev( ID devid, UB *devnm )",
+"{",
+"	DevCB	*devcb;",
+"	ER	ercd;",
+"",
+"	ercd = knl_check_devid(devid);",
+"	if ( ercd < E_OK ) {",
+"		goto err_ret1;",
+"	}",
+"",
+"	LockDM();",
+"",
+"	devcb = DEVCB(devid);",
+"	if ( (devcb->devnm[0] == '\\0')||(UNITNO(devid) > devcb->ddev.nsub) ) {",
+"		ercd = E_NOEXS;",
+"		goto err_ret2;",
+"	}",
+"",
+"	logdevnm(devnm, devcb->devnm, UNITNO(devid));",
+"",
+"	UnlockDM();",
+"",
+"	return DID(devcb);",
+"",
+"err_ret2:",
+"	UnlockDM();",
+"err_ret1:",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Get device information",
+" */",
+"SYSCALL ID tk_ref_dev( CONST UB *devnm, T_RDEV *pk_rdev )",
+"{",
+"	UB	pdevnm[L_DEVNM + 1];",
+"	DevCB	*devcb;",
+"	INT	unitno;",
+"	ER	ercd;",
+"",
+"	unitno = knl_phydevnm(pdevnm, devnm);",
+"",
+"	LockDM();",
+"",
+"	devcb = knl_searchDevCB(pdevnm);",
+"	if ( devcb == NULL || unitno > devcb->ddev.nsub ) {",
+"		ercd = E_NOEXS;",
+"		goto err_ret2;",
+"	}",
+"",
+"	if ( pk_rdev != NULL ) {",
+"		pk_rdev->devatr = devcb->ddev.devatr;",
+"		pk_rdev->blksz  = devcb->ddev.blksz;",
+"		pk_rdev->nsub   = devcb->ddev.nsub;",
+"		pk_rdev->subno  = unitno;",
+"	}",
+"",
+"	UnlockDM();",
+"",
+"	return DEVID(devcb, unitno);",
+"",
+"err_ret2:",
+"	UnlockDM();",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Get device information",
+" */",
+"SYSCALL ID tk_oref_dev( ID dd, T_RDEV *pk_rdev )",
+"{",
+"	OpnCB	*opncb;",
+"	DevCB	*devcb;",
+"	INT	unitno;",
+"	ER	ercd;",
+"",
+"	LockDM();",
+"",
+"	ercd = knl_check_devdesc(dd, 0, &opncb);",
+"	if ( ercd < E_OK ) {",
+"		goto err_ret2;",
+"	}",
+"",
+"	devcb  = opncb->devcb;",
+"	unitno = opncb->unitno;",
+"",
+"	if ( pk_rdev != NULL ) {",
+"		pk_rdev->devatr = devcb->ddev.devatr;",
+"		pk_rdev->blksz  = devcb->ddev.blksz;",
+"		pk_rdev->nsub   = devcb->ddev.nsub;",
+"		pk_rdev->subno  = unitno;",
+"	}",
+"",
+"	UnlockDM();",
+"",
+"	return DEVID(devcb, unitno);",
+"",
+"err_ret2:",
+"	UnlockDM();",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Get registration device list",
+" */",
+"SYSCALL INT tk_lst_dev( T_LDEV *pk_ldev, INT start, INT ndev )",
+"{",
+"	DevCB	*devcb;",
+"	QUEUE	*q;",
+"	INT	n, end;",
+"	ER	ercd;",
+"",
+"	if ( start < 0 || ndev < 0 ) {",
+"		ercd = E_PAR;",
+"		goto err_ret;",
+"	}",
+"	LockDM();",
+"",
+"	end = start + ndev;",
+"	n = 0;",
+"	for ( q = knl_UsedDevCB.next; q != &knl_UsedDevCB; q = q->next ) {",
+"		if ( n >= start && n < end ) {",
+"			devcb = (DevCB*)q;",
+"			pk_ldev->devatr = devcb->ddev.devatr;",
+"			pk_ldev->blksz  = devcb->ddev.blksz;",
+"			pk_ldev->nsub   = devcb->ddev.nsub;",
+"			knl_strncpy((char*)pk_ldev->devnm, (char*)devcb->devnm, L_DEVNM);",
+"			pk_ldev++;",
+"		}",
+"		n++;",
+"	}",
+"",
+"	UnlockDM();",
+"",
+"	if ( start >= n ) {",
+"		ercd = E_NOEXS;",
+"		goto err_ret;",
+"	}",
+"",
+"	return n - start;",
+"",
+"err_ret:",
+"	return ercd;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Send driver request event",
+" */",
+"SYSCALL INT tk_evt_dev( ID devid, INT evttyp, void *evtinf )",
+"{",
+"	DevCB	*devcb;",
+"	EVTFN	eventfn;",
+"	void	*exinf;",
+"	ER	ercd;",
+"",
+"	ercd = knl_check_devid(devid);",
+"	if ( ercd < E_OK ) {",
+"		goto err_ret1;",
+"	}",
+"	if ( evttyp < 0 ) {",
+"		ercd = E_PAR;",
+"		goto err_ret1;",
+"	}",
+"",
+"	LockDM();",
+"",
+"	devcb = DEVCB(devid);",
+"	if ( (devcb->devnm[0] == '\\0')||(UNITNO(devid) > devcb->ddev.nsub) ) {",
+"		ercd = E_NOEXS;",
+"		goto err_ret2;",
+"	}",
+"",
+"	eventfn = (EVTFN)devcb->ddev.eventfn;",
+"	exinf = devcb->ddev.exinf;",
+"",
+"	UnlockDM();",
+"",
+"	/* Device driver call */",
+"	DISABLE_INTERRUPT;",
+"	knl_ctxtsk->sysmode++;",
+"	ENABLE_INTERRUPT;",
+"	ercd = (*eventfn)(evttyp, evtinf, exinf);",
+"	DISABLE_INTERRUPT;",
+"	knl_ctxtsk->sysmode--;",
+"	ENABLE_INTERRUPT;",
+"",
+"	return ercd;",
+"",
+"err_ret2:",
+"	UnlockDM();",
+"err_ret1:",
+"	return ercd;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Initialization of device registration information table",
+" */",
+"LOCAL ER initDevCB( void )",
+"{",
+"	DevCB	*devcb;",
+"	INT	num = MAX_REGDEV;",
+"",
+"	QueInit(&knl_UsedDevCB);",
+"	QueInit(&knl_FreeDevCB);",
+"",
+"	devcb = knl_DevCBtbl;",
+"	while ( num-- > 0 ) {",
+"		QueInsert(&devcb->q, &knl_FreeDevCB);",
+"		devcb->devnm[0] = '\\0';",
+"		devcb++;",
+"	}",
+"",
+"	return E_OK;",
+"}",
+"",
+"/*",
+" * Initialization of device initial setting information",
+" */",
+"LOCAL ER initIDev( void )",
+"{",
+"	ER	ercd;",
+"",
+"#if DEVT_MBFSZ0 >= 0",
+"	T_CMBF	cmbf;",
+"",
+"	/* Generate message buffer for event notification */",
+"	knl_strncpy((char*)&cmbf.exinf, (char*)OBJNAME_DMMBF, sizeof(cmbf.exinf));",
+"	cmbf.mbfatr = TA_TFIFO;",
+"	cmbf.bufsz  = DEVT_MBFSZ0;",
+"	cmbf.maxmsz = DEVT_MBFSZ1;",
+"	ercd = tk_cre_mbf(&cmbf);",
+"	if ( ercd < E_OK ) {",
+"		knl_DefaultIDev.evtmbfid = 0;",
+"		goto err_ret;",
+"	}",
+"#else	/* Do not use message buffer for event notification */",
+"	ercd = E_OK;",
+"#endif",
+"	knl_DefaultIDev.evtmbfid = ercd;",
+"",
+"#if DEVT_MBFSZ0 >= 0",
+"err_ret:",
+"#endif",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Initialization of Devive management",
+" */",
+"EXPORT ER knl_initialize_devmgr( void )",
+"{",
+"	ER	ercd;",
+"",
+"	/* Generate lock for device management exclusive control */",
+"	ercd = CreateMLock(&knl_DevMgrLock, (UB*)OBJNAME_DMLOCK);",
+"	if ( ercd < E_OK ) {",
+"		goto err_ret;",
+"	}",
+"",
+"	/* Generate device registration information table */",
+"	ercd = initDevCB();",
+"	if ( ercd < E_OK ) {",
+"		goto err_ret;",
+"	}",
+"",
+"	/* Initialization of device input/output-related */",
+"	ercd = knl_initDevIO();",
+"	if ( ercd < E_OK ) {",
+"		goto err_ret;",
+"	}",
+"",
+"	/* Initialization of device initial setting information */",
+"	ercd = initIDev();",
+"	if ( ercd < E_OK ) {",
+"		goto err_ret;",
+"	}",
+"",
+"	knl_devmgr_startup();",
+"",
+"	return E_OK;",
+"",
+"err_ret:",
+"	knl_finish_devmgr();",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Unregister device initial setting information",
+" */",
+"LOCAL ER delIDev( void )",
+"{",
+"	ER	ercd = E_OK;",
+"",
+"#if DEVT_MBFSZ0 >= 0",
+"	/* Delete message buffer for event notification */",
+"	if ( knl_DefaultIDev.evtmbfid > 0 ) {",
+"		ercd = tk_del_mbf(knl_DefaultIDev.evtmbfid);",
+"		knl_DefaultIDev.evtmbfid = 0;",
+"	}",
+"",
+"",
+"#endif /* DEVT_MBFSZ0 >= 0 */",
+"",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Finalization sequence of system management ",
+" */",
+"EXPORT ER knl_finish_devmgr( void )",
+"{",
+"	ER	ercd;",
+"",
+"	knl_devmgr_cleanup();",
+"",
+"	/* Unregister device initial setting information */",
+"	ercd = delIDev();",
+"",
+"	/* Finalization sequence of device input/output-related */",
+"	ercd = knl_finishDevIO();",
+"",
+"	/* Delete lock for device management exclusive control */",
+"	DeleteMLock(&knl_DevMgrLock);",
+"",
+"	return ercd;",
+"}",
+"",
+"#endif /* USE_DEVICE */",
+#if 0 /* ****************************************************************
+*
+*
+************************************************************************* */
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	device.h",
+" *	Device Management Function",
+" */",
+"",
+"#ifndef _DEVICE_H_",
+"#define _DEVICE_H_",
+"",
+"/* Set Object Name in .exinf for DEBUG */",
+"#define OBJNAME_DMMBF	\"DEvt\"		/* Event notification mbf */",
+"#define OBJNAME_DMSEM	\"DMSy\"		/* semaphore of synchronous control */",
+"#define OBJNAME_DMLOCK	\"DMLk\"		/* Multi-lock for Dev.Mgr. */",
+"",
+"IMPORT	T_IDEV		knl_DefaultIDev;",
+"",
+"/*",
+" *	Device registration management",
+" */",
+"",
+"IMPORT DevCB knl_DevCBtbl[];	/* Device registration information table */",
+"IMPORT QUEUE knl_UsedDevCB;	/* In-use queue */",
+"IMPORT QUEUE knl_FreeDevCB;	/* Unused queue */",
+"",
+"#define MAX_UNIT	255		/* Maximum number of subunits */",
+"",
+"/*",
+" * Verify validity of device ID",
+" */",
+"Inline ER knl_check_devid( ID devid )",
+"{",
+"	devid >>= 8;",
+"	if ( devid < 1 || devid > MAX_REGDEV ) {",
+"		return E_ID;",
+"	}",
+"	return E_OK;",
+"}",
+"",
+"/*",
+" * Device Management: Input/Output",
+" */",
+"IMPORT OpnCB knl_OpnCBtbl[];	/* Open management information table */",
+"IMPORT QUEUE knl_FreeOpnCB;	/* Unused queue */",
+"",
+"#define DD(opncb)		( (opncb) - knl_OpnCBtbl + 1 )",
+"#define OPNCB(dd)		( knl_OpnCBtbl + ((dd) - 1) )",
+"",
+"IMPORT ReqCB knl_ReqCBtbl[];	/* Request management information table */",
+"IMPORT QUEUE knl_FreeReqCB;	/* Unused queue */",
+"",
+"#define REQID(reqcb)		( (reqcb) - knl_ReqCBtbl + 1 )",
+"#define REQCB(reqid)		( knl_ReqCBtbl + ((reqid) - 1) )",
+"",
+"#define DEVREQ_REQCB(devreq)	((ReqCB*)((B*)(devreq) - offsetof(ReqCB, req)))",
+"",
+"IMPORT ResCB knl_resource_control_block;",
+"",
+"",
+"#include \"limits.h\"",
+"",
+"/* Suspend disable request count */",
+"IMPORT	INT	knl_DisSusCnt;",
+"",
+"/* Maximum number of suspend disable request counts */",
+"#define MAX_DISSUS	INT_MAX",
+"",
+"",
+"/*",
+" * Device driver abort function call",
+" */",
+"Inline ER knl_call_abortfn( DevCB *devcb, ID tskid, T_DEVREQ *devreq, INT nreq )",
+"{",
+"	ER ercd;",
+"	ABTFN	abortfn;",
+"",
+"	abortfn = (ABTFN)devcb->ddev.abortfn;",
+"",
+"	DISABLE_INTERRUPT;",
+"	knl_ctxtsk->sysmode++;",
+"	ENABLE_INTERRUPT;",
+"	ercd = (*abortfn)(tskid, devreq, nreq, devcb->ddev.exinf);",
+"	DISABLE_INTERRUPT;",
+"	knl_ctxtsk->sysmode--;",
+"	ENABLE_INTERRUPT;",
+"",
+"	return ercd;",
+"}",
+"",
+"",
+"IMPORT ID knl_request( ID dd, W start, void *buf, W size, TMO tmout, INT cmd );",
+"IMPORT BOOL knl_chkopen( DevCB *devcb, INT unitno );",
+"IMPORT void knl_delReqCB( ReqCB *reqcb );",
+"IMPORT ResCB* knl_GetResCB( void );",
+"IMPORT void knl_delOpnCB( OpnCB *opncb, BOOL free );",
+"IMPORT ER knl_close_device( OpnCB *opncb, UINT option );",
+"",
+"#endif /* _DEVICE_H_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	deviceio.c",
+" *	Device Management Function: Input/Output",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"sysmgr.h\"",
+"#include \"device.h\"",
+"",
+"#if USE_DEVICE",
+"",
+"Noinit(EXPORT OpnCB	knl_OpnCBtbl[MAX_OPNDEV]);	/* Open management information table */",
+"Noinit(EXPORT QUEUE	knl_FreeOpnCB);	/* Unused queue */",
+"",
+"Noinit(EXPORT ReqCB	knl_ReqCBtbl[MAX_REQDEV]);	/* Request management information table */",
+"Noinit(EXPORT QUEUE	knl_FreeReqCB);	/* Unused queue */",
+"",
+"Noinit(EXPORT ResCB knl_resource_control_block);",
+"",
+"",
+"/*",
+" * Get resource management information",
+" */",
+"EXPORT ResCB* knl_GetResCB( void )",
+"{",
+"	LockDM();",
+"",
+"	/* If the startup function is not called, initialize at this point */",
+"	if ( knl_resource_control_block.openq.next == NULL ) {",
+"		/* Initialization of open device management queue */",
+"		QueInit(&(knl_resource_control_block.openq));",
+"	}",
+"",
+"	UnlockDM();",
+"",
+"	return &knl_resource_control_block;",
+"}",
+"",
+"/*",
+" * Verify validity of device descriptor",
+" */",
+"EXPORT ER knl_check_devdesc( ID dd, UINT mode, OpnCB **p_opncb )",
+"{",
+"	OpnCB	*opncb;",
+"",
+"	if ( dd < 1 || dd > MAX_OPNDEV ) {",
+"		return E_ID;",
+"	}",
+"	opncb = OPNCB(dd);",
+"	if ( opncb->resid == 0 ) {",
+"		return E_ID;",
+"	}",
+"",
+"	if ( mode != 0 ) {",
+"		if ( (opncb->omode & mode) == 0 ) {",
+"			return E_OACV;",
+"		}",
+"	}",
+"",
+"	*p_opncb = opncb;",
+"	return E_OK;",
+"}",
+"",
+"/*",
+" * Free open management block",
+" */",
+"EXPORT void knl_delOpnCB( OpnCB *opncb, BOOL free )",
+"{",
+"	QueRemove(&opncb->q);",
+"	QueRemove(&opncb->resq);",
+"",
+"	if ( free ) {",
+"		QueInsert(&opncb->q, &knl_FreeOpnCB);",
+"	}",
+"	opncb->resid = 0;",
+"}",
+"",
+"/*",
+" * Free request management block",
+" */",
+"EXPORT void knl_delReqCB( ReqCB *reqcb )",
+"{",
+"	QueRemove(&reqcb->q);",
+"",
+"	QueInsert(&reqcb->q, &knl_FreeReqCB);",
+"	reqcb->opncb = NULL;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * TRUE if specified device is open.",
+" */",
+"EXPORT BOOL knl_chkopen( DevCB *devcb, INT unitno )",
+"{",
+"	QUEUE	*q;",
+"",
+"	for ( q = devcb->openq.next; q != &devcb->openq; q = q->next ) {",
+"		if ( ((OpnCB*)q)->unitno == unitno ) {",
+"			return TRUE;",
+"		}",
+"	}",
+"	return FALSE;",
+"}",
+"",
+"",
+"LOCAL CONST T_CSEM knl_pk_csem_DM = {",
+"	NULL,",
+"	TA_TFIFO | TA_FIRST,",
+"	0,",
+"	1,",
+"};",
+"",
+"/*",
+" * Get open management block",
+" */",
+"LOCAL OpnCB* newOpnCB( DevCB *devcb, INT unitno, UINT omode, ResCB *rescb )",
+"{",
+"	OpnCB	*opncb;",
+"",
+"	/* Get space in open management block */",
+"	opncb = (OpnCB*)QueRemoveNext(&knl_FreeOpnCB);",
+"	if ( opncb == NULL ) {",
+"		return NULL; /* No space */",
+"	}",
+"",
+"	/* Register as open device */",
+"	QueInsert(&opncb->q, &devcb->openq);",
+"	QueInsert(&opncb->resq, &rescb->openq);",
+"",
+"	opncb->devcb  = devcb;",
+"	opncb->unitno = unitno;",
+"	opncb->omode  = omode;",
+"	QueInit(&opncb->requestq);",
+"	opncb->waitone = 0;",
+"	opncb->nwaireq = 0;",
+"	opncb->abort_tskid = 0;",
+"",
+"	opncb->resid  = 0; /* Indicate that open processing is not completed */",
+"",
+"	return opncb;",
+"}",
+"",
+"/*",
+" * Check open mode",
+" */",
+"LOCAL ER chkopenmode( DevCB *devcb, INT unitno, UINT omode )",
+"{",
+"	QUEUE	*q;",
+"	OpnCB	*opncb;",
+"	INT	read, write, rexcl, wexcl;",
+"",
+"	if ( (omode & TD_UPDATE) == 0 ) {",
+"		return E_PAR;",
+"	}",
+"",
+"	/* Check current open state */",
+"	read = write = rexcl = wexcl = 0;",
+"	for ( q = devcb->openq.next; q != &devcb->openq; q = q->next ) {",
+"		opncb = (OpnCB*)q;",
+"",
+"		if ( unitno == 0 || opncb->unitno == 0 || opncb->unitno == unitno ) {",
+"			if ( (opncb->omode & TD_READ)  != 0 ) {",
+"				read++;",
+"			}",
+"			if ( (opncb->omode & TD_WRITE) != 0 ) {",
+"				write++;",
+"			}",
+"			if ( (opncb->omode & (TD_EXCL|TD_REXCL)) != 0) {",
+"				rexcl++;",
+"			}",
+"			if ( (opncb->omode & (TD_EXCL|TD_WEXCL)) != 0) {",
+"				wexcl++;",
+"			}",
+"		}",
+"	}",
+"",
+"	/* Is it able to open? */",
+"	if ( (omode & (TD_EXCL|TD_REXCL)) != 0 && read  > 0 ) {",
+"		return E_BUSY;",
+"	}",
+"	if ( (omode & (TD_EXCL|TD_WEXCL)) != 0 && write > 0 ) {",
+"		return E_BUSY;",
+"	}",
+"	if ( (omode & TD_READ)  != 0 && rexcl > 0 ) {",
+"		return E_BUSY;",
+"	}",
+"	if ( (omode & TD_WRITE) != 0 && wexcl > 0 ) {",
+"		return E_BUSY;",
+"	}",
+"",
+"	return E_OK;",
+"}",
+"",
+"/*",
+" * Device open",
+" */",
+"SYSCALL ID tk_opn_dev( CONST UB *devnm, UINT omode )",
+"{",
+"	OPNFN	openfn;",
+"	void	*exinf;",
+"	UB	pdevnm[L_DEVNM + 1];",
+"	INT	unitno;",
+"	ResCB	*rescb;",
+"	DevCB	*devcb;",
+"	OpnCB	*opncb;",
+"	ER	ercd;",
+"	ID	semid;",
+"",
+"	unitno = knl_phydevnm(pdevnm, devnm);",
+"",
+"	/* Get resource management information */",
+"	rescb = knl_GetResCB();",
+"	if ( rescb == NULL ) {",
+"		ercd = E_CTX;",
+"		goto err_ret1;",
+"	}",
+"",
+"	LockDM();",
+"",
+"	/* Search device to open */",
+"	devcb = knl_searchDevCB(pdevnm);",
+"	if ( devcb == NULL || unitno > devcb->ddev.nsub ) {",
+"		ercd = E_NOEXS;",
+"		goto err_ret2;",
+"	}",
+"",
+"	/* Check open mode */",
+"	ercd = chkopenmode(devcb, unitno, omode);",
+"	if ( ercd < E_OK ) {",
+"		goto err_ret2;",
+"	}",
+"",
+"	openfn = (OPNFN)devcb->ddev.openfn;",
+"	exinf = devcb->ddev.exinf;",
+"",
+"	/* Is device driver call required? */",
+"	if ( knl_chkopen(devcb, unitno) && (devcb->ddev.drvatr & TDA_OPENREQ) == 0 ) {",
+"		openfn = NULL;",
+"	}",
+"",
+"	/* Get open management block */",
+"	opncb = newOpnCB(devcb, unitno, omode, rescb);",
+"	if ( opncb == NULL ) {",
+"		ercd = E_LIMIT;",
+"		goto err_ret2;",
+"	}",
+"",
+"	semid = tk_cre_sem(&knl_pk_csem_DM);",
+"	if ( semid < E_OK ) {",
+"		ercd = E_SYS;",
+"		goto err_ret2_5;",
+"	}",
+"	opncb->abort_semid = semid;",
+"",
+"	UnlockDM();",
+"",
+"	if ( openfn != NULL ) {",
+"		/* Device driver call */",
+"		DISABLE_INTERRUPT;",
+"		knl_ctxtsk->sysmode++;",
+"		ENABLE_INTERRUPT;",
+"		ercd = (*openfn)(DEVID(devcb, unitno), omode, exinf);",
+"		DISABLE_INTERRUPT;",
+"		knl_ctxtsk->sysmode--;",
+"		ENABLE_INTERRUPT;",
+"",
+"		if ( ercd < E_OK ) {",
+"			goto err_ret3;",
+"		}",
+"	}",
+"",
+"	LockDM();",
+"	opncb->resid = 1; /* Indicate that open processing is completed */",
+"	UnlockDM();",
+"",
+"	return DD(opncb);",
+"",
+"err_ret3:",
+"	LockDM();",
+"	tk_del_sem(opncb->abort_semid);",
+"err_ret2_5:",
+"	knl_delOpnCB(opncb, TRUE);",
+"err_ret2:",
+"	UnlockDM();",
+"err_ret1:",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Abort all requests",
+" */",
+"LOCAL void abort_allrequest( OpnCB *opncb )",
+"{",
+"	ABTFN	abortfn;",
+"	WAIFN	waitfn;",
+"	void	*exinf;",
+"	DevCB	*devcb;",
+"	ReqCB	*reqcb;",
+"	QUEUE	*q;",
+"",
+"	/* If 'execfn' and 'waitfn' are called, execute abort request. */",
+"	LockDM();",
+"",
+"	devcb = opncb->devcb;",
+"	abortfn = (ABTFN)devcb->ddev.abortfn;",
+"	waitfn  = (WAIFN)devcb->ddev.waitfn;",
+"	exinf   = devcb->ddev.exinf;",
+"",
+"	opncb->abort_tskid = tk_get_tid();",
+"	opncb->abort_cnt = 0;",
+"",
+"	if ( opncb->nwaireq > 0 ) {",
+"		/* Multiple requests wait */",
+"		reqcb = DEVREQ_REQCB(opncb->waireqlst);",
+"",
+"		/* Device driver call */",
+"		DISABLE_INTERRUPT;",
+"		knl_ctxtsk->sysmode++;",
+"		ENABLE_INTERRUPT;",
+"		(*abortfn)(reqcb->tskid, opncb->waireqlst, opncb->nwaireq, exinf);",
+"		DISABLE_INTERRUPT;",
+"		knl_ctxtsk->sysmode--;",
+"		ENABLE_INTERRUPT;",
+"",
+"		opncb->abort_cnt++;",
+"	} else {",
+"		/* Start request or single request wait */",
+"		for ( q = opncb->requestq.next; q != &opncb->requestq; q = q->next ) {",
+"			reqcb = (ReqCB*)q;",
+"			if ( reqcb->tskid == 0 ) {",
+"				continue;",
+"			}",
+"",
+"			reqcb->req.abort = TRUE;",
+"",
+"			/* Device driver call */",
+"			DISABLE_INTERRUPT;",
+"			knl_ctxtsk->sysmode++;",
+"			ENABLE_INTERRUPT;",
+"			(*abortfn)(reqcb->tskid, &reqcb->req, 1, exinf);",
+"			DISABLE_INTERRUPT;",
+"			knl_ctxtsk->sysmode--;",
+"			ENABLE_INTERRUPT;",
+"",
+"			opncb->abort_cnt++;",
+"		}",
+"	}",
+"",
+"	UnlockDM();",
+"",
+"	if ( opncb->abort_cnt > 0 ) {",
+"		/* Wait for completion of abort request processing */",
+"		tk_wai_sem(opncb->abort_semid, 1, TMO_FEVR);",
+"	}",
+"	opncb->abort_tskid = 0;",
+"",
+"	/* Abort remaining requests and wait for completion */",
+"	LockDM();",
+"	while ( !isQueEmpty(&opncb->requestq) ) {",
+"		reqcb = (ReqCB*)opncb->requestq.next;",
+"		reqcb->req.abort = TRUE;",
+"",
+"		UnlockDM();",
+"",
+"		/* Device driver call */",
+"		DISABLE_INTERRUPT;",
+"		knl_ctxtsk->sysmode++;",
+"		ENABLE_INTERRUPT;",
+"		(*waitfn)(&reqcb->req, 1, TMO_FEVR, exinf);",
+"		DISABLE_INTERRUPT;",
+"		knl_ctxtsk->sysmode--;",
+"		ENABLE_INTERRUPT;",
+"",
+"		LockDM();",
+"",
+"		/* Unregister completed request */",
+"		knl_delReqCB(reqcb);",
+"	}",
+"	UnlockDM();",
+"}",
+"",
+"/*",
+" * Device close processing",
+" */",
+"EXPORT ER knl_close_device( OpnCB *opncb, UINT option )",
+"{",
+"	CLSFN	closefn;",
+"	void	*exinf;",
+"	ID	devid;",
+"	DevCB	*devcb;",
+"	INT	unitno;",
+"	ER	ercd = E_OK;",
+"",
+"	/* Abort all requests during processing */",
+"	abort_allrequest(opncb);",
+"",
+"	LockDM();",
+"",
+"	devcb  = opncb->devcb;",
+"	unitno = opncb->unitno;",
+"	closefn = (CLSFN)devcb->ddev.closefn;",
+"	exinf = devcb->ddev.exinf;",
+"	devid = DEVID(devcb, unitno);",
+"",
+"	/* Delete semaphore for completion check of abortion */",
+"	tk_del_sem(opncb->abort_semid);",
+"",
+"	/* Free open management block */",
+"	knl_delOpnCB(opncb, FALSE);",
+"",
+"	/* Is device driver call required? */",
+"	if ( knl_chkopen(devcb, unitno) ) {",
+"		option &= ~TD_EJECT;",
+"		if ( (devcb->ddev.drvatr & TDA_OPENREQ) == 0 ) {",
+"			closefn = NULL;",
+"		}",
+"	}",
+"",
+"	UnlockDM();",
+"",
+"	if ( closefn != NULL ) {",
+"		/* Device driver call */",
+"		DISABLE_INTERRUPT;",
+"		knl_ctxtsk->sysmode++;",
+"		ENABLE_INTERRUPT;",
+"		ercd = (*closefn)(devid, option, exinf);",
+"		DISABLE_INTERRUPT;",
+"		knl_ctxtsk->sysmode--;",
+"		ENABLE_INTERRUPT;",
+"	}",
+"",
+"	LockDM();",
+"	/* Return open management block to FreeQue */",
+"	QueInsert(&opncb->q, &knl_FreeOpnCB);",
+"	UnlockDM();",
+"",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Device close",
+" */",
+"SYSCALL ER tk_cls_dev( ID dd, UINT option )",
+"{",
+"	OpnCB	*opncb;",
+"	ER	ercd;",
+"",
+"	LockDM();",
+"",
+"	ercd = knl_check_devdesc(dd, 0, &opncb);",
+"	if ( ercd < E_OK ) {",
+"		UnlockDM();",
+"		goto err_ret;",
+"	}",
+"",
+"	opncb->resid = 0; /* Indicate that it is during close processing */",
+"",
+"	UnlockDM();",
+"",
+"	/* Device close processing */",
+"	ercd = knl_close_device(opncb, option);",
+"",
+"err_ret:",
+"	return ercd;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Get request management block",
+" */",
+"LOCAL ReqCB* newReqCB( OpnCB *opncb )",
+"{",
+"	ReqCB	*reqcb;",
+"",
+"	/* Get space in request management block */",
+"	reqcb = (ReqCB*)QueRemoveNext(&knl_FreeReqCB);",
+"	if ( reqcb == NULL ) {",
+"		return NULL; /* No space */",
+"	}",
+"",
+"	/* Register as requested open device */",
+"	QueInsert(&reqcb->q, &opncb->requestq);",
+"",
+"	reqcb->opncb = opncb;",
+"",
+"	return reqcb;",
+"}",
+"",
+"/*",
+" * Request for starting input/output to device",
+" */",
+"EXPORT ID knl_request( ID dd, W start, void *buf, W size, TMO tmout, INT cmd )",
+"{",
+"	EXCFN	execfn;",
+"	void	*exinf;",
+"	OpnCB	*opncb;",
+"	DevCB	*devcb;",
+"	ReqCB	*reqcb;",
+"	UINT	m;",
+"	ER	ercd;",
+"",
+"	LockDM();",
+"",
+"	if ( start <= -0x00010000 && start >= -0x7fffffff ) {",
+"		m = 0; /* Ignore open mode */",
+"	} else {",
+"		m = ( cmd == TDC_READ )? TD_READ: TD_WRITE;",
+"	}",
+"	ercd = knl_check_devdesc(dd, m, &opncb);",
+"	if ( ercd < E_OK ) {",
+"		goto err_ret1;",
+"	}",
+"",
+"	devcb = opncb->devcb;",
+"	execfn = (EXCFN)devcb->ddev.execfn;",
+"	exinf = devcb->ddev.exinf;",
+"",
+"	/* Get request management block */",
+"	reqcb = newReqCB(opncb);",
+"	if ( reqcb == NULL ) {",
+"		ercd = E_LIMIT;",
+"		goto err_ret1;",
+"	}",
+"",
+"	/* Set request packet */",
+"	reqcb->req.next   = NULL;",
+"	reqcb->req.exinf  = NULL;",
+"	reqcb->req.devid  = DEVID(devcb, opncb->unitno);",
+"	reqcb->req.cmd    = cmd;",
+"	reqcb->req.abort  = FALSE;",
+"	reqcb->req.start  = start;",
+"	reqcb->req.size   = size;",
+"	reqcb->req.buf    = buf;",
+"	reqcb->req.asize  = 0;",
+"	reqcb->req.error  = 0;",
+"",
+"	/* Indicate that it is during processing */",
+"	reqcb->tskid = tk_get_tid();",
+"",
+"	UnlockDM();",
+"",
+"	/* Device driver call */",
+"	DISABLE_INTERRUPT;",
+"	knl_ctxtsk->sysmode++;",
+"	ENABLE_INTERRUPT;",
+"	ercd = (*execfn)(&reqcb->req, tmout, exinf);",
+"	DISABLE_INTERRUPT;",
+"	knl_ctxtsk->sysmode--;",
+"	ENABLE_INTERRUPT;",
+"",
+"	LockDM();",
+"",
+"	/* Indicate that it is not during processing */",
+"	reqcb->tskid = 0;",
+"",
+"	/* If there is an abort completion wait task,",
+"	   notify abort completion */",
+"	if ( opncb->abort_tskid > 0 && --opncb->abort_cnt == 0 ) {",
+"		tk_sig_sem(opncb->abort_semid, 1);",
+"	}",
+"",
+"	if ( ercd < E_OK ) {",
+"		goto err_ret2;",
+"	}",
+"",
+"	UnlockDM();",
+"",
+"	return REQID(reqcb);",
+"",
+"err_ret2:",
+"	knl_delReqCB(reqcb);",
+"err_ret1:",
+"	UnlockDM();",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Start reading from device",
+" */",
+"SYSCALL ID tk_rea_dev( ID dd, W start, void *buf, SZ size, TMO tmout )",
+"{",
+"	ER	ercd;",
+"",
+"	ercd = knl_request(dd, start, buf, size, tmout, TDC_READ);",
+"",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Synchronous reading from device",
+" */",
+"SYSCALL ER tk_srea_dev( ID dd, W start, void *buf, SZ size, SZ *asize )",
+"{",
+"	ER	ercd, ioercd;",
+"",
+"	ercd = tk_rea_dev(dd, start, buf, size, TMO_FEVR);",
+"	if ( ercd < E_OK ) {",
+"		goto err_ret;",
+"	}",
+"",
+"	ercd = tk_wai_dev(dd, ercd, asize, &ioercd, TMO_FEVR);",
+"	if ( ercd < E_OK ) {",
+"		goto err_ret;",
+"	}",
+"",
+"	return ioercd;",
+"",
+"err_ret:",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Start writing to device",
+" */",
+"SYSCALL ID tk_wri_dev( ID dd, W start, CONST void *buf, SZ size, TMO tmout )",
+"{",
+"	ER	ercd;",
+"",
+"	ercd = knl_request(dd, start, (void *)buf, size, tmout, TDC_WRITE);",
+"",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Synchronous writing to device",
+" */",
+"SYSCALL ER tk_swri_dev( ID dd, W start, CONST void *buf, SZ size, SZ *asize )",
+"{",
+"	ER	ercd, ioercd;",
+"",
+"	ercd = tk_wri_dev(dd, start, buf, size, TMO_FEVR);",
+"	if ( ercd < E_OK ) {",
+"		goto err_ret;",
+"	}",
+"",
+"	ercd = tk_wai_dev(dd, ercd, asize, &ioercd, TMO_FEVR);",
+"	if ( ercd < E_OK ) {",
+"		goto err_ret;",
+"	}",
+"",
+"	return ioercd;",
+"",
+"err_ret:",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Verify validity of request ID",
+" */",
+"LOCAL ReqCB* knl_check_reqid( ID reqid, OpnCB *opncb )",
+"{",
+"	ReqCB	*reqcb;",
+"",
+"	if ( reqid < 1 || reqid > MAX_REQDEV ) {",
+"		return NULL;",
+"	}",
+"	reqcb = REQCB(reqid);",
+"	if ( reqcb->opncb != opncb ) {",
+"		return NULL;",
+"	}",
+"",
+"	return reqcb;",
+"}",
+"",
+"/*",
+" * Request completion wait",
+" */",
+"SYSCALL ID tk_wai_dev( ID dd, ID reqid, SZ *asize, ER *ioer, TMO tmout )",
+"{",
+"	WAIFN	waitfn;",
+"	void	*exinf;",
+"	OpnCB	*opncb;",
+"	DevCB	*devcb;",
+"	ReqCB	*reqcb;",
+"	T_DEVREQ *devreq;",
+"	INT	reqno, nreq;",
+"	ID	tskid;",
+"	ER	ercd;",
+"",
+"	tskid = tk_get_tid();",
+"",
+"	LockDM();",
+"",
+"	ercd = knl_check_devdesc(dd, 0, &opncb);",
+"	if ( ercd < E_OK ) {",
+"		goto err_ret2;",
+"	}",
+"",
+"	devcb = opncb->devcb;",
+"	waitfn = (WAIFN)devcb->ddev.waitfn;",
+"	exinf = devcb->ddev.exinf;",
+"",
+"	if ( reqid == 0 ) {",
+"		/* When waiting for completion of any of requests for 'dd' */",
+"		if ( opncb->nwaireq > 0 || opncb->waitone > 0 ) {",
+"			ercd = E_OBJ;",
+"			goto err_ret2;",
+"		}",
+"		if ( isQueEmpty(&opncb->requestq) ) {",
+"			ercd = E_NOEXS;",
+"			goto err_ret2;",
+"		}",
+"",
+"		/* Create wait request list */",
+"		reqcb = (ReqCB*)opncb->requestq.next;",
+"		for ( nreq = 1;; nreq++ ) {",
+"			reqcb->tskid = tskid;",
+"			devreq = &reqcb->req;",
+"			reqcb = (ReqCB*)reqcb->q.next;",
+"			if ( reqcb == (ReqCB*)&opncb->requestq ) {",
+"				break;",
+"			}",
+"			devreq->next = &reqcb->req;",
+"		}",
+"		devreq->next = NULL;",
+"		devreq = &((ReqCB*)opncb->requestq.next)->req;",
+"",
+"		opncb->waireqlst = devreq;",
+"		opncb->nwaireq = nreq;",
+"	} else {",
+"		/* Wait for completion of abort request processing */",
+"		reqcb = knl_check_reqid(reqid, opncb);",
+"		if ( reqcb == NULL ) {",
+"			ercd = E_ID;",
+"			goto err_ret2;",
+"		}",
+"		if ( opncb->nwaireq > 0 || reqcb->tskid > 0 ) {",
+"			ercd = E_OBJ;",
+"			goto err_ret2;",
+"		}",
+"",
+"		/* Create waiting request list */",
+"		reqcb->tskid = tskid;",
+"		devreq = &reqcb->req;",
+"		devreq->next = NULL;",
+"		nreq = 1;",
+"",
+"		opncb->waitone++;",
+"	}",
+"",
+"	UnlockDM();",
+"",
+"	/* Device driver call */",
+"	DISABLE_INTERRUPT;",
+"	knl_ctxtsk->sysmode++;",
+"	ENABLE_INTERRUPT;",
+"	reqno = (*waitfn)(devreq, nreq, tmout, exinf);",
+"	DISABLE_INTERRUPT;",
+"	knl_ctxtsk->sysmode--;",
+"	ENABLE_INTERRUPT;",
+"",
+"	if ( reqno <  E_OK ) {",
+"		ercd = reqno;",
+"	}",
+"	if ( reqno >= nreq ) {",
+"		ercd = E_SYS;",
+"	}",
+"",
+"	LockDM();",
+"",
+"	/* Free wait processing */",
+"	if ( reqid == 0 ) {",
+"		opncb->nwaireq = 0;",
+"	} else {",
+"		opncb->waitone--;",
+"	}",
+"",
+"	/* If there is an abort completion wait task,",
+"	   notify abort completion */",
+"	if ( opncb->abort_tskid > 0 && --opncb->abort_cnt == 0 ) {",
+"		tk_sig_sem(opncb->abort_semid, 1);",
+"	}",
+"",
+"	/* Get processing result */",
+"	while ( devreq != NULL ) {",
+"		reqcb = DEVREQ_REQCB(devreq);",
+"		if ( reqno-- == 0 ) {",
+"			reqid = REQID(reqcb);",
+"			*asize = devreq->asize;",
+"			*ioer  = devreq->error;",
+"		}",
+"		reqcb->tskid = 0;",
+"		devreq = devreq->next;",
+"	}",
+"",
+"	if ( ercd < E_OK ) {",
+"		goto err_ret2;",
+"	}",
+"",
+"	/* Unregister completed request */",
+"	knl_delReqCB(REQCB(reqid));",
+"",
+"	UnlockDM();",
+"",
+"	return reqid;",
+"",
+"err_ret2:",
+"	UnlockDM();",
+"	return ercd;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/* Suspend disable request count */",
+"EXPORT INT	knl_DisSusCnt = 0;",
+"",
+"/*",
+" * Send driver request event to each device",
+" */",
+"LOCAL ER sendevt_alldevice( INT evttyp, BOOL disk )",
+"{",
+"	EVTFN	eventfn;",
+"	QUEUE	*q;",
+"	DevCB	*devcb;",
+"	BOOL	d;",
+"	ER	ercd = E_OK;",
+"",
+"	for ( q = knl_UsedDevCB.next; q != &knl_UsedDevCB; q = q->next ) {",
+"		devcb = (DevCB*)q;",
+"",
+"		d = ( (devcb->ddev.devatr & TD_DEVTYPE) == TDK_DISK )?",
+"							TRUE: FALSE;",
+"		if ( disk != d ) {",
+"			continue;",
+"		}",
+"",
+"		/* Device driver call */",
+"		eventfn = (EVTFN)devcb->ddev.eventfn;",
+"		DISABLE_INTERRUPT;",
+"		knl_ctxtsk->sysmode++;",
+"		ENABLE_INTERRUPT;",
+"		ercd = (*eventfn)(evttyp, NULL, devcb->ddev.exinf);",
+"		DISABLE_INTERRUPT;",
+"		knl_ctxtsk->sysmode--;",
+"		ENABLE_INTERRUPT;",
+"	}",
+"",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Suspend",
+" */",
+"LOCAL ER do_suspend( void )",
+"{",
+"	ER	ercd;",
+"",
+"	/* Stop accepting device registration/unregistration */",
+"	LockREG();",
+"",
+"	/* Suspend processing of device except for disks */",
+"	ercd = sendevt_alldevice(TDV_SUSPEND, FALSE);",
+"",
+"	/* Suspend processing of disk device */",
+"	ercd = sendevt_alldevice(TDV_SUSPEND, TRUE);",
+"",
+"	/* Stop accepting new requests */",
+"	LockDM();",
+"",
+"	/*",
+"	 * Insert code to transit to suspend state here",
+"	 */",
+"",
+"	/*",
+"	 * Insert code executed on returning from suspend state",
+"	 */",
+"",
+"",
+"	/* Resume accepting requests */",
+"	UnlockDM();",
+"",
+"	/* Resume processing of disk device */",
+"	ercd = sendevt_alldevice(TDV_RESUME, TRUE);",
+"",
+"	/* Resume processing of device except for disks */",
+"	ercd = sendevt_alldevice(TDV_RESUME, FALSE);",
+"",
+"	/* Resume accepting device registration/unregistration */",
+"	UnlockREG();",
+"",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Suspend processing",
+" */",
+"SYSCALL INT tk_sus_dev( UINT mode )",
+"{",
+"	ResCB	*rescb;",
+"	BOOL	suspend = FALSE;",
+"	ER	ercd;",
+"",
+"	/* Get resource management information */",
+"	rescb = knl_GetResCB();",
+"	if ( rescb == NULL ) {",
+"		ercd = E_CTX;",
+"		goto err_ret1;",
+"	}",
+"",
+"	LockDM();",
+"",
+"	switch ( mode & 0xf ) {",
+"	  case TD_SUSPEND:	/* Suspend */",
+"		if ( knl_DisSusCnt > 0 && (mode & TD_FORCE) == 0 ) {",
+"			ercd = E_BUSY;",
+"			goto err_ret2;",
+"		}",
+"		suspend = TRUE;",
+"		break;",
+"",
+"	  case TD_DISSUS:	/* Disable suspend */",
+"		if ( knl_DisSusCnt >= MAX_DISSUS ) {",
+"			ercd = E_QOVR;",
+"			goto err_ret2;",
+"		}",
+"		knl_DisSusCnt++;",
+"		rescb->dissus++;",
+"		break;",
+"	  case TD_ENASUS:	/* Enable suspend */",
+"		if ( rescb->dissus > 0 ) {",
+"			rescb->dissus--;",
+"			knl_DisSusCnt--;",
+"		}",
+"		break;",
+"",
+"	  case TD_CHECK:	/* Get suspend disable request count */",
+"		break;",
+"",
+"	  default:",
+"		ercd = E_PAR;",
+"		goto err_ret2;",
+"	}",
+"",
+"	UnlockDM();",
+"",
+"	if ( suspend ) {",
+"		/* Suspend */",
+"		ercd = do_suspend();",
+"		if ( ercd < E_OK ) {",
+"			goto err_ret1;",
+"		}",
+"	}",
+"",
+"	return knl_DisSusCnt;",
+"",
+"err_ret2:",
+"	UnlockDM();",
+"err_ret1:",
+"	return ercd;",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Device management startup function",
+" */",
+"EXPORT void knl_devmgr_startup( void )",
+"{",
+"	LockDM();",
+"",
+"	/* Initialization of open device management queue */",
+"	QueInit(&(knl_resource_control_block.openq));",
+"	knl_resource_control_block.dissus = 0;",
+"	",
+"	UnlockDM();",
+"",
+"	return;",
+"}",
+"",
+"/*",
+" * Device management cleanup function",
+" */",
+"EXPORT void knl_devmgr_cleanup( void )",
+"{",
+"	OpnCB	*opncb;",
+"",
+"	/* Do nothing if it is not used even once */",
+"	if ( knl_resource_control_block.openq.next == NULL ) {",
+"		return;",
+"	}",
+"",
+"	LockDM();",
+"",
+"	/* Free suspend disable request */",
+"	knl_DisSusCnt -= knl_resource_control_block.dissus;",
+"	knl_resource_control_block.dissus = 0;",
+"",
+"	/* Close all open devices */",
+"	while ( !isQueEmpty(&(knl_resource_control_block.openq)) ) {",
+"		opncb = RESQ_OPNCB(knl_resource_control_block.openq.next);",
+"",
+"		/* Indicate that it is during close processing */",
+"		opncb->resid = 0;",
+"",
+"		UnlockDM();",
+"",
+"		/* Device close processing */",
+"		knl_close_device(opncb, 0);",
+"",
+"		LockDM();",
+"	}",
+"	UnlockDM();",
+"",
+"	return;",
+"}",
+"",
+"/*",
+" * Initialization sequence of device input/output-related",
+" */",
+"EXPORT ER knl_initDevIO( void )",
+"{",
+"	INT	i;",
+"",
+"	QueInit(&knl_FreeOpnCB);",
+"	for ( i = 0; i < MAX_OPNDEV; ++i ) {",
+"		knl_OpnCBtbl[i].resid = 0;",
+"		QueInsert(&knl_OpnCBtbl[i].q, &knl_FreeOpnCB);",
+"	}",
+"",
+"	QueInit(&knl_FreeReqCB);",
+"	for ( i = 0; i < MAX_REQDEV; ++i ) {",
+"		knl_ReqCBtbl[i].opncb = NULL;",
+"		QueInsert(&knl_ReqCBtbl[i].q, &knl_FreeReqCB);",
+"	}",
+"",
+"	return E_OK;",
+"}",
+"",
+"/*",
+" * Finalization sequence of device input/output-related",
+" */",
+"EXPORT ER knl_finishDevIO( void )",
+"{",
+"	return E_OK;",
+"}",
+"",
+"#endif /* USE_DEVICE */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	eventflag.c",
+" *	Event Flag",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"wait.h\"",
+"#include \"check.h\"",
+"#include \"eventflag.h\"",
+"",
+"#if USE_EVENTFLAG == 1",
+"",
+"Noinit(EXPORT FLGCB	knl_flgcb_table[NUM_FLGID]);	/* Event flag control block */",
+"Noinit(EXPORT QUEUE	knl_free_flgcb);	/* FreeQue */",
+"",
+"",
+"/*",
+" * Initialization of event flag control block ",
+" */",
+"EXPORT ER knl_eventflag_initialize( void )",
+"{",
+"	FLGCB	*flgcb, *end;",
+"",
+"	/* Get system information */",
+"	if ( NUM_FLGID < 1 ) {",
+"		return E_SYS;",
+"	}",
+"",
+"	/* Register all control blocks onto FreeQue */",
+"	QueInit(&knl_free_flgcb);",
+"	end = knl_flgcb_table + NUM_FLGID;",
+"	for ( flgcb = knl_flgcb_table; flgcb < end; flgcb++ ) {",
+"		flgcb->flgid = 0;",
+"		QueInsert(&flgcb->wait_queue, &knl_free_flgcb);",
+"	}",
+"",
+"	return E_OK;",
+"}",
+"",
+"/*",
+" * Create event flag",
+" */",
+"SYSCALL ID tk_cre_flg( CONST T_CFLG *pk_cflg )",
+"{",
+"#if CHK_RSATR",
+"	const ATR VALID_FLGATR = {",
+"		 TA_TPRI",
+"		|TA_WMUL",
+"#if USE_OBJECT_NAME",
+"		|TA_DSNAME",
+"#endif",
+"	};",
+"#endif",
+"	FLGCB	*flgcb;",
+"	ID	flgid;",
+"	ER	ercd;",
+"",
+"	CHECK_RSATR(pk_cflg->flgatr, VALID_FLGATR);",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	/* Get control block from FreeQue */",
+"	flgcb = (FLGCB*)QueRemoveNext(&knl_free_flgcb);",
+"	if ( flgcb == NULL ) {",
+"		ercd = E_LIMIT;",
+"	} else {",
+"		flgid = ID_FLG(flgcb - knl_flgcb_table);",
+"",
+"		/* Initialize control block */",
+"		QueInit(&flgcb->wait_queue);",
+"		flgcb->flgid = flgid;",
+"		flgcb->exinf = pk_cflg->exinf;",
+"		flgcb->flgatr = pk_cflg->flgatr;",
+"		flgcb->flgptn = pk_cflg->iflgptn;",
+"#if USE_OBJECT_NAME",
+"		if ( (pk_cflg->flgatr & TA_DSNAME) != 0 ) {",
+"			knl_strncpy((char*)flgcb->name, (char*)pk_cflg->dsname,",
+"				OBJECT_NAME_LENGTH);",
+"		}",
+"#endif",
+"		ercd = flgid;",
+"	}",
+"	END_CRITICAL_SECTION;",
+"",
+"	return ercd;",
+"}",
+"",
+"#ifdef USE_FUNC_TK_DEL_FLG",
+"/*",
+" * Delete event flag",
+" */",
+"SYSCALL ER tk_del_flg( ID flgid )",
+"{",
+"	FLGCB	*flgcb;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_FLGID(flgid);",
+"",
+"	flgcb = get_flgcb(flgid);",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	if ( flgcb->flgid == 0 ) {",
+"		ercd = E_NOEXS;",
+"	} else {",
+"		/* Release wait state of task (E_DLT) */",
+"		knl_wait_delete(&flgcb->wait_queue);",
+"",
+"		/* Return to FreeQue */",
+"		QueInsert(&flgcb->wait_queue, &knl_free_flgcb);",
+"		flgcb->flgid = 0;",
+"	}",
+"	END_CRITICAL_SECTION;",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_FUNC_TK_DEL_FLG */",
+"",
+"/*",
+" * Event flag set",
+" */",
+"SYSCALL ER tk_set_flg( ID flgid, UINT setptn )",
+"{",
+"	FLGCB	*flgcb;",
+"	TCB	*tcb;",
+"	QUEUE	*queue;",
+"	UINT	wfmode, waiptn;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_FLGID(flgid);",
+"",
+"	flgcb = get_flgcb(flgid);",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	if ( flgcb->flgid == 0 ) {",
+"		ercd = E_NOEXS;",
+"		goto error_exit;",
+"	}",
+"",
+"	/* Set event flag */",
+"	flgcb->flgptn |= setptn;",
+"",
+"	/* Search task which should be released */",
+"	queue = flgcb->wait_queue.next;",
+"	while ( queue != &flgcb->wait_queue ) {",
+"		tcb = (TCB*)queue;",
+"		queue = queue->next;",
+"",
+"		/* Meet condition for release wait? */",
+"		waiptn = tcb->winfo.flg.waiptn;",
+"		wfmode = tcb->winfo.flg.wfmode;",
+"		if ( knl_eventflag_cond(flgcb, waiptn, wfmode) ) {",
+"",
+"			/* Release wait */",
+"			*tcb->winfo.flg.p_flgptn = flgcb->flgptn;",
+"			knl_wait_release_ok(tcb);",
+"",
+"			/* Clear event flag */",
+"			if ( (wfmode & TWF_BITCLR) != 0 ) {",
+"				if ( (flgcb->flgptn &= ~waiptn) == 0 ) {",
+"					break;",
+"				}",
+"			}",
+"			if ( (wfmode & TWF_CLR) != 0 ) {",
+"				flgcb->flgptn = 0;",
+"				break;",
+"			}",
+"		}",
+"	}",
+"",
+"    error_exit:",
+"	END_CRITICAL_SECTION;",
+"",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Clear event flag ",
+" */",
+"SYSCALL ER tk_clr_flg( ID flgid, UINT clrptn )",
+"{",
+"	FLGCB	*flgcb;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_FLGID(flgid);",
+"",
+"	flgcb = get_flgcb(flgid);",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	if ( flgcb->flgid == 0 ) {",
+"		ercd = E_NOEXS;",
+"	} else {",
+"		flgcb->flgptn &= clrptn;",
+"	}",
+"	END_CRITICAL_SECTION;",
+"",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Processing if the priority of wait task changes",
+" */",
+"LOCAL void flg_chg_pri( TCB *tcb, INT oldpri )",
+"{",
+"	FLGCB	*flgcb;",
+"",
+"	flgcb = get_flgcb(tcb->wid);",
+"	knl_gcb_change_priority((GCB*)flgcb, tcb);",
+"}",
+"",
+"/*",
+" * Definition of event flag wait specification",
+" */",
+"LOCAL CONST WSPEC knl_wspec_flg_tfifo = { TTW_FLG, NULL, NULL };",
+"LOCAL CONST WSPEC knl_wspec_flg_tpri  = { TTW_FLG, flg_chg_pri, NULL };",
+"",
+"/*",
+" * Event flag wait",
+" */",
+"SYSCALL ER tk_wai_flg( ID flgid, UINT waiptn, UINT wfmode, UINT *p_flgptn, TMO tmout )",
+"{",
+"	FLGCB	*flgcb;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_FLGID(flgid);",
+"	CHECK_PAR(waiptn != 0);",
+"	CHECK_PAR((wfmode & ~(TWF_ORW|TWF_CLR|TWF_BITCLR)) == 0);",
+"	CHECK_TMOUT(tmout);",
+"	CHECK_DISPATCH();",
+"",
+"	flgcb = get_flgcb(flgid);",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	if ( flgcb->flgid == 0 ) {",
+"		ercd = E_NOEXS;",
+"		goto error_exit;",
+"	}",
+"	if ( (flgcb->flgatr & TA_WMUL) == 0 && !isQueEmpty(&flgcb->wait_queue) ) {",
+"		/* Disable multiple tasks wait */",
+"		ercd = E_OBJ;",
+"		goto error_exit;",
+"	}",
+"",
+"	/* Meet condition for release wait? */",
+"	if ( knl_eventflag_cond(flgcb, waiptn, wfmode) ) {",
+"		*p_flgptn = flgcb->flgptn;",
+"",
+"		/* Clear event flag */",
+"		if ( (wfmode & TWF_BITCLR) != 0 ) {",
+"			flgcb->flgptn &= ~waiptn;",
+"		}",
+"		if ( (wfmode & TWF_CLR) != 0 ) {",
+"			flgcb->flgptn = 0;",
+"		}",
+"	} else {",
+"		/* Ready for wait */",
+"		knl_ctxtsk->wspec = ( (flgcb->flgatr & TA_TPRI) != 0 )?",
+"					&knl_wspec_flg_tpri: &knl_wspec_flg_tfifo;",
+"		knl_ctxtsk->wercd = &ercd;",
+"		knl_ctxtsk->winfo.flg.waiptn = waiptn;",
+"		knl_ctxtsk->winfo.flg.wfmode = wfmode;",
+"		knl_ctxtsk->winfo.flg.p_flgptn = p_flgptn;",
+"		knl_gcb_make_wait((GCB*)flgcb, tmout);",
+"	}",
+"",
+"    error_exit:",
+"	END_CRITICAL_SECTION;",
+"",
+"	return ercd;",
+"}",
+"",
+"#ifdef USE_FUNC_TK_REF_FLG",
+"/*",
+" * Check event flag state",
+" */",
+"SYSCALL ER tk_ref_flg( ID flgid, T_RFLG *pk_rflg )",
+"{",
+"	FLGCB	*flgcb;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_FLGID(flgid);",
+"",
+"	flgcb = get_flgcb(flgid);",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	if ( flgcb->flgid == 0 ) {",
+"		ercd = E_NOEXS;",
+"	} else {",
+"		pk_rflg->exinf = flgcb->exinf;",
+"		pk_rflg->wtsk = knl_wait_tskid(&flgcb->wait_queue);",
+"		pk_rflg->flgptn = flgcb->flgptn;",
+"	}",
+"	END_CRITICAL_SECTION;",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_FUNC_TK_REF_FLG */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" *	Debugger support function",
+" */",
+"#if USE_DBGSPT",
+"",
+"#if USE_OBJECT_NAME",
+"/*",
+" * Get object name from control block",
+" */",
+"EXPORT ER knl_eventflag_getname(ID id, UB **name)",
+"{",
+"	FLGCB	*flgcb;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_FLGID(id);",
+"",
+"	BEGIN_DISABLE_INTERRUPT;",
+"	flgcb = get_flgcb(id);",
+"	if ( flgcb->flgid == 0 ) {",
+"		ercd = E_NOEXS;",
+"		goto error_exit;",
+"	}",
+"	if ( (flgcb->flgatr & TA_DSNAME) == 0 ) {",
+"		ercd = E_OBJ;",
+"		goto error_exit;",
+"	}",
+"	*name = flgcb->name;",
+"",
+"    error_exit:",
+"	END_DISABLE_INTERRUPT;",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_OBJECT_NAME */",
+"",
+"#ifdef USE_FUNC_TD_LST_FLG",
+"/*",
+" * Refer event flag usage state",
+" */",
+"SYSCALL INT td_lst_flg( ID list[], INT nent )",
+"{",
+"	FLGCB	*flgcb, *end;",
+"	INT	n = 0;",
+"",
+"	BEGIN_DISABLE_INTERRUPT;",
+"	end = knl_flgcb_table + NUM_FLGID;",
+"	for ( flgcb = knl_flgcb_table; flgcb < end; flgcb++ ) {",
+"		if ( flgcb->flgid == 0 ) {",
+"			continue;",
+"		}",
+"",
+"		if ( n++ < nent ) {",
+"			*list++ = flgcb->flgid;",
+"		}",
+"	}",
+"	END_DISABLE_INTERRUPT;",
+"",
+"	return n;",
+"}",
+"#endif /* USE_FUNC_TD_LST_FLG */",
+"",
+"#ifdef USE_FUNC_TD_REF_FLG",
+"/*",
+" * Refer event flag state",
+" */",
+"SYSCALL ER td_ref_flg( ID flgid, TD_RFLG *pk_rflg )",
+"{",
+"	FLGCB	*flgcb;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_FLGID(flgid);",
+"",
+"	flgcb = get_flgcb(flgid);",
+"",
+"	BEGIN_DISABLE_INTERRUPT;",
+"	if ( flgcb->flgid == 0 ) {",
+"		ercd = E_NOEXS;",
+"	} else {",
+"		pk_rflg->exinf = flgcb->exinf;",
+"		pk_rflg->wtsk = knl_wait_tskid(&flgcb->wait_queue);",
+"		pk_rflg->flgptn = flgcb->flgptn;",
+"	}",
+"	END_DISABLE_INTERRUPT;",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_FUNC_TD_REF_FLG */",
+"",
+"#ifdef USE_FUNC_TD_FLG_QUE",
+"/*",
+" * Refer event flag wait queue",
+" */",
+"SYSCALL INT td_flg_que( ID flgid, ID list[], INT nent )",
+"{",
+"	FLGCB	*flgcb;",
+"	QUEUE	*q;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_FLGID(flgid);",
+"",
+"	flgcb = get_flgcb(flgid);",
+"",
+"	BEGIN_DISABLE_INTERRUPT;",
+"	if ( flgcb->flgid == 0 ) {",
+"		ercd = E_NOEXS;",
+"	} else {",
+"		INT n = 0;",
+"		for ( q = flgcb->wait_queue.next; q != &flgcb->wait_queue; q = q->next ) {",
+"			if ( n++ < nent ) {",
+"				*list++ = ((TCB*)q)->tskid;",
+"			}",
+"		}",
+"		ercd = n;",
+"	}",
+"	END_DISABLE_INTERRUPT;",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_FUNC_TD_FLG_QUE */",
+"",
+"#endif /* USE_DBGSPT */",
+"#endif /* USE_EVENTFLAG */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	eventflag.h",
+" *	Event Flag",
+" */",
+"",
+"#ifndef _EVENTFLAG_H_",
+"#define _EVENTFLAG_H_",
+"",
+"/*",
+" * Event flag control block",
+" */",
+"typedef struct eventflag_control_block {",
+"	QUEUE	wait_queue;	/* Event flag wait queue */",
+"	ID	flgid;		/* Event flag ID */",
+"	void	*exinf;		/* Extended information */",
+"	ATR	flgatr;		/* Event flag attribute */",
+"	UINT	flgptn;		/* Event flag current pattern */",
+"#if USE_OBJECT_NAME",
+"	UB	name[OBJECT_NAME_LENGTH];	/* name */",
+"#endif",
+"} FLGCB;",
+"",
+"IMPORT FLGCB knl_flgcb_table[];	/* Event flag control block */",
+"IMPORT QUEUE knl_free_flgcb;	/* FreeQue */",
+"",
+"#define get_flgcb(id)	( &knl_flgcb_table[INDEX_FLG(id)] )",
+"",
+"",
+"/*",
+" * Check for event flag wait release condition",
+" */",
+"Inline BOOL knl_eventflag_cond( FLGCB *flgcb, UINT waiptn, UINT wfmode )",
+"{",
+"	if ( (wfmode & TWF_ORW) != 0 ) {",
+"		return ( (flgcb->flgptn & waiptn) != 0 );",
+"	} else {",
+"		return ( (flgcb->flgptn & waiptn) == waiptn );",
+"	}",
+"}",
+"",
+"",
+"#endif /* _EVENTFLAG_H_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	int.c",
+" *	Interrupt Control",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"check.h\"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * Interrupt handler definition",
+" */",
+"SYSCALL ER tk_def_int( UINT intno, CONST T_DINT *pk_dint )",
+"{",
+"#if USE_STATIC_IVT",
+"	return E_NOSPT;",
+"#else",
+"	ATR	intatr;",
+"	FP	inthdr;",
+"	ER	ercd;",
+"",
+"	CHECK_PAR(intno < N_INTVEC);",
+"	if(pk_dint != NULL) {",
+"		CHECK_RSATR(pk_dint->intatr, TA_HLNG|TA_ASM);",
+"		intatr	= pk_dint->intatr;",
+"		inthdr	= pk_dint->inthdr;",
+"	} else {",
+"		intatr	= 0;",
+"		inthdr	= NULL;",
+"	}",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	ercd = knl_define_inthdr(intno, intatr, inthdr);",
+"	END_CRITICAL_SECTION;",
+"",
+"	return ercd;",
+"#endif",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" * return Interrupt handler",
+" */",
+"SYSCALL void tk_ret_int( void )",
+"{",
+"	knl_return_inthdr();",
+"	return;",
+"}",
+"",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"/*",
+" *	klock.c		Kernel Lock",
+" *	Locked task is the highest run priority.",
+" *	Unable to nest lock.",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"klock.h\"",
+"#include \"ready_queue.h\"",
+"",
+"/*",
+" * Object lock",
+" *	Do not call from critical section",
+" */",
+"EXPORT void knl_LockOBJ( OBJLOCK *loc )",
+"{",
+"	BOOL	klocked;",
+"",
+"  retry:",
+"	BEGIN_CRITICAL_SECTION;",
+"	klocked = knl_ctxtsk->klocked;",
+"	if ( !klocked ) {",
+"		if ( loc->wtskq.next == NULL ) {",
+"			/* Lock */",
+"			QueInit(&loc->wtskq);",
+"",
+"			knl_ctxtsk->klocked = klocked = TRUE;",
+"			knl_ready_queue.klocktsk = knl_ctxtsk;",
+"		} else {",
+"			/* Ready for lock */",
+"			knl_ready_queue_delete(&knl_ready_queue, knl_ctxtsk);",
+"			knl_ctxtsk->klockwait = TRUE;",
+"			QueInsert(&knl_ctxtsk->tskque, &loc->wtskq);",
+"",
+"			knl_schedtsk = knl_ready_queue_top(&knl_ready_queue);",
+"		}",
+"	}",
+"	END_CRITICAL_SECTION;",
+"	/* Since wait could be freed without getting lock, ",
+"	   need to re-try if lock is not got */",
+"	if ( !klocked ) {",
+"		goto retry;",
+"	}",
+"}",
+"",
+"/*",
+" * Object unlock",
+" *	It may be called from a critical section.",
+" */",
+"EXPORT void knl_UnlockOBJ( OBJLOCK *loc )",
+"{",
+"	TCB	*tcb;",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	knl_ctxtsk->klocked = FALSE;",
+"	knl_ready_queue.klocktsk = NULL;",
+"",
+"	tcb = (TCB*)QueRemoveNext(&loc->wtskq);",
+"	if ( tcb == NULL ) {",
+"		/* Free lock */",
+"		loc->wtskq.next = NULL;",
+"	} else {",
+"		/* Wake lock wait task */",
+"		tcb->klockwait = FALSE;",
+"		tcb->klocked = TRUE;",
+"		knl_ready_queue_insert_top(&knl_ready_queue, tcb);",
+"	}",
+"",
+"	knl_schedtsk = knl_ready_queue_top(&knl_ready_queue);",
+"	END_CRITICAL_SECTION;",
+"}",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"/*",
+" *	klock.h		Kernel Lock",
+" *	Locked task is the highest run priority.",
+" *	Unable to nest lock.",
+" */",
+"",
+"#ifndef _KLOCK_",
+"#define _KLOCK_",
+"",
+"typedef struct objlock {",
+"	QUEUE		wtskq;		/* Wait task queue */",
+"} OBJLOCK;",
+"",
+"Inline void knl_InitOBJLOCK( OBJLOCK *loc )",
+"{",
+"	loc->wtskq.next = NULL;",
+"}",
+"IMPORT void knl_LockOBJ( OBJLOCK* );",
+"IMPORT void knl_UnlockOBJ( OBJLOCK* );",
+"",
+"Inline BOOL knl_isLockedOBJ( OBJLOCK *loc )",
+"{",
+"	return ( loc->wtskq.next != NULL )? TRUE: FALSE;",
+"}",
+"",
+"#endif /* KLOCK */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	mailbox.c",
+" *	Mailbox",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"wait.h\"",
+"#include \"check.h\"",
+"#include \"mailbox.h\"",
+"",
+"#if USE_MAILBOX == 1",
+"",
+"Noinit(EXPORT MBXCB	knl_mbxcb_table[NUM_MBXID]);	/* Mailbox control block */",
+"Noinit(EXPORT QUEUE	knl_free_mbxcb);	/* FreeQue */",
+"",
+"",
+"/*",
+" * Initialization of mailbox control block ",
+" */",
+"EXPORT ER knl_mailbox_initialize( void )",
+"{",
+"	MBXCB	*mbxcb, *end;",
+"",
+"	/* Get system information */",
+"	if ( NUM_MBXID < 1 ) {",
+"		return E_SYS;",
+"	}",
+"",
+"	/* Register all control blocks onto FreeQue */",
+"	QueInit(&knl_free_mbxcb);",
+"	end = knl_mbxcb_table + NUM_MBXID;",
+"	for ( mbxcb = knl_mbxcb_table; mbxcb < end; mbxcb++ ) {",
+"		mbxcb->mbxid = 0;",
+"		QueInsert(&mbxcb->wait_queue, &knl_free_mbxcb);",
+"	}",
+"",
+"	return E_OK;",
+"}",
+"",
+"",
+"/*",
+" * Create mailbox",
+" */",
+"SYSCALL ID tk_cre_mbx( CONST T_CMBX *pk_cmbx )",
+"{",
+"#if CHK_RSATR",
+"	const ATR VALID_MBXATR = {",
+"		 TA_MPRI",
+"		|TA_TPRI",
+"#if USE_OBJECT_NAME",
+"		|TA_DSNAME",
+"#endif",
+"	};",
+"#endif",
+"	MBXCB	*mbxcb;",
+"	ID	mbxid;",
+"	ER	ercd;",
+"",
+"	CHECK_RSATR(pk_cmbx->mbxatr, VALID_MBXATR);",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	/* Get control block from FreeQue */",
+"	mbxcb = (MBXCB*)QueRemoveNext(&knl_free_mbxcb);",
+"	if ( mbxcb == NULL ) {",
+"		ercd = E_LIMIT;",
+"	} else {",
+"		mbxid = ID_MBX(mbxcb - knl_mbxcb_table);",
+"",
+"		/* Initialize control block */",
+"		QueInit(&mbxcb->wait_queue);",
+"		mbxcb->mbxid  = mbxid;",
+"		mbxcb->exinf  = pk_cmbx->exinf;",
+"		mbxcb->mbxatr = pk_cmbx->mbxatr;",
+"		mbxcb->mq_head.msgque[0] = NULL;",
+"#if USE_OBJECT_NAME",
+"		if ( (pk_cmbx->mbxatr & TA_DSNAME) != 0 ) {",
+"			knl_strncpy((char*)mbxcb->name, (char*)pk_cmbx->dsname,",
+"				OBJECT_NAME_LENGTH);",
+"		}",
+"#endif",
+"		ercd = mbxid;",
+"	}",
+"	END_CRITICAL_SECTION;",
+"",
+"	return ercd;",
+"}",
+"",
+"#ifdef USE_FUNC_TK_DEL_MBX",
+"/*",
+" * Delete mailbox",
+" */",
+"SYSCALL ER tk_del_mbx( ID mbxid )",
+"{",
+"	MBXCB	*mbxcb;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_MBXID(mbxid);",
+"",
+"	mbxcb = get_mbxcb(mbxid);",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	if ( mbxcb->mbxid == 0 ) {",
+"		ercd = E_NOEXS;",
+"	} else {",
+"		/* Release wait state of task (E_DLT) */",
+"		knl_wait_delete(&mbxcb->wait_queue);",
+"",
+"		/* Return to FreeQue */",
+"		QueInsert(&mbxcb->wait_queue, &knl_free_mbxcb);",
+"		mbxcb->mbxid = 0;",
+"	}",
+"	END_CRITICAL_SECTION;",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_FUNC_TK_DEL_MBX */",
+"",
+"/*",
+" * Send to mailbox",
+" */",
+"SYSCALL ER tk_snd_mbx( ID mbxid, T_MSG *pk_msg )",
+"{",
+"	MBXCB	*mbxcb;",
+"	TCB	*tcb;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_MBXID(mbxid);",
+"",
+"	mbxcb = get_mbxcb(mbxid);",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	if (mbxcb->mbxid == 0) {",
+"		ercd = E_NOEXS;",
+"		goto error_exit;",
+"	}",
+"",
+"	if ( (mbxcb->mbxatr & TA_MPRI) != 0 ) {",
+"		if ( ((T_MSG_PRI*)pk_msg)->msgpri <= 0 ) {",
+"			ercd = E_PAR;",
+"			goto error_exit;",
+"		}",
+"	}",
+"",
+"	if ( !isQueEmpty(&mbxcb->wait_queue) ) {",
+"		/* Directly send to receive wait task */",
+"		tcb = (TCB*)(mbxcb->wait_queue.next);",
+"		*tcb->winfo.mbx.ppk_msg = pk_msg;",
+"		knl_wait_release_ok(tcb);",
+"",
+"	} else {",
+"		/* Connect message to queue */",
+"		if ( (mbxcb->mbxatr & TA_MPRI) != 0 ) {",
+"			/* Connect message to queue following priority */",
+"			knl_queue_insert_mpri((T_MSG_PRI*)pk_msg, &mbxcb->mq_head);",
+"		} else {",
+"			/* Connect to end of queue */",
+"			nextmsg(pk_msg) = NULL;",
+"			if ( headmsg(mbxcb) == NULL ) {",
+"				headmsg(mbxcb) = pk_msg;",
+"			} else {",
+"				nextmsg(mbxcb->mq_tail) = pk_msg;",
+"			}",
+"			mbxcb->mq_tail = pk_msg;",
+"		}",
+"	}",
+"",
+"    error_exit:",
+"	END_CRITICAL_SECTION;",
+"",
+"	return ercd;",
+"}",
+"",
+"/*",
+" * Processing if the priority of wait task changes",
+" */",
+"LOCAL void mbx_chg_pri( TCB *tcb, INT oldpri )",
+"{",
+"	MBXCB	*mbxcb;",
+"",
+"	mbxcb = get_mbxcb(tcb->wid);",
+"	knl_gcb_change_priority((GCB*)mbxcb, tcb);",
+"}",
+"",
+"/*",
+" * Definition of mailbox wait specification",
+" */",
+"LOCAL CONST WSPEC knl_wspec_mbx_tfifo = { TTW_MBX, NULL, NULL };",
+"LOCAL CONST WSPEC knl_wspec_mbx_tpri  = { TTW_MBX, mbx_chg_pri, NULL };",
+"",
+"/*",
+" * Receive from mailbox",
+" */",
+"SYSCALL ER tk_rcv_mbx( ID mbxid, T_MSG **ppk_msg, TMO tmout )",
+"{",
+"	MBXCB	*mbxcb;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_MBXID(mbxid);",
+"	CHECK_TMOUT(tmout);",
+"	CHECK_DISPATCH();",
+"",
+"	mbxcb = get_mbxcb(mbxid);",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	if ( mbxcb->mbxid == 0 ) {",
+"		ercd = E_NOEXS;",
+"		goto error_exit;",
+"	}",
+"",
+"	if ( headmsg(mbxcb) != NULL ) {",
+"		/* Get message from head of queue */",
+"		*ppk_msg = headmsg(mbxcb);",
+"		headmsg(mbxcb) = nextmsg(*ppk_msg);",
+"	} else {",
+"		/* Ready for receive wait */",
+"		knl_ctxtsk->wspec = ( (mbxcb->mbxatr & TA_TPRI) != 0 )?",
+"					&knl_wspec_mbx_tpri: &knl_wspec_mbx_tfifo;",
+"		knl_ctxtsk->wercd = &ercd;",
+"		knl_ctxtsk->winfo.mbx.ppk_msg = ppk_msg;",
+"		knl_gcb_make_wait((GCB*)mbxcb, tmout);",
+"	}",
+"",
+"    error_exit:",
+"	END_CRITICAL_SECTION;",
+"",
+"	return ercd;",
+"}",
+"",
+"#ifdef USE_FUNC_TK_REF_MBX",
+"/*",
+" * Refer mailbox state ",
+" */",
+"SYSCALL ER tk_ref_mbx( ID mbxid, T_RMBX *pk_rmbx )",
+"{",
+"	MBXCB	*mbxcb;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_MBXID(mbxid);",
+"",
+"	mbxcb = get_mbxcb(mbxid);",
+"",
+"	BEGIN_CRITICAL_SECTION;",
+"	if ( mbxcb->mbxid == 0 ) {",
+"		ercd = E_NOEXS;",
+"	} else {",
+"		pk_rmbx->exinf = mbxcb->exinf;",
+"		pk_rmbx->wtsk = knl_wait_tskid(&mbxcb->wait_queue);",
+"		pk_rmbx->pk_msg = headmsg(mbxcb);",
+"	}",
+"	END_CRITICAL_SECTION;",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_FUNC_TK_REF_MBX */",
+"",
+"/* ------------------------------------------------------------------------ */",
+"/*",
+" *	Debugger support function",
+" */",
+"#if USE_DBGSPT",
+"",
+"#if USE_OBJECT_NAME",
+"/*",
+" * Get object name from control block",
+" */",
+"EXPORT ER knl_mailbox_getname(ID id, UB **name)",
+"{",
+"	MBXCB	*mbxcb;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_MBXID(id);",
+"",
+"	BEGIN_DISABLE_INTERRUPT;",
+"	mbxcb = get_mbxcb(id);",
+"	if ( mbxcb->mbxid == 0 ) {",
+"		ercd = E_NOEXS;",
+"		goto error_exit;",
+"	}",
+"	if ( (mbxcb->mbxatr & TA_DSNAME) == 0 ) {",
+"		ercd = E_OBJ;",
+"		goto error_exit;",
+"	}",
+"	*name = mbxcb->name;",
+"",
+"    error_exit:",
+"	END_DISABLE_INTERRUPT;",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_OBJECT_NAME */",
+"",
+"#ifdef USE_FUNC_TD_LST_MBX",
+"/*",
+" * Refer mailbox usage state",
+" */",
+"SYSCALL INT td_lst_mbx( ID list[], INT nent )",
+"{",
+"	MBXCB	*mbxcb, *end;",
+"	INT	n = 0;",
+"",
+"	BEGIN_DISABLE_INTERRUPT;",
+"	end = knl_mbxcb_table + NUM_MBXID;",
+"	for ( mbxcb = knl_mbxcb_table; mbxcb < end; mbxcb++ ) {",
+"		if ( mbxcb->mbxid == 0 ) {",
+"			continue;",
+"		}",
+"",
+"		if ( n++ < nent ) {",
+"			*list++ = mbxcb->mbxid;",
+"		}",
+"	}",
+"	END_DISABLE_INTERRUPT;",
+"",
+"	return n;",
+"}",
+"#endif /* USE_FUNC_TD_LST_MBX */",
+"",
+"#ifdef USE_FUNC_TD_REF_MBX",
+"/*",
+" * Refer mailbox state",
+" */",
+"SYSCALL ER td_ref_mbx( ID mbxid, TD_RMBX *pk_rmbx )",
+"{",
+"	MBXCB	*mbxcb;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_MBXID(mbxid);",
+"",
+"	mbxcb = get_mbxcb(mbxid);",
+"",
+"	BEGIN_DISABLE_INTERRUPT;",
+"	if ( mbxcb->mbxid == 0 ) {",
+"		ercd = E_NOEXS;",
+"	} else {",
+"		pk_rmbx->exinf = mbxcb->exinf;",
+"		pk_rmbx->wtsk = knl_wait_tskid(&mbxcb->wait_queue);",
+"		pk_rmbx->pk_msg = headmsg(mbxcb);",
+"	}",
+"	END_DISABLE_INTERRUPT;",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_FUNC_TD_REF_MBX */",
+"",
+"#ifdef USE_FUNC_TD_MBX_QUE",
+"/*",
+" * Refer mailbox wait queue",
+" */",
+"SYSCALL INT td_mbx_que( ID mbxid, ID list[], INT nent )",
+"{",
+"	MBXCB	*mbxcb;",
+"	QUEUE	*q;",
+"	ER	ercd = E_OK;",
+"",
+"	CHECK_MBXID(mbxid);",
+"",
+"	mbxcb = get_mbxcb(mbxid);",
+"",
+"	BEGIN_DISABLE_INTERRUPT;",
+"	if ( mbxcb->mbxid == 0 ) {",
+"		ercd = E_NOEXS;",
+"	} else {",
+"		INT n = 0;",
+"		for ( q = mbxcb->wait_queue.next; q != &mbxcb->wait_queue; q = q->next ) {",
+"			if ( n++ < nent ) {",
+"				*list++ = ((TCB*)q)->tskid;",
+"			}",
+"		}",
+"		ercd = n;",
+"	}",
+"	END_DISABLE_INTERRUPT;",
+"",
+"	return ercd;",
+"}",
+"#endif /* USE_FUNC_TD_MBX_QUE */",
+"",
+"#endif /* USE_DBGSPT */",
+"#endif /* USE_MAILBOX */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	mailbox.h",
+" *	Mailbox",
+" */",
+"",
+"#ifndef _MAILBOX_H_",
+"#define _MAILBOX_H_",
+"/*",
+" * Mailbox control block",
+" *",
+" *	'mq_head' is the first message queue pointer that",
+" *	points a message.",
+" *	It is NULL if the message queue is empty.",
+" *	'mq_tail' is a pointer that points end of message",
+" *	queue that is not empty.",
+" *	The message queue value is not guaranteed if the",
+" *	message queue is empty.",
+" *	It is used only if the message queue is FIFO (TA_MFIFO).",
+" */",
+"typedef struct mailbox_control_block {",
+"	QUEUE	wait_queue;	/* Mailbox wait queue */",
+"	ID	mbxid;		/* Mailbox ID */",
+"	void	*exinf;		/* Extended information */",
+"	ATR	mbxatr;		/* Mailbox attribute */",
+"	T_MSG	mq_head;	/* Head of message queue */",
+"	T_MSG	*mq_tail;	/* End of message queue */",
+"#if USE_OBJECT_NAME",
+"	UB	name[OBJECT_NAME_LENGTH];	/* name */",
+"#endif",
+"} MBXCB;",
+"",
+"IMPORT MBXCB knl_mbxcb_table[];	/* Mailbox control block */",
+"IMPORT QUEUE knl_free_mbxcb;	/* FreeQue */",
+"",
+"#define get_mbxcb(id)	( &knl_mbxcb_table[INDEX_MBX(id)] )",
+"",
+"/*",
+" * Head message",
+" */",
+"#define headmsg(mbxcb)	( (mbxcb)->mq_head.msgque[0] )",
+"",
+"/*",
+" * Next message",
+" */",
+"#define nextmsg(msg)	( ((T_MSG*)(msg))->msgque[0] )",
+"",
+"/*",
+" * Insert a message queue following priority",
+" */",
+"Inline void knl_queue_insert_mpri( T_MSG_PRI *pk_msg, T_MSG *head )",
+"{",
+"	T_MSG_PRI	*msg;",
+"	T_MSG		*prevmsg = head;",
+"",
+"	while ( (msg = (T_MSG_PRI*)nextmsg(prevmsg)) != NULL ) {",
+"		if ( msg->msgpri > pk_msg->msgpri ) {",
+"			break;",
+"		}",
+"		prevmsg = (T_MSG*)msg;",
+"	}",
+"	nextmsg(pk_msg) = msg;",
+"	nextmsg(prevmsg) = pk_msg;",
+"}",
+"",
+"#endif /* _MAILBOX_H_ */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.02",
+" *",
+" *    Copyright (C) 2006-2020 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.2.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2020/10/21 .",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	memory.c",
+" *	In-kernel dynamic memory management",
+" */",
+"",
+"#include \"kernel.h\"",
+"#include \"memory.h\"",
+"",
+"/*",
+" * FreeQue search",
+" *	Search the free area whose size is equal to 'blksz',",
+" *	or larger than",
+" *      'blksz' but closest.",
+" *	If it does not exist, return '&imacb->freeque'.",
+" */",
+"EXPORT QUEUE* knl_searchFreeArea( IMACB *imacb, W blksz )",
+"{",
+"	QUEUE	*q = &imacb->freeque;",
+"",
+"	/* For area whose memory pool size is less than 1/4,",
+"	   search from smaller size.",
+"	   Otherwise, search from larger size. */",
+"	if ( blksz > imacb->memsz / 4 ) {",
+"		/* Search from larger size. */",
+"		W fsz = 0;",
+"		while ( (q = q->prev) != &imacb->freeque ) {",
+"			fsz = FreeSize(q);",
+"			if ( fsz <= blksz ) {",
+"				return ( fsz < blksz )? q->next: q;",
+"			}",
+"		}",
+"		return ( fsz >= blksz )? q->next: q;",
+"	} else {",
+"		/* Search from smaller size. */",
+"		while ( (q = q->next) != &imacb->freeque ) {",
+"			if ( FreeSize(q) >= blksz ) {",
+"				break;",
+"			}",
+"		}",
+"		return q;",
+"	}",
+"}",
+"",
+"",
+"/*",
+" * Registration of free area on FreeQue",
+" *	FreeQue is composed of 2 types: Queue that links the",
+" *	different size of areas by size and queue that links the",
+" *	same size of areas.",
+" *",
+" *	freeque",
+" *	|",
+" *	|   +-----------------------+	    +-----------------------+",
+" *	|   | AreaQue		    |	    | AreaQue		    |",
+" *	|   +-----------------------+	    +-----------------------+",
+" *	*---> FreeQue Size order    |	    | EmptyQue		    |",
+" *	|   | FreeQue Same size   --------->| FreeQue Same size   ----->",
+" *	|   |			    |	    |			    |",
+" *	|   |			    |	    |			    |",
+" *	|   +-----------------------+	    +-----------------------+",
+" *	|   | AreaQue		    |	    | AreaQue		    |",
+" *	v   +-----------------------+	    +-----------------------+",
+" */",
+"EXPORT void knl_appendFreeArea( IMACB *imacb, QUEUE *aq )",
+"{",
+"	QUEUE	*fq;",
+"	W	size = AreaSize(aq);",
+"",
+"	/* Registration position search */",
+"	/*  Search the free area whose size is equal to 'blksz',",
+"	 *  or larger than 'blksz' but closest.",
+"	 *  If it does not exist, return '&imacb->freeque'.",
+"	 */",
+"	fq = knl_searchFreeArea(imacb, size);",
+"",
+"	/* Register */",
+"	clrAreaFlag(aq, AREA_USE);",
+"	if ( fq != &imacb->freeque && FreeSize(fq) == size ) {",
+"		/* FreeQue Same size */",
+"		(aq + 2)->next = (fq + 1)->next;",
+"		(fq + 1)->next = aq + 2;",
+"		(aq + 2)->prev = fq + 1;",
+"		if( (aq + 2)->next != NULL ) {",
+"			(aq + 2)->next->prev = aq + 2;",
+"		}",
+"		(aq + 1)->next = NULL;",
+"	} else {",
+"		/* FreeQue Size order */",
+"		QueInsert(aq + 1, fq);",
+"		(aq + 2)->next = NULL;",
+"		(aq + 2)->prev = (QUEUE*)size;",
+"	}",
+"}",
+"",
+"/*",
+" * Delete from FreeQue",
+" */",
+"EXPORT void knl_removeFreeQue( QUEUE *fq )",
+"{",
+"	if ( fq->next == NULL ) {	/* FreeQue Same size */",
+"		(fq + 1)->prev->next = (fq + 1)->next;",
+"		if ( (fq + 1)->next != NULL ) {",
+"			(fq + 1)->next->prev = (fq + 1)->prev;",
+"		}",
+"	} else {			/* FreeQue Size order */",
+"		if ( (fq + 1)->next != NULL ) {		/* having FreeQue Same size */",
+"			QueInsert((fq + 1)->next - 1, fq);",
+"			(fq + 1)->next->prev = (fq + 1)->prev;",
+"		}",
+"		QueRemove(fq);",
+"	}",
+"}",
+"",
+"/*",
+" * Register area",
+" *	Insert 'ent' just after 'que.'",
+" */",
+"EXPORT void knl_insertAreaQue( QUEUE *que, QUEUE *ent )",
+"{",
+"	ent->prev = que;",
+"	ent->next = que->next;",
+"	Assign(que->next->prev, ent);",
+"	que->next = ent;",
+"}",
+"",
+"/*",
+" * Delete area",
+" */",
+"EXPORT void knl_removeAreaQue( QUEUE *aq )",
+"{",
+"	Mask(aq->prev)->next = aq->next;",
+"	Assign(aq->next->prev, Mask(aq->prev));",
+"}",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"#if USE_IMALLOC",
+"/* ------------------------------------------------------------------------ */",
+"",
+"Noinit(EXPORT IMACB *knl_imacb);",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * Memory allocate",
+" */",
+"EXPORT void* knl_Imalloc( SZ size )",
+"{",
+"	QUEUE	*q, *aq, *aq2;",
+"	UINT	imask;",
+"",
+"	/* If it is smaller than the minimum fragment size,",
+"	   allocate the minimum size to it. */",
+"	if( size <= 0 ) {",
+"		return (void *)NULL;",
+"	} else 	if ( size < MIN_FRAGMENT ) {",
+"		size = MIN_FRAGMENT;",
+"	} else {",
+"		size = ROUND(size);",
+"	}",
+"",
+"	DI(imask);  /* Exclusive control by interrupt disable */",
+"",
+"	/* Search FreeQue */",
+"	q = knl_searchFreeArea(knl_imacb, size);",
+"	if ( q == &(knl_imacb->freeque) ) {",
+"		q = NULL; /* Insufficient memory */",
+"		goto err_ret;",
+"	}",
+"",
+"	/* There is free area: Split from FreeQue once */",
+"	knl_removeFreeQue(q);",
+"",
+"	aq = q - 1;",
+"",
+"	/* If there are fragments smaller than the minimum fragment size,",
+"	   allocate them also */",
+"	if ( FreeSize(q) - size >= MIN_FRAGMENT + sizeof(QUEUE) ) {",
+"",
+"		/* Divide area into 2 */",
+"		aq2 = (QUEUE*)((VB*)(aq + 1) + size);",
+"		knl_insertAreaQue(aq, aq2);",
+"",
+"		/* Register remaining area to FreeQue */",
+"		knl_appendFreeArea(knl_imacb, aq2);",
+"	}",
+"	setAreaFlag(aq, AREA_USE);",
+"",
+"err_ret:",
+"	EI(imask);",
+"",
+"	return (void *)q;",
+"}",
+"",
+"/*",
+" * Memory allocate  and clear",
+" */",
+"EXPORT void* knl_Icalloc( SZ nmemb, SZ size )",
+"{",
+"	SZ	sz = nmemb * size;",
+"	void	*mem;",
+"",
+"	mem = knl_Imalloc(sz);",
+"	if ( mem == NULL ) {",
+"		return NULL;",
+"	}",
+"",
+"	knl_memset(mem, 0, sz);",
+"",
+"	return mem;",
+"}",
+"",
+"",
+"/*",
+" * Memory allocation size change",
+" */",
+"EXPORT void* knl_Irealloc( void *ptr, SZ size )",
+"{",
+"	void	*newptr;",
+"	QUEUE	*aq;",
+"	SZ	oldsz;",
+"",
+"	if(size != 0) {",
+"		newptr = knl_Imalloc(size);",
+"		if(newptr == NULL) {",
+"			return NULL;",
+"		}",
+"	} else {",
+"		newptr = NULL;",
+"	}",
+"",
+"	if(ptr != NULL) {",
+"		if(newptr != NULL) {",
+"			aq = (QUEUE*)ptr - 1;",
+"			oldsz = (SZ)AreaSize(aq);",
+"			knl_memcpy(newptr, ptr, (size > oldsz)?oldsz:size);",
+"		}",
+"		knl_Ifree(ptr);",
+"	}",
+"",
+"	return newptr;",
+"}",
+"",
+"",
+"/*",
+" * Free memory",
+" */",
+"EXPORT void  knl_Ifree( void *ptr )",
+"{",
+"	QUEUE	*aq;",
+"	UINT	imask;",
+"",
+"	DI(imask);  /* Exclusive control by interrupt disable */",
+"",
+"	aq = (QUEUE*)ptr - 1;",
+"	clrAreaFlag(aq, AREA_USE);",
+"",
+"	if ( !chkAreaFlag(aq->next, AREA_USE) ) {",
+"		/* Merge with free area in after location */",
+"		knl_removeFreeQue(aq->next + 1);",
+"		knl_removeAreaQue(aq->next);",
+"	}",
+"",
+"	if ( !chkAreaFlag(aq->prev, AREA_USE) ) {",
+"		/* Merge with free area in front location */",
+"		aq = aq->prev;",
+"		knl_removeFreeQue(aq + 1);",
+"		knl_removeAreaQue(aq->next);",
+"	}",
+"",
+"	knl_appendFreeArea(knl_imacb, aq);",
+"",
+"	EI(imask);",
+"}",
+"",
+"",
+"/* ------------------------------------------------------------------------ */",
+"",
+"/*",
+" * IMACB Initialization ",
+" */",
+"LOCAL void initIMACB( void )",
+"{",
+"	QueInit(&(knl_imacb->areaque));",
+"	QueInit(&(knl_imacb->freeque));",
+"}",
+"",
+"/*",
+" * Imalloc initial setting ",
+" */",
+"EXPORT ER knl_init_Imalloc( void )",
+"{",
+"	QUEUE	*top, *end;",
+"",
+"	/* Align top with 4 byte unit alignment for IMACB */",
+"	knl_lowmem_top = (void *)(((UW)knl_lowmem_top + 3) & ~0x00000003UL);",
+"	knl_imacb = (IMACB*)knl_lowmem_top;",
+"	knl_lowmem_top = (void *)((UW)knl_lowmem_top + sizeof(IMACB));",
+"",
+"	/* Align top with 8 byte unit alignment */",
+"	knl_lowmem_top = (void *)(((UW)knl_lowmem_top + 7) & ~0x00000007UL);",
+"	top = (QUEUE*)knl_lowmem_top;",
+"	knl_imacb->memsz = (W)((UW)knl_lowmem_limit - (UW)knl_lowmem_top - sizeof(QUEUE)*2);",
+"",
+"	knl_lowmem_top = knl_lowmem_limit;  /* Update memory free space */",
+"",
+"	initIMACB();",
+"",
+"	/* Register on AreaQue */",
+"	end = (QUEUE*)((VB*)top + knl_imacb->memsz) + 1;",
+"	knl_insertAreaQue(&knl_imacb->areaque, end);",
+"	knl_insertAreaQue(&knl_imacb->areaque, top);",
+"	setAreaFlag(end, AREA_USE);",
+"	setAreaFlag(&knl_imacb->areaque, AREA_USE);",
+"",
+"	knl_appendFreeArea(knl_imacb, top);",
+"",
+"	return E_OK;",
+"}",
+"",
+"#endif /* USE_IMALLOC */",
+"/*",
+" *----------------------------------------------------------------------",
+" *    micro T-Kernel 3.00.00",
+" *",
+" *    Copyright (C) 2006-2019 by Ken Sakamura.",
+" *    This software is distributed under the T-License 2.1.",
+" *----------------------------------------------------------------------",
+" *",
+" *    Released by TRON Forum(http://www.tron.org) at 2019/12/11.",
+" *",
+" *----------------------------------------------------------------------",
+" */",
+"",
+"/*",
+" *	memory.h",
+" *	In-kernel dynamic memory management",
+" */",
+"",
+"#ifndef _MEMORY_H_",
+"#define _MEMORY_H_",
+"",
+"#include \"limits.h\"",
+"",
+"/*",
+" * Memory allocation management information",
+" *",
+" *  Order of members must not be changed because members are used",
+" *  with casting from MPLCB.",
+" */",
+"typedef struct {",
+"	W		memsz;",
+"",
+"	/* AreaQue for connecting each area where reserved pages are",
+"	   divided Sort in ascending order of addresses in a page.",
+"	   Do not sort between pages. */",
+"	QUEUE		areaque;",
+"	/* FreeQue for connecting unused area in reserved pages",
+"	   Sort from small to large free spaces. */",
+"	QUEUE		freeque;",
+"} IMACB;",
+"",
+"/*",
+" * Compensation for aligning \"&areaque\" position to 2 bytes border",
+" */",
+"#define AlignIMACB(imacb)	( (IMACB*)((UW)(imacb) & ~0x00000001UL) )",
+"",
+"/*",
+" * Minimum unit of subdivision",
+" *	The lower 1 bit of address is always 0",
+" *	because memory is allocated by ROUNDSZ.",
+" *	AreaQue uses the lower 1 bit for flag.",
+" */",
+"#define ROUNDSZ		( sizeof(QUEUE) )	/* 8 bytes */",
+"#define ROUND(sz)	( ((UW)(sz) + (UW)(ROUNDSZ-1)) & ~(UW)(ROUNDSZ-1) )",
+"",
+"/* Minimum fragment size */",
+"#define MIN_FRAGMENT	( sizeof(QUEUE) * 2 )",
+"",
+"/*",
+" * Maximum allocatable size (to check for parameter)",
+" */",
+"#define	MAX_ALLOCATE	( INT_MAX & ~(ROUNDSZ-1) )",
+"",
+"/*",
+" * Adjusting the size which can be allocated ",
+" */",
+"Inline W roundSize( W sz )",
+"{",
+"	if ( sz < (W)MIN_FRAGMENT ) {",
+"		sz = (W)MIN_FRAGMENT;",
+"	}",
+"	return (W)(((UW)sz + (UW)(ROUNDSZ-1)) & ~(UW)(ROUNDSZ-1));",
+"}",
+"",
+"",
+"/*",
+" * Flag that uses the lower bits of AreaQue's 'prev'.",
+" */",
+"#define AREA_USE	0x00000001UL	/* In-use */",
+"#define AREA_MASK	0x00000001UL",
+"",
+"#define setAreaFlag(q, f)   ( (q)->prev = (QUEUE*)((UW)(q)->prev |  (UW)(f)) )",
+"#define clrAreaFlag(q, f)   ( (q)->prev = (QUEUE*)((UW)(q)->prev & ~(UW)(f)) )",
+"#define chkAreaFlag(q, f)   ( ((UW)(q)->prev & (UW)(f)) != 0 )",
+"",
+"#define Mask(x)		( (QUEUE*)((UW)(x) & ~AREA_MASK) )",
+"#define Assign(x, y)	( (x) = (QUEUE*)(((UW)(x) & AREA_MASK) | (UW)(y)) )",
+"/*",
+" * Area size",
+" */",
+"#define AreaSize(aq)	( (VB*)(aq)->next - (VB*)((aq) + 1) )",
+"#define FreeSize(fq)	( (W)((fq) + 1)->prev )",
+"",
+"",
+"IMPORT QUEUE* knl_searchFreeArea( IMACB *imacb, W blksz );",
+"IMPORT void knl_appendFreeArea( IMACB *imacb, QUEUE *aq );",
+"IMPORT void knl_removeFreeQue( QUEUE *fq );",
+"IMPORT void knl_insertAreaQue( QUEUE *que, QUEUE *ent );",
+"IMPORT void knl_removeAreaQue( QUEUE *aq );",
+"",
+"IMPORT IMACB *knl_imacb;",
+"",
+"#endif /* _MEMORY_H_ */",
+#endif
+};
diff --git a/app_program/font.h b/app_program/font.h
new file mode 100644
index 0000000..b1ec013
--- /dev/null
+++ b/app_program/font.h
@@ -0,0 +1,112 @@
+#ifndef _inc_font
+#define _inc_font
+
+/*
+ * Format
+ * <height>, <width>, <additional spacing per char>, 
+ * <first ascii char>, <last ascii char>,
+ * <data>
+ */
+const uint8_t font_prm[] = {
+		8, 5, 1, 32, 126
+};
+const uint8_t font_8x5[] =
+{
+			0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x5F, 0x00, 0x00,
+			0x00, 0x07, 0x00, 0x07, 0x00,
+			0x14, 0x7F, 0x14, 0x7F, 0x14,
+			0x24, 0x2A, 0x7F, 0x2A, 0x12,
+			0x23, 0x13, 0x08, 0x64, 0x62,
+			0x36, 0x49, 0x56, 0x20, 0x50,
+			0x00, 0x08, 0x07, 0x03, 0x00,
+			0x00, 0x1C, 0x22, 0x41, 0x00,
+			0x00, 0x41, 0x22, 0x1C, 0x00,
+			0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
+			0x08, 0x08, 0x3E, 0x08, 0x08,
+			0x00, 0x80, 0x70, 0x30, 0x00,
+			0x08, 0x08, 0x08, 0x08, 0x08,
+			0x00, 0x00, 0x60, 0x60, 0x00,
+			0x20, 0x10, 0x08, 0x04, 0x02,
+			0x3E, 0x51, 0x49, 0x45, 0x3E,
+			0x00, 0x42, 0x7F, 0x40, 0x00,
+			0x72, 0x49, 0x49, 0x49, 0x46,
+			0x21, 0x41, 0x49, 0x4D, 0x33,
+			0x18, 0x14, 0x12, 0x7F, 0x10,
+			0x27, 0x45, 0x45, 0x45, 0x39,
+			0x3C, 0x4A, 0x49, 0x49, 0x31,
+			0x41, 0x21, 0x11, 0x09, 0x07,
+			0x36, 0x49, 0x49, 0x49, 0x36,
+			0x46, 0x49, 0x49, 0x29, 0x1E,
+			0x00, 0x00, 0x14, 0x00, 0x00,
+			0x00, 0x40, 0x34, 0x00, 0x00,
+			0x00, 0x08, 0x14, 0x22, 0x41,
+			0x14, 0x14, 0x14, 0x14, 0x14,
+			0x00, 0x41, 0x22, 0x14, 0x08,
+			0x02, 0x01, 0x59, 0x09, 0x06,
+			0x3E, 0x41, 0x5D, 0x59, 0x4E,
+			0x7C, 0x12, 0x11, 0x12, 0x7C,
+			0x7F, 0x49, 0x49, 0x49, 0x36,
+			0x3E, 0x41, 0x41, 0x41, 0x22,
+			0x7F, 0x41, 0x41, 0x41, 0x3E,
+			0x7F, 0x49, 0x49, 0x49, 0x41,
+			0x7F, 0x09, 0x09, 0x09, 0x01,
+			0x3E, 0x41, 0x41, 0x51, 0x73,
+			0x7F, 0x08, 0x08, 0x08, 0x7F,
+			0x00, 0x41, 0x7F, 0x41, 0x00,
+			0x20, 0x40, 0x41, 0x3F, 0x01,
+			0x7F, 0x08, 0x14, 0x22, 0x41,
+			0x7F, 0x40, 0x40, 0x40, 0x40,
+			0x7F, 0x02, 0x1C, 0x02, 0x7F,
+			0x7F, 0x04, 0x08, 0x10, 0x7F,
+			0x3E, 0x41, 0x41, 0x41, 0x3E,
+			0x7F, 0x09, 0x09, 0x09, 0x06,
+			0x3E, 0x41, 0x51, 0x21, 0x5E,
+			0x7F, 0x09, 0x19, 0x29, 0x46,
+			0x26, 0x49, 0x49, 0x49, 0x32,
+			0x03, 0x01, 0x7F, 0x01, 0x03,
+			0x3F, 0x40, 0x40, 0x40, 0x3F,
+			0x1F, 0x20, 0x40, 0x20, 0x1F,
+			0x3F, 0x40, 0x38, 0x40, 0x3F,
+			0x63, 0x14, 0x08, 0x14, 0x63,
+			0x03, 0x04, 0x78, 0x04, 0x03,
+			0x61, 0x59, 0x49, 0x4D, 0x43,
+			0x00, 0x7F, 0x41, 0x41, 0x41,
+			0x02, 0x04, 0x08, 0x10, 0x20,
+			0x00, 0x41, 0x41, 0x41, 0x7F,
+			0x04, 0x02, 0x01, 0x02, 0x04,
+			0x40, 0x40, 0x40, 0x40, 0x40,
+			0x00, 0x03, 0x07, 0x08, 0x00,
+			0x20, 0x54, 0x54, 0x78, 0x40,
+			0x7F, 0x28, 0x44, 0x44, 0x38,
+			0x38, 0x44, 0x44, 0x44, 0x28,
+			0x38, 0x44, 0x44, 0x28, 0x7F,
+			0x38, 0x54, 0x54, 0x54, 0x18,
+			0x00, 0x08, 0x7E, 0x09, 0x02,
+			0x18, 0xA4, 0xA4, 0x9C, 0x78,
+			0x7F, 0x08, 0x04, 0x04, 0x78,
+			0x00, 0x44, 0x7D, 0x40, 0x00,
+			0x20, 0x40, 0x40, 0x3D, 0x00,
+			0x7F, 0x10, 0x28, 0x44, 0x00,
+			0x00, 0x41, 0x7F, 0x40, 0x00,
+			0x7C, 0x04, 0x78, 0x04, 0x78,
+			0x7C, 0x08, 0x04, 0x04, 0x78,
+			0x38, 0x44, 0x44, 0x44, 0x38,
+			0xFC, 0x18, 0x24, 0x24, 0x18,
+			0x18, 0x24, 0x24, 0x18, 0xFC,
+			0x7C, 0x08, 0x04, 0x04, 0x08,
+			0x48, 0x54, 0x54, 0x54, 0x24,
+			0x04, 0x04, 0x3F, 0x44, 0x24,
+			0x3C, 0x40, 0x40, 0x20, 0x7C,
+			0x1C, 0x20, 0x40, 0x20, 0x1C,
+			0x3C, 0x40, 0x30, 0x40, 0x3C,
+			0x44, 0x28, 0x10, 0x28, 0x44,
+			0x4C, 0x90, 0x90, 0x90, 0x7C,
+			0x44, 0x64, 0x54, 0x4C, 0x44,
+			0x00, 0x08, 0x36, 0x41, 0x00,
+			0x00, 0x00, 0x77, 0x00, 0x00,
+			0x00, 0x41, 0x36, 0x08, 0x00,
+			0x02, 0x01, 0x02, 0x04, 0x02,
+};
+
+#endif
diff --git a/app_program/gpio/address_mapped.h b/app_program/gpio/address_mapped.h
new file mode 100644
index 0000000..9d92626
--- /dev/null
+++ b/app_program/gpio/address_mapped.h
@@ -0,0 +1,190 @@
+/*
+ * Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#ifndef _HARDWARE_ADDRESS_MAPPED_H
+#define _HARDWARE_ADDRESS_MAPPED_H
+
+#include "tk/typedef.h"
+
+#include "addressmap.h"
+
+/** \file address_mapped.h
+ *  \defgroup hardware_base hardware_base
+ *
+ *  \brief Low-level types and (atomic) accessors for memory-mapped hardware registers
+ *
+ *  `hardware_base` defines the low level types and access functions for memory mapped hardware registers. It is included
+ *  by default by all other hardware libraries.
+ *
+ *  The following register access typedefs codify the access type (read/write) and the bus size (8/16/32) of the hardware register.
+ *  The register type names are formed by concatenating one from each of the 3 parts A, B, C
+
+ *   A    | B | C | Meaning
+ *  ------|---|---|--------
+ *  io_   |   |   | A Memory mapped IO register
+ *  &nbsp;|ro_|   | read-only access
+ *  &nbsp;|rw_|   | read-write access
+ *  &nbsp;|wo_|   | write-only access (can't actually be enforced via C API)
+ *  &nbsp;|   |  8| 8-bit wide access
+ *  &nbsp;|   | 16| 16-bit wide access
+ *  &nbsp;|   | 32| 32-bit wide access
+ *
+ *  When dealing with these types, you will always use a pointer, i.e. `io_rw_32 *some_reg` is a pointer to a read/write
+ *  32 bit register that you can write with `*some_reg = value`, or read with `value = *some_reg`.
+ *
+ *  RP-series hardware is also aliased to provide atomic setting, clear or flipping of a subset of the bits within
+ *  a hardware register so that concurrent access by two cores is always consistent with one atomic operation
+ *  being performed first, followed by the second.
+ *
+ *  See hw_set_bits(), hw_clear_bits() and hw_xor_bits() provide for atomic access via a pointer to a 32 bit register
+ *
+ *  Additionally given a pointer to a structure representing a piece of hardware (e.g. `dma_hw_t *dma_hw` for the DMA controller), you can
+ *  get an alias to the entire structure such that writing any member (register) within the structure is equivalent
+ *  to an atomic operation via hw_set_alias(), hw_clear_alias() or hw_xor_alias()...
+ *
+ *  For example `hw_set_alias(dma_hw)->inte1 = 0x80;` will set bit 7 of the INTE1 register of the DMA controller,
+ *  leaving the other bits unchanged.
+ */
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#define check_hw_layout(type, member, offset) static_assert(offsetof(type, member) == (offset), "hw offset mismatch")
+#define check_hw_size(type, size) static_assert(sizeof(type) == (size), "hw size mismatch")
+
+// PICO_CONFIG: PARAM_ASSERTIONS_ENABLED_ADDRESS_ALIAS, Enable/disable assertions in memory address aliasing macros, type=bool, default=0, group=hardware_base
+#ifndef PARAM_ASSERTIONS_ENABLED_ADDRESS_ALIAS
+#define PARAM_ASSERTIONS_ENABLED_ADDRESS_ALIAS 0
+#endif
+
+typedef _UD io_rw_64;
+typedef const _UD io_ro_64;
+typedef _UD io_wo_64;
+typedef _UW io_rw_32;
+typedef const _UW io_ro_32;
+typedef _UW io_wo_32;
+typedef _UH io_rw_16U;
+typedef const _UH io_ro_16;
+typedef _UH io_wo_16;
+typedef _UB io_rw_8;
+typedef const _UB io_ro_8;
+typedef _UB io_wo_8;
+
+typedef _UB *const ioptr;
+typedef ioptr const const_ioptr;
+
+// A non-functional (empty) helper macro to help IDEs follow links from the autogenerated
+// hardware struct headers in hardware/structs/xxx.h to the raw register definitions
+// in hardware/regs/xxx.h. A preprocessor define such as TIMER_TIMEHW_OFFSET (a timer register offset)
+// is not generally clickable (in an IDE) if placed in a C comment, so _REG_(TIMER_TIMEHW_OFFSET) is
+// included outside of a comment instead
+#define _REG_(x)
+
+// Helper method used by hw_alias macros to optionally check input validity
+#define hw_alias_check_addr(addr) ((UW*)(addr))
+
+// can't use the following impl as it breaks existing static declarations using hw_alias, so would be a backwards incompatibility
+//static __force_inline uint32_t hw_alias_check_addr(volatile void *addr) {
+//    uint32_t rc = (uintptr_t)addr;
+//    invalid_params_if(ADDRESS_ALIAS, rc < 0x40000000); // catch likely non HW pointer types
+//    return rc;
+//}
+#if 0
+#if PICO_RP2040
+// Helper method used by xip_alias macros to optionally check input validity
+__force_inline static uint32_t xip_alias_check_addr(const void *addr) {
+    uint32_t rc = (uintptr_t)addr;
+    valid_params_if(ADDRESS_ALIAS, rc >= XIP_MAIN_BASE && rc < XIP_NOALLOC_BASE);
+    return rc;
+}
+#else
+//static __force_inline uint32_t xip_alias_check_addr(const void *addr) {
+//    uint32_t rc = (uintptr_t)addr;
+//    valid_params_if(ADDRESS_ALIAS, rc >= XIP_BASE && rc < XIP_END);
+//    return rc;
+//}
+#endif
+#endif
+// Untyped conversion alias pointer generation macros
+//#define hw_set_alias_untyped(addr) ((void *)(REG_ALIAS_SET_BITS + hw_alias_check_addr(addr)))
+//#define hw_clear_alias_untyped(addr) ((void *)(REG_ALIAS_CLR_BITS + hw_alias_check_addr(addr)))
+//#define hw_xor_alias_untyped(addr) ((void *)(REG_ALIAS_XOR_BITS + hw_alias_check_addr(addr)))
+
+#if PICO_RP2040
+#define xip_noalloc_alias_untyped(addr) ((void *)(XIP_NOALLOC_BASE | xip_alias_check_addr(addr)))
+#define xip_nocache_alias_untyped(addr) ((void *)(XIP_NOCACHE_BASE | xip_alias_check_addr(addr)))
+#define xip_nocache_noalloc_alias_untyped(addr) ((void *)(XIP_NOCACHE_NOALLOC_BASE | xip_alias_check_addr(addr)))
+#endif
+
+// Typed conversion alias pointer generation macros
+#define hw_set_alias(p) ((typeof(p))hw_set_alias_untyped(p))
+#define hw_clear_alias(p) ((typeof(p))hw_clear_alias_untyped(p))
+#define hw_xor_alias(p) ((typeof(p))hw_xor_alias_untyped(p))
+#define xip_noalloc_alias(p) ((typeof(p))xip_noalloc_alias_untyped(p))
+#define xip_nocache_alias(p) ((typeof(p))xip_nocache_alias_untyped(p))
+#define xip_nocache_noalloc_alias(p) ((typeof(p))xip_nocache_noalloc_alias_untyped(p))
+
+/*! \brief Atomically set the specified bits to 1 in a HW register
+ *  \ingroup hardware_base
+ *
+ * \param addr Address of writable register
+ * \param mask Bit-mask specifying bits to set
+ */
+#if 0
+__force_inline static void hw_set_bits(io_rw_32 *addr, UW mask) {
+    *(io_rw_32 *) hw_set_alias_untyped((volatile void *) addr) = mask;
+}
+
+/*! \brief Atomically clear the specified bits to 0 in a HW register
+ *  \ingroup hardware_base
+ *
+ * \param addr Address of writable register
+ * \param mask Bit-mask specifying bits to clear
+ */
+__force_inline static void hw_clear_bits(io_rw_32 *addr, UW mask) {
+    *(io_rw_32 *) hw_clear_alias_untyped((volatile void *) addr) = mask;
+}
+#endif
+#if 0
+/*! \brief Atomically flip the specified bits in a HW register
+ *  \ingroup hardware_base
+ *
+ * \param addr Address of writable register
+ * \param mask Bit-mask specifying bits to invert
+ */
+__force_inline static void hw_xor_bits(io_rw_32 *addr, uint32_t mask) {
+    *(io_rw_32 *) hw_xor_alias_untyped((volatile void *) addr) = mask;
+}
+
+/*! \brief Set new values for a sub-set of the bits in a HW register
+ *  \ingroup hardware_base
+ *
+ * Sets destination bits to values specified in \p values, if and only if corresponding bit in \p write_mask is set
+ *
+ * Note: this method allows safe concurrent modification of *different* bits of
+ * a register, but multiple concurrent access to the same bits is still unsafe.
+ *
+ * \param addr Address of writable register
+ * \param values Bits values
+ * \param write_mask Mask of bits to change
+ */
+__force_inline static void hw_write_masked(io_rw_32 *addr, uint32_t values, uint32_t write_mask) {
+    hw_xor_bits(addr, (*addr ^ values) & write_mask);
+}
+
+#if !PICO_RP2040
+// include this here to avoid the check in every other hardware/structs header that needs it
+#include "hardware/structs/accessctrl.h"
+#endif
+
+#endif
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff --git a/app_program/gpio/addressmap.h b/app_program/gpio/addressmap.h
new file mode 100644
index 0000000..3f6fdc1
--- /dev/null
+++ b/app_program/gpio/addressmap.h
@@ -0,0 +1,81 @@
+// THIS HEADER FILE IS AUTOMATICALLY GENERATED -- DO NOT EDIT
+
+/**
+ * Copyright (c) 2024 Raspberry Pi Ltd.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+#ifndef _ADDRESSMAP_H
+#define _ADDRESSMAP_H
+
+/**
+ * \file rp2040/addressmap.h
+ */
+
+#include "platform_defs.h"
+
+// Register address offsets for atomic RMW aliases
+#define REG_ALIAS_RW_BITS  (_u(0x0) << _u(12))
+#define REG_ALIAS_XOR_BITS (_u(0x1) << _u(12))
+#define REG_ALIAS_SET_BITS (_u(0x2) << _u(12))
+#define REG_ALIAS_CLR_BITS (_u(0x3) << _u(12))
+
+#define ROM_BASE _u(0x00000000)
+#define XIP_BASE _u(0x10000000)
+#define XIP_MAIN_BASE _u(0x10000000)
+#define XIP_NOALLOC_BASE _u(0x11000000)
+#define XIP_NOCACHE_BASE _u(0x12000000)
+#define XIP_NOCACHE_NOALLOC_BASE _u(0x13000000)
+#define XIP_CTRL_BASE _u(0x14000000)
+#define XIP_SRAM_BASE _u(0x15000000)
+#define XIP_SRAM_END _u(0x15004000)
+#define XIP_SSI_BASE _u(0x18000000)
+#define SRAM_BASE _u(0x20000000)
+#define SRAM_STRIPED_BASE _u(0x20000000)
+#define SRAM_STRIPED_END _u(0x20040000)
+#define SRAM4_BASE _u(0x20040000)
+#define SRAM5_BASE _u(0x20041000)
+#define SRAM_END _u(0x20042000)
+#define SRAM0_BASE _u(0x21000000)
+#define SRAM1_BASE _u(0x21010000)
+#define SRAM2_BASE _u(0x21020000)
+#define SRAM3_BASE _u(0x21030000)
+#define SYSINFO_BASE _u(0x40000000)
+#define SYSCFG_BASE _u(0x40004000)
+//#define CLOCKS_BASE _u(0x40008000)
+//#define RESETS_BASE _u(0x4000c000)
+#define PSM_BASE _u(0x40010000)
+//#define IO_BANK0_BASE _u(0x40014000)
+//#define IO_QSPI_BASE _u(0x40018000)
+//#define PADS_BANK0_BASE _u(0x4001c000)
+#define PADS_QSPI_BASE _u(0x40020000)
+//#define XOSC_BASE _u(0x40024000)
+//#define PLL_SYS_BASE _u(0x40028000)
+//#define PLL_USB_BASE _u(0x4002c000)
+#define BUSCTRL_BASE _u(0x40030000)
+#define UART0_BASE _u(0x40034000)
+#define UART1_BASE _u(0x40038000)
+#define SPI0_BASE _u(0x4003c000)
+#define SPI1_BASE _u(0x40040000)
+#define I2C0_BASE _u(0x40044000)
+#define I2C1_BASE _u(0x40048000)
+#define ADC_BASE _u(0x4004c000)
+//#define PWM_BASE _u(0x40050000)
+//#define TIMER_BASE _u(0x40054000)
+#define WATCHDOG_BASE _u(0x40058000)
+#define RTC_BASE _u(0x4005c000)
+#define ROSC_BASE _u(0x40060000)
+#define VREG_AND_CHIP_RESET_BASE _u(0x40064000)
+#define TBMAN_BASE _u(0x4006c000)
+#define DMA_BASE _u(0x50000000)
+#define USBCTRL_DPRAM_BASE _u(0x50100000)
+#define USBCTRL_BASE _u(0x50100000)
+#define USBCTRL_REGS_BASE _u(0x50110000)
+#define PIO0_BASE _u(0x50200000)
+#define PIO1_BASE _u(0x50300000)
+#define XIP_AUX_BASE _u(0x50400000)
+//#define SIO_BASE _u(0xd0000000)
+#define PPB_BASE _u(0xe0000000)
+
+#endif // _ADDRESSMAP_H
+
diff --git a/app_program/gpio/gpio_rp2040.c b/app_program/gpio/gpio_rp2040.c
new file mode 100644
index 0000000..f9f688f
--- /dev/null
+++ b/app_program/gpio/gpio_rp2040.c
@@ -0,0 +1,55 @@
+/*
+ * gpio_rp2040.c
+ *
+ *  Created on: 2024/10/14
+ *      Author: user
+ */
+
+#include <tk/syslib.h>
+
+#include "io_bank0.h"
+
+static UW get_core_num(void)
+{
+	return *(io_rw_32 *)CPUID;
+}
+
+static B check_gpio_param(UH gpio) {
+    if (gpio >= NUM_BANK0_GPIOS) return 1;
+    return 0;
+}
+
+void gpio_acknowledge_irq(UH gpio, UW events) {
+    if (check_gpio_param(gpio)) return; // invalid param
+    io_bank0_hw->intr[gpio / 8] = events << (4 * (gpio % 8));
+}
+
+static void _gpio_set_irq_enabled(UH gpio, UW events, UB enabled, io_bank0_irq_ctrl_hw_t *irq_ctrl_base) {
+	// Clear stale events which might cause immediate spurious handler entry
+    gpio_acknowledge_irq(gpio, events);
+    io_rw_32 *en_reg = &irq_ctrl_base->inte[gpio / 8];
+    events <<= 4 * (gpio % 8);
+
+    if (enabled)
+        //hw_set_bits(en_reg, events);
+    	set_w((_UW)en_reg, events);
+    else
+        //hw_clear_bits(en_reg, events);
+    	clr_w((_UW)en_reg, events);
+}
+
+void gpio_set_irq_enabled(UH gpio, UW events, UB enabled) {
+    // either this call disables the interrupt
+    // or callback should already be set (raw or using gpio_set_irq_callback)
+    // this protects against enabling the interrupt without callback set
+#if 0
+	assert(!enabled
+                || (raw_irq_mask[get_core_num()] & (1u<<gpio))
+                || callbacks[get_core_num()]);
+#endif
+    // Separate mask/force/status per-core, so check which core called, and
+    // set the relevant IRQ controls.
+    io_bank0_irq_ctrl_hw_t *irq_ctrl_base = get_core_num() ?
+                                      &io_bank0_hw->proc1_irq_ctrl : &io_bank0_hw->proc0_irq_ctrl;
+    _gpio_set_irq_enabled(gpio, events, enabled, irq_ctrl_base);
+}
diff --git a/app_program/gpio/gpio_rp2040.h b/app_program/gpio/gpio_rp2040.h
new file mode 100644
index 0000000..3dc2a8e
--- /dev/null
+++ b/app_program/gpio/gpio_rp2040.h
@@ -0,0 +1,24 @@
+/*
+ * gpio_rp2040.h
+ *
+ *  Created on: 2024/10/13
+ *      Author: user
+ */
+
+#ifndef DEVICE_GPIO_SYSDEPEND_RP2040_GPIO_SYSDEP_H_
+#define DEVICE_GPIO_SYSDEPEND_RP2040_GPIO_SYSDEP_H_
+
+/*
+ * GPIO interrupt number
+ */
+
+#define	INTNO_IRQ_BANK0	13
+
+#define GPIO_EDGE_HIGH	8
+#define GPIO_EDGE_LOW	4
+#define GPIO_LEVEL_HIGH	2
+#define GPIO_LEVEL_LOW	1
+
+void gpio_set_irq_enabled(UH gpio, UW events, UB enabled);
+
+#endif /* DEVICE_GPIO_SYSDEPEND_RP2040_GPIO_SYSDEP_H_ */
diff --git a/app_program/gpio/io_bank0.h b/app_program/gpio/io_bank0.h
new file mode 100644
index 0000000..e864e1b
--- /dev/null
+++ b/app_program/gpio/io_bank0.h
@@ -0,0 +1,236 @@
+// THIS HEADER FILE IS AUTOMATICALLY GENERATED -- DO NOT EDIT
+
+/**
+ * Copyright (c) 2024 Raspberry Pi Ltd.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+#ifndef _HARDWARE_STRUCTS_IO_BANK0_H
+#define _HARDWARE_STRUCTS_IO_BANK0_H
+
+/**
+ * \file rp2040/io_bank0.h
+ */
+
+#include "address_mapped.h"
+#include "io_bank0_reg.h"
+
+// Reference to datasheet: https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf#tab-registerlist_io_bank0
+//
+// The _REG_ macro is intended to help make the register navigable in your IDE (for example, using the "Go to Definition" feature)
+// _REG_(x) will link to the corresponding register in hardware/regs/io_bank0.h.
+//
+// Bit-field descriptions are of the form:
+// BITMASK [BITRANGE] FIELDNAME (RESETVALUE) DESCRIPTION
+
+/**
+ * \brief GPIO pin function selectors on RP2040 (used as typedef \ref gpio_function_t) 
+ * \ingroup hardware_gpio
+ */
+typedef enum gpio_function_rp2040 {
+    GPIO_FUNC_XIP = 0, ///< Select XIP as GPIO pin function
+    GPIO_FUNC_SPI = 1, ///< Select SPI as GPIO pin function
+    GPIO_FUNC_UART = 2, ///< Select UART as GPIO pin function
+    GPIO_FUNC_I2C = 3, ///< Select I2C as GPIO pin function
+    GPIO_FUNC_PWM = 4, ///< Select PWM as GPIO pin function
+    GPIO_FUNC_SIO = 5, ///< Select SIO as GPIO pin function
+    GPIO_FUNC_PIO0 = 6, ///< Select PIO0 as GPIO pin function
+    GPIO_FUNC_PIO1 = 7, ///< Select PIO1 as GPIO pin function
+    GPIO_FUNC_GPCK = 8, ///< Select GPCK as GPIO pin function
+    GPIO_FUNC_USB = 9, ///< Select USB as GPIO pin function
+    GPIO_FUNC_NULL = 0x1f, ///< Select NULL as GPIO pin function
+} gpio_function_t;
+
+typedef struct {
+    _REG_(IO_BANK0_GPIO0_STATUS_OFFSET) // IO_BANK0_GPIO0_STATUS
+    // GPIO status
+    // 0x04000000 [26]    IRQTOPROC    (0) interrupt to processors, after override is applied
+    // 0x01000000 [24]    IRQFROMPAD   (0) interrupt from pad before override is applied
+    // 0x00080000 [19]    INTOPERI     (0) input signal to peripheral, after override is applied
+    // 0x00020000 [17]    INFROMPAD    (0) input signal from pad, before override is applied
+    // 0x00002000 [13]    OETOPAD      (0) output enable to pad after register override is applied
+    // 0x00001000 [12]    OEFROMPERI   (0) output enable from selected peripheral, before register...
+    // 0x00000200 [9]     OUTTOPAD     (0) output signal to pad after register override is applied
+    // 0x00000100 [8]     OUTFROMPERI  (0) output signal from selected peripheral, before register...
+    io_ro_32 status;
+ 
+    _REG_(IO_BANK0_GPIO0_CTRL_OFFSET) // IO_BANK0_GPIO0_CTRL
+    // GPIO control including function select and overrides
+    // 0x30000000 [29:28] IRQOVER      (0x0) 
+    // 0x00030000 [17:16] INOVER       (0x0) 
+    // 0x00003000 [13:12] OEOVER       (0x0) 
+    // 0x00000300 [9:8]   OUTOVER      (0x0) 
+    // 0x0000001f [4:0]   FUNCSEL      (0x1f) 0-31 -> selects pin function according to the gpio table +
+    io_rw_32 ctrl;
+} io_bank0_status_ctrl_hw_t;
+
+typedef struct {
+    // (Description copied from array index 0 register IO_BANK0_PROC0_INTE0 applies similarly to other array indexes)
+    _REG_(IO_BANK0_PROC0_INTE0_OFFSET) // IO_BANK0_PROC0_INTE0
+    // Interrupt Enable for proc0
+    // 0x80000000 [31]    GPIO7_EDGE_HIGH (0) 
+    // 0x40000000 [30]    GPIO7_EDGE_LOW (0) 
+    // 0x20000000 [29]    GPIO7_LEVEL_HIGH (0) 
+    // 0x10000000 [28]    GPIO7_LEVEL_LOW (0) 
+    // 0x08000000 [27]    GPIO6_EDGE_HIGH (0) 
+    // 0x04000000 [26]    GPIO6_EDGE_LOW (0) 
+    // 0x02000000 [25]    GPIO6_LEVEL_HIGH (0) 
+    // 0x01000000 [24]    GPIO6_LEVEL_LOW (0) 
+    // 0x00800000 [23]    GPIO5_EDGE_HIGH (0) 
+    // 0x00400000 [22]    GPIO5_EDGE_LOW (0) 
+    // 0x00200000 [21]    GPIO5_LEVEL_HIGH (0) 
+    // 0x00100000 [20]    GPIO5_LEVEL_LOW (0) 
+    // 0x00080000 [19]    GPIO4_EDGE_HIGH (0) 
+    // 0x00040000 [18]    GPIO4_EDGE_LOW (0) 
+    // 0x00020000 [17]    GPIO4_LEVEL_HIGH (0) 
+    // 0x00010000 [16]    GPIO4_LEVEL_LOW (0) 
+    // 0x00008000 [15]    GPIO3_EDGE_HIGH (0) 
+    // 0x00004000 [14]    GPIO3_EDGE_LOW (0) 
+    // 0x00002000 [13]    GPIO3_LEVEL_HIGH (0) 
+    // 0x00001000 [12]    GPIO3_LEVEL_LOW (0) 
+    // 0x00000800 [11]    GPIO2_EDGE_HIGH (0) 
+    // 0x00000400 [10]    GPIO2_EDGE_LOW (0) 
+    // 0x00000200 [9]     GPIO2_LEVEL_HIGH (0) 
+    // 0x00000100 [8]     GPIO2_LEVEL_LOW (0) 
+    // 0x00000080 [7]     GPIO1_EDGE_HIGH (0) 
+    // 0x00000040 [6]     GPIO1_EDGE_LOW (0) 
+    // 0x00000020 [5]     GPIO1_LEVEL_HIGH (0) 
+    // 0x00000010 [4]     GPIO1_LEVEL_LOW (0) 
+    // 0x00000008 [3]     GPIO0_EDGE_HIGH (0) 
+    // 0x00000004 [2]     GPIO0_EDGE_LOW (0) 
+    // 0x00000002 [1]     GPIO0_LEVEL_HIGH (0) 
+    // 0x00000001 [0]     GPIO0_LEVEL_LOW (0) 
+    io_rw_32 inte[4];
+ 
+    // (Description copied from array index 0 register IO_BANK0_PROC0_INTF0 applies similarly to other array indexes)
+    _REG_(IO_BANK0_PROC0_INTF0_OFFSET) // IO_BANK0_PROC0_INTF0
+    // Interrupt Force for proc0
+    // 0x80000000 [31]    GPIO7_EDGE_HIGH (0) 
+    // 0x40000000 [30]    GPIO7_EDGE_LOW (0) 
+    // 0x20000000 [29]    GPIO7_LEVEL_HIGH (0) 
+    // 0x10000000 [28]    GPIO7_LEVEL_LOW (0) 
+    // 0x08000000 [27]    GPIO6_EDGE_HIGH (0) 
+    // 0x04000000 [26]    GPIO6_EDGE_LOW (0) 
+    // 0x02000000 [25]    GPIO6_LEVEL_HIGH (0) 
+    // 0x01000000 [24]    GPIO6_LEVEL_LOW (0) 
+    // 0x00800000 [23]    GPIO5_EDGE_HIGH (0) 
+    // 0x00400000 [22]    GPIO5_EDGE_LOW (0) 
+    // 0x00200000 [21]    GPIO5_LEVEL_HIGH (0) 
+    // 0x00100000 [20]    GPIO5_LEVEL_LOW (0) 
+    // 0x00080000 [19]    GPIO4_EDGE_HIGH (0) 
+    // 0x00040000 [18]    GPIO4_EDGE_LOW (0) 
+    // 0x00020000 [17]    GPIO4_LEVEL_HIGH (0) 
+    // 0x00010000 [16]    GPIO4_LEVEL_LOW (0) 
+    // 0x00008000 [15]    GPIO3_EDGE_HIGH (0) 
+    // 0x00004000 [14]    GPIO3_EDGE_LOW (0) 
+    // 0x00002000 [13]    GPIO3_LEVEL_HIGH (0) 
+    // 0x00001000 [12]    GPIO3_LEVEL_LOW (0) 
+    // 0x00000800 [11]    GPIO2_EDGE_HIGH (0) 
+    // 0x00000400 [10]    GPIO2_EDGE_LOW (0) 
+    // 0x00000200 [9]     GPIO2_LEVEL_HIGH (0) 
+    // 0x00000100 [8]     GPIO2_LEVEL_LOW (0) 
+    // 0x00000080 [7]     GPIO1_EDGE_HIGH (0) 
+    // 0x00000040 [6]     GPIO1_EDGE_LOW (0) 
+    // 0x00000020 [5]     GPIO1_LEVEL_HIGH (0) 
+    // 0x00000010 [4]     GPIO1_LEVEL_LOW (0) 
+    // 0x00000008 [3]     GPIO0_EDGE_HIGH (0) 
+    // 0x00000004 [2]     GPIO0_EDGE_LOW (0) 
+    // 0x00000002 [1]     GPIO0_LEVEL_HIGH (0) 
+    // 0x00000001 [0]     GPIO0_LEVEL_LOW (0) 
+    io_rw_32 intf[4];
+ 
+    // (Description copied from array index 0 register IO_BANK0_PROC0_INTS0 applies similarly to other array indexes)
+    _REG_(IO_BANK0_PROC0_INTS0_OFFSET) // IO_BANK0_PROC0_INTS0
+    // Interrupt status after masking & forcing for proc0
+    // 0x80000000 [31]    GPIO7_EDGE_HIGH (0) 
+    // 0x40000000 [30]    GPIO7_EDGE_LOW (0) 
+    // 0x20000000 [29]    GPIO7_LEVEL_HIGH (0) 
+    // 0x10000000 [28]    GPIO7_LEVEL_LOW (0) 
+    // 0x08000000 [27]    GPIO6_EDGE_HIGH (0) 
+    // 0x04000000 [26]    GPIO6_EDGE_LOW (0) 
+    // 0x02000000 [25]    GPIO6_LEVEL_HIGH (0) 
+    // 0x01000000 [24]    GPIO6_LEVEL_LOW (0) 
+    // 0x00800000 [23]    GPIO5_EDGE_HIGH (0) 
+    // 0x00400000 [22]    GPIO5_EDGE_LOW (0) 
+    // 0x00200000 [21]    GPIO5_LEVEL_HIGH (0) 
+    // 0x00100000 [20]    GPIO5_LEVEL_LOW (0) 
+    // 0x00080000 [19]    GPIO4_EDGE_HIGH (0) 
+    // 0x00040000 [18]    GPIO4_EDGE_LOW (0) 
+    // 0x00020000 [17]    GPIO4_LEVEL_HIGH (0) 
+    // 0x00010000 [16]    GPIO4_LEVEL_LOW (0) 
+    // 0x00008000 [15]    GPIO3_EDGE_HIGH (0) 
+    // 0x00004000 [14]    GPIO3_EDGE_LOW (0) 
+    // 0x00002000 [13]    GPIO3_LEVEL_HIGH (0) 
+    // 0x00001000 [12]    GPIO3_LEVEL_LOW (0) 
+    // 0x00000800 [11]    GPIO2_EDGE_HIGH (0) 
+    // 0x00000400 [10]    GPIO2_EDGE_LOW (0) 
+    // 0x00000200 [9]     GPIO2_LEVEL_HIGH (0) 
+    // 0x00000100 [8]     GPIO2_LEVEL_LOW (0) 
+    // 0x00000080 [7]     GPIO1_EDGE_HIGH (0) 
+    // 0x00000040 [6]     GPIO1_EDGE_LOW (0) 
+    // 0x00000020 [5]     GPIO1_LEVEL_HIGH (0) 
+    // 0x00000010 [4]     GPIO1_LEVEL_LOW (0) 
+    // 0x00000008 [3]     GPIO0_EDGE_HIGH (0) 
+    // 0x00000004 [2]     GPIO0_EDGE_LOW (0) 
+    // 0x00000002 [1]     GPIO0_LEVEL_HIGH (0) 
+    // 0x00000001 [0]     GPIO0_LEVEL_LOW (0) 
+    io_ro_32 ints[4];
+} io_bank0_irq_ctrl_hw_t;
+
+/// \tag::io_bank0_hw[]
+typedef struct {
+    io_bank0_status_ctrl_hw_t io[30];
+ 
+    // (Description copied from array index 0 register IO_BANK0_INTR0 applies similarly to other array indexes)
+    _REG_(IO_BANK0_INTR0_OFFSET) // IO_BANK0_INTR0
+    // Raw Interrupts
+    // 0x80000000 [31]    GPIO7_EDGE_HIGH (0) 
+    // 0x40000000 [30]    GPIO7_EDGE_LOW (0) 
+    // 0x20000000 [29]    GPIO7_LEVEL_HIGH (0) 
+    // 0x10000000 [28]    GPIO7_LEVEL_LOW (0) 
+    // 0x08000000 [27]    GPIO6_EDGE_HIGH (0) 
+    // 0x04000000 [26]    GPIO6_EDGE_LOW (0) 
+    // 0x02000000 [25]    GPIO6_LEVEL_HIGH (0) 
+    // 0x01000000 [24]    GPIO6_LEVEL_LOW (0) 
+    // 0x00800000 [23]    GPIO5_EDGE_HIGH (0) 
+    // 0x00400000 [22]    GPIO5_EDGE_LOW (0) 
+    // 0x00200000 [21]    GPIO5_LEVEL_HIGH (0) 
+    // 0x00100000 [20]    GPIO5_LEVEL_LOW (0) 
+    // 0x00080000 [19]    GPIO4_EDGE_HIGH (0) 
+    // 0x00040000 [18]    GPIO4_EDGE_LOW (0) 
+    // 0x00020000 [17]    GPIO4_LEVEL_HIGH (0) 
+    // 0x00010000 [16]    GPIO4_LEVEL_LOW (0) 
+    // 0x00008000 [15]    GPIO3_EDGE_HIGH (0) 
+    // 0x00004000 [14]    GPIO3_EDGE_LOW (0) 
+    // 0x00002000 [13]    GPIO3_LEVEL_HIGH (0) 
+    // 0x00001000 [12]    GPIO3_LEVEL_LOW (0) 
+    // 0x00000800 [11]    GPIO2_EDGE_HIGH (0) 
+    // 0x00000400 [10]    GPIO2_EDGE_LOW (0) 
+    // 0x00000200 [9]     GPIO2_LEVEL_HIGH (0) 
+    // 0x00000100 [8]     GPIO2_LEVEL_LOW (0) 
+    // 0x00000080 [7]     GPIO1_EDGE_HIGH (0) 
+    // 0x00000040 [6]     GPIO1_EDGE_LOW (0) 
+    // 0x00000020 [5]     GPIO1_LEVEL_HIGH (0) 
+    // 0x00000010 [4]     GPIO1_LEVEL_LOW (0) 
+    // 0x00000008 [3]     GPIO0_EDGE_HIGH (0) 
+    // 0x00000004 [2]     GPIO0_EDGE_LOW (0) 
+    // 0x00000002 [1]     GPIO0_LEVEL_HIGH (0) 
+    // 0x00000001 [0]     GPIO0_LEVEL_LOW (0) 
+    io_rw_32 intr[4];
+ 
+    union {
+        struct {
+            io_bank0_irq_ctrl_hw_t proc0_irq_ctrl;
+            io_bank0_irq_ctrl_hw_t proc1_irq_ctrl;
+            io_bank0_irq_ctrl_hw_t dormant_wake_irq_ctrl;
+        };
+        io_bank0_irq_ctrl_hw_t irq_ctrl[3];
+    };
+} io_bank0_hw_t;
+/// \end::io_bank0_hw[]
+
+#define io_bank0_hw ((io_bank0_hw_t *)IO_BANK0_BASE)
+//static_assert(sizeof (io_bank0_hw_t) == 0x0190, "");
+
+#endif // _HARDWARE_STRUCTS_IO_BANK0_H
+
diff --git a/app_program/gpio/io_bank0_reg.h b/app_program/gpio/io_bank0_reg.h
new file mode 100644
index 0000000..c0ebaf9
--- /dev/null
+++ b/app_program/gpio/io_bank0_reg.h
@@ -0,0 +1,13649 @@
+// THIS HEADER FILE IS AUTOMATICALLY GENERATED -- DO NOT EDIT
+
+/**
+ * Copyright (c) 2024 Raspberry Pi Ltd.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+// =============================================================================
+// Register block : IO_BANK0
+// Version        : 1
+// Bus type       : apb
+// =============================================================================
+#ifndef _HARDWARE_REGS_IO_BANK0_H
+#define _HARDWARE_REGS_IO_BANK0_H
+// =============================================================================
+// Register    : IO_BANK0_GPIO0_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO0_STATUS_OFFSET _u(0x00000000)
+#define IO_BANK0_GPIO0_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO0_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO0_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO0_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO0_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO0_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO0_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO0_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO0_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO0_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO0_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO0_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO0_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO0_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO0_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO0_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO0_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO0_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO0_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO0_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO0_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO0_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO0_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO0_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO0_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO0_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO0_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO0_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO0_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO0_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO0_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO0_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO0_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO0_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO0_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO0_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO0_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO0_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO0_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO0_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO0_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO0_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO0_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO0_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO0_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO0_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO0_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO0_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO0_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO0_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO0_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO0_CTRL_OFFSET _u(0x00000004)
+#define IO_BANK0_GPIO0_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO0_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO0_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO0_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO0_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO0_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO0_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO0_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO0_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO0_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO0_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO0_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO0_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO0_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO0_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO0_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO0_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO0_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO0_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO0_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO0_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO0_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO0_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO0_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO0_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO0_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO0_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO0_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO0_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO0_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO0_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO0_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO0_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO0_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO0_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO0_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO0_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO0_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO0_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO0_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO0_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO0_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO0_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x00 -> jtag_tck
+//               0x01 -> spi0_rx
+//               0x02 -> uart0_tx
+//               0x03 -> i2c0_sda
+//               0x04 -> pwm_a_0
+//               0x05 -> sio_0
+//               0x06 -> pio0_0
+//               0x07 -> pio1_0
+//               0x09 -> usb_muxing_overcurr_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO0_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO0_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO0_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO0_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO0_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_JTAG_TCK _u(0x00)
+#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_SPI0_RX _u(0x01)
+#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_UART0_TX _u(0x02)
+#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_I2C0_SDA _u(0x03)
+#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_PWM_A_0 _u(0x04)
+#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_SIO_0 _u(0x05)
+#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_PIO0_0 _u(0x06)
+#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_PIO1_0 _u(0x07)
+#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)
+#define IO_BANK0_GPIO0_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO1_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO1_STATUS_OFFSET _u(0x00000008)
+#define IO_BANK0_GPIO1_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO1_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO1_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO1_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO1_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO1_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO1_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO1_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO1_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO1_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO1_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO1_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO1_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO1_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO1_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO1_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO1_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO1_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO1_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO1_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO1_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO1_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO1_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO1_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO1_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO1_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO1_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO1_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO1_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO1_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO1_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO1_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO1_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO1_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO1_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO1_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO1_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO1_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO1_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO1_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO1_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO1_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO1_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO1_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO1_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO1_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO1_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO1_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO1_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO1_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO1_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO1_CTRL_OFFSET _u(0x0000000c)
+#define IO_BANK0_GPIO1_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO1_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO1_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO1_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO1_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO1_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO1_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO1_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO1_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO1_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO1_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO1_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO1_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO1_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO1_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO1_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO1_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO1_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO1_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO1_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO1_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO1_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO1_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO1_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO1_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO1_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO1_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO1_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO1_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO1_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO1_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO1_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO1_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO1_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO1_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO1_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO1_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO1_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO1_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO1_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO1_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO1_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO1_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x00 -> jtag_tms
+//               0x01 -> spi0_ss_n
+//               0x02 -> uart0_rx
+//               0x03 -> i2c0_scl
+//               0x04 -> pwm_b_0
+//               0x05 -> sio_1
+//               0x06 -> pio0_1
+//               0x07 -> pio1_1
+//               0x09 -> usb_muxing_vbus_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO1_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO1_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO1_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO1_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO1_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_JTAG_TMS _u(0x00)
+#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_SPI0_SS_N _u(0x01)
+#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_UART0_RX _u(0x02)
+#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_I2C0_SCL _u(0x03)
+#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_PWM_B_0 _u(0x04)
+#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_SIO_1 _u(0x05)
+#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_PIO0_1 _u(0x06)
+#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_PIO1_1 _u(0x07)
+#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)
+#define IO_BANK0_GPIO1_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO2_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO2_STATUS_OFFSET _u(0x00000010)
+#define IO_BANK0_GPIO2_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO2_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO2_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO2_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO2_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO2_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO2_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO2_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO2_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO2_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO2_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO2_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO2_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO2_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO2_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO2_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO2_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO2_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO2_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO2_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO2_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO2_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO2_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO2_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO2_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO2_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO2_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO2_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO2_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO2_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO2_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO2_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO2_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO2_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO2_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO2_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO2_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO2_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO2_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO2_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO2_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO2_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO2_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO2_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO2_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO2_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO2_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO2_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO2_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO2_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO2_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO2_CTRL_OFFSET _u(0x00000014)
+#define IO_BANK0_GPIO2_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO2_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO2_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO2_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO2_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO2_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO2_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO2_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO2_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO2_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO2_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO2_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO2_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO2_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO2_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO2_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO2_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO2_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO2_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO2_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO2_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO2_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO2_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO2_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO2_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO2_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO2_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO2_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO2_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO2_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO2_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO2_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO2_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO2_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO2_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO2_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO2_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO2_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO2_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO2_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO2_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO2_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO2_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x00 -> jtag_tdi
+//               0x01 -> spi0_sclk
+//               0x02 -> uart0_cts
+//               0x03 -> i2c1_sda
+//               0x04 -> pwm_a_1
+//               0x05 -> sio_2
+//               0x06 -> pio0_2
+//               0x07 -> pio1_2
+//               0x09 -> usb_muxing_vbus_en
+//               0x1f -> null
+#define IO_BANK0_GPIO2_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO2_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO2_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO2_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO2_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_JTAG_TDI _u(0x00)
+#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_SPI0_SCLK _u(0x01)
+#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_UART0_CTS _u(0x02)
+#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_I2C1_SDA _u(0x03)
+#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_PWM_A_1 _u(0x04)
+#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_SIO_2 _u(0x05)
+#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_PIO0_2 _u(0x06)
+#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_PIO1_2 _u(0x07)
+#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)
+#define IO_BANK0_GPIO2_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO3_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO3_STATUS_OFFSET _u(0x00000018)
+#define IO_BANK0_GPIO3_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO3_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO3_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO3_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO3_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO3_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO3_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO3_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO3_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO3_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO3_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO3_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO3_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO3_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO3_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO3_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO3_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO3_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO3_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO3_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO3_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO3_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO3_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO3_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO3_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO3_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO3_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO3_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO3_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO3_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO3_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO3_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO3_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO3_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO3_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO3_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO3_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO3_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO3_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO3_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO3_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO3_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO3_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO3_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO3_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO3_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO3_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO3_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO3_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO3_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO3_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO3_CTRL_OFFSET _u(0x0000001c)
+#define IO_BANK0_GPIO3_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO3_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO3_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO3_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO3_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO3_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO3_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO3_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO3_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO3_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO3_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO3_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO3_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO3_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO3_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO3_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO3_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO3_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO3_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO3_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO3_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO3_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO3_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO3_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO3_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO3_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO3_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO3_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO3_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO3_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO3_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO3_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO3_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO3_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO3_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO3_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO3_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO3_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO3_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO3_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO3_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO3_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO3_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x00 -> jtag_tdo
+//               0x01 -> spi0_tx
+//               0x02 -> uart0_rts
+//               0x03 -> i2c1_scl
+//               0x04 -> pwm_b_1
+//               0x05 -> sio_3
+//               0x06 -> pio0_3
+//               0x07 -> pio1_3
+//               0x09 -> usb_muxing_overcurr_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO3_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO3_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO3_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO3_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO3_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_JTAG_TDO _u(0x00)
+#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_SPI0_TX _u(0x01)
+#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_UART0_RTS _u(0x02)
+#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_I2C1_SCL _u(0x03)
+#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_PWM_B_1 _u(0x04)
+#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_SIO_3 _u(0x05)
+#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_PIO0_3 _u(0x06)
+#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_PIO1_3 _u(0x07)
+#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)
+#define IO_BANK0_GPIO3_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO4_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO4_STATUS_OFFSET _u(0x00000020)
+#define IO_BANK0_GPIO4_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO4_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO4_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO4_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO4_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO4_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO4_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO4_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO4_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO4_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO4_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO4_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO4_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO4_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO4_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO4_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO4_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO4_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO4_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO4_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO4_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO4_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO4_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO4_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO4_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO4_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO4_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO4_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO4_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO4_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO4_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO4_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO4_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO4_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO4_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO4_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO4_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO4_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO4_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO4_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO4_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO4_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO4_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO4_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO4_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO4_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO4_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO4_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO4_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO4_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO4_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO4_CTRL_OFFSET _u(0x00000024)
+#define IO_BANK0_GPIO4_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO4_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO4_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO4_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO4_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO4_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO4_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO4_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO4_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO4_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO4_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO4_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO4_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO4_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO4_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO4_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO4_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO4_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO4_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO4_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO4_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO4_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO4_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO4_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO4_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO4_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO4_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO4_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO4_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO4_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO4_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO4_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO4_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO4_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO4_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO4_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO4_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO4_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO4_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO4_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO4_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO4_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO4_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi0_rx
+//               0x02 -> uart1_tx
+//               0x03 -> i2c0_sda
+//               0x04 -> pwm_a_2
+//               0x05 -> sio_4
+//               0x06 -> pio0_4
+//               0x07 -> pio1_4
+//               0x09 -> usb_muxing_vbus_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO4_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO4_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO4_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO4_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO4_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_SPI0_RX _u(0x01)
+#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_UART1_TX _u(0x02)
+#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_I2C0_SDA _u(0x03)
+#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_PWM_A_2 _u(0x04)
+#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_SIO_4 _u(0x05)
+#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_PIO0_4 _u(0x06)
+#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_PIO1_4 _u(0x07)
+#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)
+#define IO_BANK0_GPIO4_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO5_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO5_STATUS_OFFSET _u(0x00000028)
+#define IO_BANK0_GPIO5_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO5_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO5_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO5_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO5_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO5_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO5_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO5_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO5_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO5_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO5_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO5_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO5_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO5_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO5_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO5_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO5_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO5_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO5_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO5_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO5_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO5_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO5_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO5_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO5_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO5_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO5_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO5_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO5_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO5_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO5_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO5_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO5_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO5_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO5_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO5_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO5_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO5_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO5_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO5_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO5_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO5_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO5_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO5_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO5_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO5_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO5_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO5_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO5_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO5_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO5_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO5_CTRL_OFFSET _u(0x0000002c)
+#define IO_BANK0_GPIO5_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO5_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO5_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO5_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO5_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO5_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO5_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO5_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO5_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO5_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO5_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO5_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO5_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO5_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO5_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO5_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO5_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO5_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO5_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO5_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO5_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO5_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO5_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO5_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO5_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO5_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO5_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO5_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO5_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO5_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO5_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO5_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO5_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO5_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO5_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO5_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO5_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO5_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO5_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO5_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO5_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO5_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO5_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi0_ss_n
+//               0x02 -> uart1_rx
+//               0x03 -> i2c0_scl
+//               0x04 -> pwm_b_2
+//               0x05 -> sio_5
+//               0x06 -> pio0_5
+//               0x07 -> pio1_5
+//               0x09 -> usb_muxing_vbus_en
+//               0x1f -> null
+#define IO_BANK0_GPIO5_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO5_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO5_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO5_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO5_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_SPI0_SS_N _u(0x01)
+#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_UART1_RX _u(0x02)
+#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_I2C0_SCL _u(0x03)
+#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_PWM_B_2 _u(0x04)
+#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_SIO_5 _u(0x05)
+#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_PIO0_5 _u(0x06)
+#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_PIO1_5 _u(0x07)
+#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)
+#define IO_BANK0_GPIO5_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO6_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO6_STATUS_OFFSET _u(0x00000030)
+#define IO_BANK0_GPIO6_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO6_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO6_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO6_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO6_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO6_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO6_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO6_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO6_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO6_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO6_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO6_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO6_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO6_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO6_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO6_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO6_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO6_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO6_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO6_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO6_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO6_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO6_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO6_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO6_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO6_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO6_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO6_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO6_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO6_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO6_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO6_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO6_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO6_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO6_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO6_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO6_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO6_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO6_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO6_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO6_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO6_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO6_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO6_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO6_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO6_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO6_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO6_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO6_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO6_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO6_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO6_CTRL_OFFSET _u(0x00000034)
+#define IO_BANK0_GPIO6_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO6_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO6_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO6_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO6_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO6_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO6_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO6_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO6_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO6_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO6_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO6_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO6_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO6_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO6_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO6_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO6_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO6_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO6_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO6_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO6_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO6_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO6_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO6_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO6_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO6_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO6_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO6_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO6_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO6_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO6_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO6_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO6_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO6_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO6_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO6_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO6_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO6_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO6_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO6_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO6_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO6_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO6_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi0_sclk
+//               0x02 -> uart1_cts
+//               0x03 -> i2c1_sda
+//               0x04 -> pwm_a_3
+//               0x05 -> sio_6
+//               0x06 -> pio0_6
+//               0x07 -> pio1_6
+//               0x08 -> usb_muxing_extphy_softcon
+//               0x09 -> usb_muxing_overcurr_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO6_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO6_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO6_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO6_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO6_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_SPI0_SCLK _u(0x01)
+#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_UART1_CTS _u(0x02)
+#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_I2C1_SDA _u(0x03)
+#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_PWM_A_3 _u(0x04)
+#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_SIO_6 _u(0x05)
+#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_PIO0_6 _u(0x06)
+#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_PIO1_6 _u(0x07)
+#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_SOFTCON _u(0x08)
+#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)
+#define IO_BANK0_GPIO6_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO7_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO7_STATUS_OFFSET _u(0x00000038)
+#define IO_BANK0_GPIO7_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO7_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO7_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO7_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO7_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO7_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO7_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO7_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO7_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO7_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO7_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO7_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO7_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO7_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO7_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO7_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO7_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO7_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO7_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO7_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO7_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO7_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO7_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO7_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO7_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO7_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO7_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO7_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO7_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO7_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO7_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO7_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO7_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO7_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO7_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO7_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO7_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO7_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO7_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO7_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO7_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO7_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO7_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO7_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO7_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO7_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO7_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO7_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO7_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO7_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO7_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO7_CTRL_OFFSET _u(0x0000003c)
+#define IO_BANK0_GPIO7_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO7_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO7_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO7_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO7_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO7_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO7_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO7_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO7_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO7_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO7_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO7_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO7_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO7_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO7_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO7_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO7_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO7_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO7_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO7_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO7_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO7_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO7_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO7_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO7_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO7_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO7_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO7_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO7_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO7_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO7_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO7_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO7_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO7_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO7_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO7_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO7_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO7_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO7_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO7_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO7_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO7_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO7_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi0_tx
+//               0x02 -> uart1_rts
+//               0x03 -> i2c1_scl
+//               0x04 -> pwm_b_3
+//               0x05 -> sio_7
+//               0x06 -> pio0_7
+//               0x07 -> pio1_7
+//               0x08 -> usb_muxing_extphy_oe_n
+//               0x09 -> usb_muxing_vbus_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO7_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO7_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO7_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO7_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO7_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_SPI0_TX _u(0x01)
+#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_UART1_RTS _u(0x02)
+#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_I2C1_SCL _u(0x03)
+#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_PWM_B_3 _u(0x04)
+#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_SIO_7 _u(0x05)
+#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_PIO0_7 _u(0x06)
+#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_PIO1_7 _u(0x07)
+#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_OE_N _u(0x08)
+#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)
+#define IO_BANK0_GPIO7_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO8_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO8_STATUS_OFFSET _u(0x00000040)
+#define IO_BANK0_GPIO8_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO8_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO8_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO8_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO8_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO8_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO8_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO8_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO8_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO8_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO8_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO8_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO8_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO8_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO8_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO8_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO8_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO8_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO8_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO8_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO8_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO8_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO8_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO8_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO8_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO8_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO8_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO8_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO8_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO8_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO8_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO8_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO8_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO8_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO8_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO8_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO8_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO8_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO8_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO8_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO8_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO8_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO8_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO8_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO8_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO8_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO8_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO8_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO8_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO8_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO8_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO8_CTRL_OFFSET _u(0x00000044)
+#define IO_BANK0_GPIO8_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO8_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO8_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO8_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO8_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO8_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO8_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO8_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO8_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO8_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO8_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO8_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO8_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO8_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO8_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO8_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO8_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO8_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO8_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO8_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO8_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO8_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO8_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO8_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO8_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO8_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO8_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO8_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO8_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO8_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO8_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO8_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO8_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO8_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO8_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO8_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO8_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO8_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO8_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO8_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO8_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO8_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO8_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi1_rx
+//               0x02 -> uart1_tx
+//               0x03 -> i2c0_sda
+//               0x04 -> pwm_a_4
+//               0x05 -> sio_8
+//               0x06 -> pio0_8
+//               0x07 -> pio1_8
+//               0x08 -> usb_muxing_extphy_rcv
+//               0x09 -> usb_muxing_vbus_en
+//               0x1f -> null
+#define IO_BANK0_GPIO8_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO8_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO8_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO8_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO8_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_SPI1_RX _u(0x01)
+#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_UART1_TX _u(0x02)
+#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_I2C0_SDA _u(0x03)
+#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_PWM_A_4 _u(0x04)
+#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_SIO_8 _u(0x05)
+#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_PIO0_8 _u(0x06)
+#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_PIO1_8 _u(0x07)
+#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_RCV _u(0x08)
+#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)
+#define IO_BANK0_GPIO8_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO9_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO9_STATUS_OFFSET _u(0x00000048)
+#define IO_BANK0_GPIO9_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO9_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO9_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO9_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO9_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO9_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO9_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO9_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO9_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO9_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO9_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO9_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO9_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO9_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO9_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO9_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO9_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO9_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO9_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO9_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO9_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO9_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO9_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO9_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO9_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO9_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO9_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO9_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO9_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO9_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO9_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO9_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO9_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO9_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO9_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO9_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO9_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO9_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO9_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO9_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO9_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO9_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO9_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO9_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO9_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO9_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO9_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO9_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO9_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO9_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO9_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO9_CTRL_OFFSET _u(0x0000004c)
+#define IO_BANK0_GPIO9_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO9_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO9_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO9_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO9_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO9_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO9_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO9_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO9_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO9_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO9_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO9_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO9_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO9_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO9_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO9_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO9_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO9_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO9_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO9_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO9_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO9_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO9_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO9_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO9_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO9_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO9_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO9_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO9_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO9_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO9_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO9_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO9_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO9_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO9_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO9_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO9_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO9_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO9_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO9_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO9_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO9_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO9_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi1_ss_n
+//               0x02 -> uart1_rx
+//               0x03 -> i2c0_scl
+//               0x04 -> pwm_b_4
+//               0x05 -> sio_9
+//               0x06 -> pio0_9
+//               0x07 -> pio1_9
+//               0x08 -> usb_muxing_extphy_vp
+//               0x09 -> usb_muxing_overcurr_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO9_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO9_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO9_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO9_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO9_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_SPI1_SS_N _u(0x01)
+#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_UART1_RX _u(0x02)
+#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_I2C0_SCL _u(0x03)
+#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_PWM_B_4 _u(0x04)
+#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_SIO_9 _u(0x05)
+#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_PIO0_9 _u(0x06)
+#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_PIO1_9 _u(0x07)
+#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_VP _u(0x08)
+#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)
+#define IO_BANK0_GPIO9_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO10_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO10_STATUS_OFFSET _u(0x00000050)
+#define IO_BANK0_GPIO10_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO10_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO10_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO10_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO10_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO10_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO10_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO10_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO10_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO10_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO10_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO10_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO10_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO10_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO10_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO10_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO10_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO10_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO10_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO10_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO10_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO10_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO10_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO10_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO10_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO10_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO10_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO10_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO10_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO10_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO10_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO10_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO10_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO10_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO10_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO10_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO10_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO10_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO10_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO10_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO10_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO10_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO10_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO10_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO10_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO10_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO10_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO10_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO10_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO10_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO10_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO10_CTRL_OFFSET _u(0x00000054)
+#define IO_BANK0_GPIO10_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO10_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO10_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO10_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO10_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO10_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO10_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO10_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO10_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO10_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO10_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO10_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO10_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO10_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO10_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO10_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO10_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO10_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO10_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO10_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO10_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO10_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO10_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO10_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO10_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO10_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO10_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO10_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO10_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO10_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO10_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO10_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO10_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO10_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO10_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO10_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO10_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO10_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO10_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO10_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO10_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO10_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO10_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi1_sclk
+//               0x02 -> uart1_cts
+//               0x03 -> i2c1_sda
+//               0x04 -> pwm_a_5
+//               0x05 -> sio_10
+//               0x06 -> pio0_10
+//               0x07 -> pio1_10
+//               0x08 -> usb_muxing_extphy_vm
+//               0x09 -> usb_muxing_vbus_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO10_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO10_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO10_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO10_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO10_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_SPI1_SCLK _u(0x01)
+#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_UART1_CTS _u(0x02)
+#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_I2C1_SDA _u(0x03)
+#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_PWM_A_5 _u(0x04)
+#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_SIO_10 _u(0x05)
+#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_PIO0_10 _u(0x06)
+#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_PIO1_10 _u(0x07)
+#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_VM _u(0x08)
+#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)
+#define IO_BANK0_GPIO10_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO11_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO11_STATUS_OFFSET _u(0x00000058)
+#define IO_BANK0_GPIO11_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO11_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO11_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO11_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO11_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO11_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO11_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO11_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO11_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO11_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO11_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO11_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO11_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO11_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO11_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO11_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO11_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO11_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO11_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO11_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO11_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO11_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO11_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO11_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO11_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO11_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO11_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO11_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO11_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO11_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO11_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO11_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO11_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO11_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO11_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO11_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO11_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO11_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO11_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO11_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO11_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO11_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO11_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO11_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO11_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO11_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO11_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO11_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO11_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO11_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO11_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO11_CTRL_OFFSET _u(0x0000005c)
+#define IO_BANK0_GPIO11_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO11_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO11_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO11_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO11_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO11_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO11_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO11_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO11_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO11_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO11_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO11_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO11_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO11_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO11_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO11_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO11_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO11_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO11_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO11_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO11_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO11_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO11_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO11_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO11_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO11_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO11_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO11_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO11_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO11_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO11_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO11_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO11_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO11_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO11_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO11_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO11_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO11_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO11_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO11_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO11_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO11_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO11_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi1_tx
+//               0x02 -> uart1_rts
+//               0x03 -> i2c1_scl
+//               0x04 -> pwm_b_5
+//               0x05 -> sio_11
+//               0x06 -> pio0_11
+//               0x07 -> pio1_11
+//               0x08 -> usb_muxing_extphy_suspnd
+//               0x09 -> usb_muxing_vbus_en
+//               0x1f -> null
+#define IO_BANK0_GPIO11_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO11_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO11_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO11_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO11_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_SPI1_TX _u(0x01)
+#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_UART1_RTS _u(0x02)
+#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_I2C1_SCL _u(0x03)
+#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_PWM_B_5 _u(0x04)
+#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_SIO_11 _u(0x05)
+#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_PIO0_11 _u(0x06)
+#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_PIO1_11 _u(0x07)
+#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_SUSPND _u(0x08)
+#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)
+#define IO_BANK0_GPIO11_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO12_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO12_STATUS_OFFSET _u(0x00000060)
+#define IO_BANK0_GPIO12_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO12_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO12_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO12_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO12_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO12_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO12_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO12_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO12_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO12_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO12_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO12_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO12_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO12_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO12_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO12_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO12_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO12_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO12_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO12_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO12_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO12_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO12_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO12_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO12_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO12_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO12_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO12_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO12_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO12_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO12_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO12_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO12_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO12_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO12_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO12_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO12_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO12_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO12_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO12_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO12_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO12_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO12_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO12_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO12_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO12_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO12_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO12_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO12_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO12_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO12_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO12_CTRL_OFFSET _u(0x00000064)
+#define IO_BANK0_GPIO12_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO12_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO12_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO12_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO12_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO12_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO12_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO12_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO12_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO12_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO12_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO12_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO12_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO12_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO12_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO12_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO12_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO12_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO12_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO12_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO12_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO12_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO12_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO12_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO12_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO12_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO12_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO12_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO12_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO12_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO12_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO12_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO12_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO12_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO12_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO12_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO12_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO12_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO12_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO12_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO12_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO12_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO12_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi1_rx
+//               0x02 -> uart0_tx
+//               0x03 -> i2c0_sda
+//               0x04 -> pwm_a_6
+//               0x05 -> sio_12
+//               0x06 -> pio0_12
+//               0x07 -> pio1_12
+//               0x08 -> usb_muxing_extphy_speed
+//               0x09 -> usb_muxing_overcurr_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO12_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO12_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO12_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO12_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO12_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_SPI1_RX _u(0x01)
+#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_UART0_TX _u(0x02)
+#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_I2C0_SDA _u(0x03)
+#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_PWM_A_6 _u(0x04)
+#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_SIO_12 _u(0x05)
+#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_PIO0_12 _u(0x06)
+#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_PIO1_12 _u(0x07)
+#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_SPEED _u(0x08)
+#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)
+#define IO_BANK0_GPIO12_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO13_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO13_STATUS_OFFSET _u(0x00000068)
+#define IO_BANK0_GPIO13_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO13_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO13_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO13_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO13_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO13_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO13_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO13_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO13_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO13_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO13_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO13_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO13_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO13_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO13_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO13_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO13_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO13_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO13_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO13_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO13_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO13_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO13_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO13_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO13_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO13_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO13_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO13_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO13_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO13_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO13_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO13_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO13_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO13_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO13_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO13_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO13_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO13_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO13_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO13_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO13_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO13_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO13_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO13_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO13_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO13_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO13_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO13_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO13_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO13_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO13_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO13_CTRL_OFFSET _u(0x0000006c)
+#define IO_BANK0_GPIO13_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO13_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO13_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO13_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO13_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO13_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO13_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO13_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO13_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO13_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO13_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO13_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO13_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO13_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO13_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO13_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO13_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO13_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO13_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO13_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO13_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO13_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO13_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO13_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO13_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO13_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO13_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO13_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO13_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO13_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO13_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO13_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO13_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO13_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO13_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO13_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO13_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO13_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO13_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO13_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO13_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO13_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO13_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi1_ss_n
+//               0x02 -> uart0_rx
+//               0x03 -> i2c0_scl
+//               0x04 -> pwm_b_6
+//               0x05 -> sio_13
+//               0x06 -> pio0_13
+//               0x07 -> pio1_13
+//               0x08 -> usb_muxing_extphy_vpo
+//               0x09 -> usb_muxing_vbus_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO13_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO13_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO13_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO13_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO13_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_SPI1_SS_N _u(0x01)
+#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_UART0_RX _u(0x02)
+#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_I2C0_SCL _u(0x03)
+#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_PWM_B_6 _u(0x04)
+#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_SIO_13 _u(0x05)
+#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_PIO0_13 _u(0x06)
+#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_PIO1_13 _u(0x07)
+#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_VPO _u(0x08)
+#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)
+#define IO_BANK0_GPIO13_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO14_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO14_STATUS_OFFSET _u(0x00000070)
+#define IO_BANK0_GPIO14_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO14_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO14_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO14_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO14_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO14_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO14_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO14_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO14_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO14_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO14_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO14_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO14_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO14_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO14_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO14_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO14_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO14_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO14_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO14_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO14_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO14_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO14_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO14_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO14_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO14_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO14_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO14_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO14_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO14_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO14_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO14_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO14_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO14_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO14_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO14_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO14_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO14_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO14_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO14_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO14_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO14_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO14_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO14_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO14_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO14_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO14_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO14_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO14_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO14_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO14_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO14_CTRL_OFFSET _u(0x00000074)
+#define IO_BANK0_GPIO14_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO14_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO14_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO14_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO14_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO14_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO14_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO14_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO14_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO14_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO14_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO14_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO14_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO14_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO14_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO14_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO14_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO14_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO14_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO14_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO14_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO14_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO14_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO14_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO14_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO14_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO14_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO14_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO14_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO14_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO14_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO14_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO14_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO14_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO14_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO14_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO14_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO14_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO14_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO14_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO14_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO14_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO14_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi1_sclk
+//               0x02 -> uart0_cts
+//               0x03 -> i2c1_sda
+//               0x04 -> pwm_a_7
+//               0x05 -> sio_14
+//               0x06 -> pio0_14
+//               0x07 -> pio1_14
+//               0x08 -> usb_muxing_extphy_vmo
+//               0x09 -> usb_muxing_vbus_en
+//               0x1f -> null
+#define IO_BANK0_GPIO14_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO14_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO14_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO14_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO14_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_SPI1_SCLK _u(0x01)
+#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_UART0_CTS _u(0x02)
+#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_I2C1_SDA _u(0x03)
+#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_PWM_A_7 _u(0x04)
+#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_SIO_14 _u(0x05)
+#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_PIO0_14 _u(0x06)
+#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_PIO1_14 _u(0x07)
+#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_USB_MUXING_EXTPHY_VMO _u(0x08)
+#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)
+#define IO_BANK0_GPIO14_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO15_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO15_STATUS_OFFSET _u(0x00000078)
+#define IO_BANK0_GPIO15_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO15_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO15_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO15_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO15_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO15_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO15_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO15_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO15_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO15_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO15_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO15_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO15_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO15_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO15_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO15_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO15_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO15_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO15_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO15_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO15_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO15_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO15_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO15_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO15_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO15_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO15_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO15_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO15_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO15_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO15_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO15_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO15_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO15_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO15_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO15_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO15_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO15_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO15_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO15_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO15_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO15_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO15_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO15_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO15_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO15_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO15_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO15_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO15_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO15_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO15_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO15_CTRL_OFFSET _u(0x0000007c)
+#define IO_BANK0_GPIO15_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO15_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO15_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO15_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO15_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO15_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO15_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO15_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO15_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO15_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO15_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO15_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO15_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO15_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO15_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO15_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO15_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO15_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO15_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO15_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO15_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO15_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO15_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO15_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO15_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO15_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO15_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO15_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO15_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO15_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO15_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO15_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO15_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO15_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO15_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO15_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO15_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO15_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO15_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO15_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO15_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO15_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO15_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi1_tx
+//               0x02 -> uart0_rts
+//               0x03 -> i2c1_scl
+//               0x04 -> pwm_b_7
+//               0x05 -> sio_15
+//               0x06 -> pio0_15
+//               0x07 -> pio1_15
+//               0x08 -> usb_muxing_digital_dp
+//               0x09 -> usb_muxing_overcurr_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO15_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO15_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO15_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO15_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO15_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_SPI1_TX _u(0x01)
+#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_UART0_RTS _u(0x02)
+#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_I2C1_SCL _u(0x03)
+#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_PWM_B_7 _u(0x04)
+#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_SIO_15 _u(0x05)
+#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_PIO0_15 _u(0x06)
+#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_PIO1_15 _u(0x07)
+#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_USB_MUXING_DIGITAL_DP _u(0x08)
+#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)
+#define IO_BANK0_GPIO15_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO16_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO16_STATUS_OFFSET _u(0x00000080)
+#define IO_BANK0_GPIO16_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO16_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO16_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO16_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO16_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO16_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO16_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO16_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO16_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO16_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO16_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO16_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO16_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO16_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO16_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO16_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO16_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO16_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO16_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO16_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO16_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO16_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO16_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO16_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO16_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO16_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO16_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO16_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO16_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO16_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO16_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO16_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO16_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO16_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO16_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO16_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO16_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO16_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO16_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO16_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO16_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO16_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO16_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO16_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO16_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO16_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO16_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO16_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO16_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO16_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO16_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO16_CTRL_OFFSET _u(0x00000084)
+#define IO_BANK0_GPIO16_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO16_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO16_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO16_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO16_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO16_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO16_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO16_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO16_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO16_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO16_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO16_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO16_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO16_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO16_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO16_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO16_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO16_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO16_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO16_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO16_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO16_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO16_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO16_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO16_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO16_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO16_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO16_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO16_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO16_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO16_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO16_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO16_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO16_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO16_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO16_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO16_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO16_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO16_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO16_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO16_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO16_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO16_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi0_rx
+//               0x02 -> uart0_tx
+//               0x03 -> i2c0_sda
+//               0x04 -> pwm_a_0
+//               0x05 -> sio_16
+//               0x06 -> pio0_16
+//               0x07 -> pio1_16
+//               0x08 -> usb_muxing_digital_dm
+//               0x09 -> usb_muxing_vbus_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO16_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO16_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO16_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO16_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO16_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_SPI0_RX _u(0x01)
+#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_UART0_TX _u(0x02)
+#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_I2C0_SDA _u(0x03)
+#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_PWM_A_0 _u(0x04)
+#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_SIO_16 _u(0x05)
+#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_PIO0_16 _u(0x06)
+#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_PIO1_16 _u(0x07)
+#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_USB_MUXING_DIGITAL_DM _u(0x08)
+#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)
+#define IO_BANK0_GPIO16_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO17_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO17_STATUS_OFFSET _u(0x00000088)
+#define IO_BANK0_GPIO17_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO17_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO17_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO17_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO17_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO17_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO17_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO17_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO17_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO17_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO17_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO17_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO17_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO17_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO17_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO17_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO17_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO17_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO17_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO17_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO17_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO17_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO17_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO17_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO17_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO17_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO17_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO17_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO17_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO17_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO17_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO17_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO17_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO17_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO17_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO17_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO17_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO17_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO17_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO17_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO17_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO17_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO17_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO17_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO17_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO17_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO17_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO17_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO17_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO17_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO17_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO17_CTRL_OFFSET _u(0x0000008c)
+#define IO_BANK0_GPIO17_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO17_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO17_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO17_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO17_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO17_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO17_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO17_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO17_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO17_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO17_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO17_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO17_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO17_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO17_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO17_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO17_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO17_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO17_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO17_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO17_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO17_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO17_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO17_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO17_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO17_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO17_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO17_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO17_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO17_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO17_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO17_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO17_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO17_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO17_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO17_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO17_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO17_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO17_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO17_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO17_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO17_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO17_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi0_ss_n
+//               0x02 -> uart0_rx
+//               0x03 -> i2c0_scl
+//               0x04 -> pwm_b_0
+//               0x05 -> sio_17
+//               0x06 -> pio0_17
+//               0x07 -> pio1_17
+//               0x09 -> usb_muxing_vbus_en
+//               0x1f -> null
+#define IO_BANK0_GPIO17_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO17_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO17_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO17_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO17_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_SPI0_SS_N _u(0x01)
+#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_UART0_RX _u(0x02)
+#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_I2C0_SCL _u(0x03)
+#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_PWM_B_0 _u(0x04)
+#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_SIO_17 _u(0x05)
+#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_PIO0_17 _u(0x06)
+#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_PIO1_17 _u(0x07)
+#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)
+#define IO_BANK0_GPIO17_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO18_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO18_STATUS_OFFSET _u(0x00000090)
+#define IO_BANK0_GPIO18_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO18_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO18_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO18_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO18_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO18_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO18_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO18_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO18_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO18_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO18_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO18_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO18_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO18_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO18_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO18_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO18_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO18_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO18_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO18_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO18_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO18_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO18_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO18_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO18_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO18_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO18_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO18_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO18_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO18_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO18_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO18_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO18_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO18_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO18_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO18_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO18_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO18_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO18_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO18_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO18_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO18_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO18_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO18_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO18_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO18_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO18_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO18_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO18_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO18_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO18_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO18_CTRL_OFFSET _u(0x00000094)
+#define IO_BANK0_GPIO18_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO18_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO18_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO18_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO18_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO18_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO18_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO18_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO18_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO18_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO18_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO18_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO18_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO18_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO18_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO18_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO18_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO18_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO18_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO18_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO18_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO18_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO18_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO18_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO18_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO18_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO18_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO18_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO18_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO18_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO18_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO18_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO18_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO18_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO18_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO18_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO18_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO18_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO18_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO18_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO18_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO18_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO18_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi0_sclk
+//               0x02 -> uart0_cts
+//               0x03 -> i2c1_sda
+//               0x04 -> pwm_a_1
+//               0x05 -> sio_18
+//               0x06 -> pio0_18
+//               0x07 -> pio1_18
+//               0x09 -> usb_muxing_overcurr_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO18_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO18_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO18_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO18_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO18_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_SPI0_SCLK _u(0x01)
+#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_UART0_CTS _u(0x02)
+#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_I2C1_SDA _u(0x03)
+#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_PWM_A_1 _u(0x04)
+#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_SIO_18 _u(0x05)
+#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_PIO0_18 _u(0x06)
+#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_PIO1_18 _u(0x07)
+#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)
+#define IO_BANK0_GPIO18_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO19_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO19_STATUS_OFFSET _u(0x00000098)
+#define IO_BANK0_GPIO19_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO19_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO19_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO19_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO19_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO19_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO19_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO19_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO19_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO19_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO19_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO19_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO19_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO19_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO19_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO19_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO19_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO19_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO19_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO19_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO19_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO19_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO19_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO19_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO19_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO19_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO19_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO19_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO19_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO19_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO19_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO19_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO19_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO19_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO19_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO19_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO19_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO19_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO19_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO19_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO19_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO19_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO19_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO19_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO19_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO19_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO19_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO19_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO19_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO19_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO19_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO19_CTRL_OFFSET _u(0x0000009c)
+#define IO_BANK0_GPIO19_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO19_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO19_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO19_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO19_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO19_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO19_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO19_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO19_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO19_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO19_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO19_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO19_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO19_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO19_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO19_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO19_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO19_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO19_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO19_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO19_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO19_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO19_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO19_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO19_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO19_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO19_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO19_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO19_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO19_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO19_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO19_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO19_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO19_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO19_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO19_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO19_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO19_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO19_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO19_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO19_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO19_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO19_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi0_tx
+//               0x02 -> uart0_rts
+//               0x03 -> i2c1_scl
+//               0x04 -> pwm_b_1
+//               0x05 -> sio_19
+//               0x06 -> pio0_19
+//               0x07 -> pio1_19
+//               0x09 -> usb_muxing_vbus_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO19_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO19_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO19_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO19_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO19_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_SPI0_TX _u(0x01)
+#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_UART0_RTS _u(0x02)
+#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_I2C1_SCL _u(0x03)
+#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_PWM_B_1 _u(0x04)
+#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_SIO_19 _u(0x05)
+#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_PIO0_19 _u(0x06)
+#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_PIO1_19 _u(0x07)
+#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)
+#define IO_BANK0_GPIO19_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO20_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO20_STATUS_OFFSET _u(0x000000a0)
+#define IO_BANK0_GPIO20_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO20_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO20_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO20_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO20_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO20_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO20_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO20_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO20_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO20_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO20_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO20_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO20_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO20_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO20_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO20_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO20_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO20_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO20_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO20_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO20_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO20_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO20_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO20_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO20_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO20_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO20_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO20_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO20_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO20_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO20_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO20_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO20_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO20_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO20_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO20_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO20_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO20_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO20_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO20_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO20_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO20_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO20_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO20_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO20_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO20_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO20_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO20_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO20_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO20_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO20_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO20_CTRL_OFFSET _u(0x000000a4)
+#define IO_BANK0_GPIO20_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO20_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO20_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO20_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO20_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO20_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO20_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO20_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO20_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO20_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO20_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO20_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO20_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO20_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO20_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO20_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO20_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO20_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO20_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO20_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO20_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO20_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO20_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO20_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO20_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO20_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO20_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO20_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO20_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO20_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO20_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO20_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO20_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO20_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO20_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO20_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO20_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO20_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO20_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO20_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO20_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO20_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO20_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi0_rx
+//               0x02 -> uart1_tx
+//               0x03 -> i2c0_sda
+//               0x04 -> pwm_a_2
+//               0x05 -> sio_20
+//               0x06 -> pio0_20
+//               0x07 -> pio1_20
+//               0x08 -> clocks_gpin_0
+//               0x09 -> usb_muxing_vbus_en
+//               0x1f -> null
+#define IO_BANK0_GPIO20_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO20_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO20_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO20_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO20_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_SPI0_RX _u(0x01)
+#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_UART1_TX _u(0x02)
+#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_I2C0_SDA _u(0x03)
+#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_PWM_A_2 _u(0x04)
+#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_SIO_20 _u(0x05)
+#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_PIO0_20 _u(0x06)
+#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_PIO1_20 _u(0x07)
+#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_CLOCKS_GPIN_0 _u(0x08)
+#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)
+#define IO_BANK0_GPIO20_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO21_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO21_STATUS_OFFSET _u(0x000000a8)
+#define IO_BANK0_GPIO21_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO21_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO21_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO21_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO21_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO21_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO21_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO21_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO21_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO21_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO21_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO21_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO21_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO21_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO21_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO21_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO21_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO21_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO21_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO21_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO21_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO21_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO21_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO21_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO21_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO21_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO21_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO21_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO21_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO21_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO21_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO21_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO21_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO21_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO21_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO21_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO21_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO21_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO21_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO21_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO21_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO21_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO21_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO21_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO21_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO21_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO21_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO21_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO21_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO21_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO21_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO21_CTRL_OFFSET _u(0x000000ac)
+#define IO_BANK0_GPIO21_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO21_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO21_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO21_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO21_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO21_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO21_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO21_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO21_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO21_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO21_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO21_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO21_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO21_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO21_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO21_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO21_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO21_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO21_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO21_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO21_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO21_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO21_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO21_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO21_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO21_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO21_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO21_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO21_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO21_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO21_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO21_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO21_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO21_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO21_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO21_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO21_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO21_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO21_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO21_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO21_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO21_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO21_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi0_ss_n
+//               0x02 -> uart1_rx
+//               0x03 -> i2c0_scl
+//               0x04 -> pwm_b_2
+//               0x05 -> sio_21
+//               0x06 -> pio0_21
+//               0x07 -> pio1_21
+//               0x08 -> clocks_gpout_0
+//               0x09 -> usb_muxing_overcurr_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO21_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO21_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO21_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO21_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO21_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_SPI0_SS_N _u(0x01)
+#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_UART1_RX _u(0x02)
+#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_I2C0_SCL _u(0x03)
+#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_PWM_B_2 _u(0x04)
+#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_SIO_21 _u(0x05)
+#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_PIO0_21 _u(0x06)
+#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_PIO1_21 _u(0x07)
+#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_0 _u(0x08)
+#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)
+#define IO_BANK0_GPIO21_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO22_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO22_STATUS_OFFSET _u(0x000000b0)
+#define IO_BANK0_GPIO22_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO22_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO22_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO22_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO22_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO22_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO22_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO22_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO22_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO22_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO22_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO22_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO22_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO22_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO22_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO22_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO22_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO22_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO22_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO22_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO22_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO22_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO22_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO22_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO22_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO22_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO22_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO22_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO22_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO22_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO22_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO22_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO22_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO22_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO22_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO22_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO22_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO22_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO22_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO22_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO22_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO22_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO22_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO22_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO22_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO22_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO22_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO22_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO22_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO22_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO22_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO22_CTRL_OFFSET _u(0x000000b4)
+#define IO_BANK0_GPIO22_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO22_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO22_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO22_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO22_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO22_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO22_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO22_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO22_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO22_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO22_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO22_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO22_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO22_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO22_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO22_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO22_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO22_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO22_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO22_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO22_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO22_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO22_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO22_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO22_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO22_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO22_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO22_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO22_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO22_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO22_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO22_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO22_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO22_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO22_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO22_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO22_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO22_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO22_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO22_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO22_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO22_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO22_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi0_sclk
+//               0x02 -> uart1_cts
+//               0x03 -> i2c1_sda
+//               0x04 -> pwm_a_3
+//               0x05 -> sio_22
+//               0x06 -> pio0_22
+//               0x07 -> pio1_22
+//               0x08 -> clocks_gpin_1
+//               0x09 -> usb_muxing_vbus_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO22_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO22_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO22_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO22_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO22_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_SPI0_SCLK _u(0x01)
+#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_UART1_CTS _u(0x02)
+#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_I2C1_SDA _u(0x03)
+#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_PWM_A_3 _u(0x04)
+#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_SIO_22 _u(0x05)
+#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_PIO0_22 _u(0x06)
+#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_PIO1_22 _u(0x07)
+#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_CLOCKS_GPIN_1 _u(0x08)
+#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)
+#define IO_BANK0_GPIO22_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO23_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO23_STATUS_OFFSET _u(0x000000b8)
+#define IO_BANK0_GPIO23_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO23_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO23_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO23_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO23_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO23_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO23_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO23_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO23_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO23_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO23_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO23_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO23_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO23_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO23_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO23_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO23_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO23_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO23_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO23_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO23_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO23_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO23_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO23_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO23_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO23_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO23_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO23_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO23_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO23_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO23_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO23_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO23_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO23_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO23_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO23_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO23_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO23_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO23_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO23_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO23_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO23_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO23_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO23_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO23_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO23_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO23_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO23_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO23_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO23_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO23_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO23_CTRL_OFFSET _u(0x000000bc)
+#define IO_BANK0_GPIO23_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO23_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO23_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO23_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO23_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO23_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO23_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO23_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO23_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO23_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO23_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO23_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO23_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO23_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO23_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO23_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO23_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO23_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO23_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO23_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO23_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO23_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO23_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO23_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO23_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO23_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO23_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO23_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO23_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO23_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO23_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO23_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO23_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO23_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO23_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO23_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO23_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO23_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO23_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO23_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO23_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO23_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO23_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi0_tx
+//               0x02 -> uart1_rts
+//               0x03 -> i2c1_scl
+//               0x04 -> pwm_b_3
+//               0x05 -> sio_23
+//               0x06 -> pio0_23
+//               0x07 -> pio1_23
+//               0x08 -> clocks_gpout_1
+//               0x09 -> usb_muxing_vbus_en
+//               0x1f -> null
+#define IO_BANK0_GPIO23_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO23_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO23_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO23_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO23_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_SPI0_TX _u(0x01)
+#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_UART1_RTS _u(0x02)
+#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_I2C1_SCL _u(0x03)
+#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_PWM_B_3 _u(0x04)
+#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_SIO_23 _u(0x05)
+#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_PIO0_23 _u(0x06)
+#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_PIO1_23 _u(0x07)
+#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_1 _u(0x08)
+#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)
+#define IO_BANK0_GPIO23_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO24_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO24_STATUS_OFFSET _u(0x000000c0)
+#define IO_BANK0_GPIO24_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO24_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO24_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO24_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO24_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO24_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO24_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO24_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO24_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO24_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO24_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO24_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO24_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO24_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO24_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO24_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO24_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO24_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO24_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO24_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO24_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO24_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO24_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO24_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO24_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO24_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO24_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO24_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO24_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO24_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO24_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO24_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO24_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO24_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO24_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO24_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO24_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO24_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO24_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO24_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO24_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO24_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO24_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO24_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO24_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO24_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO24_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO24_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO24_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO24_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO24_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO24_CTRL_OFFSET _u(0x000000c4)
+#define IO_BANK0_GPIO24_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO24_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO24_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO24_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO24_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO24_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO24_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO24_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO24_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO24_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO24_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO24_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO24_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO24_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO24_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO24_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO24_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO24_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO24_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO24_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO24_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO24_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO24_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO24_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO24_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO24_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO24_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO24_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO24_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO24_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO24_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO24_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO24_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO24_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO24_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO24_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO24_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO24_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO24_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO24_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO24_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO24_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO24_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi1_rx
+//               0x02 -> uart1_tx
+//               0x03 -> i2c0_sda
+//               0x04 -> pwm_a_4
+//               0x05 -> sio_24
+//               0x06 -> pio0_24
+//               0x07 -> pio1_24
+//               0x08 -> clocks_gpout_2
+//               0x09 -> usb_muxing_overcurr_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO24_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO24_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO24_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO24_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO24_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_SPI1_RX _u(0x01)
+#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_UART1_TX _u(0x02)
+#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_I2C0_SDA _u(0x03)
+#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_PWM_A_4 _u(0x04)
+#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_SIO_24 _u(0x05)
+#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_PIO0_24 _u(0x06)
+#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_PIO1_24 _u(0x07)
+#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_2 _u(0x08)
+#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)
+#define IO_BANK0_GPIO24_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO25_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO25_STATUS_OFFSET _u(0x000000c8)
+#define IO_BANK0_GPIO25_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO25_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO25_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO25_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO25_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO25_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO25_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO25_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO25_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO25_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO25_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO25_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO25_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO25_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO25_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO25_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO25_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO25_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO25_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO25_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO25_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO25_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO25_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO25_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO25_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO25_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO25_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO25_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO25_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO25_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO25_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO25_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO25_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO25_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO25_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO25_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO25_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO25_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO25_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO25_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO25_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO25_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO25_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO25_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO25_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO25_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO25_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO25_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO25_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO25_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO25_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO25_CTRL_OFFSET _u(0x000000cc)
+#define IO_BANK0_GPIO25_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO25_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO25_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO25_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO25_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO25_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO25_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO25_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO25_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO25_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO25_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO25_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO25_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO25_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO25_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO25_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO25_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO25_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO25_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO25_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO25_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO25_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO25_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO25_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO25_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO25_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO25_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO25_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO25_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO25_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO25_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO25_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO25_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO25_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO25_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO25_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO25_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO25_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO25_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO25_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO25_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO25_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO25_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi1_ss_n
+//               0x02 -> uart1_rx
+//               0x03 -> i2c0_scl
+//               0x04 -> pwm_b_4
+//               0x05 -> sio_25
+//               0x06 -> pio0_25
+//               0x07 -> pio1_25
+//               0x08 -> clocks_gpout_3
+//               0x09 -> usb_muxing_vbus_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO25_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO25_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO25_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO25_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO25_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_SPI1_SS_N _u(0x01)
+#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_UART1_RX _u(0x02)
+#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_I2C0_SCL _u(0x03)
+#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_PWM_B_4 _u(0x04)
+#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_SIO_25 _u(0x05)
+#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_PIO0_25 _u(0x06)
+#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_PIO1_25 _u(0x07)
+#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_CLOCKS_GPOUT_3 _u(0x08)
+#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)
+#define IO_BANK0_GPIO25_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO26_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO26_STATUS_OFFSET _u(0x000000d0)
+#define IO_BANK0_GPIO26_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO26_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO26_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO26_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO26_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO26_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO26_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO26_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO26_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO26_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO26_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO26_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO26_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO26_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO26_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO26_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO26_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO26_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO26_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO26_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO26_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO26_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO26_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO26_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO26_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO26_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO26_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO26_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO26_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO26_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO26_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO26_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO26_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO26_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO26_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO26_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO26_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO26_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO26_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO26_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO26_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO26_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO26_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO26_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO26_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO26_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO26_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO26_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO26_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO26_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO26_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO26_CTRL_OFFSET _u(0x000000d4)
+#define IO_BANK0_GPIO26_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO26_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO26_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO26_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO26_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO26_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO26_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO26_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO26_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO26_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO26_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO26_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO26_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO26_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO26_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO26_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO26_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO26_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO26_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO26_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO26_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO26_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO26_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO26_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO26_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO26_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO26_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO26_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO26_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO26_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO26_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO26_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO26_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO26_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO26_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO26_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO26_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO26_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO26_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO26_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO26_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO26_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO26_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi1_sclk
+//               0x02 -> uart1_cts
+//               0x03 -> i2c1_sda
+//               0x04 -> pwm_a_5
+//               0x05 -> sio_26
+//               0x06 -> pio0_26
+//               0x07 -> pio1_26
+//               0x09 -> usb_muxing_vbus_en
+//               0x1f -> null
+#define IO_BANK0_GPIO26_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO26_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO26_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO26_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO26_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_SPI1_SCLK _u(0x01)
+#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_UART1_CTS _u(0x02)
+#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_I2C1_SDA _u(0x03)
+#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_PWM_A_5 _u(0x04)
+#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_SIO_26 _u(0x05)
+#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_PIO0_26 _u(0x06)
+#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_PIO1_26 _u(0x07)
+#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)
+#define IO_BANK0_GPIO26_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO27_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO27_STATUS_OFFSET _u(0x000000d8)
+#define IO_BANK0_GPIO27_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO27_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO27_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO27_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO27_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO27_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO27_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO27_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO27_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO27_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO27_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO27_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO27_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO27_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO27_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO27_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO27_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO27_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO27_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO27_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO27_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO27_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO27_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO27_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO27_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO27_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO27_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO27_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO27_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO27_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO27_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO27_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO27_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO27_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO27_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO27_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO27_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO27_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO27_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO27_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO27_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO27_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO27_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO27_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO27_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO27_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO27_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO27_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO27_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO27_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO27_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO27_CTRL_OFFSET _u(0x000000dc)
+#define IO_BANK0_GPIO27_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO27_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO27_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO27_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO27_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO27_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO27_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO27_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO27_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO27_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO27_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO27_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO27_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO27_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO27_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO27_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO27_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO27_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO27_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO27_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO27_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO27_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO27_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO27_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO27_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO27_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO27_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO27_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO27_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO27_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO27_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO27_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO27_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO27_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO27_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO27_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO27_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO27_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO27_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO27_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO27_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO27_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO27_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi1_tx
+//               0x02 -> uart1_rts
+//               0x03 -> i2c1_scl
+//               0x04 -> pwm_b_5
+//               0x05 -> sio_27
+//               0x06 -> pio0_27
+//               0x07 -> pio1_27
+//               0x09 -> usb_muxing_overcurr_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO27_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO27_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO27_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO27_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO27_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_SPI1_TX _u(0x01)
+#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_UART1_RTS _u(0x02)
+#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_I2C1_SCL _u(0x03)
+#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_PWM_B_5 _u(0x04)
+#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_SIO_27 _u(0x05)
+#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_PIO0_27 _u(0x06)
+#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_PIO1_27 _u(0x07)
+#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_USB_MUXING_OVERCURR_DETECT _u(0x09)
+#define IO_BANK0_GPIO27_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO28_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO28_STATUS_OFFSET _u(0x000000e0)
+#define IO_BANK0_GPIO28_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO28_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO28_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO28_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO28_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO28_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO28_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO28_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO28_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO28_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO28_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO28_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO28_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO28_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO28_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO28_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO28_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO28_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO28_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO28_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO28_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO28_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO28_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO28_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO28_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO28_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO28_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO28_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO28_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO28_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO28_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO28_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO28_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO28_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO28_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO28_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO28_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO28_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO28_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO28_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO28_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO28_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO28_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO28_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO28_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO28_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO28_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO28_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO28_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO28_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO28_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO28_CTRL_OFFSET _u(0x000000e4)
+#define IO_BANK0_GPIO28_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO28_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO28_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO28_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO28_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO28_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO28_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO28_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO28_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO28_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO28_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO28_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO28_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO28_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO28_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO28_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO28_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO28_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO28_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO28_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO28_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO28_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO28_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO28_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO28_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO28_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO28_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO28_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO28_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO28_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO28_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO28_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO28_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO28_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO28_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO28_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO28_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO28_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO28_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO28_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO28_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO28_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO28_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi1_rx
+//               0x02 -> uart0_tx
+//               0x03 -> i2c0_sda
+//               0x04 -> pwm_a_6
+//               0x05 -> sio_28
+//               0x06 -> pio0_28
+//               0x07 -> pio1_28
+//               0x09 -> usb_muxing_vbus_detect
+//               0x1f -> null
+#define IO_BANK0_GPIO28_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO28_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO28_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO28_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO28_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_SPI1_RX _u(0x01)
+#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_UART0_TX _u(0x02)
+#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_I2C0_SDA _u(0x03)
+#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_PWM_A_6 _u(0x04)
+#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_SIO_28 _u(0x05)
+#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_PIO0_28 _u(0x06)
+#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_PIO1_28 _u(0x07)
+#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_DETECT _u(0x09)
+#define IO_BANK0_GPIO28_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_GPIO29_STATUS
+// Description : GPIO status
+#define IO_BANK0_GPIO29_STATUS_OFFSET _u(0x000000e8)
+#define IO_BANK0_GPIO29_STATUS_BITS   _u(0x050a3300)
+#define IO_BANK0_GPIO29_STATUS_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO29_STATUS_IRQTOPROC
+// Description : interrupt to processors, after override is applied
+#define IO_BANK0_GPIO29_STATUS_IRQTOPROC_RESET  _u(0x0)
+#define IO_BANK0_GPIO29_STATUS_IRQTOPROC_BITS   _u(0x04000000)
+#define IO_BANK0_GPIO29_STATUS_IRQTOPROC_MSB    _u(26)
+#define IO_BANK0_GPIO29_STATUS_IRQTOPROC_LSB    _u(26)
+#define IO_BANK0_GPIO29_STATUS_IRQTOPROC_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO29_STATUS_IRQFROMPAD
+// Description : interrupt from pad before override is applied
+#define IO_BANK0_GPIO29_STATUS_IRQFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO29_STATUS_IRQFROMPAD_BITS   _u(0x01000000)
+#define IO_BANK0_GPIO29_STATUS_IRQFROMPAD_MSB    _u(24)
+#define IO_BANK0_GPIO29_STATUS_IRQFROMPAD_LSB    _u(24)
+#define IO_BANK0_GPIO29_STATUS_IRQFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO29_STATUS_INTOPERI
+// Description : input signal to peripheral, after override is applied
+#define IO_BANK0_GPIO29_STATUS_INTOPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO29_STATUS_INTOPERI_BITS   _u(0x00080000)
+#define IO_BANK0_GPIO29_STATUS_INTOPERI_MSB    _u(19)
+#define IO_BANK0_GPIO29_STATUS_INTOPERI_LSB    _u(19)
+#define IO_BANK0_GPIO29_STATUS_INTOPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO29_STATUS_INFROMPAD
+// Description : input signal from pad, before override is applied
+#define IO_BANK0_GPIO29_STATUS_INFROMPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO29_STATUS_INFROMPAD_BITS   _u(0x00020000)
+#define IO_BANK0_GPIO29_STATUS_INFROMPAD_MSB    _u(17)
+#define IO_BANK0_GPIO29_STATUS_INFROMPAD_LSB    _u(17)
+#define IO_BANK0_GPIO29_STATUS_INFROMPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO29_STATUS_OETOPAD
+// Description : output enable to pad after register override is applied
+#define IO_BANK0_GPIO29_STATUS_OETOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO29_STATUS_OETOPAD_BITS   _u(0x00002000)
+#define IO_BANK0_GPIO29_STATUS_OETOPAD_MSB    _u(13)
+#define IO_BANK0_GPIO29_STATUS_OETOPAD_LSB    _u(13)
+#define IO_BANK0_GPIO29_STATUS_OETOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO29_STATUS_OEFROMPERI
+// Description : output enable from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO29_STATUS_OEFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO29_STATUS_OEFROMPERI_BITS   _u(0x00001000)
+#define IO_BANK0_GPIO29_STATUS_OEFROMPERI_MSB    _u(12)
+#define IO_BANK0_GPIO29_STATUS_OEFROMPERI_LSB    _u(12)
+#define IO_BANK0_GPIO29_STATUS_OEFROMPERI_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO29_STATUS_OUTTOPAD
+// Description : output signal to pad after register override is applied
+#define IO_BANK0_GPIO29_STATUS_OUTTOPAD_RESET  _u(0x0)
+#define IO_BANK0_GPIO29_STATUS_OUTTOPAD_BITS   _u(0x00000200)
+#define IO_BANK0_GPIO29_STATUS_OUTTOPAD_MSB    _u(9)
+#define IO_BANK0_GPIO29_STATUS_OUTTOPAD_LSB    _u(9)
+#define IO_BANK0_GPIO29_STATUS_OUTTOPAD_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO29_STATUS_OUTFROMPERI
+// Description : output signal from selected peripheral, before register
+//               override is applied
+#define IO_BANK0_GPIO29_STATUS_OUTFROMPERI_RESET  _u(0x0)
+#define IO_BANK0_GPIO29_STATUS_OUTFROMPERI_BITS   _u(0x00000100)
+#define IO_BANK0_GPIO29_STATUS_OUTFROMPERI_MSB    _u(8)
+#define IO_BANK0_GPIO29_STATUS_OUTFROMPERI_LSB    _u(8)
+#define IO_BANK0_GPIO29_STATUS_OUTFROMPERI_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_GPIO29_CTRL
+// Description : GPIO control including function select and overrides.
+#define IO_BANK0_GPIO29_CTRL_OFFSET _u(0x000000ec)
+#define IO_BANK0_GPIO29_CTRL_BITS   _u(0x3003331f)
+#define IO_BANK0_GPIO29_CTRL_RESET  _u(0x0000001f)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO29_CTRL_IRQOVER
+//               0x0 -> don't invert the interrupt
+//               0x1 -> invert the interrupt
+//               0x2 -> drive interrupt low
+//               0x3 -> drive interrupt high
+#define IO_BANK0_GPIO29_CTRL_IRQOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO29_CTRL_IRQOVER_BITS   _u(0x30000000)
+#define IO_BANK0_GPIO29_CTRL_IRQOVER_MSB    _u(29)
+#define IO_BANK0_GPIO29_CTRL_IRQOVER_LSB    _u(28)
+#define IO_BANK0_GPIO29_CTRL_IRQOVER_ACCESS "RW"
+#define IO_BANK0_GPIO29_CTRL_IRQOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO29_CTRL_IRQOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO29_CTRL_IRQOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO29_CTRL_IRQOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO29_CTRL_INOVER
+//               0x0 -> don't invert the peri input
+//               0x1 -> invert the peri input
+//               0x2 -> drive peri input low
+//               0x3 -> drive peri input high
+#define IO_BANK0_GPIO29_CTRL_INOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO29_CTRL_INOVER_BITS   _u(0x00030000)
+#define IO_BANK0_GPIO29_CTRL_INOVER_MSB    _u(17)
+#define IO_BANK0_GPIO29_CTRL_INOVER_LSB    _u(16)
+#define IO_BANK0_GPIO29_CTRL_INOVER_ACCESS "RW"
+#define IO_BANK0_GPIO29_CTRL_INOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO29_CTRL_INOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO29_CTRL_INOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO29_CTRL_INOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO29_CTRL_OEOVER
+//               0x0 -> drive output enable from peripheral signal selected by funcsel
+//               0x1 -> drive output enable from inverse of peripheral signal selected by funcsel
+//               0x2 -> disable output
+//               0x3 -> enable output
+#define IO_BANK0_GPIO29_CTRL_OEOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO29_CTRL_OEOVER_BITS   _u(0x00003000)
+#define IO_BANK0_GPIO29_CTRL_OEOVER_MSB    _u(13)
+#define IO_BANK0_GPIO29_CTRL_OEOVER_LSB    _u(12)
+#define IO_BANK0_GPIO29_CTRL_OEOVER_ACCESS "RW"
+#define IO_BANK0_GPIO29_CTRL_OEOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO29_CTRL_OEOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO29_CTRL_OEOVER_VALUE_DISABLE _u(0x2)
+#define IO_BANK0_GPIO29_CTRL_OEOVER_VALUE_ENABLE _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO29_CTRL_OUTOVER
+//               0x0 -> drive output from peripheral signal selected by funcsel
+//               0x1 -> drive output from inverse of peripheral signal selected by funcsel
+//               0x2 -> drive output low
+//               0x3 -> drive output high
+#define IO_BANK0_GPIO29_CTRL_OUTOVER_RESET  _u(0x0)
+#define IO_BANK0_GPIO29_CTRL_OUTOVER_BITS   _u(0x00000300)
+#define IO_BANK0_GPIO29_CTRL_OUTOVER_MSB    _u(9)
+#define IO_BANK0_GPIO29_CTRL_OUTOVER_LSB    _u(8)
+#define IO_BANK0_GPIO29_CTRL_OUTOVER_ACCESS "RW"
+#define IO_BANK0_GPIO29_CTRL_OUTOVER_VALUE_NORMAL _u(0x0)
+#define IO_BANK0_GPIO29_CTRL_OUTOVER_VALUE_INVERT _u(0x1)
+#define IO_BANK0_GPIO29_CTRL_OUTOVER_VALUE_LOW _u(0x2)
+#define IO_BANK0_GPIO29_CTRL_OUTOVER_VALUE_HIGH _u(0x3)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_GPIO29_CTRL_FUNCSEL
+// Description : 0-31 -> selects pin function according to the gpio table
+//               31 == NULL
+//               0x01 -> spi1_ss_n
+//               0x02 -> uart0_rx
+//               0x03 -> i2c0_scl
+//               0x04 -> pwm_b_6
+//               0x05 -> sio_29
+//               0x06 -> pio0_29
+//               0x07 -> pio1_29
+//               0x09 -> usb_muxing_vbus_en
+//               0x1f -> null
+#define IO_BANK0_GPIO29_CTRL_FUNCSEL_RESET  _u(0x1f)
+#define IO_BANK0_GPIO29_CTRL_FUNCSEL_BITS   _u(0x0000001f)
+#define IO_BANK0_GPIO29_CTRL_FUNCSEL_MSB    _u(4)
+#define IO_BANK0_GPIO29_CTRL_FUNCSEL_LSB    _u(0)
+#define IO_BANK0_GPIO29_CTRL_FUNCSEL_ACCESS "RW"
+#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_SPI1_SS_N _u(0x01)
+#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_UART0_RX _u(0x02)
+#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_I2C0_SCL _u(0x03)
+#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_PWM_B_6 _u(0x04)
+#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_SIO_29 _u(0x05)
+#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_PIO0_29 _u(0x06)
+#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_PIO1_29 _u(0x07)
+#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_USB_MUXING_VBUS_EN _u(0x09)
+#define IO_BANK0_GPIO29_CTRL_FUNCSEL_VALUE_NULL _u(0x1f)
+// =============================================================================
+// Register    : IO_BANK0_INTR0
+// Description : Raw Interrupts
+#define IO_BANK0_INTR0_OFFSET _u(0x000000f0)
+#define IO_BANK0_INTR0_BITS   _u(0xffffffff)
+#define IO_BANK0_INTR0_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO7_EDGE_HIGH
+#define IO_BANK0_INTR0_GPIO7_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_INTR0_GPIO7_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_INTR0_GPIO7_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_INTR0_GPIO7_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO7_EDGE_LOW
+#define IO_BANK0_INTR0_GPIO7_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_INTR0_GPIO7_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_INTR0_GPIO7_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_INTR0_GPIO7_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO7_LEVEL_HIGH
+#define IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_INTR0_GPIO7_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO7_LEVEL_LOW
+#define IO_BANK0_INTR0_GPIO7_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_INTR0_GPIO7_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_INTR0_GPIO7_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_INTR0_GPIO7_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO6_EDGE_HIGH
+#define IO_BANK0_INTR0_GPIO6_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_INTR0_GPIO6_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_INTR0_GPIO6_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_INTR0_GPIO6_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO6_EDGE_LOW
+#define IO_BANK0_INTR0_GPIO6_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_INTR0_GPIO6_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_INTR0_GPIO6_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_INTR0_GPIO6_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO6_LEVEL_HIGH
+#define IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_INTR0_GPIO6_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO6_LEVEL_LOW
+#define IO_BANK0_INTR0_GPIO6_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_INTR0_GPIO6_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_INTR0_GPIO6_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_INTR0_GPIO6_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO5_EDGE_HIGH
+#define IO_BANK0_INTR0_GPIO5_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_INTR0_GPIO5_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_INTR0_GPIO5_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_INTR0_GPIO5_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO5_EDGE_LOW
+#define IO_BANK0_INTR0_GPIO5_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_INTR0_GPIO5_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_INTR0_GPIO5_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_INTR0_GPIO5_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO5_LEVEL_HIGH
+#define IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_INTR0_GPIO5_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO5_LEVEL_LOW
+#define IO_BANK0_INTR0_GPIO5_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_INTR0_GPIO5_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_INTR0_GPIO5_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_INTR0_GPIO5_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO4_EDGE_HIGH
+#define IO_BANK0_INTR0_GPIO4_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_INTR0_GPIO4_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_INTR0_GPIO4_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_INTR0_GPIO4_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO4_EDGE_LOW
+#define IO_BANK0_INTR0_GPIO4_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_INTR0_GPIO4_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_INTR0_GPIO4_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_INTR0_GPIO4_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO4_LEVEL_HIGH
+#define IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_INTR0_GPIO4_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO4_LEVEL_LOW
+#define IO_BANK0_INTR0_GPIO4_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_INTR0_GPIO4_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_INTR0_GPIO4_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_INTR0_GPIO4_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO3_EDGE_HIGH
+#define IO_BANK0_INTR0_GPIO3_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_INTR0_GPIO3_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_INTR0_GPIO3_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_INTR0_GPIO3_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO3_EDGE_LOW
+#define IO_BANK0_INTR0_GPIO3_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_INTR0_GPIO3_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_INTR0_GPIO3_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_INTR0_GPIO3_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO3_LEVEL_HIGH
+#define IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_INTR0_GPIO3_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO3_LEVEL_LOW
+#define IO_BANK0_INTR0_GPIO3_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_INTR0_GPIO3_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_INTR0_GPIO3_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_INTR0_GPIO3_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO2_EDGE_HIGH
+#define IO_BANK0_INTR0_GPIO2_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_INTR0_GPIO2_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_INTR0_GPIO2_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_INTR0_GPIO2_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO2_EDGE_LOW
+#define IO_BANK0_INTR0_GPIO2_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_INTR0_GPIO2_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_INTR0_GPIO2_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_INTR0_GPIO2_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO2_LEVEL_HIGH
+#define IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_INTR0_GPIO2_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO2_LEVEL_LOW
+#define IO_BANK0_INTR0_GPIO2_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_INTR0_GPIO2_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_INTR0_GPIO2_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_INTR0_GPIO2_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO1_EDGE_HIGH
+#define IO_BANK0_INTR0_GPIO1_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_INTR0_GPIO1_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_INTR0_GPIO1_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_INTR0_GPIO1_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO1_EDGE_LOW
+#define IO_BANK0_INTR0_GPIO1_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_INTR0_GPIO1_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_INTR0_GPIO1_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_INTR0_GPIO1_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO1_LEVEL_HIGH
+#define IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_INTR0_GPIO1_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO1_LEVEL_LOW
+#define IO_BANK0_INTR0_GPIO1_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_INTR0_GPIO1_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_INTR0_GPIO1_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_INTR0_GPIO1_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO0_EDGE_HIGH
+#define IO_BANK0_INTR0_GPIO0_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_INTR0_GPIO0_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_INTR0_GPIO0_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_INTR0_GPIO0_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO0_EDGE_LOW
+#define IO_BANK0_INTR0_GPIO0_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_INTR0_GPIO0_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_INTR0_GPIO0_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_INTR0_GPIO0_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO0_LEVEL_HIGH
+#define IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_INTR0_GPIO0_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR0_GPIO0_LEVEL_LOW
+#define IO_BANK0_INTR0_GPIO0_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_INTR0_GPIO0_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_INTR0_GPIO0_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_INTR0_GPIO0_LEVEL_LOW_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_INTR1
+// Description : Raw Interrupts
+#define IO_BANK0_INTR1_OFFSET _u(0x000000f4)
+#define IO_BANK0_INTR1_BITS   _u(0xffffffff)
+#define IO_BANK0_INTR1_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO15_EDGE_HIGH
+#define IO_BANK0_INTR1_GPIO15_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_INTR1_GPIO15_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_INTR1_GPIO15_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_INTR1_GPIO15_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO15_EDGE_LOW
+#define IO_BANK0_INTR1_GPIO15_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_INTR1_GPIO15_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_INTR1_GPIO15_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_INTR1_GPIO15_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO15_LEVEL_HIGH
+#define IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_INTR1_GPIO15_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO15_LEVEL_LOW
+#define IO_BANK0_INTR1_GPIO15_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_INTR1_GPIO15_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_INTR1_GPIO15_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_INTR1_GPIO15_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO14_EDGE_HIGH
+#define IO_BANK0_INTR1_GPIO14_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_INTR1_GPIO14_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_INTR1_GPIO14_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_INTR1_GPIO14_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO14_EDGE_LOW
+#define IO_BANK0_INTR1_GPIO14_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_INTR1_GPIO14_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_INTR1_GPIO14_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_INTR1_GPIO14_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO14_LEVEL_HIGH
+#define IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_INTR1_GPIO14_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO14_LEVEL_LOW
+#define IO_BANK0_INTR1_GPIO14_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_INTR1_GPIO14_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_INTR1_GPIO14_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_INTR1_GPIO14_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO13_EDGE_HIGH
+#define IO_BANK0_INTR1_GPIO13_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_INTR1_GPIO13_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_INTR1_GPIO13_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_INTR1_GPIO13_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO13_EDGE_LOW
+#define IO_BANK0_INTR1_GPIO13_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_INTR1_GPIO13_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_INTR1_GPIO13_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_INTR1_GPIO13_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO13_LEVEL_HIGH
+#define IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_INTR1_GPIO13_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO13_LEVEL_LOW
+#define IO_BANK0_INTR1_GPIO13_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_INTR1_GPIO13_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_INTR1_GPIO13_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_INTR1_GPIO13_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO12_EDGE_HIGH
+#define IO_BANK0_INTR1_GPIO12_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_INTR1_GPIO12_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_INTR1_GPIO12_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_INTR1_GPIO12_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO12_EDGE_LOW
+#define IO_BANK0_INTR1_GPIO12_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_INTR1_GPIO12_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_INTR1_GPIO12_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_INTR1_GPIO12_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO12_LEVEL_HIGH
+#define IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_INTR1_GPIO12_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO12_LEVEL_LOW
+#define IO_BANK0_INTR1_GPIO12_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_INTR1_GPIO12_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_INTR1_GPIO12_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_INTR1_GPIO12_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO11_EDGE_HIGH
+#define IO_BANK0_INTR1_GPIO11_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_INTR1_GPIO11_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_INTR1_GPIO11_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_INTR1_GPIO11_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO11_EDGE_LOW
+#define IO_BANK0_INTR1_GPIO11_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_INTR1_GPIO11_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_INTR1_GPIO11_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_INTR1_GPIO11_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO11_LEVEL_HIGH
+#define IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_INTR1_GPIO11_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO11_LEVEL_LOW
+#define IO_BANK0_INTR1_GPIO11_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_INTR1_GPIO11_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_INTR1_GPIO11_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_INTR1_GPIO11_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO10_EDGE_HIGH
+#define IO_BANK0_INTR1_GPIO10_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_INTR1_GPIO10_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_INTR1_GPIO10_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_INTR1_GPIO10_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO10_EDGE_LOW
+#define IO_BANK0_INTR1_GPIO10_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_INTR1_GPIO10_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_INTR1_GPIO10_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_INTR1_GPIO10_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO10_LEVEL_HIGH
+#define IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_INTR1_GPIO10_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO10_LEVEL_LOW
+#define IO_BANK0_INTR1_GPIO10_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_INTR1_GPIO10_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_INTR1_GPIO10_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_INTR1_GPIO10_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO9_EDGE_HIGH
+#define IO_BANK0_INTR1_GPIO9_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_INTR1_GPIO9_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_INTR1_GPIO9_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_INTR1_GPIO9_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO9_EDGE_LOW
+#define IO_BANK0_INTR1_GPIO9_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_INTR1_GPIO9_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_INTR1_GPIO9_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_INTR1_GPIO9_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO9_LEVEL_HIGH
+#define IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_INTR1_GPIO9_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO9_LEVEL_LOW
+#define IO_BANK0_INTR1_GPIO9_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_INTR1_GPIO9_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_INTR1_GPIO9_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_INTR1_GPIO9_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO8_EDGE_HIGH
+#define IO_BANK0_INTR1_GPIO8_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_INTR1_GPIO8_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_INTR1_GPIO8_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_INTR1_GPIO8_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO8_EDGE_LOW
+#define IO_BANK0_INTR1_GPIO8_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_INTR1_GPIO8_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_INTR1_GPIO8_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_INTR1_GPIO8_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO8_LEVEL_HIGH
+#define IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_INTR1_GPIO8_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR1_GPIO8_LEVEL_LOW
+#define IO_BANK0_INTR1_GPIO8_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_INTR1_GPIO8_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_INTR1_GPIO8_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_INTR1_GPIO8_LEVEL_LOW_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_INTR2
+// Description : Raw Interrupts
+#define IO_BANK0_INTR2_OFFSET _u(0x000000f8)
+#define IO_BANK0_INTR2_BITS   _u(0xffffffff)
+#define IO_BANK0_INTR2_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO23_EDGE_HIGH
+#define IO_BANK0_INTR2_GPIO23_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_INTR2_GPIO23_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_INTR2_GPIO23_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_INTR2_GPIO23_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO23_EDGE_LOW
+#define IO_BANK0_INTR2_GPIO23_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_INTR2_GPIO23_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_INTR2_GPIO23_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_INTR2_GPIO23_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO23_LEVEL_HIGH
+#define IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_INTR2_GPIO23_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO23_LEVEL_LOW
+#define IO_BANK0_INTR2_GPIO23_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_INTR2_GPIO23_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_INTR2_GPIO23_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_INTR2_GPIO23_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO22_EDGE_HIGH
+#define IO_BANK0_INTR2_GPIO22_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_INTR2_GPIO22_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_INTR2_GPIO22_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_INTR2_GPIO22_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO22_EDGE_LOW
+#define IO_BANK0_INTR2_GPIO22_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_INTR2_GPIO22_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_INTR2_GPIO22_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_INTR2_GPIO22_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO22_LEVEL_HIGH
+#define IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_INTR2_GPIO22_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO22_LEVEL_LOW
+#define IO_BANK0_INTR2_GPIO22_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_INTR2_GPIO22_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_INTR2_GPIO22_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_INTR2_GPIO22_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO21_EDGE_HIGH
+#define IO_BANK0_INTR2_GPIO21_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_INTR2_GPIO21_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_INTR2_GPIO21_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_INTR2_GPIO21_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO21_EDGE_LOW
+#define IO_BANK0_INTR2_GPIO21_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_INTR2_GPIO21_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_INTR2_GPIO21_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_INTR2_GPIO21_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO21_LEVEL_HIGH
+#define IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_INTR2_GPIO21_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO21_LEVEL_LOW
+#define IO_BANK0_INTR2_GPIO21_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_INTR2_GPIO21_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_INTR2_GPIO21_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_INTR2_GPIO21_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO20_EDGE_HIGH
+#define IO_BANK0_INTR2_GPIO20_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_INTR2_GPIO20_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_INTR2_GPIO20_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_INTR2_GPIO20_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO20_EDGE_LOW
+#define IO_BANK0_INTR2_GPIO20_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_INTR2_GPIO20_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_INTR2_GPIO20_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_INTR2_GPIO20_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO20_LEVEL_HIGH
+#define IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_INTR2_GPIO20_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO20_LEVEL_LOW
+#define IO_BANK0_INTR2_GPIO20_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_INTR2_GPIO20_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_INTR2_GPIO20_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_INTR2_GPIO20_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO19_EDGE_HIGH
+#define IO_BANK0_INTR2_GPIO19_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_INTR2_GPIO19_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_INTR2_GPIO19_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_INTR2_GPIO19_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO19_EDGE_LOW
+#define IO_BANK0_INTR2_GPIO19_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_INTR2_GPIO19_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_INTR2_GPIO19_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_INTR2_GPIO19_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO19_LEVEL_HIGH
+#define IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_INTR2_GPIO19_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO19_LEVEL_LOW
+#define IO_BANK0_INTR2_GPIO19_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_INTR2_GPIO19_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_INTR2_GPIO19_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_INTR2_GPIO19_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO18_EDGE_HIGH
+#define IO_BANK0_INTR2_GPIO18_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_INTR2_GPIO18_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_INTR2_GPIO18_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_INTR2_GPIO18_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO18_EDGE_LOW
+#define IO_BANK0_INTR2_GPIO18_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_INTR2_GPIO18_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_INTR2_GPIO18_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_INTR2_GPIO18_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO18_LEVEL_HIGH
+#define IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_INTR2_GPIO18_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO18_LEVEL_LOW
+#define IO_BANK0_INTR2_GPIO18_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_INTR2_GPIO18_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_INTR2_GPIO18_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_INTR2_GPIO18_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO17_EDGE_HIGH
+#define IO_BANK0_INTR2_GPIO17_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_INTR2_GPIO17_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_INTR2_GPIO17_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_INTR2_GPIO17_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO17_EDGE_LOW
+#define IO_BANK0_INTR2_GPIO17_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_INTR2_GPIO17_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_INTR2_GPIO17_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_INTR2_GPIO17_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO17_LEVEL_HIGH
+#define IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_INTR2_GPIO17_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO17_LEVEL_LOW
+#define IO_BANK0_INTR2_GPIO17_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_INTR2_GPIO17_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_INTR2_GPIO17_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_INTR2_GPIO17_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO16_EDGE_HIGH
+#define IO_BANK0_INTR2_GPIO16_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_INTR2_GPIO16_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_INTR2_GPIO16_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_INTR2_GPIO16_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO16_EDGE_LOW
+#define IO_BANK0_INTR2_GPIO16_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_INTR2_GPIO16_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_INTR2_GPIO16_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_INTR2_GPIO16_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO16_LEVEL_HIGH
+#define IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_INTR2_GPIO16_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR2_GPIO16_LEVEL_LOW
+#define IO_BANK0_INTR2_GPIO16_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_INTR2_GPIO16_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_INTR2_GPIO16_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_INTR2_GPIO16_LEVEL_LOW_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_INTR3
+// Description : Raw Interrupts
+#define IO_BANK0_INTR3_OFFSET _u(0x000000fc)
+#define IO_BANK0_INTR3_BITS   _u(0x00ffffff)
+#define IO_BANK0_INTR3_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO29_EDGE_HIGH
+#define IO_BANK0_INTR3_GPIO29_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_INTR3_GPIO29_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_INTR3_GPIO29_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_INTR3_GPIO29_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO29_EDGE_LOW
+#define IO_BANK0_INTR3_GPIO29_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_INTR3_GPIO29_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_INTR3_GPIO29_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_INTR3_GPIO29_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO29_LEVEL_HIGH
+#define IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_INTR3_GPIO29_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO29_LEVEL_LOW
+#define IO_BANK0_INTR3_GPIO29_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_INTR3_GPIO29_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_INTR3_GPIO29_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_INTR3_GPIO29_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO28_EDGE_HIGH
+#define IO_BANK0_INTR3_GPIO28_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_INTR3_GPIO28_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_INTR3_GPIO28_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_INTR3_GPIO28_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO28_EDGE_LOW
+#define IO_BANK0_INTR3_GPIO28_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_INTR3_GPIO28_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_INTR3_GPIO28_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_INTR3_GPIO28_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO28_LEVEL_HIGH
+#define IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_INTR3_GPIO28_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO28_LEVEL_LOW
+#define IO_BANK0_INTR3_GPIO28_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_INTR3_GPIO28_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_INTR3_GPIO28_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_INTR3_GPIO28_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO27_EDGE_HIGH
+#define IO_BANK0_INTR3_GPIO27_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_INTR3_GPIO27_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_INTR3_GPIO27_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_INTR3_GPIO27_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO27_EDGE_LOW
+#define IO_BANK0_INTR3_GPIO27_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_INTR3_GPIO27_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_INTR3_GPIO27_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_INTR3_GPIO27_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO27_LEVEL_HIGH
+#define IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_INTR3_GPIO27_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO27_LEVEL_LOW
+#define IO_BANK0_INTR3_GPIO27_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_INTR3_GPIO27_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_INTR3_GPIO27_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_INTR3_GPIO27_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO26_EDGE_HIGH
+#define IO_BANK0_INTR3_GPIO26_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_INTR3_GPIO26_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_INTR3_GPIO26_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_INTR3_GPIO26_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO26_EDGE_LOW
+#define IO_BANK0_INTR3_GPIO26_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_INTR3_GPIO26_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_INTR3_GPIO26_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_INTR3_GPIO26_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO26_LEVEL_HIGH
+#define IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_INTR3_GPIO26_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO26_LEVEL_LOW
+#define IO_BANK0_INTR3_GPIO26_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_INTR3_GPIO26_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_INTR3_GPIO26_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_INTR3_GPIO26_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO25_EDGE_HIGH
+#define IO_BANK0_INTR3_GPIO25_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_INTR3_GPIO25_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_INTR3_GPIO25_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_INTR3_GPIO25_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO25_EDGE_LOW
+#define IO_BANK0_INTR3_GPIO25_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_INTR3_GPIO25_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_INTR3_GPIO25_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_INTR3_GPIO25_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO25_LEVEL_HIGH
+#define IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_INTR3_GPIO25_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO25_LEVEL_LOW
+#define IO_BANK0_INTR3_GPIO25_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_INTR3_GPIO25_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_INTR3_GPIO25_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_INTR3_GPIO25_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO24_EDGE_HIGH
+#define IO_BANK0_INTR3_GPIO24_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_INTR3_GPIO24_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_INTR3_GPIO24_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_INTR3_GPIO24_EDGE_HIGH_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO24_EDGE_LOW
+#define IO_BANK0_INTR3_GPIO24_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_INTR3_GPIO24_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_INTR3_GPIO24_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_INTR3_GPIO24_EDGE_LOW_ACCESS "WC"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO24_LEVEL_HIGH
+#define IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_INTR3_GPIO24_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_INTR3_GPIO24_LEVEL_LOW
+#define IO_BANK0_INTR3_GPIO24_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_INTR3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_INTR3_GPIO24_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_INTR3_GPIO24_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_INTR3_GPIO24_LEVEL_LOW_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_PROC0_INTE0
+// Description : Interrupt Enable for proc0
+#define IO_BANK0_PROC0_INTE0_OFFSET _u(0x00000100)
+#define IO_BANK0_PROC0_INTE0_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC0_INTE0_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW
+#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC0_INTE0_GPIO7_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC0_INTE0_GPIO7_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW
+#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC0_INTE0_GPIO6_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC0_INTE0_GPIO6_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW
+#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC0_INTE0_GPIO5_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC0_INTE0_GPIO5_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW
+#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC0_INTE0_GPIO4_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC0_INTE0_GPIO4_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW
+#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC0_INTE0_GPIO3_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC0_INTE0_GPIO3_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW
+#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC0_INTE0_GPIO2_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC0_INTE0_GPIO2_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW
+#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC0_INTE0_GPIO1_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC0_INTE0_GPIO1_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW
+#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC0_INTE0_GPIO0_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC0_INTE0_GPIO0_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_PROC0_INTE1
+// Description : Interrupt Enable for proc0
+#define IO_BANK0_PROC0_INTE1_OFFSET _u(0x00000104)
+#define IO_BANK0_PROC0_INTE1_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC0_INTE1_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW
+#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC0_INTE1_GPIO15_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC0_INTE1_GPIO15_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW
+#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC0_INTE1_GPIO14_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC0_INTE1_GPIO14_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW
+#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC0_INTE1_GPIO13_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC0_INTE1_GPIO13_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW
+#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC0_INTE1_GPIO12_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC0_INTE1_GPIO12_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW
+#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC0_INTE1_GPIO11_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC0_INTE1_GPIO11_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW
+#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC0_INTE1_GPIO10_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC0_INTE1_GPIO10_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW
+#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC0_INTE1_GPIO9_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC0_INTE1_GPIO9_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW
+#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC0_INTE1_GPIO8_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC0_INTE1_GPIO8_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_PROC0_INTE2
+// Description : Interrupt Enable for proc0
+#define IO_BANK0_PROC0_INTE2_OFFSET _u(0x00000108)
+#define IO_BANK0_PROC0_INTE2_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC0_INTE2_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW
+#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC0_INTE2_GPIO23_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC0_INTE2_GPIO23_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW
+#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC0_INTE2_GPIO22_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC0_INTE2_GPIO22_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW
+#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC0_INTE2_GPIO21_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC0_INTE2_GPIO21_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW
+#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC0_INTE2_GPIO20_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC0_INTE2_GPIO20_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW
+#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC0_INTE2_GPIO19_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC0_INTE2_GPIO19_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW
+#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC0_INTE2_GPIO18_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC0_INTE2_GPIO18_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW
+#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC0_INTE2_GPIO17_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC0_INTE2_GPIO17_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW
+#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC0_INTE2_GPIO16_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC0_INTE2_GPIO16_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_PROC0_INTE3
+// Description : Interrupt Enable for proc0
+#define IO_BANK0_PROC0_INTE3_OFFSET _u(0x0000010c)
+#define IO_BANK0_PROC0_INTE3_BITS   _u(0x00ffffff)
+#define IO_BANK0_PROC0_INTE3_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW
+#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC0_INTE3_GPIO29_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC0_INTE3_GPIO29_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW
+#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC0_INTE3_GPIO28_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC0_INTE3_GPIO28_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW
+#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC0_INTE3_GPIO27_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC0_INTE3_GPIO27_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW
+#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC0_INTE3_GPIO26_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC0_INTE3_GPIO26_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW
+#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC0_INTE3_GPIO25_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC0_INTE3_GPIO25_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH
+#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW
+#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC0_INTE3_GPIO24_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW
+#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC0_INTE3_GPIO24_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_PROC0_INTF0
+// Description : Interrupt Force for proc0
+#define IO_BANK0_PROC0_INTF0_OFFSET _u(0x00000110)
+#define IO_BANK0_PROC0_INTF0_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC0_INTF0_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW
+#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC0_INTF0_GPIO7_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC0_INTF0_GPIO7_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW
+#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC0_INTF0_GPIO6_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC0_INTF0_GPIO6_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW
+#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC0_INTF0_GPIO5_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC0_INTF0_GPIO5_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW
+#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC0_INTF0_GPIO4_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC0_INTF0_GPIO4_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW
+#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC0_INTF0_GPIO3_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC0_INTF0_GPIO3_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW
+#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC0_INTF0_GPIO2_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC0_INTF0_GPIO2_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW
+#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC0_INTF0_GPIO1_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC0_INTF0_GPIO1_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW
+#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC0_INTF0_GPIO0_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC0_INTF0_GPIO0_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_PROC0_INTF1
+// Description : Interrupt Force for proc0
+#define IO_BANK0_PROC0_INTF1_OFFSET _u(0x00000114)
+#define IO_BANK0_PROC0_INTF1_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC0_INTF1_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW
+#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC0_INTF1_GPIO15_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC0_INTF1_GPIO15_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW
+#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC0_INTF1_GPIO14_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC0_INTF1_GPIO14_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW
+#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC0_INTF1_GPIO13_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC0_INTF1_GPIO13_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW
+#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC0_INTF1_GPIO12_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC0_INTF1_GPIO12_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW
+#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC0_INTF1_GPIO11_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC0_INTF1_GPIO11_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW
+#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC0_INTF1_GPIO10_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC0_INTF1_GPIO10_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW
+#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC0_INTF1_GPIO9_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC0_INTF1_GPIO9_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW
+#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC0_INTF1_GPIO8_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC0_INTF1_GPIO8_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_PROC0_INTF2
+// Description : Interrupt Force for proc0
+#define IO_BANK0_PROC0_INTF2_OFFSET _u(0x00000118)
+#define IO_BANK0_PROC0_INTF2_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC0_INTF2_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW
+#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC0_INTF2_GPIO23_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC0_INTF2_GPIO23_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW
+#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC0_INTF2_GPIO22_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC0_INTF2_GPIO22_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW
+#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC0_INTF2_GPIO21_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC0_INTF2_GPIO21_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW
+#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC0_INTF2_GPIO20_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC0_INTF2_GPIO20_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW
+#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC0_INTF2_GPIO19_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC0_INTF2_GPIO19_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW
+#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC0_INTF2_GPIO18_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC0_INTF2_GPIO18_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW
+#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC0_INTF2_GPIO17_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC0_INTF2_GPIO17_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW
+#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC0_INTF2_GPIO16_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC0_INTF2_GPIO16_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_PROC0_INTF3
+// Description : Interrupt Force for proc0
+#define IO_BANK0_PROC0_INTF3_OFFSET _u(0x0000011c)
+#define IO_BANK0_PROC0_INTF3_BITS   _u(0x00ffffff)
+#define IO_BANK0_PROC0_INTF3_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW
+#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC0_INTF3_GPIO29_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC0_INTF3_GPIO29_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW
+#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC0_INTF3_GPIO28_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC0_INTF3_GPIO28_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW
+#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC0_INTF3_GPIO27_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC0_INTF3_GPIO27_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW
+#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC0_INTF3_GPIO26_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC0_INTF3_GPIO26_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW
+#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC0_INTF3_GPIO25_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC0_INTF3_GPIO25_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH
+#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW
+#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC0_INTF3_GPIO24_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW
+#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC0_INTF3_GPIO24_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_PROC0_INTS0
+// Description : Interrupt status after masking & forcing for proc0
+#define IO_BANK0_PROC0_INTS0_OFFSET _u(0x00000120)
+#define IO_BANK0_PROC0_INTS0_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC0_INTS0_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW
+#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC0_INTS0_GPIO7_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC0_INTS0_GPIO7_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW
+#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC0_INTS0_GPIO6_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC0_INTS0_GPIO6_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW
+#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC0_INTS0_GPIO5_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC0_INTS0_GPIO5_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW
+#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC0_INTS0_GPIO4_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC0_INTS0_GPIO4_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW
+#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC0_INTS0_GPIO3_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC0_INTS0_GPIO3_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW
+#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC0_INTS0_GPIO2_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC0_INTS0_GPIO2_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW
+#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC0_INTS0_GPIO1_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC0_INTS0_GPIO1_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW
+#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC0_INTS0_GPIO0_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC0_INTS0_GPIO0_LEVEL_LOW_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_PROC0_INTS1
+// Description : Interrupt status after masking & forcing for proc0
+#define IO_BANK0_PROC0_INTS1_OFFSET _u(0x00000124)
+#define IO_BANK0_PROC0_INTS1_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC0_INTS1_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW
+#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC0_INTS1_GPIO15_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC0_INTS1_GPIO15_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW
+#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC0_INTS1_GPIO14_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC0_INTS1_GPIO14_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW
+#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC0_INTS1_GPIO13_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC0_INTS1_GPIO13_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW
+#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC0_INTS1_GPIO12_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC0_INTS1_GPIO12_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW
+#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC0_INTS1_GPIO11_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC0_INTS1_GPIO11_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW
+#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC0_INTS1_GPIO10_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC0_INTS1_GPIO10_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW
+#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC0_INTS1_GPIO9_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC0_INTS1_GPIO9_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW
+#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC0_INTS1_GPIO8_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC0_INTS1_GPIO8_LEVEL_LOW_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_PROC0_INTS2
+// Description : Interrupt status after masking & forcing for proc0
+#define IO_BANK0_PROC0_INTS2_OFFSET _u(0x00000128)
+#define IO_BANK0_PROC0_INTS2_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC0_INTS2_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW
+#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC0_INTS2_GPIO23_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC0_INTS2_GPIO23_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW
+#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC0_INTS2_GPIO22_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC0_INTS2_GPIO22_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW
+#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC0_INTS2_GPIO21_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC0_INTS2_GPIO21_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW
+#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC0_INTS2_GPIO20_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC0_INTS2_GPIO20_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW
+#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC0_INTS2_GPIO19_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC0_INTS2_GPIO19_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW
+#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC0_INTS2_GPIO18_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC0_INTS2_GPIO18_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW
+#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC0_INTS2_GPIO17_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC0_INTS2_GPIO17_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW
+#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC0_INTS2_GPIO16_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC0_INTS2_GPIO16_LEVEL_LOW_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_PROC0_INTS3
+// Description : Interrupt status after masking & forcing for proc0
+#define IO_BANK0_PROC0_INTS3_OFFSET _u(0x0000012c)
+#define IO_BANK0_PROC0_INTS3_BITS   _u(0x00ffffff)
+#define IO_BANK0_PROC0_INTS3_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW
+#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC0_INTS3_GPIO29_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC0_INTS3_GPIO29_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW
+#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC0_INTS3_GPIO28_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC0_INTS3_GPIO28_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW
+#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC0_INTS3_GPIO27_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC0_INTS3_GPIO27_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW
+#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC0_INTS3_GPIO26_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC0_INTS3_GPIO26_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW
+#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC0_INTS3_GPIO25_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC0_INTS3_GPIO25_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH
+#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW
+#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC0_INTS3_GPIO24_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH
+#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW
+#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC0_INTS3_GPIO24_LEVEL_LOW_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_PROC1_INTE0
+// Description : Interrupt Enable for proc1
+#define IO_BANK0_PROC1_INTE0_OFFSET _u(0x00000130)
+#define IO_BANK0_PROC1_INTE0_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC1_INTE0_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW
+#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC1_INTE0_GPIO7_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC1_INTE0_GPIO7_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW
+#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC1_INTE0_GPIO6_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC1_INTE0_GPIO6_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW
+#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC1_INTE0_GPIO5_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC1_INTE0_GPIO5_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW
+#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC1_INTE0_GPIO4_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC1_INTE0_GPIO4_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW
+#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC1_INTE0_GPIO3_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC1_INTE0_GPIO3_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW
+#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC1_INTE0_GPIO2_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC1_INTE0_GPIO2_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW
+#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC1_INTE0_GPIO1_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC1_INTE0_GPIO1_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW
+#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC1_INTE0_GPIO0_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC1_INTE0_GPIO0_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_PROC1_INTE1
+// Description : Interrupt Enable for proc1
+#define IO_BANK0_PROC1_INTE1_OFFSET _u(0x00000134)
+#define IO_BANK0_PROC1_INTE1_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC1_INTE1_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW
+#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC1_INTE1_GPIO15_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC1_INTE1_GPIO15_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW
+#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC1_INTE1_GPIO14_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC1_INTE1_GPIO14_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW
+#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC1_INTE1_GPIO13_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC1_INTE1_GPIO13_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW
+#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC1_INTE1_GPIO12_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC1_INTE1_GPIO12_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW
+#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC1_INTE1_GPIO11_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC1_INTE1_GPIO11_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW
+#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC1_INTE1_GPIO10_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC1_INTE1_GPIO10_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW
+#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC1_INTE1_GPIO9_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC1_INTE1_GPIO9_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW
+#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC1_INTE1_GPIO8_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC1_INTE1_GPIO8_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_PROC1_INTE2
+// Description : Interrupt Enable for proc1
+#define IO_BANK0_PROC1_INTE2_OFFSET _u(0x00000138)
+#define IO_BANK0_PROC1_INTE2_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC1_INTE2_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW
+#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC1_INTE2_GPIO23_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC1_INTE2_GPIO23_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW
+#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC1_INTE2_GPIO22_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC1_INTE2_GPIO22_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW
+#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC1_INTE2_GPIO21_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC1_INTE2_GPIO21_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW
+#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC1_INTE2_GPIO20_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC1_INTE2_GPIO20_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW
+#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC1_INTE2_GPIO19_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC1_INTE2_GPIO19_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW
+#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC1_INTE2_GPIO18_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC1_INTE2_GPIO18_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW
+#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC1_INTE2_GPIO17_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC1_INTE2_GPIO17_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW
+#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC1_INTE2_GPIO16_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC1_INTE2_GPIO16_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_PROC1_INTE3
+// Description : Interrupt Enable for proc1
+#define IO_BANK0_PROC1_INTE3_OFFSET _u(0x0000013c)
+#define IO_BANK0_PROC1_INTE3_BITS   _u(0x00ffffff)
+#define IO_BANK0_PROC1_INTE3_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW
+#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC1_INTE3_GPIO29_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC1_INTE3_GPIO29_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW
+#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC1_INTE3_GPIO28_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC1_INTE3_GPIO28_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW
+#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC1_INTE3_GPIO27_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC1_INTE3_GPIO27_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW
+#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC1_INTE3_GPIO26_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC1_INTE3_GPIO26_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW
+#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC1_INTE3_GPIO25_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC1_INTE3_GPIO25_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH
+#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW
+#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC1_INTE3_GPIO24_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW
+#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC1_INTE3_GPIO24_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_PROC1_INTF0
+// Description : Interrupt Force for proc1
+#define IO_BANK0_PROC1_INTF0_OFFSET _u(0x00000140)
+#define IO_BANK0_PROC1_INTF0_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC1_INTF0_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW
+#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC1_INTF0_GPIO7_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC1_INTF0_GPIO7_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW
+#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC1_INTF0_GPIO6_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC1_INTF0_GPIO6_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW
+#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC1_INTF0_GPIO5_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC1_INTF0_GPIO5_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW
+#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC1_INTF0_GPIO4_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC1_INTF0_GPIO4_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW
+#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC1_INTF0_GPIO3_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC1_INTF0_GPIO3_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW
+#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC1_INTF0_GPIO2_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC1_INTF0_GPIO2_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW
+#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC1_INTF0_GPIO1_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC1_INTF0_GPIO1_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW
+#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC1_INTF0_GPIO0_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC1_INTF0_GPIO0_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_PROC1_INTF1
+// Description : Interrupt Force for proc1
+#define IO_BANK0_PROC1_INTF1_OFFSET _u(0x00000144)
+#define IO_BANK0_PROC1_INTF1_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC1_INTF1_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW
+#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC1_INTF1_GPIO15_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC1_INTF1_GPIO15_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW
+#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC1_INTF1_GPIO14_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC1_INTF1_GPIO14_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW
+#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC1_INTF1_GPIO13_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC1_INTF1_GPIO13_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW
+#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC1_INTF1_GPIO12_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC1_INTF1_GPIO12_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW
+#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC1_INTF1_GPIO11_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC1_INTF1_GPIO11_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW
+#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC1_INTF1_GPIO10_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC1_INTF1_GPIO10_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW
+#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC1_INTF1_GPIO9_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC1_INTF1_GPIO9_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW
+#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC1_INTF1_GPIO8_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC1_INTF1_GPIO8_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_PROC1_INTF2
+// Description : Interrupt Force for proc1
+#define IO_BANK0_PROC1_INTF2_OFFSET _u(0x00000148)
+#define IO_BANK0_PROC1_INTF2_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC1_INTF2_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW
+#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC1_INTF2_GPIO23_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC1_INTF2_GPIO23_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW
+#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC1_INTF2_GPIO22_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC1_INTF2_GPIO22_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW
+#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC1_INTF2_GPIO21_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC1_INTF2_GPIO21_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW
+#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC1_INTF2_GPIO20_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC1_INTF2_GPIO20_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW
+#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC1_INTF2_GPIO19_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC1_INTF2_GPIO19_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW
+#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC1_INTF2_GPIO18_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC1_INTF2_GPIO18_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW
+#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC1_INTF2_GPIO17_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC1_INTF2_GPIO17_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW
+#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC1_INTF2_GPIO16_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC1_INTF2_GPIO16_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_PROC1_INTF3
+// Description : Interrupt Force for proc1
+#define IO_BANK0_PROC1_INTF3_OFFSET _u(0x0000014c)
+#define IO_BANK0_PROC1_INTF3_BITS   _u(0x00ffffff)
+#define IO_BANK0_PROC1_INTF3_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW
+#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC1_INTF3_GPIO29_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC1_INTF3_GPIO29_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW
+#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC1_INTF3_GPIO28_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC1_INTF3_GPIO28_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW
+#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC1_INTF3_GPIO27_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC1_INTF3_GPIO27_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW
+#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC1_INTF3_GPIO26_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC1_INTF3_GPIO26_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW
+#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC1_INTF3_GPIO25_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC1_INTF3_GPIO25_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH
+#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW
+#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC1_INTF3_GPIO24_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW
+#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC1_INTF3_GPIO24_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_PROC1_INTS0
+// Description : Interrupt status after masking & forcing for proc1
+#define IO_BANK0_PROC1_INTS0_OFFSET _u(0x00000150)
+#define IO_BANK0_PROC1_INTS0_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC1_INTS0_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW
+#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC1_INTS0_GPIO7_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC1_INTS0_GPIO7_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW
+#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC1_INTS0_GPIO6_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC1_INTS0_GPIO6_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW
+#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC1_INTS0_GPIO5_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC1_INTS0_GPIO5_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW
+#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC1_INTS0_GPIO4_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC1_INTS0_GPIO4_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW
+#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC1_INTS0_GPIO3_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC1_INTS0_GPIO3_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW
+#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC1_INTS0_GPIO2_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC1_INTS0_GPIO2_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW
+#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC1_INTS0_GPIO1_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC1_INTS0_GPIO1_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW
+#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC1_INTS0_GPIO0_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC1_INTS0_GPIO0_LEVEL_LOW_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_PROC1_INTS1
+// Description : Interrupt status after masking & forcing for proc1
+#define IO_BANK0_PROC1_INTS1_OFFSET _u(0x00000154)
+#define IO_BANK0_PROC1_INTS1_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC1_INTS1_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW
+#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC1_INTS1_GPIO15_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC1_INTS1_GPIO15_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW
+#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC1_INTS1_GPIO14_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC1_INTS1_GPIO14_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW
+#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC1_INTS1_GPIO13_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC1_INTS1_GPIO13_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW
+#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC1_INTS1_GPIO12_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC1_INTS1_GPIO12_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW
+#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC1_INTS1_GPIO11_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC1_INTS1_GPIO11_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW
+#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC1_INTS1_GPIO10_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC1_INTS1_GPIO10_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW
+#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC1_INTS1_GPIO9_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC1_INTS1_GPIO9_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW
+#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC1_INTS1_GPIO8_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC1_INTS1_GPIO8_LEVEL_LOW_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_PROC1_INTS2
+// Description : Interrupt status after masking & forcing for proc1
+#define IO_BANK0_PROC1_INTS2_OFFSET _u(0x00000158)
+#define IO_BANK0_PROC1_INTS2_BITS   _u(0xffffffff)
+#define IO_BANK0_PROC1_INTS2_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW
+#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_PROC1_INTS2_GPIO23_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_PROC1_INTS2_GPIO23_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW
+#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_PROC1_INTS2_GPIO22_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_PROC1_INTS2_GPIO22_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW
+#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC1_INTS2_GPIO21_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC1_INTS2_GPIO21_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW
+#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC1_INTS2_GPIO20_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC1_INTS2_GPIO20_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW
+#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC1_INTS2_GPIO19_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC1_INTS2_GPIO19_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW
+#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC1_INTS2_GPIO18_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC1_INTS2_GPIO18_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW
+#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC1_INTS2_GPIO17_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC1_INTS2_GPIO17_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW
+#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC1_INTS2_GPIO16_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC1_INTS2_GPIO16_LEVEL_LOW_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_PROC1_INTS3
+// Description : Interrupt status after masking & forcing for proc1
+#define IO_BANK0_PROC1_INTS3_OFFSET _u(0x0000015c)
+#define IO_BANK0_PROC1_INTS3_BITS   _u(0x00ffffff)
+#define IO_BANK0_PROC1_INTS3_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW
+#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_PROC1_INTS3_GPIO29_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_PROC1_INTS3_GPIO29_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW
+#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_PROC1_INTS3_GPIO28_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_PROC1_INTS3_GPIO28_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW
+#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_PROC1_INTS3_GPIO27_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_PROC1_INTS3_GPIO27_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW
+#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_PROC1_INTS3_GPIO26_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_PROC1_INTS3_GPIO26_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW
+#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_PROC1_INTS3_GPIO25_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_PROC1_INTS3_GPIO25_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH
+#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW
+#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_PROC1_INTS3_GPIO24_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH
+#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW
+#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_PROC1_INTS3_GPIO24_LEVEL_LOW_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_DORMANT_WAKE_INTE0
+// Description : Interrupt Enable for dormant_wake
+#define IO_BANK0_DORMANT_WAKE_INTE0_OFFSET _u(0x00000160)
+#define IO_BANK0_DORMANT_WAKE_INTE0_BITS   _u(0xffffffff)
+#define IO_BANK0_DORMANT_WAKE_INTE0_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO7_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO6_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO5_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO4_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO3_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO2_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO1_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTE0_GPIO0_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_DORMANT_WAKE_INTE1
+// Description : Interrupt Enable for dormant_wake
+#define IO_BANK0_DORMANT_WAKE_INTE1_OFFSET _u(0x00000164)
+#define IO_BANK0_DORMANT_WAKE_INTE1_BITS   _u(0xffffffff)
+#define IO_BANK0_DORMANT_WAKE_INTE1_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO15_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO14_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO13_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO12_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO11_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO10_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO9_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTE1_GPIO8_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_DORMANT_WAKE_INTE2
+// Description : Interrupt Enable for dormant_wake
+#define IO_BANK0_DORMANT_WAKE_INTE2_OFFSET _u(0x00000168)
+#define IO_BANK0_DORMANT_WAKE_INTE2_BITS   _u(0xffffffff)
+#define IO_BANK0_DORMANT_WAKE_INTE2_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO23_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO22_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO21_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO20_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO19_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO18_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO17_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTE2_GPIO16_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_DORMANT_WAKE_INTE3
+// Description : Interrupt Enable for dormant_wake
+#define IO_BANK0_DORMANT_WAKE_INTE3_OFFSET _u(0x0000016c)
+#define IO_BANK0_DORMANT_WAKE_INTE3_BITS   _u(0x00ffffff)
+#define IO_BANK0_DORMANT_WAKE_INTE3_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO29_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO28_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO27_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO26_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO25_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTE3_GPIO24_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_DORMANT_WAKE_INTF0
+// Description : Interrupt Force for dormant_wake
+#define IO_BANK0_DORMANT_WAKE_INTF0_OFFSET _u(0x00000170)
+#define IO_BANK0_DORMANT_WAKE_INTF0_BITS   _u(0xffffffff)
+#define IO_BANK0_DORMANT_WAKE_INTF0_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO7_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO6_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO5_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO4_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO3_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO2_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO1_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTF0_GPIO0_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_DORMANT_WAKE_INTF1
+// Description : Interrupt Force for dormant_wake
+#define IO_BANK0_DORMANT_WAKE_INTF1_OFFSET _u(0x00000174)
+#define IO_BANK0_DORMANT_WAKE_INTF1_BITS   _u(0xffffffff)
+#define IO_BANK0_DORMANT_WAKE_INTF1_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO15_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO14_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO13_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO12_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO11_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO10_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO9_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTF1_GPIO8_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_DORMANT_WAKE_INTF2
+// Description : Interrupt Force for dormant_wake
+#define IO_BANK0_DORMANT_WAKE_INTF2_OFFSET _u(0x00000178)
+#define IO_BANK0_DORMANT_WAKE_INTF2_BITS   _u(0xffffffff)
+#define IO_BANK0_DORMANT_WAKE_INTF2_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO23_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO22_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO21_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO20_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO19_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO18_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO17_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTF2_GPIO16_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_DORMANT_WAKE_INTF3
+// Description : Interrupt Force for dormant_wake
+#define IO_BANK0_DORMANT_WAKE_INTF3_OFFSET _u(0x0000017c)
+#define IO_BANK0_DORMANT_WAKE_INTF3_BITS   _u(0x00ffffff)
+#define IO_BANK0_DORMANT_WAKE_INTF3_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO29_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO28_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO27_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO26_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO25_LEVEL_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_EDGE_LOW_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_HIGH_ACCESS "RW"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTF3_GPIO24_LEVEL_LOW_ACCESS "RW"
+// =============================================================================
+// Register    : IO_BANK0_DORMANT_WAKE_INTS0
+// Description : Interrupt status after masking & forcing for dormant_wake
+#define IO_BANK0_DORMANT_WAKE_INTS0_OFFSET _u(0x00000180)
+#define IO_BANK0_DORMANT_WAKE_INTS0_BITS   _u(0xffffffff)
+#define IO_BANK0_DORMANT_WAKE_INTS0_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO7_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO6_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO5_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO4_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO3_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO2_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO1_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTS0_GPIO0_LEVEL_LOW_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_DORMANT_WAKE_INTS1
+// Description : Interrupt status after masking & forcing for dormant_wake
+#define IO_BANK0_DORMANT_WAKE_INTS1_OFFSET _u(0x00000184)
+#define IO_BANK0_DORMANT_WAKE_INTS1_BITS   _u(0xffffffff)
+#define IO_BANK0_DORMANT_WAKE_INTS1_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO15_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO14_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO13_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO12_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO11_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO10_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO9_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTS1_GPIO8_LEVEL_LOW_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_DORMANT_WAKE_INTS2
+// Description : Interrupt status after masking & forcing for dormant_wake
+#define IO_BANK0_DORMANT_WAKE_INTS2_OFFSET _u(0x00000188)
+#define IO_BANK0_DORMANT_WAKE_INTS2_BITS   _u(0xffffffff)
+#define IO_BANK0_DORMANT_WAKE_INTS2_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_BITS   _u(0x80000000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_MSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_LSB    _u(31)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_BITS   _u(0x40000000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_MSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_LSB    _u(30)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_BITS   _u(0x20000000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_MSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_LSB    _u(29)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_BITS   _u(0x10000000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_MSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_LSB    _u(28)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO23_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_BITS   _u(0x08000000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_MSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_LSB    _u(27)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_BITS   _u(0x04000000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_MSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_LSB    _u(26)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_BITS   _u(0x02000000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_MSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_LSB    _u(25)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_BITS   _u(0x01000000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_MSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_LSB    _u(24)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO22_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO21_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO20_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO19_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO18_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO17_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTS2_GPIO16_LEVEL_LOW_ACCESS "RO"
+// =============================================================================
+// Register    : IO_BANK0_DORMANT_WAKE_INTS3
+// Description : Interrupt status after masking & forcing for dormant_wake
+#define IO_BANK0_DORMANT_WAKE_INTS3_OFFSET _u(0x0000018c)
+#define IO_BANK0_DORMANT_WAKE_INTS3_BITS   _u(0x00ffffff)
+#define IO_BANK0_DORMANT_WAKE_INTS3_RESET  _u(0x00000000)
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_BITS   _u(0x00800000)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_MSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_LSB    _u(23)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_BITS   _u(0x00400000)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_MSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_LSB    _u(22)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_BITS   _u(0x00200000)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_MSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_LSB    _u(21)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_BITS   _u(0x00100000)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_MSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_LSB    _u(20)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO29_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_BITS   _u(0x00080000)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_MSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_LSB    _u(19)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_BITS   _u(0x00040000)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_MSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_LSB    _u(18)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_BITS   _u(0x00020000)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_MSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_LSB    _u(17)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_BITS   _u(0x00010000)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_MSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_LSB    _u(16)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO28_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_BITS   _u(0x00008000)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_MSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_LSB    _u(15)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_BITS   _u(0x00004000)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_MSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_LSB    _u(14)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_BITS   _u(0x00002000)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_MSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_LSB    _u(13)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_BITS   _u(0x00001000)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_MSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_LSB    _u(12)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO27_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_BITS   _u(0x00000800)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_MSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_LSB    _u(11)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_BITS   _u(0x00000400)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_MSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_LSB    _u(10)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_BITS   _u(0x00000200)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_MSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_LSB    _u(9)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_BITS   _u(0x00000100)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_MSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_LSB    _u(8)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO26_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_BITS   _u(0x00000080)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_MSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_LSB    _u(7)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_BITS   _u(0x00000040)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_MSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_LSB    _u(6)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_BITS   _u(0x00000020)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_MSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_LSB    _u(5)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_BITS   _u(0x00000010)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_MSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_LSB    _u(4)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO25_LEVEL_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_BITS   _u(0x00000008)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_MSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_LSB    _u(3)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_BITS   _u(0x00000004)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_MSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_LSB    _u(2)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_EDGE_LOW_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_BITS   _u(0x00000002)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_MSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_LSB    _u(1)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_HIGH_ACCESS "RO"
+// -----------------------------------------------------------------------------
+// Field       : IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_RESET  _u(0x0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_BITS   _u(0x00000001)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_MSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_LSB    _u(0)
+#define IO_BANK0_DORMANT_WAKE_INTS3_GPIO24_LEVEL_LOW_ACCESS "RO"
+// =============================================================================
+#endif // _HARDWARE_REGS_IO_BANK0_H
+
diff --git a/app_program/gpio/platform_defs.h b/app_program/gpio/platform_defs.h
new file mode 100644
index 0000000..54d9344
--- /dev/null
+++ b/app_program/gpio/platform_defs.h
@@ -0,0 +1,119 @@
+/*
+ * Copyright (c) 2024 Raspberry Pi Ltd.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#ifndef _HARDWARE_PLATFORM_DEFS_H
+#define _HARDWARE_PLATFORM_DEFS_H
+
+// This header is included from C and assembler - intended mostly for #defines; guard other stuff with #ifdef __ASSEMBLER__
+
+#ifndef _u
+#ifdef __ASSEMBLER__
+#define _u(x) x
+#else
+#define _u(x) x ## u
+#endif
+#endif
+
+#define NUM_CORES _u(2)
+#define NUM_DMA_CHANNELS _u(12)
+#define NUM_DMA_TIMERS _u(4)
+#define NUM_DMA_IRQS _u(2)
+#define NUM_IRQS _u(32)
+#define NUM_USER_IRQS _u(6)
+#define NUM_PIOS _u(2)
+#define NUM_PIO_STATE_MACHINES _u(4)
+#define NUM_PIO_IRQS _u(2)
+#define NUM_PWM_SLICES _u(8)
+#define NUM_PWM_IRQS _u(1)
+#define NUM_SPIN_LOCKS _u(32)
+#define NUM_UARTS _u(2)
+#define NUM_I2CS _u(2)
+#define NUM_SPIS _u(2)
+#define NUM_GENERIC_TIMERS _u(1)
+#define NUM_ALARMS _u(4)
+#define ADC_BASE_PIN _u(26)
+#define NUM_ADC_CHANNELS _u(5)
+#define NUM_RESETS _u(24)
+#define NUM_BANK0_GPIOS _u(30)
+#define NUM_QSPI_GPIOS _u(6)
+
+#define PIO_INSTRUCTION_COUNT _u(32)
+
+#define USBCTRL_DPRAM_SIZE _u(4096)
+
+#define HAS_SIO_DIVIDER 1
+#define HAS_RP2040_RTC  1
+// PICO_CONFIG: XOSC_HZ, Crystal oscillator frequency in Hz, type=int, default=12000000, advanced=true, group=hardware_base
+// NOTE:  The system and USB clocks are generated from the frequency using two PLLs.
+// If you override this define, or SYS_CLK_HZ/USB_CLK_HZ below, you will *also* need to add your own adjusted PLL set-up defines to
+// override the defaults which live in src/rp2_common/hardware_clocks/include/hardware/clocks.h
+// Please see the comments there about calculating the new PLL setting values.
+#ifndef XOSC_HZ
+#ifdef XOSC_KHZ
+#define XOSC_HZ ((XOSC_KHZ) * _u(1000))
+#elif defined(XOSC_MHZ)
+#define XOSC_HZ ((XOSC_MHZ) * _u(1000000))
+#else
+#define XOSC_HZ _u(12000000)
+#endif
+#endif
+
+// PICO_CONFIG: SYS_CLK_HZ, System operating frequency in Hz, type=int, default=125000000, advanced=true, group=hardware_base
+#ifndef SYS_CLK_HZ
+#ifdef SYS_CLK_KHZ
+#define SYS_CLK_HZ ((SYS_CLK_KHZ) * _u(1000))
+#elif defined(SYS_CLK_MHZ)
+#define SYS_CLK_HZ ((SYS_CLK_MHZ) * _u(1000000))
+#else
+#define SYS_CLK_HZ _u(125000000)
+#endif
+#endif
+
+// PICO_CONFIG: USB_CLK_HZ, USB clock frequency. Must be 48MHz for the USB interface to operate correctly, type=int, default=48000000, advanced=true, group=hardware_base
+#ifndef USB_CLK_HZ
+#ifdef USB_CLK_KHZ
+#define USB_CLK_HZ ((USB_CLK_KHZ) * _u(1000))
+#elif defined(USB_CLK_MHZ)
+#define USB_CLK_HZ ((USB_CLK_MHZ) * _u(1000000))
+#else
+#define USB_CLK_HZ _u(48000000)
+#endif
+#endif
+
+// For backwards compatibility define XOSC_KHZ if the frequency is indeed an integer number of Khz.
+#if defined(XOSC_HZ) && !defined(XOSC_KHZ) && (XOSC_HZ % 1000 == 0)
+#define XOSC_KHZ (XOSC_HZ / 1000)
+#endif
+
+// For backwards compatibility define XOSC_MHZ if the frequency is indeed an integer number of Mhz.
+#if defined(XOSC_KHZ) && !defined(XOSC_MHZ) && (XOSC_KHZ % 1000 == 0)
+#define XOSC_MHZ (XOSC_KHZ / 1000)
+#endif
+
+// For backwards compatibility define SYS_CLK_KHZ if the frequency is indeed an integer number of Khz.
+#if defined(SYS_CLK_HZ) && !defined(SYS_CLK_KHZ) && (SYS_CLK_HZ % 1000 == 0)
+#define SYS_CLK_KHZ (SYS_CLK_HZ / 1000)
+#endif
+
+// For backwards compatibility define SYS_CLK_MHZ if the frequency is indeed an integer number of Mhz.
+#if defined(SYS_CLK_KHZ) && !defined(SYS_CLK_MHZ) && (SYS_CLK_KHZ % 1000 == 0)
+#define SYS_CLK_MHZ (SYS_CLK_KHZ / 1000)
+#endif
+
+// For backwards compatibility define USB_CLK_KHZ if the frequency is indeed an integer number of Khz.
+#if defined(USB_CLK_HZ) && !defined(USB_CLK_KHZ) && (USB_CLK_HZ % 1000 == 0)
+#define USB_CLK_KHZ (USB_CLK_HZ / 1000)
+#endif
+
+// For backwards compatibility define USB_CLK_MHZ if the frequency is indeed an integer number of Mhz.
+#if defined(USB_CLK_KHZ) && !defined(USB_CLK_MHZ) && (USB_CLK_KHZ % 1000 == 0)
+#define USB_CLK_MHZ (USB_CLK_KHZ / 1000)
+#endif
+
+#define FIRST_USER_IRQ (NUM_IRQS - NUM_USER_IRQS)
+#define VTABLE_FIRST_IRQ 16
+
+#endif
diff --git a/app_program/graph.c b/app_program/graph.c
new file mode 100644
index 0000000..09493f2
--- /dev/null
+++ b/app_program/graph.c
@@ -0,0 +1,40 @@
+/*
+ * graph.c
+ *
+ *  Created on: 2024/12/07
+ *      Author: user
+ */
+#include <tk/tkernel.h>
+
+BOOL g_area[128][64];
+
+#define rep(i, n) for (int i=0; i < (n); i++)
+//void *memset(void *s, int c, size_t n);
+
+void graph_init(void)
+{
+	memset(g_area, FALSE, sizeof(g_area));
+}
+
+void graph_set(int x, int y, int xsize, int ysize, char* ptr)
+{
+	for (int i=x; i < x + xsize; i++) {
+		for (int j=y; j < y + ysize; j++) {
+			g_area[i][j] = ptr[i + j * xsize] == 'O' ? TRUE:FALSE;
+		}
+	}
+}
+UB* graph_get(void)
+{
+	static UB b[128][8];
+    rep(i, 128) {
+        rep(j, 8) {
+        	b[i][j] = 0;
+        	rep(k, 8) {
+        		b[i][j] |= g_area[i][j*8+k] ? (1<<k):0;
+        	}
+
+        }
+    }
+	return b;
+}
diff --git a/app_program/graph.h b/app_program/graph.h
new file mode 100644
index 0000000..6be739b
--- /dev/null
+++ b/app_program/graph.h
@@ -0,0 +1,13 @@
+/*
+ * graph.h
+ *
+ *  Created on: 2024/12/07
+ *      Author: user
+ */
+
+#ifndef APP_PROGRAM_GRAPH_H_
+#define APP_PROGRAM_GRAPH_H_
+
+
+
+#endif /* APP_PROGRAM_GRAPH_H_ */
diff --git a/app_program/old/01_app_main.c_adc b/app_program/old/01_app_main.c_adc
new file mode 100644
index 0000000..2f69041
--- /dev/null
+++ b/app_program/old/01_app_main.c_adc
@@ -0,0 +1,53 @@
+﻿#include <tk/tkernel.h>
+#include <tm/tmonitor.h>
+
+/* A/Dコンバータ制御タスクの生成情報と関連データ */
+LOCAL void task_adc(INT stacd, void *exinf);	// 実行関数
+LOCAL ID	tskid_adc;			// ID番号
+LOCAL T_CTSK ctsk_adc = {
+	.itskpri	= 10,			// 初期優先度
+	.stksz		= 1024,			// スタックサイズ
+	.task		= task_adc,		// 実行関数のポインタ
+	.tskatr		= TA_HLNG | TA_RNG3,	// タスク属性
+};
+
+/* A/Dコンバータ制御タスクの実行関数 */
+LOCAL void task_adc(INT stacd, void *exinf)
+{
+	ID	dd_adc;
+	UW	data_adc;
+	SZ	asz_adc;
+	ER	err;
+
+	// ① デバイスのオープン
+	dd_adc = tk_opn_dev((UB*)"adca", TD_READ);
+	if(dd_adc < E_OK) {
+		tm_printf((UB*)"Open Error %d\n", dd_adc);
+		tk_ext_tsk();			// タスクの終了
+	}
+
+	while(1) {
+		// ② デバイスの読込み
+		//第二引数：GP26=AD0=0, GP27=AD1=1, GP28=AD2=2,
+		err = tk_srea_dev(dd_adc, 0, &data_adc, 1, &asz_adc);
+		if(err >= E_OK) {
+			// ③ 読み取った値をデバッグ出力
+			tm_printf((UB*)"A/D = %d\n", data_adc);
+		} else {
+			tm_printf((UB*)"READ error %d\n", err);
+		}
+		tk_dly_tsk(500);					// 0.5秒間待ち
+	}
+	tk_ext_tsk();	// ここは実行されない
+}
+
+/* usermain関数 */
+EXPORT INT usermain(void)
+{
+	tskid_adc = tk_cre_tsk(&ctsk_adc);	// タスクの生成
+	tk_sta_tsk(tskid_adc, 0);		// タスクの実行
+
+	tk_slp_tsk(TMO_FEVR);			// 起床待ち
+
+	return 0;				// ここは実行されない
+}
diff --git a/app_program/old/old_code b/app_program/old/old_code
new file mode 100644
index 0000000..8604489
--- /dev/null
+++ b/app_program/old/old_code
@@ -0,0 +1,53 @@
+#if 0
+LOCAL void task_1(INT stacd, void *exinf);
+LOCAL ID	tskid_1;
+LOCAL T_CTSK	ctsk_1 = {
+	.itskpri	= 10,
+	.stksz		= 1024,
+	.task		= task_1,
+	.tskatr		= TA_HLNG | TA_RNG3,
+};
+
+LOCAL void task_1(INT stacd, void *exinf)
+{
+	/* P25 : On board LED*/
+	gpio_set_pin(25, GPIO_MODE_OUT);
+	gpio_set_pin(22, GPIO_MODE_OUT);
+	while(1) {
+		gpio_set_val(25,1);
+		gpio_set_val(22,1);
+		tk_dly_tsk(100);
+
+		gpio_set_val(25,0);
+		gpio_set_val(22,0);
+		tk_dly_tsk(100);
+	}
+}
+EXPORT INT usermain(void)
+{
+	tm_printf((UB*)"User program started\n");
+
+	tskid_1 = tk_cre_tsk(&ctsk_1);
+	tk_sta_tsk(tskid_1, 0);
+
+	tk_slp_tsk(TMO_FEVR);
+	return 0;
+}
+#endif
+
+	tk_slp_tsk(100); // チャタリング防止
+
+#if 0
+/*
+ * Interrupt number
+ */
+#define	INTNO_IRQ_BANK0	13
+
+#define GPIO_EDGE_HIGH	8
+#define GPIO_EDGE_LOW	4
+#define GPIO_LEVEL_HIGH	2
+#define GPIO_LEVEL_LOW	1
+
+void gpio_set_irq_enabled(UH gpio, UW events, UB enabled);
+#endif
+
diff --git a/app_program/ole.c b/app_program/ole.c
new file mode 100644
index 0000000..bf3f9f1
--- /dev/null
+++ b/app_program/ole.c
@@ -0,0 +1,162 @@
+/*
+ * ole.c
+ *
+ *  Created on: 2024/12/07
+ *      Author: user
+ */
+#include <tk/tkernel.h>
+#include <tk/device.h>		// デバイスドライバ定義ファイル
+#include <bsp/libbsp.h>
+#include <stdint.h>
+#include "ole.h"
+#include "font.h"
+
+#define S_ADR	0x3c	// ① I/OデバイスのI2Cアドレス定義
+#define CNTLB 0x80 // continuous bit
+#define D_DATA   0x40  // DATA bit
+void *memset(void *s, int c, size_t n);
+
+static ID	dd_i2c;
+static ER	err;
+static SZ	asz;
+
+ER ole_snd_cmd(UB* snd_data, UB len)
+{
+	UB w_data[100];
+    int cnt = 0;
+	for (int i=0; i < len; i++){
+    	w_data[cnt++] = CNTLB;
+    	w_data[cnt++] = snd_data[i];
+    }
+	return tk_swri_dev(dd_i2c, S_ADR, w_data, cnt, &asz);
+}
+void ole_init(void)
+{
+	//HW　I2C0 GP8, GP9 kernel/sysdepend/pico_rp2040/hw_setting.h を参照
+	dd_i2c = tk_opn_dev((UB*)"iica", TD_UPDATE);		// デバイスのオープン
+	tk_slp_tsk(1); // これが無い場合：「開発環境からは正常起動するが、USB接続のみ時はI2CでSlaveからNACKが帰る」。
+
+	UB	height=64, width = 128;
+	//初期化 data sheet Figure 2 : Software Initialization Flow Chart
+	//https://analogicintelligence.blogspot.com/2019/03/mycropythonoled.html
+	//https://analogicintelligence.blogspot.com/2019/04/mycropythonoled.html
+	UB	snd_data[] = { // 初期化送信データ
+	        SET_DISP, // set  display off
+	        // timing and driving scheme
+	        SET_DISP_CLK_DIV,
+	        0x80, // reset
+	        SET_MUX_RATIO,
+	        height - 1, // COM0 to 63
+	        SET_DISP_OFFSET,
+	        0x00, //mapping of the display start line to one of COM0~COM63
+	        // resolution and layout
+	        SET_DISP_START_LINE, //start line is COM0
+	        // charge pump
+	        SET_CHARGE_PUMP, // 0x14で有効(必須)
+	        0 ? 0x10:0x14,					//external vcc
+	        SET_SEG_REMAP | 0x1,        // column addr 127 mapped to SEG0
+			SET_COM_OUT_DIR | 0x8,			// remapped mode. Scan from	COM[N-1] to COM0
+	        SET_COM_PIN_CFG,
+	        width>2*height?0x02:0x12,
+	        // display
+	        SET_CONTRAST,
+	        0x7f,
+			SET_PRECHARGE,
+	        0 ? 0x22:0xF1,					//external vcc
+	        SET_VCOM_DESEL,
+	        0x40,                           //0x30 or 0x40?
+			SET_ENTIRE_ON,                  // output follows RAM contents
+	        SET_NORM_INV,                   // set normal display not inverted
+			SET_DISP | 0x01, // display on
+	        // address setting
+			SET_MEM_ADDR,
+	        0x00,  // horizontal
+	};
+	ole_snd_cmd(snd_data, sizeof(snd_data));
+}
+ER ole_scroll_vh_r(BOOL right, UB spage, UB epage, UB step, UB offset)
+{
+	UB cmd[] ={
+			0x2e, //deactivate scrolling
+			right ? 0x29:0x2a,
+			0x0, //dummy
+			spage,
+			step,
+			epage,
+			offset,
+			0x2f // activate scrolling
+	};
+	return ole_snd_cmd(cmd, sizeof(cmd));
+}
+ER ole_scroll_h_r(BOOL right, UB spage, UB epage, UB step)
+{
+	UB cmd[] ={
+			0x2e, //deactivate scrolling
+			right ? 0x26:0x27,
+			0x0, //dummy
+			spage,
+			step,
+			epage,
+			0x00,
+			0xff,
+			0x2f // activate scrolling
+	};
+	return ole_snd_cmd(cmd, sizeof(cmd));
+}
+void ole_clear(UB ptn)
+{
+	tk_slp_tsk(1); // ゴミが入る場合があるので待ちを入れる。
+	//画面 data
+	UB d_data[64+1];//display data　フルサイズ：128*8まで繰り返し
+    memset(d_data, ptn, sizeof(d_data));
+    d_data[0] = D_DATA;
+    for (int i=0; i<16; i++) {
+    	err = tk_swri_dev(dd_i2c, S_ADR, d_data, sizeof(d_data), &asz);
+    }
+}
+void ole_clear_size(UB ptn, UW len)
+{
+	tk_slp_tsk(1); // ゴミが入る場合があるので待ちを入れる。
+	//画面 data
+	UB d_data[64+1];//display data　フルサイズ：128*8まで繰り返し
+    memset(d_data, ptn, sizeof(d_data));
+    d_data[0] = D_DATA;
+    UW remain = 128*16 - len;
+    while(remain > 0) {
+    	int snd_len = (remain >= 64) ? 64: remain % 64;
+    	err = tk_swri_dev(dd_i2c, S_ADR, d_data, snd_len + 1, &asz);
+    	remain -= snd_len;
+    }
+}
+void ole_set_area(UB x1, UB x2, UB y1, UB y2)
+{
+    //area setting
+    UB area[] = {
+    	    SET_COL_ADDR,
+			x1,
+			x2,
+    	    SET_PAGE_ADDR,
+			y1,
+			y2
+    };
+	ole_snd_cmd(area, sizeof(area));
+}
+void ole_prt(char* c, UB len)
+{
+	static UB d_data[96+1]; // less than 100(DEVCNF_I2C_MAX_SDATSZ)
+    for (int k=0; k < len /16 +1; k++) {
+       memset(d_data, 0x00, sizeof(d_data));
+       int cnt = 0;
+       d_data[cnt++] = 0x40;
+    	for (int i=0; i < 16; i++){
+    		if (k*16+i > len - 1) break;
+    		int col = c[i+k*16] - font_prm[3];
+    		if (col < 0) col = 0;
+    		for (int j=0; j<5; j++){
+    			d_data[cnt++] = font_8x5[col*5+j];
+    		}
+    		d_data[cnt++] = 0x0; //6列目 文字の間
+    	}
+    	err = tk_swri_dev(dd_i2c, S_ADR, d_data, cnt, &asz);
+    }
+}
diff --git a/app_program/ole.h b/app_program/ole.h
new file mode 100644
index 0000000..e5a3651
--- /dev/null
+++ b/app_program/ole.h
@@ -0,0 +1,21 @@
+/*
+ * ole.h
+ *
+ *  Created on: 2024/12/07
+ *      Author: user
+ */
+#include "ssd1306_ini.h"
+
+#ifndef APP_PROGRAM_OLE_H_
+#define APP_PROGRAM_OLE_H_
+
+ER ole_snd_cmd(UB* snd_data, UB len);
+void ole_init(void);
+ER ole_scroll_vh_r(BOOL right, UB spage, UB epage, UB step, UB offset);
+ER ole_scroll_h_r(BOOL right, UB spage, UB epage, UB step);
+void ole_clear(UB ptn);
+void ole_clear_size(UB ptn, UW len);
+void ole_set_area(UB x1, UB x2, UB y1, UB y2);
+void ole_prt(char* c, UB len);
+
+#endif /* APP_PROGRAM_OLE_H_ */
diff --git a/app_program/outtxt.sh b/app_program/outtxt.sh
new file mode 100644
index 0000000..a015b8a
--- /dev/null
+++ b/app_program/outtxt.sh
@@ -0,0 +1,11 @@
+#!/bin/sh
+
+find /mnt/c/Users/user/eclipse-workspace/uT-Kernel/mtk3_bsp-pico_rp2040/ -name "*.h" > filelist.txt
+find /mnt/c/Users/user/eclipse-workspace/uT-Kernel/mtk3_bsp-pico_rp2040/ -name "*.c" | grep -v dump >> filelist.txt
+#find /mnt/c/Users/user/eclipse-workspace/uT-Kernel/mtk3_bsp-pico_rp2040/ -name "*.mk" >> filelist.txt
+# windows:\\r
+cat filelist.txt | sort | xargs cat | sed 's/\\/\\\\/g' | sed 's/\"/\\\"/g' |  tr -d \\r > dump.txt
+# // converter
+cat dump.txt | sed -e 's/$/\",/' | sed -e 's/^/\"/' > dump.c
+#cat dump.txt | sed -e 's/$/\"\},/' | sed -e 's/^/\{\"/' > dump.c
+
diff --git a/app_program/ssd1306_ini.h b/app_program/ssd1306_ini.h
new file mode 100644
index 0000000..29acfdf
--- /dev/null
+++ b/app_program/ssd1306_ini.h
@@ -0,0 +1,60 @@
+// https://raw.githubusercontent.com/daschr/pico-ssd1306/refs/heads/main/ssd1306.h
+/*
+MIT License
+
+Copyright (c) 2021 David Schramm
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
+*/
+
+/**
+* @file ssd1306.h
+*
+* simple driver for ssd1306 displays
+*/
+
+#ifndef _inc_ssd1306
+#define _inc_ssd1306
+//#include <pico/stdlib.h>
+//#include <hardware/i2c.h>
+
+/**
+*	@brief defines commands used in ssd1306
+*/
+typedef enum {
+    SET_CONTRAST = 0x81,
+    SET_ENTIRE_ON = 0xA4,
+    SET_NORM_INV = 0xA6,
+    SET_DISP = 0xAE,
+    SET_MEM_ADDR = 0x20,
+    SET_COL_ADDR = 0x21,
+    SET_PAGE_ADDR = 0x22,
+    SET_DISP_START_LINE = 0x40,
+    SET_SEG_REMAP = 0xA0,
+    SET_MUX_RATIO = 0xA8,
+    SET_COM_OUT_DIR = 0xC0,
+    SET_DISP_OFFSET = 0xD3,
+    SET_COM_PIN_CFG = 0xDA,
+    SET_DISP_CLK_DIV = 0xD5,
+    SET_PRECHARGE = 0xD9,
+    SET_VCOM_DESEL = 0xDB,
+    SET_CHARGE_PUMP = 0x8D
+} ssd1306_command_t;
+
+#endif
diff --git a/config/config.h b/config/config.h
index 9d65be7..0dd4866 100644
--- a/config/config.h
+++ b/config/config.h
@@ -147,7 +147,7 @@
 /* Use Physical timer.
  *  1: Valid  0: Invalid
  */
-#define USE_PTMR		(0)	/* Use Physical timer */
+#define USE_PTMR		(1)	/* Use Physical timer */
 
 /*---------------------------------------------------------------------- */
 /* Use Sample device driver.
diff --git a/config/config_device.h b/config/config_device.h
index cd42217..83d8134 100644
--- a/config/config_device.h
+++ b/config/config_device.h
@@ -28,5 +28,6 @@
 #define DEVCNF_USE_SER		1		// Serial communication device 
 #define DEVCNF_USE_ADC		1		// A/D conversion device
 #define DEVCNF_USE_IIC		1		// I2C communication device
+#define DEVCNF_USE_GPIO		1		// PIO communication device
 
 #endif	/* __DEV_CONFIG_H__ */
\ No newline at end of file
diff --git a/include/sys/sysdepend/cpu/rp2040/sysdef.h b/include/sys/sysdepend/cpu/rp2040/sysdef.h
index a02bae5..54411e0 100644
--- a/include/sys/sysdepend/cpu/rp2040/sysdef.h
+++ b/include/sys/sysdepend/cpu/rp2040/sysdef.h
@@ -226,6 +226,7 @@
 /* IOPORT (SIO:Single-cycle IO) */
 #define SIO_BASE                0xD0000000
 
+#define CPUID			(SIO_BASE+0x0)
 #define	GPIO_IN			(SIO_BASE+0x004)
 
 #define	GPIO_OUT		(SIO_BASE+0x008)
